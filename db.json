{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1644834141231},{"_id":"source/about/index.md","hash":"8a775329955da78b31522af1f1a777b8e4e7df05","modified":1644834141232},{"_id":"source/tags/index.md","hash":"86e3581b559b1e293be07bd6c36b03ee8005306c","modified":1644834141232},{"_id":"source/categories/index.md","hash":"229e0726ec97f0b4f892ba1f1f927731f0a503bb","modified":1644834141232},{"_id":"source/_posts/Angular/angular-04.md","hash":"30162967c4add22a5adc31aec325054375c3c4fd","modified":1644974536979},{"_id":"source/_posts/Angular/angular-01.md","hash":"25cebe633a24ddb443b8fd2753c61d5f5bc39568","modified":1644974489578},{"_id":"source/_posts/Angular/angular-02.md","hash":"e9c8228276afe1d89b7755b654dff80657447200","modified":1644974505610},{"_id":"source/_posts/Angular/angular-03.md","hash":"d4a2935c8711cf9d3e12f60837b4bb30643364b2","modified":1644974520292},{"_id":"source/_posts/Angular/angular-06.md","hash":"6da1b2084ed74d4033f3c5bda55ae4af6d5f4166","modified":1644974716538},{"_id":"source/_posts/Angular/angular-08.md","hash":"fca549762a0fc02bcd61ea8d34f1bb4edc3b2be3","modified":1644974721271},{"_id":"source/_posts/Angular/angular-05.md","hash":"dd3174d62297cbee0c09a77922087ae0ad8e499d","modified":1644974715410},{"_id":"source/_posts/Angular/angular-07.md","hash":"f3f676eb3bb4289b23a986ba6cab0d58fd84654e","modified":1644974723159},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"0a1212a43ef3ffaa7d6986534469bcd58512d4bd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"08086a270d50410afc8f6a78dd23e95b1a6485ba","modified":1644831637996},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"70b90f7f66989ee9bbd4b117fbd69e586f199c85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"a2ae21ec522c9afd2a8c70f660a586ed0d8b97dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"d0ed41b9b05254e19d051b5f91fdcaa125ee7ca6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"672dce0632af589b7fe47fa45c2094fa013885f7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"0682a52927c331eee17f190984ec3b25ee84f305","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"09ffc0b1175e9c11b9329cf8b398123418d7b0eb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":499162500000},{"_id":"source/_posts/Angular/angular-12.md","hash":"d1ab9ba3affaf4a7628afb800418683bd8b5e0a2","modified":1644974785349},{"_id":"source/_posts/Angular/angular-09.md","hash":"d27bb229fde256e29dd062bd64e28b2016fa330f","modified":1644974712642},{"_id":"source/_posts/Angular/angular-10.md","hash":"1af52f21d293bbe0c87116954222b5d74a542279","modified":1644974743823},{"_id":"source/_posts/Angular/angular-11.md","hash":"a83bada8df7b64ddce41da36d4acdf3e65dd914c","modified":1644974758764},{"_id":"source/_posts/Angular/angular-13.md","hash":"ead8ac4900035eb82c4d852a407e30764fa5d82a","modified":1644974969982},{"_id":"source/_posts/Angular/angular-15.md","hash":"dca18b4cb0a45bf9728564b3394a142269d5498e","modified":1644975224654},{"_id":"source/_posts/Angular/angular-16.md","hash":"df71c64b45e88913b7580c7f07567b36801e2712","modified":1644975465592},{"_id":"source/_posts/Angular/angular-14.md","hash":"544e69ee80ec3fe42c513bae3fa68676604aa310","modified":1644975083895},{"_id":"source/_posts/Angular/angular-19.md","hash":"2e40f4c5a894edc01f1866d4942ee9059e24787e","modified":1644993060923},{"_id":"source/_posts/Angular/angular-18.md","hash":"cd887ba48cdff0c4e951ef6340d625b8cf89bd8a","modified":1644976866958},{"_id":"source/_posts/Angular/angular-20.md","hash":"f75dacff816e83cf73626ae32d4637d1a54ed13a","modified":1644993153296},{"_id":"source/_posts/Angular/angular-17.md","hash":"aee3ea015f5e9a39de5edf08b1ba29c3956ca331","modified":1644975531798},{"_id":"source/_posts/Angular/angular-21.md","hash":"585f1bf5f89b2fd128785cc21238af1125f5ecf4","modified":1644993245338},{"_id":"source/_posts/Angular/angular-23.md","hash":"37729ecd7bd8eb8da6eeaf9d6410c7b6103b759f","modified":1644993556818},{"_id":"source/_posts/Angular/angular-22.md","hash":"79b262e41c68627ccf6c9103e2eb93bd236c9732","modified":1644993341285},{"_id":"source/_posts/Angular/angular-24.md","hash":"7a2a7d6d914ccda967f71f6f512c95beb6e7d66c","modified":1644993696811},{"_id":"source/_posts/Angular/angular-26.md","hash":"96117038f31ff0c87e0e9f2c8b88bf1450fec86e","modified":1644993900238},{"_id":"source/_posts/Angular/angular-25.md","hash":"27d6989b44b8c39e502336777caafd3ee0c4fbe5","modified":1644993806602},{"_id":"source/_posts/Angular/angular-27.md","hash":"58c6c6f0a409299bd88f0f5a691f24473718ce27","modified":1644994025942},{"_id":"source/_posts/Angular/angular-29.md","hash":"80193e43460edb29dbcf03a590ac91dea76985b1","modified":1644994236876},{"_id":"source/_posts/Angular/angular-28.md","hash":"9d64260908932f40737a1a72131c740ff2de9466","modified":1644994127934},{"_id":"source/_posts/Angular/angular-30.md","hash":"ca876a1976f1ceb1f7a2884258d2611181f4e4a3","modified":1644994368708},{"_id":"source/_posts/Angular/angular-31.md","hash":"65b4b7956b0cfc1609b21d2546f570ed959f40c8","modified":1644994458186},{"_id":"source/_posts/計算機概論/data-processing.md","hash":"ae301838ae853233cd6d793397d66bc7b26f64ec","modified":1645434409620},{"_id":"source/_posts/Angular/angular-32.md","hash":"69ae9a1914bc6b60601b85d9a227a860ba57eb53","modified":1644994551224},{"_id":"source/_posts/Angular/angular-33.md","hash":"5fe9030978f4e65ccd0ed6b6d6ca1f51c4d79f63","modified":1644994857626},{"_id":"source/_posts/Angular/angular-dependencyInjection.md","hash":"3bb1ba60a7e93bbfe322058eba26deae828b78a8","modified":1644982202311},{"_id":"source/_posts/計算機概論/operating-systems.md","hash":"f912a4621691eafa048620df2fb73a56427ea5d7","modified":1645434361038},{"_id":"source/_posts/計算機概論/networking-and-the-internet.md","hash":"ed815e7f45d51e048a8f5f3c6bb8226ae5fccad4","modified":1645434370930},{"_id":"source/_posts/Javascript/ydk-javascript-01.md","hash":"f2554f5322088ff1ecd80d12bf249cd0fd57d5cb","modified":1645512359951},{"_id":"source/_posts/Javascript/ydk-javascript-04.md","hash":"d37d6786a2aed714183385eb379dba8d973cf86e","modified":1645513578672},{"_id":"source/_posts/Javascript/ydk-javascript-02.md","hash":"11675aacfbdc33495c86b8d65ba03582ee0904e1","modified":1645512523530},{"_id":"source/_posts/Javascript/ydk-javascript-03.md","hash":"1406ce8af83592e895a7ad6dfb0bca5a1e4668b6","modified":1645513248687},{"_id":"source/_posts/計算機概論/networking-and-the-internet - 2.md","hash":"deb5dd82616ddffe7180a94a587b0bf3ce3b7a77","modified":1645512067981},{"_id":"source/_posts/計算機概論/networking-and-the-internet - 1.md","hash":"c9430493a42712721e8c31bbd970c30240861a37","modified":1645511821286}],"Category":[{"name":"2021 鐵人賽","_id":"ckznurmng0006kww3cwxhe6la"},{"name":"CS","_id":"ckzqs6bec001v95w3g43s2tqz"},{"name":"You Don't Know JavaScript","_id":"ckzxw5c4900029gw378s5arvq"}],"Data":[],"Page":[{"title":"about","date":"2022-02-14T09:49:34.000Z","type":"abou——————————t","_content":"\nHi 我是 Fandix，我是一位全端工程師...吧？ \n\n目前在一間軟體公司擔任前端工程師的職位，但由於工作需求也需要會寫後端，所以勉強算是半個全端工程師吧。\n\n我喜歡不斷的學習新的技能，對於接觸到新的事物來說會讓我很興奮，所以會將自己所找的所學的寫在這個 Blog 中希望可以幫助到剛好也在學習某一個技能的夥伴們。\n\n我使用 Javascrpt 開發前端到現在已經快 2 年了，主要使用 Angular 這個前端框架，而後端則是使用 NodeJS Express 作為後端開發。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-02-14 17:49:34\ntype: \"abou——————————t\"\n---\n\nHi 我是 Fandix，我是一位全端工程師...吧？ \n\n目前在一間軟體公司擔任前端工程師的職位，但由於工作需求也需要會寫後端，所以勉強算是半個全端工程師吧。\n\n我喜歡不斷的學習新的技能，對於接觸到新的事物來說會讓我很興奮，所以會將自己所找的所學的寫在這個 Blog 中希望可以幫助到剛好也在學習某一個技能的夥伴們。\n\n我使用 Javascrpt 開發前端到現在已經快 2 年了，主要使用 Angular 這個前端框架，而後端則是使用 NodeJS Express 作為後端開發。","updated":"2022-02-14T10:22:21.232Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckznurmn70000kww39qafcdc0","content":"<p>Hi 我是 Fandix，我是一位全端工程師…吧？ </p>\n<p>目前在一間軟體公司擔任前端工程師的職位，但由於工作需求也需要會寫後端，所以勉強算是半個全端工程師吧。</p>\n<p>我喜歡不斷的學習新的技能，對於接觸到新的事物來說會讓我很興奮，所以會將自己所找的所學的寫在這個 Blog 中希望可以幫助到剛好也在學習某一個技能的夥伴們。</p>\n<p>我使用 Javascrpt 開發前端到現在已經快 2 年了，主要使用 Angular 這個前端框架，而後端則是使用 NodeJS Express 作為後端開發。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi 我是 Fandix，我是一位全端工程師…吧？ </p>\n<p>目前在一間軟體公司擔任前端工程師的職位，但由於工作需求也需要會寫後端，所以勉強算是半個全端工程師吧。</p>\n<p>我喜歡不斷的學習新的技能，對於接觸到新的事物來說會讓我很興奮，所以會將自己所找的所學的寫在這個 Blog 中希望可以幫助到剛好也在學習某一個技能的夥伴們。</p>\n<p>我使用 Javascrpt 開發前端到現在已經快 2 年了，主要使用 Angular 這個前端框架，而後端則是使用 NodeJS Express 作為後端開發。</p>\n"},{"title":"categories","date":"2022-02-14T09:50:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-14 17:50:19\ntype: \"categories\"\n---\n","updated":"2022-02-14T10:22:21.232Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckznurmnc0002kww3b79j1w9x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-02-14T09:50:13.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-14 17:50:13\ntype: \"tags\"\n---\n","updated":"2022-02-14T10:22:21.232Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckznurmne0004kww3a9f3a4i0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Day1. 認識 Angular","date":"2021-09-01T02:21:02.000Z","_content":"\n在2020年9月，我正式的從韌體工程師轉職成為一位前端工程師，在自學前端的時候我是選擇了 React 這個 Javascript 框架，做了幾個作品後投履歷面試最後找到目前任職的公司，一路上跌跌撞撞但也算順利，不過唯一不太順了就是目前任職的這間公司是使用 Angular ，當初剛進到這間公司時也是從頭開始 K Angular 官方文檔，看得真的是無煞煞，現在也進到這間公司快一年了，也使用過 Angular 做了幾個專案與處理了幾個問題， 想說再次挑戰自己從頭開始認真看 Angular 官方文檔並用自己的理解整理成筆記，希望能對新進的 Angular 開發者有些幫助。\n\n![https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png](https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png)\n\n<!--more-->\n\n# What is Angular ?\n開門見山的說 Angular 是一個 `Javascript 的框架`，他是基於 `TypeScript` 進行開發的，它包括了：\n\n- 基於 Component 且用於構建 Web App 的框架\n- 他集成了許多 Library 涵蓋了多種功能，包括 Router, forms, client-server…\n- 一套開發人員工具，提供開發者開發、構建、測試與更新程式碼\n\n記得當初主管跟我分享 Angular 的好處，因為 Angular 擁有非常完整的功能，可以透過它提供的功能建立一個完整且大型的 Web App，而且就如他有\n非常完整的功能，當在面對多個開發者同時開發專案時，就會遵守共同的開發原則以減少多人開發的問題。\n\n\n\n# Angular applications: The essentials\nAngular 中有許多核心思想，了解這些核心思想對於之後的開發有非常好的幫助。\n\n## Components\nComponent 是`構建一個 Web App 的最基本方塊`，每一個 Web App 都是由一個又一個大大小小的 Component 所組成的，在之前學習 React \n的時候也是這個概念，但是 Angular 的 Component 跟 React 非常不一樣，他是一個帶有 `@Component()` 裝飾器的 TypeScript Class、\nHTML template, Style ，這邊你可能聽不懂，但沒關係現階段只要簡單記住他是一個有 TypeScript、HTML、CSS 的小方塊就好。\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hello-world',\n  template: `\n        <h2>Hello World</h2>\n        <p>This is my first component!</p>\n    `\n})\nexport class HelloWorldComponent {\n  // The code in this class drives the component's behavior.\n}\n```\n\n當你要使用這個 Component 時，只需要在 HTML 中將你要用的 selector 當作 tag 使用就好。\n\n```html\n<hello-world></hello-world>\n```\n\n## Templates\n每一個 Component 都擁有自己的 HTML template，它用於在畫面中呈現你這個 Component，當你的 Component 發生改變時 Angular 會\n自動更新並且重新渲染 DOM，他有許多非常好用的功能，比如說動態插入、事件綁定等等的，不過這個我們之後會專門講解，在這裡只要記得 Template \n是用來在 UI 上顯示 Component 內容的就可以了。\n\n## Dependency injection\nDependency injection 在 Angular 中是一個非常重要的觀念，簡單來說當你在寫一般的 JavaScript 時，你可能寫了一個 Class 裡面存放了許\n多邏輯，當你在使用的時候你可能會需要使用 new 將這個 Class 實例化成一個 Object，然後才能使用裡面的 method 或 property，這樣兩個 Class\n就產生了`依賴關係`。\n\n就「依賴」的文字意思來看，是指「一個東西需要另一個東西而存在；若沒有另外一個東西，則本身不能自立」。\n\n物件導向程式(OOP)中，程式是透過許多類別(Class)的實例(instance)，也就是物件(object)，彼此的交互組合來實現各種功能。所以依賴是指「一個物件需要另一個物件才能作用」\n\n而 DI 則是指`被依賴物件透過外部注入至依賴物件的程式中使用`，也就是被依賴物件並不是在依賴物件的程式中使用 `new` 產生而是由`外部注入`，這種注入可以透過 Class 中的\nConstructor 或 Setter 實現。\n\n詳細的內容會到後面再仔細講解什麼事 DI，目前只要記住 DI 是 Angular 的一個重要的概念，主要目的是用於將各個 Class 之間`解耦`。\n\n## Angular CLI\nAngular CLI 是開發 Angular 應用程序的最快、直接且推薦的方式，就像 React 的 create-react-app 一樣，可以透過指令快速建立出基本的 Angular app，除了建立模板之外還有非常多好用的功能，我會在下一章節中仔細講解 Angular CLI 是什麼。\n\n## First-party libraries\n就如上面所提到 Angular 擁有非常多非常完善的資源提供你創建你的 Web App，所以當你在開發過程中遇到需要添加功能時，就可以添加相對應的模組來達成你的目的。\n\n這邊簡單介紹幾個 first party libraries\n\n| Name   |      Description      |\n|----------|:-------------:|\n| Angular Router |  基於 Component 的客戶端導航與 Router，支援延遲載入、嵌套 Router、自定義路徑匹配等等 | \n| Angular Forms |    表單輸入與表單內容驗證   |\n| Angular HttpClient | 可支援 client 端與 server 端的溝通 |\n| Angular Animations | 驅動 app 動畫 |\n\n\n\n# 結論\n本篇章大概介紹了什麼是 Angular 與使用它的好處，有提到許多比較難的觀念，template 的操作與\nDependency injection 等等，現在可能看不太懂不過沒關係，我們後面會詳細講解這些是幹什麼的，當初我也是花了很多時間才大概了解他在幹嘛的 ( 苦笑。\n\n\n\n# Reference\n- [Angular.io](https://angular.io/guide/what-is-angular)","source":"_posts/Angular/angular-01.md","raw":"---\ntitle: Day1. 認識 Angular\ndate: 2021-09-01 10:21:02\ntags:\n- Angular\n- Front-end\ncategories:\n- 2021 鐵人賽\n---\n\n在2020年9月，我正式的從韌體工程師轉職成為一位前端工程師，在自學前端的時候我是選擇了 React 這個 Javascript 框架，做了幾個作品後投履歷面試最後找到目前任職的公司，一路上跌跌撞撞但也算順利，不過唯一不太順了就是目前任職的這間公司是使用 Angular ，當初剛進到這間公司時也是從頭開始 K Angular 官方文檔，看得真的是無煞煞，現在也進到這間公司快一年了，也使用過 Angular 做了幾個專案與處理了幾個問題， 想說再次挑戰自己從頭開始認真看 Angular 官方文檔並用自己的理解整理成筆記，希望能對新進的 Angular 開發者有些幫助。\n\n![https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png](https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png)\n\n<!--more-->\n\n# What is Angular ?\n開門見山的說 Angular 是一個 `Javascript 的框架`，他是基於 `TypeScript` 進行開發的，它包括了：\n\n- 基於 Component 且用於構建 Web App 的框架\n- 他集成了許多 Library 涵蓋了多種功能，包括 Router, forms, client-server…\n- 一套開發人員工具，提供開發者開發、構建、測試與更新程式碼\n\n記得當初主管跟我分享 Angular 的好處，因為 Angular 擁有非常完整的功能，可以透過它提供的功能建立一個完整且大型的 Web App，而且就如他有\n非常完整的功能，當在面對多個開發者同時開發專案時，就會遵守共同的開發原則以減少多人開發的問題。\n\n\n\n# Angular applications: The essentials\nAngular 中有許多核心思想，了解這些核心思想對於之後的開發有非常好的幫助。\n\n## Components\nComponent 是`構建一個 Web App 的最基本方塊`，每一個 Web App 都是由一個又一個大大小小的 Component 所組成的，在之前學習 React \n的時候也是這個概念，但是 Angular 的 Component 跟 React 非常不一樣，他是一個帶有 `@Component()` 裝飾器的 TypeScript Class、\nHTML template, Style ，這邊你可能聽不懂，但沒關係現階段只要簡單記住他是一個有 TypeScript、HTML、CSS 的小方塊就好。\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hello-world',\n  template: `\n        <h2>Hello World</h2>\n        <p>This is my first component!</p>\n    `\n})\nexport class HelloWorldComponent {\n  // The code in this class drives the component's behavior.\n}\n```\n\n當你要使用這個 Component 時，只需要在 HTML 中將你要用的 selector 當作 tag 使用就好。\n\n```html\n<hello-world></hello-world>\n```\n\n## Templates\n每一個 Component 都擁有自己的 HTML template，它用於在畫面中呈現你這個 Component，當你的 Component 發生改變時 Angular 會\n自動更新並且重新渲染 DOM，他有許多非常好用的功能，比如說動態插入、事件綁定等等的，不過這個我們之後會專門講解，在這裡只要記得 Template \n是用來在 UI 上顯示 Component 內容的就可以了。\n\n## Dependency injection\nDependency injection 在 Angular 中是一個非常重要的觀念，簡單來說當你在寫一般的 JavaScript 時，你可能寫了一個 Class 裡面存放了許\n多邏輯，當你在使用的時候你可能會需要使用 new 將這個 Class 實例化成一個 Object，然後才能使用裡面的 method 或 property，這樣兩個 Class\n就產生了`依賴關係`。\n\n就「依賴」的文字意思來看，是指「一個東西需要另一個東西而存在；若沒有另外一個東西，則本身不能自立」。\n\n物件導向程式(OOP)中，程式是透過許多類別(Class)的實例(instance)，也就是物件(object)，彼此的交互組合來實現各種功能。所以依賴是指「一個物件需要另一個物件才能作用」\n\n而 DI 則是指`被依賴物件透過外部注入至依賴物件的程式中使用`，也就是被依賴物件並不是在依賴物件的程式中使用 `new` 產生而是由`外部注入`，這種注入可以透過 Class 中的\nConstructor 或 Setter 實現。\n\n詳細的內容會到後面再仔細講解什麼事 DI，目前只要記住 DI 是 Angular 的一個重要的概念，主要目的是用於將各個 Class 之間`解耦`。\n\n## Angular CLI\nAngular CLI 是開發 Angular 應用程序的最快、直接且推薦的方式，就像 React 的 create-react-app 一樣，可以透過指令快速建立出基本的 Angular app，除了建立模板之外還有非常多好用的功能，我會在下一章節中仔細講解 Angular CLI 是什麼。\n\n## First-party libraries\n就如上面所提到 Angular 擁有非常多非常完善的資源提供你創建你的 Web App，所以當你在開發過程中遇到需要添加功能時，就可以添加相對應的模組來達成你的目的。\n\n這邊簡單介紹幾個 first party libraries\n\n| Name   |      Description      |\n|----------|:-------------:|\n| Angular Router |  基於 Component 的客戶端導航與 Router，支援延遲載入、嵌套 Router、自定義路徑匹配等等 | \n| Angular Forms |    表單輸入與表單內容驗證   |\n| Angular HttpClient | 可支援 client 端與 server 端的溝通 |\n| Angular Animations | 驅動 app 動畫 |\n\n\n\n# 結論\n本篇章大概介紹了什麼是 Angular 與使用它的好處，有提到許多比較難的觀念，template 的操作與\nDependency injection 等等，現在可能看不太懂不過沒關係，我們後面會詳細講解這些是幹什麼的，當初我也是花了很多時間才大概了解他在幹嘛的 ( 苦笑。\n\n\n\n# Reference\n- [Angular.io](https://angular.io/guide/what-is-angular)","slug":"Angular/angular-01","published":1,"updated":"2022-02-16T01:21:29.578Z","_id":"ckznurmnd0003kww31d731dhn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在2020年9月，我正式的從韌體工程師轉職成為一位前端工程師，在自學前端的時候我是選擇了 React 這個 Javascript 框架，做了幾個作品後投履歷面試最後找到目前任職的公司，一路上跌跌撞撞但也算順利，不過唯一不太順了就是目前任職的這間公司是使用 Angular ，當初剛進到這間公司時也是從頭開始 K Angular 官方文檔，看得真的是無煞煞，現在也進到這間公司快一年了，也使用過 Angular 做了幾個專案與處理了幾個問題， 想說再次挑戰自己從頭開始認真看 Angular 官方文檔並用自己的理解整理成筆記，希望能對新進的 Angular 開發者有些幫助。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"What-is-Angular\"><a href=\"#What-is-Angular\" class=\"headerlink\" title=\"What is Angular ?\"></a>What is Angular ?</h1><p>開門見山的說 Angular 是一個 <code>Javascript 的框架</code>，他是基於 <code>TypeScript</code> 進行開發的，它包括了：</p>\n<ul>\n<li>基於 Component 且用於構建 Web App 的框架</li>\n<li>他集成了許多 Library 涵蓋了多種功能，包括 Router, forms, client-server…</li>\n<li>一套開發人員工具，提供開發者開發、構建、測試與更新程式碼</li>\n</ul>\n<p>記得當初主管跟我分享 Angular 的好處，因為 Angular 擁有非常完整的功能，可以透過它提供的功能建立一個完整且大型的 Web App，而且就如他有<br>非常完整的功能，當在面對多個開發者同時開發專案時，就會遵守共同的開發原則以減少多人開發的問題。</p>\n<h1 id=\"Angular-applications-The-essentials\"><a href=\"#Angular-applications-The-essentials\" class=\"headerlink\" title=\"Angular applications: The essentials\"></a>Angular applications: The essentials</h1><p>Angular 中有許多核心思想，了解這些核心思想對於之後的開發有非常好的幫助。</p>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>Component 是<code>構建一個 Web App 的最基本方塊</code>，每一個 Web App 都是由一個又一個大大小小的 Component 所組成的，在之前學習 React<br>的時候也是這個概念，但是 Angular 的 Component 跟 React 非常不一樣，他是一個帶有 <code>@Component()</code> 裝飾器的 TypeScript Class、<br>HTML template, Style ，這邊你可能聽不懂，但沒關係現階段只要簡單記住他是一個有 TypeScript、HTML、CSS 的小方塊就好。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h2&gt;Hello World&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;This is my first component!&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorldComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// The code in this class drives the component&#x27;s behavior.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當你要使用這個 Component 時，只需要在 HTML 中將你要用的 selector 當作 tag 使用就好。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hello-world</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello-world</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h2><p>每一個 Component 都擁有自己的 HTML template，它用於在畫面中呈現你這個 Component，當你的 Component 發生改變時 Angular 會<br>自動更新並且重新渲染 DOM，他有許多非常好用的功能，比如說動態插入、事件綁定等等的，不過這個我們之後會專門講解，在這裡只要記得 Template<br>是用來在 UI 上顯示 Component 內容的就可以了。</p>\n<h2 id=\"Dependency-injection\"><a href=\"#Dependency-injection\" class=\"headerlink\" title=\"Dependency injection\"></a>Dependency injection</h2><p>Dependency injection 在 Angular 中是一個非常重要的觀念，簡單來說當你在寫一般的 JavaScript 時，你可能寫了一個 Class 裡面存放了許<br>多邏輯，當你在使用的時候你可能會需要使用 new 將這個 Class 實例化成一個 Object，然後才能使用裡面的 method 或 property，這樣兩個 Class<br>就產生了<code>依賴關係</code>。</p>\n<p>就「依賴」的文字意思來看，是指「一個東西需要另一個東西而存在；若沒有另外一個東西，則本身不能自立」。</p>\n<p>物件導向程式(OOP)中，程式是透過許多類別(Class)的實例(instance)，也就是物件(object)，彼此的交互組合來實現各種功能。所以依賴是指「一個物件需要另一個物件才能作用」</p>\n<p>而 DI 則是指<code>被依賴物件透過外部注入至依賴物件的程式中使用</code>，也就是被依賴物件並不是在依賴物件的程式中使用 <code>new</code> 產生而是由<code>外部注入</code>，這種注入可以透過 Class 中的<br>Constructor 或 Setter 實現。</p>\n<p>詳細的內容會到後面再仔細講解什麼事 DI，目前只要記住 DI 是 Angular 的一個重要的概念，主要目的是用於將各個 Class 之間<code>解耦</code>。</p>\n<h2 id=\"Angular-CLI\"><a href=\"#Angular-CLI\" class=\"headerlink\" title=\"Angular CLI\"></a>Angular CLI</h2><p>Angular CLI 是開發 Angular 應用程序的最快、直接且推薦的方式，就像 React 的 create-react-app 一樣，可以透過指令快速建立出基本的 Angular app，除了建立模板之外還有非常多好用的功能，我會在下一章節中仔細講解 Angular CLI 是什麼。</p>\n<h2 id=\"First-party-libraries\"><a href=\"#First-party-libraries\" class=\"headerlink\" title=\"First-party libraries\"></a>First-party libraries</h2><p>就如上面所提到 Angular 擁有非常多非常完善的資源提供你創建你的 Web App，所以當你在開發過程中遇到需要添加功能時，就可以添加相對應的模組來達成你的目的。</p>\n<p>這邊簡單介紹幾個 first party libraries</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Angular Router</td>\n<td align=\"center\">基於 Component 的客戶端導航與 Router，支援延遲載入、嵌套 Router、自定義路徑匹配等等</td>\n</tr>\n<tr>\n<td>Angular Forms</td>\n<td align=\"center\">表單輸入與表單內容驗證</td>\n</tr>\n<tr>\n<td>Angular HttpClient</td>\n<td align=\"center\">可支援 client 端與 server 端的溝通</td>\n</tr>\n<tr>\n<td>Angular Animations</td>\n<td align=\"center\">驅動 app 動畫</td>\n</tr>\n</tbody></table>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇章大概介紹了什麼是 Angular 與使用它的好處，有提到許多比較難的觀念，template 的操作與<br>Dependency injection 等等，現在可能看不太懂不過沒關係，我們後面會詳細講解這些是幹什麼的，當初我也是花了很多時間才大概了解他在幹嘛的 ( 苦笑。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/what-is-angular\">Angular.io</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在2020年9月，我正式的從韌體工程師轉職成為一位前端工程師，在自學前端的時候我是選擇了 React 這個 Javascript 框架，做了幾個作品後投履歷面試最後找到目前任職的公司，一路上跌跌撞撞但也算順利，不過唯一不太順了就是目前任職的這間公司是使用 Angular ，當初剛進到這間公司時也是從頭開始 K Angular 官方文檔，看得真的是無煞煞，現在也進到這間公司快一年了，也使用過 Angular 做了幾個專案與處理了幾個問題， 想說再次挑戰自己從頭開始認真看 Angular 官方文檔並用自己的理解整理成筆記，希望能對新進的 Angular 開發者有些幫助。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210901/20124767Bd7CvcH5JV.png\"></p>","more":"<h1 id=\"What-is-Angular\"><a href=\"#What-is-Angular\" class=\"headerlink\" title=\"What is Angular ?\"></a>What is Angular ?</h1><p>開門見山的說 Angular 是一個 <code>Javascript 的框架</code>，他是基於 <code>TypeScript</code> 進行開發的，它包括了：</p>\n<ul>\n<li>基於 Component 且用於構建 Web App 的框架</li>\n<li>他集成了許多 Library 涵蓋了多種功能，包括 Router, forms, client-server…</li>\n<li>一套開發人員工具，提供開發者開發、構建、測試與更新程式碼</li>\n</ul>\n<p>記得當初主管跟我分享 Angular 的好處，因為 Angular 擁有非常完整的功能，可以透過它提供的功能建立一個完整且大型的 Web App，而且就如他有<br>非常完整的功能，當在面對多個開發者同時開發專案時，就會遵守共同的開發原則以減少多人開發的問題。</p>\n<h1 id=\"Angular-applications-The-essentials\"><a href=\"#Angular-applications-The-essentials\" class=\"headerlink\" title=\"Angular applications: The essentials\"></a>Angular applications: The essentials</h1><p>Angular 中有許多核心思想，了解這些核心思想對於之後的開發有非常好的幫助。</p>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>Component 是<code>構建一個 Web App 的最基本方塊</code>，每一個 Web App 都是由一個又一個大大小小的 Component 所組成的，在之前學習 React<br>的時候也是這個概念，但是 Angular 的 Component 跟 React 非常不一樣，他是一個帶有 <code>@Component()</code> 裝飾器的 TypeScript Class、<br>HTML template, Style ，這邊你可能聽不懂，但沒關係現階段只要簡單記住他是一個有 TypeScript、HTML、CSS 的小方塊就好。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h2&gt;Hello World&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;This is my first component!&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorldComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// The code in this class drives the component&#x27;s behavior.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當你要使用這個 Component 時，只需要在 HTML 中將你要用的 selector 當作 tag 使用就好。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hello-world</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello-world</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h2><p>每一個 Component 都擁有自己的 HTML template，它用於在畫面中呈現你這個 Component，當你的 Component 發生改變時 Angular 會<br>自動更新並且重新渲染 DOM，他有許多非常好用的功能，比如說動態插入、事件綁定等等的，不過這個我們之後會專門講解，在這裡只要記得 Template<br>是用來在 UI 上顯示 Component 內容的就可以了。</p>\n<h2 id=\"Dependency-injection\"><a href=\"#Dependency-injection\" class=\"headerlink\" title=\"Dependency injection\"></a>Dependency injection</h2><p>Dependency injection 在 Angular 中是一個非常重要的觀念，簡單來說當你在寫一般的 JavaScript 時，你可能寫了一個 Class 裡面存放了許<br>多邏輯，當你在使用的時候你可能會需要使用 new 將這個 Class 實例化成一個 Object，然後才能使用裡面的 method 或 property，這樣兩個 Class<br>就產生了<code>依賴關係</code>。</p>\n<p>就「依賴」的文字意思來看，是指「一個東西需要另一個東西而存在；若沒有另外一個東西，則本身不能自立」。</p>\n<p>物件導向程式(OOP)中，程式是透過許多類別(Class)的實例(instance)，也就是物件(object)，彼此的交互組合來實現各種功能。所以依賴是指「一個物件需要另一個物件才能作用」</p>\n<p>而 DI 則是指<code>被依賴物件透過外部注入至依賴物件的程式中使用</code>，也就是被依賴物件並不是在依賴物件的程式中使用 <code>new</code> 產生而是由<code>外部注入</code>，這種注入可以透過 Class 中的<br>Constructor 或 Setter 實現。</p>\n<p>詳細的內容會到後面再仔細講解什麼事 DI，目前只要記住 DI 是 Angular 的一個重要的概念，主要目的是用於將各個 Class 之間<code>解耦</code>。</p>\n<h2 id=\"Angular-CLI\"><a href=\"#Angular-CLI\" class=\"headerlink\" title=\"Angular CLI\"></a>Angular CLI</h2><p>Angular CLI 是開發 Angular 應用程序的最快、直接且推薦的方式，就像 React 的 create-react-app 一樣，可以透過指令快速建立出基本的 Angular app，除了建立模板之外還有非常多好用的功能，我會在下一章節中仔細講解 Angular CLI 是什麼。</p>\n<h2 id=\"First-party-libraries\"><a href=\"#First-party-libraries\" class=\"headerlink\" title=\"First-party libraries\"></a>First-party libraries</h2><p>就如上面所提到 Angular 擁有非常多非常完善的資源提供你創建你的 Web App，所以當你在開發過程中遇到需要添加功能時，就可以添加相對應的模組來達成你的目的。</p>\n<p>這邊簡單介紹幾個 first party libraries</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Angular Router</td>\n<td align=\"center\">基於 Component 的客戶端導航與 Router，支援延遲載入、嵌套 Router、自定義路徑匹配等等</td>\n</tr>\n<tr>\n<td>Angular Forms</td>\n<td align=\"center\">表單輸入與表單內容驗證</td>\n</tr>\n<tr>\n<td>Angular HttpClient</td>\n<td align=\"center\">可支援 client 端與 server 端的溝通</td>\n</tr>\n<tr>\n<td>Angular Animations</td>\n<td align=\"center\">驅動 app 動畫</td>\n</tr>\n</tbody></table>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇章大概介紹了什麼是 Angular 與使用它的好處，有提到許多比較難的觀念，template 的操作與<br>Dependency injection 等等，現在可能看不太懂不過沒關係，我們後面會詳細講解這些是幹什麼的，當初我也是花了很多時間才大概了解他在幹嘛的 ( 苦笑。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/what-is-angular\">Angular.io</a></li>\n</ul>"},{"title":"Day2. Angular CLI","date":"2021-09-02T01:26:52.000Z","_content":"\n大家都說\"工欲善其事必先利其器\"，在我們發開 Angular 時，必需了解一個非常好用的工具， \"Angular CLI\" ，而這篇文章將會介紹什麼是 Angular CLI、如何安裝與使用 Angular CLI以及一些其他該注意的事項以及常見的命令操作。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png)\n\n<!--more-->\n\n# What is the Angular CLI ?\n在 Angular 的官方文檔中提到， Angular CLI 是 Angular 團隊創建的工具，用於管理、構建、維護和測試你的 Angular 專案。\n\n可能有些剛接觸前端的新手會覺得又要記一些指令覺得麻煩，實際上有一個 [Viisual Studio Code](https://marketplace.visualstudio.com/items?itemName=sasxa-net.angular-gui) 的擴展可以使用，它提供了一個 Angular CLI GUI 介面，可以讓你取代在終端機中輸入命令。\n\n![img](https://i.imgur.com/o8zEERJ.gif)\n\n雖然有 GUI 介面可以使用，但是本篇章還是主要會介紹如何透過在終端機中下達命令來使用 Angular CLI，別放棄學習啊！！\n\n\n# Do I have to use the Angular CLI ?\n現在我們知道了什麼是 Angular CLI，可能很多人都會問，既然他是自動幫開發著處理一些問題的，那我一定要用嗎？我可以不要這麼自動（？\n\n答案是當然可以，你可以再開發 Angular 的時候，無論創建、維護、測試等等的都用手動的方式建立或操作，但是你可能會變成.... foolish Angular developer (別篇文章說的下面會放連結，罵他不要罵我）。\n\nAngular CLI 存在的目的是為了讓開發者專心進行專案開發，它負責將麻煩與耗時的動作自動化，使用指令可以自動化生成一個基礎並帶有 .gitgnore( 用來告訴 git 應該忽略哪些 file ) 的 Angular app，其中包括 Angular 的核心部分比如 component, module 等等，除了創造 app 之外他還可以自動化進行 unit test、building和其他基本卻複雜的操作。\n\n所以說了這麼多，有沒有更想使用 Angular CLI 啦（不要說沒有！\n\n\n# How to install the Angular CLI\n終於要進入到安裝的環節了，在安裝 Angular CLI 之前比需要先安裝  [Node.js](https://node.js.org/) ，如果不想使用終端機命令安裝 Node.js 可以在 [Node.js 官網下載](https://nodejs.org/en/download/) 並進行安裝。\n\n當安裝完 Node.js 後，可以在終端中輸入指令正式安裝 Angular CLI\n```bash\nnpm install -g @angular/cli\n```\n\n> 使用 -g option 代表要在系統範圍內（全域）安裝特定的 npm module，如果沒有使用 -g option 則會安裝在當前目錄的 node_modules 中。\n\n如果你需要更新 Angular CLI 到最新版本則可以使用\n```bash\nnpm update -g @angular/cli\n```\n\n這樣就完成在全域中安裝 Angular CLI 的方式，這意味著你可以在你機器的任何地方使用它，有趣的是當創建一個 Angular app 時，CLI 也將安裝在本地，這意味著他也會安裝在你 Angular app 的 node_module 中，讓你可以在你的專案中使用 Angular CLI 的功能。\n\n\n\n# How to create an Angular application with the CLI\n當要創建一個新的 Angular app 時，可以使用 Angular CLI 他可以自動且快速的建立所有需要的文件（如果手動創建可能要花一天的時間，那麼我們就來使用指令吧！\n\n```bash\nng new MyApplicationName\n```\n當按下 enter 後你就可以悠閒的喝個咖啡聊個天等待他自動完成\n\n當 Angular CLI 在創建 App 的時候會問一些問題:\n1. 是否需要設置 Router (y / N) → 選擇 N 之後也可以手動加入 Router\n2. 選擇想要的樣式格式 → 選擇要使用 CSS, SASS, SCSS 等不同的 style format\n   ![https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png](https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png)\n\n當都選擇好後就可以等他完成啦～\n![https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png](https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png)\n\n\n\n# CLI command-language syntax\n在使用每一個程式語言的時候，都必須要注意他的語法，不然很容易造成出乎自己意料的結果，CLI syntax如下：\n```\nng commandNameOrAlias requiredArg [optionalArg] [options]\n```\n- 大部分的 command 和一些 option 擁有別名，可以使用簡單的方式達到一樣的目的。\n- 使用雙破折號(—)放在 option 前面當作前綴，使用單破折號(-)放在 option 別名前面當作前綴，而參數沒有前綴。\n- 通常生成文件的名稱可以將它當作參數加在後面，也可以使用 —name 來指定文件名稱。\n- 參數和 option 名稱可以使用駝峰命名或破折號 → —myOpitonName = —my-option-name\n\n\n\n# How to use Angular CLI\n上面介紹了這麼多的 Angular CLI 來源、用途、語法等等，接下來就要進到最重要的環節，來介紹一些常用的 CLI 指令。\n\n## Create Component\n下面是創建一個新 Component 的 Angular CLI 指令。\n```\nng generate component MyComponentName -> 完整\nng g c MyCompoenntName -> 簡寫\n```\n如果你要將這個創建出來的 Component 歸屬於特定的 module 則可以使用\n```\nng generate component MyComponentName --module MyModuleName\n```\n## Create Module\n在 Angular 中 Module 的觀念非常重要，他可以有效地模塊化你的程式，詳細的 Module 我們後面再慢慢介紹，這邊就先了解如何快速創建一個 Module 吧。\n```\nng generate module MyModuleName\n```\n## Create pipes\npipes 也是 Angular 一個重要的觀念，他可以將你的資料自動地進行轉換，一樣詳細的內容我們放到後面介紹，這邊一樣介紹如何快速建立 pipes。\n```\nng generate pipe MyPipeName\n```\n## Create Services\nServices 在 Angular 中也是非常重要的，他可以有效地將畫面與計算邏輯分割開來，一樣詳細的內容我們放到後面介紹（瘋狂挖坑...\n```\nng generate service MyServiceName\n```\n## Run project\n當我們撰寫好了我們的 Angular 程式後，最重要的就是讓他跑起來，哪們就可以使用這個指令\n```\nng serve <project> [options]\nng s <project> [options]\n```\n使用這個指令會自動 build 和 serve 你的 App，並且在你`更改內容儲存後重新構建`。\n## Building project\n當我們撰寫好程式後，我們可以將我們寫的程式 build 好，以便做更多的處理，這時就可以使用這個指令\n```\nng build <project> [options]\nng b <project> [options]\n```\n## Extract-i18n\nAngular 支持多語言的設計，後面會詳細講解 i18n 的使用方法，這邊一樣先介紹如何編譯 i18n\n```\nng extract-i18n <project> [options]\nng i18n-extract <project> [options]\nng xi18n <project> [options]\n```\n\n\n# 結論\n本篇章介紹了許多 Angular CLI 的概念，我在剛接觸 Angular 的時候對 CLI 也是模模糊糊，雖然要真正了解 CLI 內部是如何操作的十分困難，但對於一般開發者而言只要懂的使用就可以了，上面也介紹了許多 CLI 的指令，但這只是冰山一角我只介紹了幾個我自己比較常用到的，有興趣或是有使用到的話也可以到 Angular 官網中查詢需要使用到的指令，希望今天的講解有讓你稍微了解一點什麼是 Angular CLI 也算使用 Angular 的第一步吧。\n\n\n# Reference\n- [How to install and use the Angular CLI](https://itnext.io/how-to-install-and-use-the-angular-cli-ac8b5aae1d05)\n- [Angular.io](https://angular.io/cli)","source":"_posts/Angular/angular-02.md","raw":"---\ntitle: Day2. Angular CLI\ndate: 2021-09-02 09:26:52\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n大家都說\"工欲善其事必先利其器\"，在我們發開 Angular 時，必需了解一個非常好用的工具， \"Angular CLI\" ，而這篇文章將會介紹什麼是 Angular CLI、如何安裝與使用 Angular CLI以及一些其他該注意的事項以及常見的命令操作。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png)\n\n<!--more-->\n\n# What is the Angular CLI ?\n在 Angular 的官方文檔中提到， Angular CLI 是 Angular 團隊創建的工具，用於管理、構建、維護和測試你的 Angular 專案。\n\n可能有些剛接觸前端的新手會覺得又要記一些指令覺得麻煩，實際上有一個 [Viisual Studio Code](https://marketplace.visualstudio.com/items?itemName=sasxa-net.angular-gui) 的擴展可以使用，它提供了一個 Angular CLI GUI 介面，可以讓你取代在終端機中輸入命令。\n\n![img](https://i.imgur.com/o8zEERJ.gif)\n\n雖然有 GUI 介面可以使用，但是本篇章還是主要會介紹如何透過在終端機中下達命令來使用 Angular CLI，別放棄學習啊！！\n\n\n# Do I have to use the Angular CLI ?\n現在我們知道了什麼是 Angular CLI，可能很多人都會問，既然他是自動幫開發著處理一些問題的，那我一定要用嗎？我可以不要這麼自動（？\n\n答案是當然可以，你可以再開發 Angular 的時候，無論創建、維護、測試等等的都用手動的方式建立或操作，但是你可能會變成.... foolish Angular developer (別篇文章說的下面會放連結，罵他不要罵我）。\n\nAngular CLI 存在的目的是為了讓開發者專心進行專案開發，它負責將麻煩與耗時的動作自動化，使用指令可以自動化生成一個基礎並帶有 .gitgnore( 用來告訴 git 應該忽略哪些 file ) 的 Angular app，其中包括 Angular 的核心部分比如 component, module 等等，除了創造 app 之外他還可以自動化進行 unit test、building和其他基本卻複雜的操作。\n\n所以說了這麼多，有沒有更想使用 Angular CLI 啦（不要說沒有！\n\n\n# How to install the Angular CLI\n終於要進入到安裝的環節了，在安裝 Angular CLI 之前比需要先安裝  [Node.js](https://node.js.org/) ，如果不想使用終端機命令安裝 Node.js 可以在 [Node.js 官網下載](https://nodejs.org/en/download/) 並進行安裝。\n\n當安裝完 Node.js 後，可以在終端中輸入指令正式安裝 Angular CLI\n```bash\nnpm install -g @angular/cli\n```\n\n> 使用 -g option 代表要在系統範圍內（全域）安裝特定的 npm module，如果沒有使用 -g option 則會安裝在當前目錄的 node_modules 中。\n\n如果你需要更新 Angular CLI 到最新版本則可以使用\n```bash\nnpm update -g @angular/cli\n```\n\n這樣就完成在全域中安裝 Angular CLI 的方式，這意味著你可以在你機器的任何地方使用它，有趣的是當創建一個 Angular app 時，CLI 也將安裝在本地，這意味著他也會安裝在你 Angular app 的 node_module 中，讓你可以在你的專案中使用 Angular CLI 的功能。\n\n\n\n# How to create an Angular application with the CLI\n當要創建一個新的 Angular app 時，可以使用 Angular CLI 他可以自動且快速的建立所有需要的文件（如果手動創建可能要花一天的時間，那麼我們就來使用指令吧！\n\n```bash\nng new MyApplicationName\n```\n當按下 enter 後你就可以悠閒的喝個咖啡聊個天等待他自動完成\n\n當 Angular CLI 在創建 App 的時候會問一些問題:\n1. 是否需要設置 Router (y / N) → 選擇 N 之後也可以手動加入 Router\n2. 選擇想要的樣式格式 → 選擇要使用 CSS, SASS, SCSS 等不同的 style format\n   ![https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png](https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png)\n\n當都選擇好後就可以等他完成啦～\n![https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png](https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png)\n\n\n\n# CLI command-language syntax\n在使用每一個程式語言的時候，都必須要注意他的語法，不然很容易造成出乎自己意料的結果，CLI syntax如下：\n```\nng commandNameOrAlias requiredArg [optionalArg] [options]\n```\n- 大部分的 command 和一些 option 擁有別名，可以使用簡單的方式達到一樣的目的。\n- 使用雙破折號(—)放在 option 前面當作前綴，使用單破折號(-)放在 option 別名前面當作前綴，而參數沒有前綴。\n- 通常生成文件的名稱可以將它當作參數加在後面，也可以使用 —name 來指定文件名稱。\n- 參數和 option 名稱可以使用駝峰命名或破折號 → —myOpitonName = —my-option-name\n\n\n\n# How to use Angular CLI\n上面介紹了這麼多的 Angular CLI 來源、用途、語法等等，接下來就要進到最重要的環節，來介紹一些常用的 CLI 指令。\n\n## Create Component\n下面是創建一個新 Component 的 Angular CLI 指令。\n```\nng generate component MyComponentName -> 完整\nng g c MyCompoenntName -> 簡寫\n```\n如果你要將這個創建出來的 Component 歸屬於特定的 module 則可以使用\n```\nng generate component MyComponentName --module MyModuleName\n```\n## Create Module\n在 Angular 中 Module 的觀念非常重要，他可以有效地模塊化你的程式，詳細的 Module 我們後面再慢慢介紹，這邊就先了解如何快速創建一個 Module 吧。\n```\nng generate module MyModuleName\n```\n## Create pipes\npipes 也是 Angular 一個重要的觀念，他可以將你的資料自動地進行轉換，一樣詳細的內容我們放到後面介紹，這邊一樣介紹如何快速建立 pipes。\n```\nng generate pipe MyPipeName\n```\n## Create Services\nServices 在 Angular 中也是非常重要的，他可以有效地將畫面與計算邏輯分割開來，一樣詳細的內容我們放到後面介紹（瘋狂挖坑...\n```\nng generate service MyServiceName\n```\n## Run project\n當我們撰寫好了我們的 Angular 程式後，最重要的就是讓他跑起來，哪們就可以使用這個指令\n```\nng serve <project> [options]\nng s <project> [options]\n```\n使用這個指令會自動 build 和 serve 你的 App，並且在你`更改內容儲存後重新構建`。\n## Building project\n當我們撰寫好程式後，我們可以將我們寫的程式 build 好，以便做更多的處理，這時就可以使用這個指令\n```\nng build <project> [options]\nng b <project> [options]\n```\n## Extract-i18n\nAngular 支持多語言的設計，後面會詳細講解 i18n 的使用方法，這邊一樣先介紹如何編譯 i18n\n```\nng extract-i18n <project> [options]\nng i18n-extract <project> [options]\nng xi18n <project> [options]\n```\n\n\n# 結論\n本篇章介紹了許多 Angular CLI 的概念，我在剛接觸 Angular 的時候對 CLI 也是模模糊糊，雖然要真正了解 CLI 內部是如何操作的十分困難，但對於一般開發者而言只要懂的使用就可以了，上面也介紹了許多 CLI 的指令，但這只是冰山一角我只介紹了幾個我自己比較常用到的，有興趣或是有使用到的話也可以到 Angular 官網中查詢需要使用到的指令，希望今天的講解有讓你稍微了解一點什麼是 Angular CLI 也算使用 Angular 的第一步吧。\n\n\n# Reference\n- [How to install and use the Angular CLI](https://itnext.io/how-to-install-and-use-the-angular-cli-ac8b5aae1d05)\n- [Angular.io](https://angular.io/cli)","slug":"Angular/angular-02","published":1,"updated":"2022-02-16T01:21:45.610Z","_id":"ckznurmnf0005kww34lwjc1u9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大家都說”工欲善其事必先利其器”，在我們發開 Angular 時，必需了解一個非常好用的工具， “Angular CLI” ，而這篇文章將會介紹什麼是 Angular CLI、如何安裝與使用 Angular CLI以及一些其他該注意的事項以及常見的命令操作。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"What-is-the-Angular-CLI\"><a href=\"#What-is-the-Angular-CLI\" class=\"headerlink\" title=\"What is the Angular CLI ?\"></a>What is the Angular CLI ?</h1><p>在 Angular 的官方文檔中提到， Angular CLI 是 Angular 團隊創建的工具，用於管理、構建、維護和測試你的 Angular 專案。</p>\n<p>可能有些剛接觸前端的新手會覺得又要記一些指令覺得麻煩，實際上有一個 <a href=\"https://marketplace.visualstudio.com/items?itemName=sasxa-net.angular-gui\">Viisual Studio Code</a> 的擴展可以使用，它提供了一個 Angular CLI GUI 介面，可以讓你取代在終端機中輸入命令。</p>\n<p><img src=\"https://i.imgur.com/o8zEERJ.gif\" alt=\"img\"></p>\n<p>雖然有 GUI 介面可以使用，但是本篇章還是主要會介紹如何透過在終端機中下達命令來使用 Angular CLI，別放棄學習啊！！</p>\n<h1 id=\"Do-I-have-to-use-the-Angular-CLI\"><a href=\"#Do-I-have-to-use-the-Angular-CLI\" class=\"headerlink\" title=\"Do I have to use the Angular CLI ?\"></a>Do I have to use the Angular CLI ?</h1><p>現在我們知道了什麼是 Angular CLI，可能很多人都會問，既然他是自動幫開發著處理一些問題的，那我一定要用嗎？我可以不要這麼自動（？</p>\n<p>答案是當然可以，你可以再開發 Angular 的時候，無論創建、維護、測試等等的都用手動的方式建立或操作，但是你可能會變成…. foolish Angular developer (別篇文章說的下面會放連結，罵他不要罵我）。</p>\n<p>Angular CLI 存在的目的是為了讓開發者專心進行專案開發，它負責將麻煩與耗時的動作自動化，使用指令可以自動化生成一個基礎並帶有 .gitgnore( 用來告訴 git 應該忽略哪些 file ) 的 Angular app，其中包括 Angular 的核心部分比如 component, module 等等，除了創造 app 之外他還可以自動化進行 unit test、building和其他基本卻複雜的操作。</p>\n<p>所以說了這麼多，有沒有更想使用 Angular CLI 啦（不要說沒有！</p>\n<h1 id=\"How-to-install-the-Angular-CLI\"><a href=\"#How-to-install-the-Angular-CLI\" class=\"headerlink\" title=\"How to install the Angular CLI\"></a>How to install the Angular CLI</h1><p>終於要進入到安裝的環節了，在安裝 Angular CLI 之前比需要先安裝  <a href=\"https://node.js.org/\">Node.js</a> ，如果不想使用終端機命令安裝 Node.js 可以在 <a href=\"https://nodejs.org/en/download/\">Node.js 官網下載</a> 並進行安裝。</p>\n<p>當安裝完 Node.js 後，可以在終端中輸入指令正式安裝 Angular CLI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用 -g option 代表要在系統範圍內（全域）安裝特定的 npm module，如果沒有使用 -g option 則會安裝在當前目錄的 node_modules 中。</p>\n</blockquote>\n<p>如果你需要更新 Angular CLI 到最新版本則可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update -g @angular/cli</span><br></pre></td></tr></table></figure>\n\n<p>這樣就完成在全域中安裝 Angular CLI 的方式，這意味著你可以在你機器的任何地方使用它，有趣的是當創建一個 Angular app 時，CLI 也將安裝在本地，這意味著他也會安裝在你 Angular app 的 node_module 中，讓你可以在你的專案中使用 Angular CLI 的功能。</p>\n<h1 id=\"How-to-create-an-Angular-application-with-the-CLI\"><a href=\"#How-to-create-an-Angular-application-with-the-CLI\" class=\"headerlink\" title=\"How to create an Angular application with the CLI\"></a>How to create an Angular application with the CLI</h1><p>當要創建一個新的 Angular app 時，可以使用 Angular CLI 他可以自動且快速的建立所有需要的文件（如果手動創建可能要花一天的時間，那麼我們就來使用指令吧！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new MyApplicationName</span><br></pre></td></tr></table></figure>\n<p>當按下 enter 後你就可以悠閒的喝個咖啡聊個天等待他自動完成</p>\n<p>當 Angular CLI 在創建 App 的時候會問一些問題:</p>\n<ol>\n<li>是否需要設置 Router (y &#x2F; N) → 選擇 N 之後也可以手動加入 Router</li>\n<li>選擇想要的樣式格式 → 選擇要使用 CSS, SASS, SCSS 等不同的 style format<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png\"></li>\n</ol>\n<p>當都選擇好後就可以等他完成啦～<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png\"></p>\n<h1 id=\"CLI-command-language-syntax\"><a href=\"#CLI-command-language-syntax\" class=\"headerlink\" title=\"CLI command-language syntax\"></a>CLI command-language syntax</h1><p>在使用每一個程式語言的時候，都必須要注意他的語法，不然很容易造成出乎自己意料的結果，CLI syntax如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng commandNameOrAlias requiredArg [optionalArg] [options]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>大部分的 command 和一些 option 擁有別名，可以使用簡單的方式達到一樣的目的。</li>\n<li>使用雙破折號(—)放在 option 前面當作前綴，使用單破折號(-)放在 option 別名前面當作前綴，而參數沒有前綴。</li>\n<li>通常生成文件的名稱可以將它當作參數加在後面，也可以使用 —name 來指定文件名稱。</li>\n<li>參數和 option 名稱可以使用駝峰命名或破折號 → —myOpitonName &#x3D; —my-option-name</li>\n</ul>\n<h1 id=\"How-to-use-Angular-CLI\"><a href=\"#How-to-use-Angular-CLI\" class=\"headerlink\" title=\"How to use Angular CLI\"></a>How to use Angular CLI</h1><p>上面介紹了這麼多的 Angular CLI 來源、用途、語法等等，接下來就要進到最重要的環節，來介紹一些常用的 CLI 指令。</p>\n<h2 id=\"Create-Component\"><a href=\"#Create-Component\" class=\"headerlink\" title=\"Create Component\"></a>Create Component</h2><p>下面是創建一個新 Component 的 Angular CLI 指令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component MyComponentName -&gt; 完整</span><br><span class=\"line\">ng g c MyCompoenntName -&gt; 簡寫</span><br></pre></td></tr></table></figure>\n<p>如果你要將這個創建出來的 Component 歸屬於特定的 module 則可以使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component MyComponentName --module MyModuleName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-Module\"><a href=\"#Create-Module\" class=\"headerlink\" title=\"Create Module\"></a>Create Module</h2><p>在 Angular 中 Module 的觀念非常重要，他可以有效地模塊化你的程式，詳細的 Module 我們後面再慢慢介紹，這邊就先了解如何快速創建一個 Module 吧。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module MyModuleName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-pipes\"><a href=\"#Create-pipes\" class=\"headerlink\" title=\"Create pipes\"></a>Create pipes</h2><p>pipes 也是 Angular 一個重要的觀念，他可以將你的資料自動地進行轉換，一樣詳細的內容我們放到後面介紹，這邊一樣介紹如何快速建立 pipes。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate pipe MyPipeName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-Services\"><a href=\"#Create-Services\" class=\"headerlink\" title=\"Create Services\"></a>Create Services</h2><p>Services 在 Angular 中也是非常重要的，他可以有效地將畫面與計算邏輯分割開來，一樣詳細的內容我們放到後面介紹（瘋狂挖坑…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service MyServiceName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Run-project\"><a href=\"#Run-project\" class=\"headerlink\" title=\"Run project\"></a>Run project</h2><p>當我們撰寫好了我們的 Angular 程式後，最重要的就是讓他跑起來，哪們就可以使用這個指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve &lt;project&gt; [options]</span><br><span class=\"line\">ng s &lt;project&gt; [options]</span><br></pre></td></tr></table></figure>\n<p>使用這個指令會自動 build 和 serve 你的 App，並且在你<code>更改內容儲存後重新構建</code>。</p>\n<h2 id=\"Building-project\"><a href=\"#Building-project\" class=\"headerlink\" title=\"Building project\"></a>Building project</h2><p>當我們撰寫好程式後，我們可以將我們寫的程式 build 好，以便做更多的處理，這時就可以使用這個指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng build &lt;project&gt; [options]</span><br><span class=\"line\">ng b &lt;project&gt; [options]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Extract-i18n\"><a href=\"#Extract-i18n\" class=\"headerlink\" title=\"Extract-i18n\"></a>Extract-i18n</h2><p>Angular 支持多語言的設計，後面會詳細講解 i18n 的使用方法，這邊一樣先介紹如何編譯 i18n</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng extract-i18n &lt;project&gt; [options]</span><br><span class=\"line\">ng i18n-extract &lt;project&gt; [options]</span><br><span class=\"line\">ng xi18n &lt;project&gt; [options]</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇章介紹了許多 Angular CLI 的概念，我在剛接觸 Angular 的時候對 CLI 也是模模糊糊，雖然要真正了解 CLI 內部是如何操作的十分困難，但對於一般開發者而言只要懂的使用就可以了，上面也介紹了許多 CLI 的指令，但這只是冰山一角我只介紹了幾個我自己比較常用到的，有興趣或是有使用到的話也可以到 Angular 官網中查詢需要使用到的指令，希望今天的講解有讓你稍微了解一點什麼是 Angular CLI 也算使用 Angular 的第一步吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://itnext.io/how-to-install-and-use-the-angular-cli-ac8b5aae1d05\">How to install and use the Angular CLI</a></li>\n<li><a href=\"https://angular.io/cli\">Angular.io</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>大家都說”工欲善其事必先利其器”，在我們發開 Angular 時，必需了解一個非常好用的工具， “Angular CLI” ，而這篇文章將會介紹什麼是 Angular CLI、如何安裝與使用 Angular CLI以及一些其他該注意的事項以及常見的命令操作。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767FXInjTdVpO.png\"></p>","more":"<h1 id=\"What-is-the-Angular-CLI\"><a href=\"#What-is-the-Angular-CLI\" class=\"headerlink\" title=\"What is the Angular CLI ?\"></a>What is the Angular CLI ?</h1><p>在 Angular 的官方文檔中提到， Angular CLI 是 Angular 團隊創建的工具，用於管理、構建、維護和測試你的 Angular 專案。</p>\n<p>可能有些剛接觸前端的新手會覺得又要記一些指令覺得麻煩，實際上有一個 <a href=\"https://marketplace.visualstudio.com/items?itemName=sasxa-net.angular-gui\">Viisual Studio Code</a> 的擴展可以使用，它提供了一個 Angular CLI GUI 介面，可以讓你取代在終端機中輸入命令。</p>\n<p><img src=\"https://i.imgur.com/o8zEERJ.gif\" alt=\"img\"></p>\n<p>雖然有 GUI 介面可以使用，但是本篇章還是主要會介紹如何透過在終端機中下達命令來使用 Angular CLI，別放棄學習啊！！</p>\n<h1 id=\"Do-I-have-to-use-the-Angular-CLI\"><a href=\"#Do-I-have-to-use-the-Angular-CLI\" class=\"headerlink\" title=\"Do I have to use the Angular CLI ?\"></a>Do I have to use the Angular CLI ?</h1><p>現在我們知道了什麼是 Angular CLI，可能很多人都會問，既然他是自動幫開發著處理一些問題的，那我一定要用嗎？我可以不要這麼自動（？</p>\n<p>答案是當然可以，你可以再開發 Angular 的時候，無論創建、維護、測試等等的都用手動的方式建立或操作，但是你可能會變成…. foolish Angular developer (別篇文章說的下面會放連結，罵他不要罵我）。</p>\n<p>Angular CLI 存在的目的是為了讓開發者專心進行專案開發，它負責將麻煩與耗時的動作自動化，使用指令可以自動化生成一個基礎並帶有 .gitgnore( 用來告訴 git 應該忽略哪些 file ) 的 Angular app，其中包括 Angular 的核心部分比如 component, module 等等，除了創造 app 之外他還可以自動化進行 unit test、building和其他基本卻複雜的操作。</p>\n<p>所以說了這麼多，有沒有更想使用 Angular CLI 啦（不要說沒有！</p>\n<h1 id=\"How-to-install-the-Angular-CLI\"><a href=\"#How-to-install-the-Angular-CLI\" class=\"headerlink\" title=\"How to install the Angular CLI\"></a>How to install the Angular CLI</h1><p>終於要進入到安裝的環節了，在安裝 Angular CLI 之前比需要先安裝  <a href=\"https://node.js.org/\">Node.js</a> ，如果不想使用終端機命令安裝 Node.js 可以在 <a href=\"https://nodejs.org/en/download/\">Node.js 官網下載</a> 並進行安裝。</p>\n<p>當安裝完 Node.js 後，可以在終端中輸入指令正式安裝 Angular CLI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用 -g option 代表要在系統範圍內（全域）安裝特定的 npm module，如果沒有使用 -g option 則會安裝在當前目錄的 node_modules 中。</p>\n</blockquote>\n<p>如果你需要更新 Angular CLI 到最新版本則可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update -g @angular/cli</span><br></pre></td></tr></table></figure>\n\n<p>這樣就完成在全域中安裝 Angular CLI 的方式，這意味著你可以在你機器的任何地方使用它，有趣的是當創建一個 Angular app 時，CLI 也將安裝在本地，這意味著他也會安裝在你 Angular app 的 node_module 中，讓你可以在你的專案中使用 Angular CLI 的功能。</p>\n<h1 id=\"How-to-create-an-Angular-application-with-the-CLI\"><a href=\"#How-to-create-an-Angular-application-with-the-CLI\" class=\"headerlink\" title=\"How to create an Angular application with the CLI\"></a>How to create an Angular application with the CLI</h1><p>當要創建一個新的 Angular app 時，可以使用 Angular CLI 他可以自動且快速的建立所有需要的文件（如果手動創建可能要花一天的時間，那麼我們就來使用指令吧！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new MyApplicationName</span><br></pre></td></tr></table></figure>\n<p>當按下 enter 後你就可以悠閒的喝個咖啡聊個天等待他自動完成</p>\n<p>當 Angular CLI 在創建 App 的時候會問一些問題:</p>\n<ol>\n<li>是否需要設置 Router (y &#x2F; N) → 選擇 N 之後也可以手動加入 Router</li>\n<li>選擇想要的樣式格式 → 選擇要使用 CSS, SASS, SCSS 等不同的 style format<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767MZ8BUaS7ww.png\"></li>\n</ol>\n<p>當都選擇好後就可以等他完成啦～<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210727/20124767WZkErowhaO.png\"></p>\n<h1 id=\"CLI-command-language-syntax\"><a href=\"#CLI-command-language-syntax\" class=\"headerlink\" title=\"CLI command-language syntax\"></a>CLI command-language syntax</h1><p>在使用每一個程式語言的時候，都必須要注意他的語法，不然很容易造成出乎自己意料的結果，CLI syntax如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng commandNameOrAlias requiredArg [optionalArg] [options]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>大部分的 command 和一些 option 擁有別名，可以使用簡單的方式達到一樣的目的。</li>\n<li>使用雙破折號(—)放在 option 前面當作前綴，使用單破折號(-)放在 option 別名前面當作前綴，而參數沒有前綴。</li>\n<li>通常生成文件的名稱可以將它當作參數加在後面，也可以使用 —name 來指定文件名稱。</li>\n<li>參數和 option 名稱可以使用駝峰命名或破折號 → —myOpitonName &#x3D; —my-option-name</li>\n</ul>\n<h1 id=\"How-to-use-Angular-CLI\"><a href=\"#How-to-use-Angular-CLI\" class=\"headerlink\" title=\"How to use Angular CLI\"></a>How to use Angular CLI</h1><p>上面介紹了這麼多的 Angular CLI 來源、用途、語法等等，接下來就要進到最重要的環節，來介紹一些常用的 CLI 指令。</p>\n<h2 id=\"Create-Component\"><a href=\"#Create-Component\" class=\"headerlink\" title=\"Create Component\"></a>Create Component</h2><p>下面是創建一個新 Component 的 Angular CLI 指令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component MyComponentName -&gt; 完整</span><br><span class=\"line\">ng g c MyCompoenntName -&gt; 簡寫</span><br></pre></td></tr></table></figure>\n<p>如果你要將這個創建出來的 Component 歸屬於特定的 module 則可以使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component MyComponentName --module MyModuleName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-Module\"><a href=\"#Create-Module\" class=\"headerlink\" title=\"Create Module\"></a>Create Module</h2><p>在 Angular 中 Module 的觀念非常重要，他可以有效地模塊化你的程式，詳細的 Module 我們後面再慢慢介紹，這邊就先了解如何快速創建一個 Module 吧。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module MyModuleName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-pipes\"><a href=\"#Create-pipes\" class=\"headerlink\" title=\"Create pipes\"></a>Create pipes</h2><p>pipes 也是 Angular 一個重要的觀念，他可以將你的資料自動地進行轉換，一樣詳細的內容我們放到後面介紹，這邊一樣介紹如何快速建立 pipes。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate pipe MyPipeName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-Services\"><a href=\"#Create-Services\" class=\"headerlink\" title=\"Create Services\"></a>Create Services</h2><p>Services 在 Angular 中也是非常重要的，他可以有效地將畫面與計算邏輯分割開來，一樣詳細的內容我們放到後面介紹（瘋狂挖坑…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service MyServiceName</span><br></pre></td></tr></table></figure>\n<h2 id=\"Run-project\"><a href=\"#Run-project\" class=\"headerlink\" title=\"Run project\"></a>Run project</h2><p>當我們撰寫好了我們的 Angular 程式後，最重要的就是讓他跑起來，哪們就可以使用這個指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve &lt;project&gt; [options]</span><br><span class=\"line\">ng s &lt;project&gt; [options]</span><br></pre></td></tr></table></figure>\n<p>使用這個指令會自動 build 和 serve 你的 App，並且在你<code>更改內容儲存後重新構建</code>。</p>\n<h2 id=\"Building-project\"><a href=\"#Building-project\" class=\"headerlink\" title=\"Building project\"></a>Building project</h2><p>當我們撰寫好程式後，我們可以將我們寫的程式 build 好，以便做更多的處理，這時就可以使用這個指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng build &lt;project&gt; [options]</span><br><span class=\"line\">ng b &lt;project&gt; [options]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Extract-i18n\"><a href=\"#Extract-i18n\" class=\"headerlink\" title=\"Extract-i18n\"></a>Extract-i18n</h2><p>Angular 支持多語言的設計，後面會詳細講解 i18n 的使用方法，這邊一樣先介紹如何編譯 i18n</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng extract-i18n &lt;project&gt; [options]</span><br><span class=\"line\">ng i18n-extract &lt;project&gt; [options]</span><br><span class=\"line\">ng xi18n &lt;project&gt; [options]</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇章介紹了許多 Angular CLI 的概念，我在剛接觸 Angular 的時候對 CLI 也是模模糊糊，雖然要真正了解 CLI 內部是如何操作的十分困難，但對於一般開發者而言只要懂的使用就可以了，上面也介紹了許多 CLI 的指令，但這只是冰山一角我只介紹了幾個我自己比較常用到的，有興趣或是有使用到的話也可以到 Angular 官網中查詢需要使用到的指令，希望今天的講解有讓你稍微了解一點什麼是 Angular CLI 也算使用 Angular 的第一步吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://itnext.io/how-to-install-and-use-the-angular-cli-ac8b5aae1d05\">How to install and use the Angular CLI</a></li>\n<li><a href=\"https://angular.io/cli\">Angular.io</a></li>\n</ul>"},{"title":"Day3. angular.json","date":"2021-09-03T01:09:21.000Z","_content":"\n在上一篇中介紹了什麼是 Angular CLI 與他可以提供許多方便功能，不過只是大概介紹他的用法與他是什麼，要實際暸解到他背後的運行邏輯其實是滿複雜的，這邊就不詳細的講解（因為我也不太了解...\n\n不過說到 Angular CLI 就避免不了要介紹一下 Angular CLI 的控制塔 \" angular.json \"， angular.json 是位於 Angular workspace root level 的一個文件，主要是`提供 workspace 的配置與 project 的預設配置，供 Angular CLI 中 build 和 development tool 使用`。\n> A file named angular.json at the root level of an Angular workspace provides workspace-wide and project-specific configuration defaults for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to the root workspace folder.\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png)\n\n<!--more-->\n\n# Overall JSON structure\n大概講完 angular.json 是幹嘛的後接下來要分析一下 angular.json 的結構。\n\nangular.json 主要分為兩個區域： root 和 project。\n\nroot 的部分主要是關於 workspace 的一些信息，主要用於配置 workspace，你會在上面找到：\n\n- **version**：你的 workspace 配置版本\n- **newProjectRoot**：這是用於創建新項目的路徑，比如使用 ng generate application <name> 或 ng generate library <name>，那麼 Angular CLI 會藉由這個路徑知道要從哪裡生成 applicatioon 或 library。\n- **defaultProject**：這是在你使用 ng new <name> 時所創建的屬性，他對應著你創建這個項目時給定的初始名稱，如果在使用 Angular CLI 時沒有填入項目名稱，則會直接將這個屬性帶入，比如說你要執行 app 時所使用的 ng server <name>，你可以直接執行 ng server 而不會出錯的原因就是它會自動將名稱帶入變成 ng server my-app。\n- **projects**：這裡包含了你的 application 和 library 所有必要的訊息。\n- **schematics**：用於客製化 ng generation 命令的預設選項。\n\nproject 的部分包含 CLI 可以使用的特定訊息，你會在上面找到：\n\n- **root**：這是 project 相對於 workspace 的路徑。\n- **sourceroot**：這是包含當前項目 source file 的文件夾路徑。\n- **projectType**：可以是 application 或 library，CLI 需要知道專案類型，因為每種類型都有對應的需求與限制，比如說 library 需要被打包才能分發並且不能在與 application 相反的瀏覽器中提供服務。\n- **prefix**：這是當前項目 selectors 的前綴字串，當使用 ng generate component 時會將這個前綴字加在你的 component 前面，比如你的 prefix 這制為 gna，那麼使用 ng generate component hello-world 所創建出來的 component 的 selectors 就會是 \"gna-hello-world\"。\n- **schematics**：用於這是當前 project 中某些 schematics 所使用到的默認選項，比如你要將你專案的樣是從 CSS 變為 SCSS，就可以在這個屬性中添加 “styleext”:“scss”。\n- **architect**：為這個 project 各個 architect 提供預設值。\n\n下圖是一個簡單的 angular.json file，其中只有一個 build command。\n![https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png](https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png)\n\n\n# What is Architect ?\n可能看到這邊很多人都會覺得還可以，畢竟這些 property 大概都能了解在幹嘛而且也可以在自己的 Angular app 中找到對應的位置，但是！ \"Architect\" 這個到底是什麼？，可能對很多新手來說相當的複雜（我現在也迷迷糊糊，有說錯的話歡迎指正），接下來我們就來看看 Angular 官網是怎麼描述這個東西的。\n> Architect is the tool that the CLI uses to perform complex tasks, such as compilation and test running\n\nArchitect 是 CLI 用來執行複雜任務的工具，例如 compilation 和 test running，而 Architect 是一個 shell，它根據 target configuration 執行指定的 Builder 來執行給定的任務\n\n![https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png](https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png)\n\n可以把它看作是 `Angular CLI 與 builder 之間的 \"中間人\"`，Architect 是可以訪問或修改特定 builder 選項或添加選項配置的地方，`當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作`。\n\n\n\n# What is Builders ?\n大概了解 Architect 是什麼並且他在做什麼之後，那麼什麼是 Builders？， Builders 是 Architect 要處理特定任務時所運行的工具，通常他會對應到 npm package，例如 packageing your libreay 或 building，和 serving application。\n\n通常 builders 會接收兩個參數，一組輸入 option ( a JSON object )，和一個 context ( a BuilderContext object )，option object 由 CLI 使用者提供，而 context 由 CLI Builder API 提供。\n\nAngular 提供了一些由 CLI 用於 ng build 和 ng test 等命令的 builders，這些內建的 CLI Builders 可以在 angular.json 的 \"Architect\" 部分找到，當然你也可以當然你也可以使用 ng run <targetName>來自定你想要的 builders，不過這有點過於深入不在本章節的討論範圍。\n\n\n\n# Understanding the command mapping\n![https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png](https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png)\n\n正如我們前面所說的，當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作，所以當我們輸入了簡化的 command 後，實際上他會被 Architect 轉化成通用的 command : ng run projectName:architectTarget。\n\nExample: build: ng build... → ng run <projectName>:build\n\n知道了這一點後我們可以推敲一下這些命令在 Architect 轉換後會變成什麼：\n\n- build: ng build … → ng run my-app:build;\n- serve: ng serve … → ng run my-app:serve;\n- e2e: ng e2e … → ng run my-app:e2e;\n- test: ng test … → ng run my-app:test;\n- lint: ng lint … → ng run my-app:lint;\n- extract-i18n: ng xi18n … → ng run my-app:xi18n\n\n\n\n# Assets configuration\n在每一個 build target 中都可以有一個陣列，裡面可以放你想要的文件或文件夾，他會在你 build 專案的時候按照原樣複製一份，不會對他進行壓縮或打包，通常會把圖片放在這邊。\n```JSON\n\"assets\": [\n  \"src/assets\",\n  \"src/favicon.ico\"\n]\n```\n\n你可以把 Assets 的內容變為一個一個的物件，這樣相較於只有填入檔案名稱或路徑會更清楚與更清晰，將 Assets 的內容變為物件可以具有以下個 key：\n\n- glob：使用 node-glob 設置的基本目錄\n- input：相對於 root 目錄的路徑\n- output：相對於 outDir 的路徑，簡單來說就是 build 後存放的位置，預設是 dist / project-name\n- ignore：要排除的 glob 列表\n- followSymlinks：使否允許搜尋符號鏈接的子目錄，默認為 false\n\n舉個例子你可以使用這些 key 更詳細描述你的 asset 路徑：\n```JSON\n\"assets\": [\n  {\n    \"glob\": \"**/*\",\n    \"input\": \"src/assets/\",\n    \"output\": \"/assets/\"\n  },\n  {\n    \"glob\": \"favicon.ico\",\n    \"input\": \"src/\",\n    \"output\": \"/\"\n  }\n]\n```\n\n\n\n# 結論\n在本篇文章中大概了解的 angular.json 是個什麼東西，了解他與 Angular CLI 之間的關係，也大概個介紹了什麼是 Architect 與 builders ，不過都只是稍微講解一下概念並沒有太過深入鑽研他背後的運作原理，不過還是大概總結一下：\n\n- angular.json 是 Angular CLI 的控制塔，它提供了 Angular workspace 和 project 的預設配置。\n- 講解了一些 angular.json 的資料架構。\n- 什麼是 Architect 和 Builders 與他們之間的關係。\n- Angular CLI 是如何透過 Architect 解析命令的。\n- 如何透過 assets 在打包專案時複製完整的資料。\n\n\n# Reference\n- [Angular CLI — Demystifying the workspace](https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb)\n- [Angular.io](https://angular.io/guide/workspace-config)\n\n","source":"_posts/Angular/angular-03.md","raw":"---\ntitle: Day3. angular.json\ndate: 2021-09-03 09:09:21\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一篇中介紹了什麼是 Angular CLI 與他可以提供許多方便功能，不過只是大概介紹他的用法與他是什麼，要實際暸解到他背後的運行邏輯其實是滿複雜的，這邊就不詳細的講解（因為我也不太了解...\n\n不過說到 Angular CLI 就避免不了要介紹一下 Angular CLI 的控制塔 \" angular.json \"， angular.json 是位於 Angular workspace root level 的一個文件，主要是`提供 workspace 的配置與 project 的預設配置，供 Angular CLI 中 build 和 development tool 使用`。\n> A file named angular.json at the root level of an Angular workspace provides workspace-wide and project-specific configuration defaults for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to the root workspace folder.\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png)\n\n<!--more-->\n\n# Overall JSON structure\n大概講完 angular.json 是幹嘛的後接下來要分析一下 angular.json 的結構。\n\nangular.json 主要分為兩個區域： root 和 project。\n\nroot 的部分主要是關於 workspace 的一些信息，主要用於配置 workspace，你會在上面找到：\n\n- **version**：你的 workspace 配置版本\n- **newProjectRoot**：這是用於創建新項目的路徑，比如使用 ng generate application <name> 或 ng generate library <name>，那麼 Angular CLI 會藉由這個路徑知道要從哪裡生成 applicatioon 或 library。\n- **defaultProject**：這是在你使用 ng new <name> 時所創建的屬性，他對應著你創建這個項目時給定的初始名稱，如果在使用 Angular CLI 時沒有填入項目名稱，則會直接將這個屬性帶入，比如說你要執行 app 時所使用的 ng server <name>，你可以直接執行 ng server 而不會出錯的原因就是它會自動將名稱帶入變成 ng server my-app。\n- **projects**：這裡包含了你的 application 和 library 所有必要的訊息。\n- **schematics**：用於客製化 ng generation 命令的預設選項。\n\nproject 的部分包含 CLI 可以使用的特定訊息，你會在上面找到：\n\n- **root**：這是 project 相對於 workspace 的路徑。\n- **sourceroot**：這是包含當前項目 source file 的文件夾路徑。\n- **projectType**：可以是 application 或 library，CLI 需要知道專案類型，因為每種類型都有對應的需求與限制，比如說 library 需要被打包才能分發並且不能在與 application 相反的瀏覽器中提供服務。\n- **prefix**：這是當前項目 selectors 的前綴字串，當使用 ng generate component 時會將這個前綴字加在你的 component 前面，比如你的 prefix 這制為 gna，那麼使用 ng generate component hello-world 所創建出來的 component 的 selectors 就會是 \"gna-hello-world\"。\n- **schematics**：用於這是當前 project 中某些 schematics 所使用到的默認選項，比如你要將你專案的樣是從 CSS 變為 SCSS，就可以在這個屬性中添加 “styleext”:“scss”。\n- **architect**：為這個 project 各個 architect 提供預設值。\n\n下圖是一個簡單的 angular.json file，其中只有一個 build command。\n![https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png](https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png)\n\n\n# What is Architect ?\n可能看到這邊很多人都會覺得還可以，畢竟這些 property 大概都能了解在幹嘛而且也可以在自己的 Angular app 中找到對應的位置，但是！ \"Architect\" 這個到底是什麼？，可能對很多新手來說相當的複雜（我現在也迷迷糊糊，有說錯的話歡迎指正），接下來我們就來看看 Angular 官網是怎麼描述這個東西的。\n> Architect is the tool that the CLI uses to perform complex tasks, such as compilation and test running\n\nArchitect 是 CLI 用來執行複雜任務的工具，例如 compilation 和 test running，而 Architect 是一個 shell，它根據 target configuration 執行指定的 Builder 來執行給定的任務\n\n![https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png](https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png)\n\n可以把它看作是 `Angular CLI 與 builder 之間的 \"中間人\"`，Architect 是可以訪問或修改特定 builder 選項或添加選項配置的地方，`當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作`。\n\n\n\n# What is Builders ?\n大概了解 Architect 是什麼並且他在做什麼之後，那麼什麼是 Builders？， Builders 是 Architect 要處理特定任務時所運行的工具，通常他會對應到 npm package，例如 packageing your libreay 或 building，和 serving application。\n\n通常 builders 會接收兩個參數，一組輸入 option ( a JSON object )，和一個 context ( a BuilderContext object )，option object 由 CLI 使用者提供，而 context 由 CLI Builder API 提供。\n\nAngular 提供了一些由 CLI 用於 ng build 和 ng test 等命令的 builders，這些內建的 CLI Builders 可以在 angular.json 的 \"Architect\" 部分找到，當然你也可以當然你也可以使用 ng run <targetName>來自定你想要的 builders，不過這有點過於深入不在本章節的討論範圍。\n\n\n\n# Understanding the command mapping\n![https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png](https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png)\n\n正如我們前面所說的，當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作，所以當我們輸入了簡化的 command 後，實際上他會被 Architect 轉化成通用的 command : ng run projectName:architectTarget。\n\nExample: build: ng build... → ng run <projectName>:build\n\n知道了這一點後我們可以推敲一下這些命令在 Architect 轉換後會變成什麼：\n\n- build: ng build … → ng run my-app:build;\n- serve: ng serve … → ng run my-app:serve;\n- e2e: ng e2e … → ng run my-app:e2e;\n- test: ng test … → ng run my-app:test;\n- lint: ng lint … → ng run my-app:lint;\n- extract-i18n: ng xi18n … → ng run my-app:xi18n\n\n\n\n# Assets configuration\n在每一個 build target 中都可以有一個陣列，裡面可以放你想要的文件或文件夾，他會在你 build 專案的時候按照原樣複製一份，不會對他進行壓縮或打包，通常會把圖片放在這邊。\n```JSON\n\"assets\": [\n  \"src/assets\",\n  \"src/favicon.ico\"\n]\n```\n\n你可以把 Assets 的內容變為一個一個的物件，這樣相較於只有填入檔案名稱或路徑會更清楚與更清晰，將 Assets 的內容變為物件可以具有以下個 key：\n\n- glob：使用 node-glob 設置的基本目錄\n- input：相對於 root 目錄的路徑\n- output：相對於 outDir 的路徑，簡單來說就是 build 後存放的位置，預設是 dist / project-name\n- ignore：要排除的 glob 列表\n- followSymlinks：使否允許搜尋符號鏈接的子目錄，默認為 false\n\n舉個例子你可以使用這些 key 更詳細描述你的 asset 路徑：\n```JSON\n\"assets\": [\n  {\n    \"glob\": \"**/*\",\n    \"input\": \"src/assets/\",\n    \"output\": \"/assets/\"\n  },\n  {\n    \"glob\": \"favicon.ico\",\n    \"input\": \"src/\",\n    \"output\": \"/\"\n  }\n]\n```\n\n\n\n# 結論\n在本篇文章中大概了解的 angular.json 是個什麼東西，了解他與 Angular CLI 之間的關係，也大概個介紹了什麼是 Architect 與 builders ，不過都只是稍微講解一下概念並沒有太過深入鑽研他背後的運作原理，不過還是大概總結一下：\n\n- angular.json 是 Angular CLI 的控制塔，它提供了 Angular workspace 和 project 的預設配置。\n- 講解了一些 angular.json 的資料架構。\n- 什麼是 Architect 和 Builders 與他們之間的關係。\n- Angular CLI 是如何透過 Architect 解析命令的。\n- 如何透過 assets 在打包專案時複製完整的資料。\n\n\n# Reference\n- [Angular CLI — Demystifying the workspace](https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb)\n- [Angular.io](https://angular.io/guide/workspace-config)\n\n","slug":"Angular/angular-03","published":1,"updated":"2022-02-16T01:22:00.292Z","_id":"ckznurmni0008kww31ns71pgf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在上一篇中介紹了什麼是 Angular CLI 與他可以提供許多方便功能，不過只是大概介紹他的用法與他是什麼，要實際暸解到他背後的運行邏輯其實是滿複雜的，這邊就不詳細的講解（因為我也不太了解…</p>\n<p>不過說到 Angular CLI 就避免不了要介紹一下 Angular CLI 的控制塔 “ angular.json “， angular.json 是位於 Angular workspace root level 的一個文件，主要是<code>提供 workspace 的配置與 project 的預設配置，供 Angular CLI 中 build 和 development tool 使用</code>。</p>\n<blockquote>\n<p>A file named angular.json at the root level of an Angular workspace provides workspace-wide and project-specific configuration defaults for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to the root workspace folder.</p>\n</blockquote>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Overall-JSON-structure\"><a href=\"#Overall-JSON-structure\" class=\"headerlink\" title=\"Overall JSON structure\"></a>Overall JSON structure</h1><p>大概講完 angular.json 是幹嘛的後接下來要分析一下 angular.json 的結構。</p>\n<p>angular.json 主要分為兩個區域： root 和 project。</p>\n<p>root 的部分主要是關於 workspace 的一些信息，主要用於配置 workspace，你會在上面找到：</p>\n<ul>\n<li><strong>version</strong>：你的 workspace 配置版本</li>\n<li><strong>newProjectRoot</strong>：這是用於創建新項目的路徑，比如使用 ng generate application <name> 或 ng generate library <name>，那麼 Angular CLI 會藉由這個路徑知道要從哪裡生成 applicatioon 或 library。</li>\n<li><strong>defaultProject</strong>：這是在你使用 ng new <name> 時所創建的屬性，他對應著你創建這個項目時給定的初始名稱，如果在使用 Angular CLI 時沒有填入項目名稱，則會直接將這個屬性帶入，比如說你要執行 app 時所使用的 ng server <name>，你可以直接執行 ng server 而不會出錯的原因就是它會自動將名稱帶入變成 ng server my-app。</li>\n<li><strong>projects</strong>：這裡包含了你的 application 和 library 所有必要的訊息。</li>\n<li><strong>schematics</strong>：用於客製化 ng generation 命令的預設選項。</li>\n</ul>\n<p>project 的部分包含 CLI 可以使用的特定訊息，你會在上面找到：</p>\n<ul>\n<li><strong>root</strong>：這是 project 相對於 workspace 的路徑。</li>\n<li><strong>sourceroot</strong>：這是包含當前項目 source file 的文件夾路徑。</li>\n<li><strong>projectType</strong>：可以是 application 或 library，CLI 需要知道專案類型，因為每種類型都有對應的需求與限制，比如說 library 需要被打包才能分發並且不能在與 application 相反的瀏覽器中提供服務。</li>\n<li><strong>prefix</strong>：這是當前項目 selectors 的前綴字串，當使用 ng generate component 時會將這個前綴字加在你的 component 前面，比如你的 prefix 這制為 gna，那麼使用 ng generate component hello-world 所創建出來的 component 的 selectors 就會是 “gna-hello-world”。</li>\n<li><strong>schematics</strong>：用於這是當前 project 中某些 schematics 所使用到的默認選項，比如你要將你專案的樣是從 CSS 變為 SCSS，就可以在這個屬性中添加 “styleext”:“scss”。</li>\n<li><strong>architect</strong>：為這個 project 各個 architect 提供預設值。</li>\n</ul>\n<p>下圖是一個簡單的 angular.json file，其中只有一個 build command。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png\"></p>\n<h1 id=\"What-is-Architect\"><a href=\"#What-is-Architect\" class=\"headerlink\" title=\"What is Architect ?\"></a>What is Architect ?</h1><p>可能看到這邊很多人都會覺得還可以，畢竟這些 property 大概都能了解在幹嘛而且也可以在自己的 Angular app 中找到對應的位置，但是！ “Architect” 這個到底是什麼？，可能對很多新手來說相當的複雜（我現在也迷迷糊糊，有說錯的話歡迎指正），接下來我們就來看看 Angular 官網是怎麼描述這個東西的。</p>\n<blockquote>\n<p>Architect is the tool that the CLI uses to perform complex tasks, such as compilation and test running</p>\n</blockquote>\n<p>Architect 是 CLI 用來執行複雜任務的工具，例如 compilation 和 test running，而 Architect 是一個 shell，它根據 target configuration 執行指定的 Builder 來執行給定的任務</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png\"></p>\n<p>可以把它看作是 <code>Angular CLI 與 builder 之間的 &quot;中間人&quot;</code>，Architect 是可以訪問或修改特定 builder 選項或添加選項配置的地方，<code>當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作</code>。</p>\n<h1 id=\"What-is-Builders\"><a href=\"#What-is-Builders\" class=\"headerlink\" title=\"What is Builders ?\"></a>What is Builders ?</h1><p>大概了解 Architect 是什麼並且他在做什麼之後，那麼什麼是 Builders？， Builders 是 Architect 要處理特定任務時所運行的工具，通常他會對應到 npm package，例如 packageing your libreay 或 building，和 serving application。</p>\n<p>通常 builders 會接收兩個參數，一組輸入 option ( a JSON object )，和一個 context ( a BuilderContext object )，option object 由 CLI 使用者提供，而 context 由 CLI Builder API 提供。</p>\n<p>Angular 提供了一些由 CLI 用於 ng build 和 ng test 等命令的 builders，這些內建的 CLI Builders 可以在 angular.json 的 “Architect” 部分找到，當然你也可以當然你也可以使用 ng run <targetName>來自定你想要的 builders，不過這有點過於深入不在本章節的討論範圍。</p>\n<h1 id=\"Understanding-the-command-mapping\"><a href=\"#Understanding-the-command-mapping\" class=\"headerlink\" title=\"Understanding the command mapping\"></a>Understanding the command mapping</h1><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png\"></p>\n<p>正如我們前面所說的，當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作，所以當我們輸入了簡化的 command 後，實際上他會被 Architect 轉化成通用的 command : ng run projectName:architectTarget。</p>\n<p>Example: build: ng build… → ng run <projectName>:build</p>\n<p>知道了這一點後我們可以推敲一下這些命令在 Architect 轉換後會變成什麼：</p>\n<ul>\n<li>build: ng build … → ng run my-app:build;</li>\n<li>serve: ng serve … → ng run my-app:serve;</li>\n<li>e2e: ng e2e … → ng run my-app:e2e;</li>\n<li>test: ng test … → ng run my-app:test;</li>\n<li>lint: ng lint … → ng run my-app:lint;</li>\n<li>extract-i18n: ng xi18n … → ng run my-app:xi18n</li>\n</ul>\n<h1 id=\"Assets-configuration\"><a href=\"#Assets-configuration\" class=\"headerlink\" title=\"Assets configuration\"></a>Assets configuration</h1><p>在每一個 build target 中都可以有一個陣列，裡面可以放你想要的文件或文件夾，他會在你 build 專案的時候按照原樣複製一份，不會對他進行壓縮或打包，通常會把圖片放在這邊。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;src/assets&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;src/favicon.ico&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以把 Assets 的內容變為一個一個的物件，這樣相較於只有填入檔案名稱或路徑會更清楚與更清晰，將 Assets 的內容變為物件可以具有以下個 key：</p>\n<ul>\n<li>glob：使用 node-glob 設置的基本目錄</li>\n<li>input：相對於 root 目錄的路徑</li>\n<li>output：相對於 outDir 的路徑，簡單來說就是 build 後存放的位置，預設是 dist &#x2F; project-name</li>\n<li>ignore：要排除的 glob 列表</li>\n<li>followSymlinks：使否允許搜尋符號鏈接的子目錄，默認為 false</li>\n</ul>\n<p>舉個例子你可以使用這些 key 更詳細描述你的 asset 路徑：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;glob&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;input&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src/assets/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;output&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/assets/&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;glob&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;favicon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;input&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;output&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本篇文章中大概了解的 angular.json 是個什麼東西，了解他與 Angular CLI 之間的關係，也大概個介紹了什麼是 Architect 與 builders ，不過都只是稍微講解一下概念並沒有太過深入鑽研他背後的運作原理，不過還是大概總結一下：</p>\n<ul>\n<li>angular.json 是 Angular CLI 的控制塔，它提供了 Angular workspace 和 project 的預設配置。</li>\n<li>講解了一些 angular.json 的資料架構。</li>\n<li>什麼是 Architect 和 Builders 與他們之間的關係。</li>\n<li>Angular CLI 是如何透過 Architect 解析命令的。</li>\n<li>如何透過 assets 在打包專案時複製完整的資料。</li>\n</ul>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb\">Angular CLI — Demystifying the workspace</a></li>\n<li><a href=\"https://angular.io/guide/workspace-config\">Angular.io</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一篇中介紹了什麼是 Angular CLI 與他可以提供許多方便功能，不過只是大概介紹他的用法與他是什麼，要實際暸解到他背後的運行邏輯其實是滿複雜的，這邊就不詳細的講解（因為我也不太了解…</p>\n<p>不過說到 Angular CLI 就避免不了要介紹一下 Angular CLI 的控制塔 “ angular.json “， angular.json 是位於 Angular workspace root level 的一個文件，主要是<code>提供 workspace 的配置與 project 的預設配置，供 Angular CLI 中 build 和 development tool 使用</code>。</p>\n<blockquote>\n<p>A file named angular.json at the root level of an Angular workspace provides workspace-wide and project-specific configuration defaults for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to the root workspace folder.</p>\n</blockquote>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767GwY7OIYgvq.png\"></p>","more":"<h1 id=\"Overall-JSON-structure\"><a href=\"#Overall-JSON-structure\" class=\"headerlink\" title=\"Overall JSON structure\"></a>Overall JSON structure</h1><p>大概講完 angular.json 是幹嘛的後接下來要分析一下 angular.json 的結構。</p>\n<p>angular.json 主要分為兩個區域： root 和 project。</p>\n<p>root 的部分主要是關於 workspace 的一些信息，主要用於配置 workspace，你會在上面找到：</p>\n<ul>\n<li><strong>version</strong>：你的 workspace 配置版本</li>\n<li><strong>newProjectRoot</strong>：這是用於創建新項目的路徑，比如使用 ng generate application <name> 或 ng generate library <name>，那麼 Angular CLI 會藉由這個路徑知道要從哪裡生成 applicatioon 或 library。</li>\n<li><strong>defaultProject</strong>：這是在你使用 ng new <name> 時所創建的屬性，他對應著你創建這個項目時給定的初始名稱，如果在使用 Angular CLI 時沒有填入項目名稱，則會直接將這個屬性帶入，比如說你要執行 app 時所使用的 ng server <name>，你可以直接執行 ng server 而不會出錯的原因就是它會自動將名稱帶入變成 ng server my-app。</li>\n<li><strong>projects</strong>：這裡包含了你的 application 和 library 所有必要的訊息。</li>\n<li><strong>schematics</strong>：用於客製化 ng generation 命令的預設選項。</li>\n</ul>\n<p>project 的部分包含 CLI 可以使用的特定訊息，你會在上面找到：</p>\n<ul>\n<li><strong>root</strong>：這是 project 相對於 workspace 的路徑。</li>\n<li><strong>sourceroot</strong>：這是包含當前項目 source file 的文件夾路徑。</li>\n<li><strong>projectType</strong>：可以是 application 或 library，CLI 需要知道專案類型，因為每種類型都有對應的需求與限制，比如說 library 需要被打包才能分發並且不能在與 application 相反的瀏覽器中提供服務。</li>\n<li><strong>prefix</strong>：這是當前項目 selectors 的前綴字串，當使用 ng generate component 時會將這個前綴字加在你的 component 前面，比如你的 prefix 這制為 gna，那麼使用 ng generate component hello-world 所創建出來的 component 的 selectors 就會是 “gna-hello-world”。</li>\n<li><strong>schematics</strong>：用於這是當前 project 中某些 schematics 所使用到的默認選項，比如你要將你專案的樣是從 CSS 變為 SCSS，就可以在這個屬性中添加 “styleext”:“scss”。</li>\n<li><strong>architect</strong>：為這個 project 各個 architect 提供預設值。</li>\n</ul>\n<p>下圖是一個簡單的 angular.json file，其中只有一個 build command。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767znwvhlEFXA.png\"></p>\n<h1 id=\"What-is-Architect\"><a href=\"#What-is-Architect\" class=\"headerlink\" title=\"What is Architect ?\"></a>What is Architect ?</h1><p>可能看到這邊很多人都會覺得還可以，畢竟這些 property 大概都能了解在幹嘛而且也可以在自己的 Angular app 中找到對應的位置，但是！ “Architect” 這個到底是什麼？，可能對很多新手來說相當的複雜（我現在也迷迷糊糊，有說錯的話歡迎指正），接下來我們就來看看 Angular 官網是怎麼描述這個東西的。</p>\n<blockquote>\n<p>Architect is the tool that the CLI uses to perform complex tasks, such as compilation and test running</p>\n</blockquote>\n<p>Architect 是 CLI 用來執行複雜任務的工具，例如 compilation 和 test running，而 Architect 是一個 shell，它根據 target configuration 執行指定的 Builder 來執行給定的任務</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767ZvVJbw5arN.png\"></p>\n<p>可以把它看作是 <code>Angular CLI 與 builder 之間的 &quot;中間人&quot;</code>，Architect 是可以訪問或修改特定 builder 選項或添加選項配置的地方，<code>當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作</code>。</p>\n<h1 id=\"What-is-Builders\"><a href=\"#What-is-Builders\" class=\"headerlink\" title=\"What is Builders ?\"></a>What is Builders ?</h1><p>大概了解 Architect 是什麼並且他在做什麼之後，那麼什麼是 Builders？， Builders 是 Architect 要處理特定任務時所運行的工具，通常他會對應到 npm package，例如 packageing your libreay 或 building，和 serving application。</p>\n<p>通常 builders 會接收兩個參數，一組輸入 option ( a JSON object )，和一個 context ( a BuilderContext object )，option object 由 CLI 使用者提供，而 context 由 CLI Builder API 提供。</p>\n<p>Angular 提供了一些由 CLI 用於 ng build 和 ng test 等命令的 builders，這些內建的 CLI Builders 可以在 angular.json 的 “Architect” 部分找到，當然你也可以當然你也可以使用 ng run <targetName>來自定你想要的 builders，不過這有點過於深入不在本章節的討論範圍。</p>\n<h1 id=\"Understanding-the-command-mapping\"><a href=\"#Understanding-the-command-mapping\" class=\"headerlink\" title=\"Understanding the command mapping\"></a>Understanding the command mapping</h1><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210729/20124767Stj9kOMC1l.png\"></p>\n<p>正如我們前面所說的，當你輸入 command 後 Architect 會對 command 進行分析、解析最後對正確的 builder 執行請求操作，所以當我們輸入了簡化的 command 後，實際上他會被 Architect 轉化成通用的 command : ng run projectName:architectTarget。</p>\n<p>Example: build: ng build… → ng run <projectName>:build</p>\n<p>知道了這一點後我們可以推敲一下這些命令在 Architect 轉換後會變成什麼：</p>\n<ul>\n<li>build: ng build … → ng run my-app:build;</li>\n<li>serve: ng serve … → ng run my-app:serve;</li>\n<li>e2e: ng e2e … → ng run my-app:e2e;</li>\n<li>test: ng test … → ng run my-app:test;</li>\n<li>lint: ng lint … → ng run my-app:lint;</li>\n<li>extract-i18n: ng xi18n … → ng run my-app:xi18n</li>\n</ul>\n<h1 id=\"Assets-configuration\"><a href=\"#Assets-configuration\" class=\"headerlink\" title=\"Assets configuration\"></a>Assets configuration</h1><p>在每一個 build target 中都可以有一個陣列，裡面可以放你想要的文件或文件夾，他會在你 build 專案的時候按照原樣複製一份，不會對他進行壓縮或打包，通常會把圖片放在這邊。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;src/assets&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;src/favicon.ico&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以把 Assets 的內容變為一個一個的物件，這樣相較於只有填入檔案名稱或路徑會更清楚與更清晰，將 Assets 的內容變為物件可以具有以下個 key：</p>\n<ul>\n<li>glob：使用 node-glob 設置的基本目錄</li>\n<li>input：相對於 root 目錄的路徑</li>\n<li>output：相對於 outDir 的路徑，簡單來說就是 build 後存放的位置，預設是 dist &#x2F; project-name</li>\n<li>ignore：要排除的 glob 列表</li>\n<li>followSymlinks：使否允許搜尋符號鏈接的子目錄，默認為 false</li>\n</ul>\n<p>舉個例子你可以使用這些 key 更詳細描述你的 asset 路徑：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;glob&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;input&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src/assets/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;output&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/assets/&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;glob&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;favicon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;input&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;output&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本篇文章中大概了解的 angular.json 是個什麼東西，了解他與 Angular CLI 之間的關係，也大概個介紹了什麼是 Architect 與 builders ，不過都只是稍微講解一下概念並沒有太過深入鑽研他背後的運作原理，不過還是大概總結一下：</p>\n<ul>\n<li>angular.json 是 Angular CLI 的控制塔，它提供了 Angular workspace 和 project 的預設配置。</li>\n<li>講解了一些 angular.json 的資料架構。</li>\n<li>什麼是 Architect 和 Builders 與他們之間的關係。</li>\n<li>Angular CLI 是如何透過 Architect 解析命令的。</li>\n<li>如何透過 assets 在打包專案時複製完整的資料。</li>\n</ul>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb\">Angular CLI — Demystifying the workspace</a></li>\n<li><a href=\"https://angular.io/guide/workspace-config\">Angular.io</a></li>\n</ul>"},{"title":"Day4. Component","date":"2021-09-04T05:25:45.000Z","_content":"\n講完前面幾張比較偏向原理與不常使用到的章節後，從這章節開始會介紹比較實際運用的東西。\n\n就像在 Day1 所提到的，`Angular app 是由無數個大大小小的 Component 所組合而成的`，也可以說 Angular app 的基本單位就是 Component，所以 Component 在 Angular 中是非常重要的觀念，每個 Component 都包含著：\n\n- 一個 HTML Template，用於將 Component 的內容顯示在 UI 上。\n- 一個 TypeScript 的 Class\n- 一個 selector，用於定義這個 Component 如何在別的 Component 中被使用。\n- 一個 CSS style 的檔案，用於決定這個 Component 在 UI 上呈現的樣式。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png)\n\n<!--more-->\n\n# Create a component\n在介紹什麼是 Component 之前，最重要的就是先創建一個 Component 出來，最簡單的方法就是使用 Angular CLI 來自動創建，當然你也可以手動新增檔案然後把所有需要的訊息補上\n\n要自動化創造一個新的 Component，首先要在終端機中輸入 Angular CLI Command\n```bash\nng generate component <component-name>\nng g c <component-name>\n```\n\n在默認情況下，會自動創建出：\n\n- 以 component-name 所命名的資料夾\n- 一個 component file,  <component-name>.component.ts\n- 一個 HTML Template file,  <component-name>.component.html\n- 一個 CSS file,  <component-name>.component.css\n- 一個測試規範文件,  <component-name>.component.spec.ts\n\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png)\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png)\n\n\n# Specifying a component's CSS selector\n每一個 Component 都需要一個 CSS Selector，這個 selector 會讓 Angular 知道他應該要在哪裡找到訊息並將他實例化，簡單來說可以把它當成這個 Component 在 Angular 的`身份證號碼`，當 Angular 在 HTML 中發現這個身份證號碼後，他就會知道該去哪裡把這個 Component 給實例化。\n\n舉個例子，如果今天有一個 component 叫做 hello-world.component.ts，他的 selector 叫 app-hello-world，所以每當 Angular 在任何一個 HTML Template 中出現時，他就知道要去把 hello-world.component.ts 這個 Component 給實例化。\n\n```typescript\n@Component({\n  selector: 'app-hello-world',\n})\n```\n\n\n# Defining a component's template\n在了解 Angular 是如何透過 selector 找到對應的 Component 並將他實例化後，接下來介紹的是\n\nTemplate，他其實就是一個 HTML，它告訴 Angular 要把這個 Component 如何呈現在 UI 上，可以通過兩種方法定義 Template，第一種是引用外部文件，第二種是直接將你的 HTML 寫在 Component 中。\n \n- 引用外部文件\n``` typescript\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n})\n```\n- 直接寫 HTML 在 Component 中\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  template: '<h1>Hello World!</h1>',\n})\n```\n除了使用 ( ' ' ) 包裹著 HTML Tag 之外，也可以使用反引號 ( ` ) 一次輸入多個 Tag\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  template: `\n\t  <h1>Hello World!</h1>\n\t  <p>This template definition spans multiple lines.</p>\n\t`,\n})\n```\n\n兩種方法都可以設定你的 HTML Template，但是要注意，如果使用`外部文件的話是使用 templateUrl`，而`直接填入 HTML Tag 則是使用 template`。\n\n\n\n# Declaring a component's styles\n有了身份證號碼有了畫面接下來就要讓畫面多一點美感，這時候就需要使用 CSS 來美化我們的 UI，和 Template 一樣可以透過兩種方式聲明 CSS，第一是引用外部文件，第二是直接寫在 Component 中。\n\n- 引用外部文件\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: [ './hello-world.component.css' ]\n})\n```\n- 直接寫在 Component 中\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  template: '<h1>Hello World!</h1>',\n\tstyles: [ 'h1 { font-weight: normal; }' ]\n})\n```\nStyle 與 Template 一樣，如果是`引用外部文件是使用 styleUrls`，而`直接寫在 Component 中是使用styles`。\n\n\n# 結論\n本章節比較輕鬆一點，介紹了如何創建一個新的 Component，並瞭解一個 component 是由哪些元素組成，並且這些元素是代表什麼，下一篇我們會介紹 Component 的 Lifecycle，是在開發 Angular App 中非常常使用到的觀念，那我們就下篇再見吧。\n\n\n# Reference\n- [Angular.io - Component-overview](https://angular.io/guide/component-overview)\n","source":"_posts/Angular/angular-04.md","raw":"---\ntitle: Day4. Component\ndate: 2021-09-04 13:25:45\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n講完前面幾張比較偏向原理與不常使用到的章節後，從這章節開始會介紹比較實際運用的東西。\n\n就像在 Day1 所提到的，`Angular app 是由無數個大大小小的 Component 所組合而成的`，也可以說 Angular app 的基本單位就是 Component，所以 Component 在 Angular 中是非常重要的觀念，每個 Component 都包含著：\n\n- 一個 HTML Template，用於將 Component 的內容顯示在 UI 上。\n- 一個 TypeScript 的 Class\n- 一個 selector，用於定義這個 Component 如何在別的 Component 中被使用。\n- 一個 CSS style 的檔案，用於決定這個 Component 在 UI 上呈現的樣式。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png)\n\n<!--more-->\n\n# Create a component\n在介紹什麼是 Component 之前，最重要的就是先創建一個 Component 出來，最簡單的方法就是使用 Angular CLI 來自動創建，當然你也可以手動新增檔案然後把所有需要的訊息補上\n\n要自動化創造一個新的 Component，首先要在終端機中輸入 Angular CLI Command\n```bash\nng generate component <component-name>\nng g c <component-name>\n```\n\n在默認情況下，會自動創建出：\n\n- 以 component-name 所命名的資料夾\n- 一個 component file,  <component-name>.component.ts\n- 一個 HTML Template file,  <component-name>.component.html\n- 一個 CSS file,  <component-name>.component.css\n- 一個測試規範文件,  <component-name>.component.spec.ts\n\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png)\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png)\n\n\n# Specifying a component's CSS selector\n每一個 Component 都需要一個 CSS Selector，這個 selector 會讓 Angular 知道他應該要在哪裡找到訊息並將他實例化，簡單來說可以把它當成這個 Component 在 Angular 的`身份證號碼`，當 Angular 在 HTML 中發現這個身份證號碼後，他就會知道該去哪裡把這個 Component 給實例化。\n\n舉個例子，如果今天有一個 component 叫做 hello-world.component.ts，他的 selector 叫 app-hello-world，所以每當 Angular 在任何一個 HTML Template 中出現時，他就知道要去把 hello-world.component.ts 這個 Component 給實例化。\n\n```typescript\n@Component({\n  selector: 'app-hello-world',\n})\n```\n\n\n# Defining a component's template\n在了解 Angular 是如何透過 selector 找到對應的 Component 並將他實例化後，接下來介紹的是\n\nTemplate，他其實就是一個 HTML，它告訴 Angular 要把這個 Component 如何呈現在 UI 上，可以通過兩種方法定義 Template，第一種是引用外部文件，第二種是直接將你的 HTML 寫在 Component 中。\n \n- 引用外部文件\n``` typescript\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n})\n```\n- 直接寫 HTML 在 Component 中\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  template: '<h1>Hello World!</h1>',\n})\n```\n除了使用 ( ' ' ) 包裹著 HTML Tag 之外，也可以使用反引號 ( ` ) 一次輸入多個 Tag\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  template: `\n\t  <h1>Hello World!</h1>\n\t  <p>This template definition spans multiple lines.</p>\n\t`,\n})\n```\n\n兩種方法都可以設定你的 HTML Template，但是要注意，如果使用`外部文件的話是使用 templateUrl`，而`直接填入 HTML Tag 則是使用 template`。\n\n\n\n# Declaring a component's styles\n有了身份證號碼有了畫面接下來就要讓畫面多一點美感，這時候就需要使用 CSS 來美化我們的 UI，和 Template 一樣可以透過兩種方式聲明 CSS，第一是引用外部文件，第二是直接寫在 Component 中。\n\n- 引用外部文件\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: [ './hello-world.component.css' ]\n})\n```\n- 直接寫在 Component 中\n```typescript\n@Component({\n  selector: 'app-hello-world',\n  template: '<h1>Hello World!</h1>',\n\tstyles: [ 'h1 { font-weight: normal; }' ]\n})\n```\nStyle 與 Template 一樣，如果是`引用外部文件是使用 styleUrls`，而`直接寫在 Component 中是使用styles`。\n\n\n# 結論\n本章節比較輕鬆一點，介紹了如何創建一個新的 Component，並瞭解一個 component 是由哪些元素組成，並且這些元素是代表什麼，下一篇我們會介紹 Component 的 Lifecycle，是在開發 Angular App 中非常常使用到的觀念，那我們就下篇再見吧。\n\n\n# Reference\n- [Angular.io - Component-overview](https://angular.io/guide/component-overview)\n","slug":"Angular/angular-04","published":1,"updated":"2022-02-16T01:22:16.979Z","_id":"ckznurmnj0009kww3b3tea85s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>講完前面幾張比較偏向原理與不常使用到的章節後，從這章節開始會介紹比較實際運用的東西。</p>\n<p>就像在 Day1 所提到的，<code>Angular app 是由無數個大大小小的 Component 所組合而成的</code>，也可以說 Angular app 的基本單位就是 Component，所以 Component 在 Angular 中是非常重要的觀念，每個 Component 都包含著：</p>\n<ul>\n<li>一個 HTML Template，用於將 Component 的內容顯示在 UI 上。</li>\n<li>一個 TypeScript 的 Class</li>\n<li>一個 selector，用於定義這個 Component 如何在別的 Component 中被使用。</li>\n<li>一個 CSS style 的檔案，用於決定這個 Component 在 UI 上呈現的樣式。</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Create-a-component\"><a href=\"#Create-a-component\" class=\"headerlink\" title=\"Create a component\"></a>Create a component</h1><p>在介紹什麼是 Component 之前，最重要的就是先創建一個 Component 出來，最簡單的方法就是使用 Angular CLI 來自動創建，當然你也可以手動新增檔案然後把所有需要的訊息補上</p>\n<p>要自動化創造一個新的 Component，首先要在終端機中輸入 Angular CLI Command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component &lt;component-name&gt;</span><br><span class=\"line\">ng g c &lt;component-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在默認情況下，會自動創建出：</p>\n<ul>\n<li>以 component-name 所命名的資料夾</li>\n<li>一個 component file,  <component-name>.component.ts</li>\n<li>一個 HTML Template file,  <component-name>.component.html</li>\n<li>一個 CSS file,  <component-name>.component.css</li>\n<li>一個測試規範文件,  <component-name>.component.spec.ts</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png\"><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png\"></p>\n<h1 id=\"Specifying-a-component’s-CSS-selector\"><a href=\"#Specifying-a-component’s-CSS-selector\" class=\"headerlink\" title=\"Specifying a component’s CSS selector\"></a>Specifying a component’s CSS selector</h1><p>每一個 Component 都需要一個 CSS Selector，這個 selector 會讓 Angular 知道他應該要在哪裡找到訊息並將他實例化，簡單來說可以把它當成這個 Component 在 Angular 的<code>身份證號碼</code>，當 Angular 在 HTML 中發現這個身份證號碼後，他就會知道該去哪裡把這個 Component 給實例化。</p>\n<p>舉個例子，如果今天有一個 component 叫做 hello-world.component.ts，他的 selector 叫 app-hello-world，所以每當 Angular 在任何一個 HTML Template 中出現時，他就知道要去把 hello-world.component.ts 這個 Component 給實例化。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Defining-a-component’s-template\"><a href=\"#Defining-a-component’s-template\" class=\"headerlink\" title=\"Defining a component’s template\"></a>Defining a component’s template</h1><p>在了解 Angular 是如何透過 selector 找到對應的 Component 並將他實例化後，接下來介紹的是</p>\n<p>Template，他其實就是一個 HTML，它告訴 Angular 要把這個 Component 如何呈現在 UI 上，可以通過兩種方法定義 Template，第一種是引用外部文件，第二種是直接將你的 HTML 寫在 Component 中。</p>\n<ul>\n<li>引用外部文件<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hello-world.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>直接寫 HTML 在 Component 中<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n除了使用 ( ‘ ‘ ) 包裹著 HTML Tag 之外，也可以使用反引號 ( &#96; ) 一次輸入多個 Tag<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t  &lt;h1&gt;Hello World!&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t  &lt;p&gt;This template definition spans multiple lines.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>兩種方法都可以設定你的 HTML Template，但是要注意，如果使用<code>外部文件的話是使用 templateUrl</code>，而<code>直接填入 HTML Tag 則是使用 template</code>。</p>\n<h1 id=\"Declaring-a-component’s-styles\"><a href=\"#Declaring-a-component’s-styles\" class=\"headerlink\" title=\"Declaring a component’s styles\"></a>Declaring a component’s styles</h1><p>有了身份證號碼有了畫面接下來就要讓畫面多一點美感，這時候就需要使用 CSS 來美化我們的 UI，和 Template 一樣可以透過兩種方式聲明 CSS，第一是引用外部文件，第二是直接寫在 Component 中。</p>\n<ul>\n<li>引用外部文件<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hello-world.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [ <span class=\"string\">&#x27;./hello-world.component.css&#x27;</span> ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>直接寫在 Component 中<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">styles</span>: [ <span class=\"string\">&#x27;h1 &#123; font-weight: normal; &#125;&#x27;</span> ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\nStyle 與 Template 一樣，如果是<code>引用外部文件是使用 styleUrls</code>，而<code>直接寫在 Component 中是使用styles</code>。</li>\n</ul>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章節比較輕鬆一點，介紹了如何創建一個新的 Component，並瞭解一個 component 是由哪些元素組成，並且這些元素是代表什麼，下一篇我們會介紹 Component 的 Lifecycle，是在開發 Angular App 中非常常使用到的觀念，那我們就下篇再見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/component-overview\">Angular.io - Component-overview</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>講完前面幾張比較偏向原理與不常使用到的章節後，從這章節開始會介紹比較實際運用的東西。</p>\n<p>就像在 Day1 所提到的，<code>Angular app 是由無數個大大小小的 Component 所組合而成的</code>，也可以說 Angular app 的基本單位就是 Component，所以 Component 在 Angular 中是非常重要的觀念，每個 Component 都包含著：</p>\n<ul>\n<li>一個 HTML Template，用於將 Component 的內容顯示在 UI 上。</li>\n<li>一個 TypeScript 的 Class</li>\n<li>一個 selector，用於定義這個 Component 如何在別的 Component 中被使用。</li>\n<li>一個 CSS style 的檔案，用於決定這個 Component 在 UI 上呈現的樣式。</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ow9wdaimBy.png\"></p>","more":"<h1 id=\"Create-a-component\"><a href=\"#Create-a-component\" class=\"headerlink\" title=\"Create a component\"></a>Create a component</h1><p>在介紹什麼是 Component 之前，最重要的就是先創建一個 Component 出來，最簡單的方法就是使用 Angular CLI 來自動創建，當然你也可以手動新增檔案然後把所有需要的訊息補上</p>\n<p>要自動化創造一個新的 Component，首先要在終端機中輸入 Angular CLI Command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component &lt;component-name&gt;</span><br><span class=\"line\">ng g c &lt;component-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在默認情況下，會自動創建出：</p>\n<ul>\n<li>以 component-name 所命名的資料夾</li>\n<li>一個 component file,  <component-name>.component.ts</li>\n<li>一個 HTML Template file,  <component-name>.component.html</li>\n<li>一個 CSS file,  <component-name>.component.css</li>\n<li>一個測試規範文件,  <component-name>.component.spec.ts</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767XlBg9RHWON.png\"><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767c8SVZdpzx9.png\"></p>\n<h1 id=\"Specifying-a-component’s-CSS-selector\"><a href=\"#Specifying-a-component’s-CSS-selector\" class=\"headerlink\" title=\"Specifying a component’s CSS selector\"></a>Specifying a component’s CSS selector</h1><p>每一個 Component 都需要一個 CSS Selector，這個 selector 會讓 Angular 知道他應該要在哪裡找到訊息並將他實例化，簡單來說可以把它當成這個 Component 在 Angular 的<code>身份證號碼</code>，當 Angular 在 HTML 中發現這個身份證號碼後，他就會知道該去哪裡把這個 Component 給實例化。</p>\n<p>舉個例子，如果今天有一個 component 叫做 hello-world.component.ts，他的 selector 叫 app-hello-world，所以每當 Angular 在任何一個 HTML Template 中出現時，他就知道要去把 hello-world.component.ts 這個 Component 給實例化。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Defining-a-component’s-template\"><a href=\"#Defining-a-component’s-template\" class=\"headerlink\" title=\"Defining a component’s template\"></a>Defining a component’s template</h1><p>在了解 Angular 是如何透過 selector 找到對應的 Component 並將他實例化後，接下來介紹的是</p>\n<p>Template，他其實就是一個 HTML，它告訴 Angular 要把這個 Component 如何呈現在 UI 上，可以通過兩種方法定義 Template，第一種是引用外部文件，第二種是直接將你的 HTML 寫在 Component 中。</p>\n<ul>\n<li>引用外部文件<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hello-world.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>直接寫 HTML 在 Component 中<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n除了使用 ( ‘ ‘ ) 包裹著 HTML Tag 之外，也可以使用反引號 ( &#96; ) 一次輸入多個 Tag<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t  &lt;h1&gt;Hello World!&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t  &lt;p&gt;This template definition spans multiple lines.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>兩種方法都可以設定你的 HTML Template，但是要注意，如果使用<code>外部文件的話是使用 templateUrl</code>，而<code>直接填入 HTML Tag 則是使用 template</code>。</p>\n<h1 id=\"Declaring-a-component’s-styles\"><a href=\"#Declaring-a-component’s-styles\" class=\"headerlink\" title=\"Declaring a component’s styles\"></a>Declaring a component’s styles</h1><p>有了身份證號碼有了畫面接下來就要讓畫面多一點美感，這時候就需要使用 CSS 來美化我們的 UI，和 Template 一樣可以透過兩種方式聲明 CSS，第一是引用外部文件，第二是直接寫在 Component 中。</p>\n<ul>\n<li>引用外部文件<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hello-world.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [ <span class=\"string\">&#x27;./hello-world.component.css&#x27;</span> ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>直接寫在 Component 中<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hello-world&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">styles</span>: [ <span class=\"string\">&#x27;h1 &#123; font-weight: normal; &#125;&#x27;</span> ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\nStyle 與 Template 一樣，如果是<code>引用外部文件是使用 styleUrls</code>，而<code>直接寫在 Component 中是使用styles</code>。</li>\n</ul>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章節比較輕鬆一點，介紹了如何創建一個新的 Component，並瞭解一個 component 是由哪些元素組成，並且這些元素是代表什麼，下一篇我們會介紹 Component 的 Lifecycle，是在開發 Angular App 中非常常使用到的觀念，那我們就下篇再見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/component-overview\">Angular.io - Component-overview</a></li>\n</ul>"},{"title":"Day5. Lifecycle hooks","date":"2021-09-05T02:04:09.000Z","_content":"\n在 Angular 的 Component 中有一個生命週期，`當 Angular 實例化這個 Component 並且把它或他的 sub-component 呈現在 UI 時便會開始`，而 Lifecycle 會持續的檢測是否有綁定的數據被更改，因為這些綁定數據的更改可能會需要更新 UI 或 Component 的內容，而當 Angular 銷毀了這個 Component 實例並從 DOM 中移除這個 Component 的 Template 後 Lifecycle 就會結束。\n\n簡單來說，當 Angular 在某一個地方的 HTML 發現了一個 Component 的 selector（身分證號碼）後，便會找到這個 Component 並將他實例化和將他的 Template 呈現在 UI 上（放進 DOM 中），這個時候這個 Component 就開始了他的一生，他會在他的一生中不斷的檢測是否有東西需要改變，最後當使用者離開了這個頁面，代表著這個 Component 不在被需要了，他就會被銷毀掉結束他的一生。\n\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png)\n\n<!--more-->\n\n# Responding to lifecycle events\n了解了什麼是 Lifecycle 後，我們要正式介紹 Lifecycle 了，首先你可以透過 import `angular/core` 引入一個或多個 lifecycle 使用。\n```typescript\nimport { Component, OnInit, OnChanges, ... } from '@angular/core';\n```\n\n每一個 Lifecycle  method 前面都有 `ng` 當作前綴字，舉例來說如果要使用 OnInit 這個 Lifecycle method 則要在你的 TypeScript Class 中輸入 ngOnInit( )，而當你要使用某一個 Lifycycle method 時，記得要在你的 Class 使用 `implements` 繼承這個 Lifycycle。\n```typescript\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-first-component',\n  templateUrl: './first-component.component.html',\n  styleUrls: ['./first-component.component.css']\n})\nexport class FirstComponentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n```\n\n## Lifecycle event sequence\n每一個 Lifecycle method 都有對應的被調用時機，Angular 會自動在最適當的時間調用適當的  Lifecycle method，以下是 Angular 按照順序執行的 Lifecycle method。\n\n| Name   |      Purpose      |  Timing\n|----------|:-------------:|:-------------:|\n| ngOnChanges() |  當這制或重置綁定的數據時會被調用，比如你在這個 Component 中綁定了一個由父層傳下來的數據，當這個數據發生改變（父層丟新的東西下來）時就會觸發，要注意的是如果在這個 method 的邏輯沒有處理好，可能會發生無限迴圈的問題，所以需要特別注意。 | 他會在 Component 剛被創造出來就被調用一次，會`比 OnInit() 還早`，還有每當一個或多個數據綁定 @Input 屬性發生改變時會觸發。 \n| ngOnInit() | 會在 Component 完成數據綁定（ngOnChanges）後初始化 Component。 | 在第一個 ngOnChange() 之後觸發，只會被調用一次。\n| ngDoCheck() | `當 Angular 無法獲不會自動檢測到變化並採取行動`，在每次更改檢測運行期間被調用，會跟在 ngOnChanges() 和 ngOnInit() 後面，有點抽象我會在下面有詳細解釋。 | 在每次更改檢測運行時立即在 ngOnChanges() 之後調用，在第一次運行時立即在 ngOnInit() 之後調用。\n| ngAfterContentInit() | Angular 將 ng-content 的內容投影到 Component 的 view 後被調用 | 在第一個 ngDoCheck() 後被調用\n| ngAfterContentChecked() | 每次完成 ng-content 的變更檢測之後調用 | 在 ngAfterContentInit() 之後和每一個 ngDoCheck() 之後被調用\n| ngAfterViewInit() | 當 Angular 初始化自身 Component和子 Component 的 view 後被調用。 | 在第一個 ngAfterContentChecked() 之後調用一次\n| ngAfterViewChecked() | 每次做完自身 Component和子 Component 的變更檢測後呼叫 | 在 ngAfterViewInit() 和每個 ngAfterContentChecked() 之後調用\n| ngOnDestroy() |  在 Angular 銷毀 directive 或 Component 之前調用，主要用於 unsubscribe Observable 以防內存泄露 | 在 Angular 銷毀 directive 或 Component 之前立即調用\n\n## 詳解 ngDoCheck()\n當我第一次在 Angular 官方文件中看到這個我看了十幾次我都看不懂，查了一些文章後才大概了解他是在什麼時候被呼叫到，我們就來詳細介紹一下吧。\n\n在 Angular 官方文檔中這樣寫到：\n> Detect and act upon changes that Angular can’t or won’t detect on its own.\nCalled during every change detection run, immediately after ngOnChanges() and ngOnInit()\n\n相當抽象對吧，，雖然知道他會是在 ngOnChanges( ) 和 ngOnInit( ) 之後觸發的，但是當他被觸發的時候 Component 是否有被檢查？而 Angular 無法自動檢查是指什麼？要解答這個問題我們需要先了解什麼是 Component check，在 Component 變更檢測有三個核心的操作：\n\n- update child component input binding ( @Input( ) )\n- update DOM interpolations ( 在 Template 中的 {{ value }} )\n- update query list\n\n除了這些之外 Angular 還會觸發 Lifecycle 作為變更檢測的一部分，所以當檢查父層時會觸發子層的 Lifycycle，假設我們有一個這樣的結構：\n```\nComponentA\n\tComponentB\n\t\tComponentC\n```\n當 Angular 運行檢測時的順序如下：\n```\nChecking A component:\n  - update B input bindings\n  - call NgDoCheck on the B component\n  - update DOM interpolations for component A\n \n Checking B component:\n    - update C input bindings\n    - call NgDoCheck on the C component\n    - update DOM interpolations for component B\n \n   Checking C component:\n      - update DOM interpolations for component C\n```\n上面的順序只是一個簡單的順序列表，可以看到 DoCheck 會在何時被觸發。\n\n可以看到在檢查父層時子層就會調用 ngDoCheck ，假設我們在 ComponentB 使用了 onPush 會發生什麼事：\n```\nChecking A component:\n  - update B input bindings\n  - call NgDoCheck on the B component\n  - update DOM interpolations for component A\n  \n if (bindings changed) -> checking B component:\n    - update C input bindings\n    - call NgDoCheck on the C component\n    - update DOM interpolations for component B\n \n   Checking C component:\n      - update DOM interpolations for component C\n```\n可以看到我們在 ComponenB 檢測前加上了一個小判斷，如果這個判斷為 false 就會滿足官方文檔提到的`當 Angular 無法獲不會自動檢測到變化並採取行動`，所以即使不會檢查 ComponentB 但是仍然會觸發 ComponentB 上面的 ngDoCheck。\n\n我們來透過程式碼直接操作看看，首先我們先定義一個 sub-component\n```typescript\n@Component({\n  selector: 'app-first-component',\n  template: '<h2>The name is: {{o.name}}</h2>',\n  changeDetection: ChangeDetectionStrategy.OnPush // (1)\n})\n\nexport class FirstComponentComponent implements OnChanges {\n\t@Input() o: { id: number; name: string; } = { id: NaN, name: '' }; // (2)\n\n\tid: number = NaN;\n\n  ngOnChanges() {\n    console.log('first-component OnChange() been call');  // (3)\n    this.id = this.o.id;\n  }\n\n  ngDoCheck() {\n    console.log('first-component DoCheck() been call');  // (4)\n    if (this.id !== this.o.id) {\n      this.cd.markForCheck();\n    }\n  }\n}\n```\n- （1）：利用 OnPush 來變更檢測策略。\n- （2）：使用 @Input( ) 綁定一個 input binding\n- （3）：當 @Input( ) 發生改變時，觸發 sub-component 中的 ngOnChanges\n- （4）：當父層發生變化時，觸發 sub-component 的 ngDoCheck\n\n接著我們在父層將 o 這個物件向下傳給 sub-component，在2秒內他通過更新 name 和 id 來改變這個物件\n```typescript\n@Component({\n  selector: 'app-root',\n  template: `\n\t\t<h1>Hello {{name}}</h1>\n    <a-comp [o]=\"o\"></a-comp>  // (1)\n\t`\n})\nexport class AppComponent implements OnInit{\n  o = {id: 1, name: 'Fandix'};\n\n  ngOnInit() {\n    setTimeout(() => {         // (2)\n      this.o.id = 2;\n      this.o.name = 'Jane';\n    }, 2000);\n  }\n}\n```\n- （1）： 將 o 向下傳遞給 sub-component\n- （2）：利用 setTimeout 在經過兩秒後更改 o 的 property\n\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png)\n\n由於 Angular 追蹤的是 o 這個物件的 reference，所以當我們以不更改 reference 的情況下改變 o 的內容就不會被 Angular 檢測到，這就是為什麼 sub-component 的 ngOnChanges() 只有被呼叫一次（創建 Component 時第一次呼叫），但是經過上面的解說後可以知道，`就算 sub-component 不會被 Angular 給自動檢測，但是由於父層發生了改變就會讓子層的 ngDoCheck 自動被呼叫到`，所以在 AppComponent 發生改變時 sub-component 的 ngDoCheck 依然會被觸發，這就是`當 Angular 無法或不會自動檢測到變化並採取行動`的意思。\n\n\n# Initializing a component or directive\n大概介紹完 Angular 的 Lifecycle，我們來看看 ngOnInit 的使用場景。\n\n- 在 construstor 之外執行邏輯複雜的初始化任務，如果是 fetch data 就不應該在 constructor 做而應該要在 ngOnInit 處理。\n- 可以在 ngOnInit 中設置輸入屬性，constructor 應該只將初始局部變量設置為簡單的值，所以如果你需要根據 @Input() 的值來設定內容的話，需要在 ngOnInit 中處理。\n\n\n# Cleaning up on instance destruction\n在開發 Angular component 時可以將清理的邏輯放在 ngOnDestroy( ) 中，這些邏輯必須在 Angular 銷毀這個 Component 之前執行，這裡是`釋放不會自動釋放資源的地方`，如果一直建立不會自動釋放資源的東西最後卻沒有將他清理掉，可能會造成內存洩漏或滿載的問題，這裡可以用來：\n\n- Unsubscribe Observable 和 DOM event\n- 停止 interval timers\n- Unregister 所有影響到別的地方的 callback function\n\n\n# 結論\n在本章中我們談到了 Angular 的 Lifecycle，了解有哪些 Lifecycle method 可以使用以及他們被調用的時機點，掌握好如何在對的時機點使用對的 Lifecycle method 是非常重要的，如果在錯的時間使用錯的 Lifecycle method 會造成非預期的錯誤，下一章將介紹在 Angular 中父子層 Component 之間是如何共享數據的，雖然在本章節有提到一點點（ @Input( ) ），不過將會在下一張更詳細的說明，那我們下一章再見。\n\n\n# Reference\n- [Angular.io - lifechcke hook](https://angular.io/guide/lifecycle-hooks)\n- [If you think ngDoCheck means your component is being checked — read this article](https://indepth.dev/posts/1131/if-you-think-ngdocheck-means-your-component-is-being-checked-read-this-article)\n\n","source":"_posts/Angular/angular-05.md","raw":"---\ntitle: Day5. Lifecycle hooks\ndate: 2021-09-05 10:04:09\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在 Angular 的 Component 中有一個生命週期，`當 Angular 實例化這個 Component 並且把它或他的 sub-component 呈現在 UI 時便會開始`，而 Lifecycle 會持續的檢測是否有綁定的數據被更改，因為這些綁定數據的更改可能會需要更新 UI 或 Component 的內容，而當 Angular 銷毀了這個 Component 實例並從 DOM 中移除這個 Component 的 Template 後 Lifecycle 就會結束。\n\n簡單來說，當 Angular 在某一個地方的 HTML 發現了一個 Component 的 selector（身分證號碼）後，便會找到這個 Component 並將他實例化和將他的 Template 呈現在 UI 上（放進 DOM 中），這個時候這個 Component 就開始了他的一生，他會在他的一生中不斷的檢測是否有東西需要改變，最後當使用者離開了這個頁面，代表著這個 Component 不在被需要了，他就會被銷毀掉結束他的一生。\n\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png)\n\n<!--more-->\n\n# Responding to lifecycle events\n了解了什麼是 Lifecycle 後，我們要正式介紹 Lifecycle 了，首先你可以透過 import `angular/core` 引入一個或多個 lifecycle 使用。\n```typescript\nimport { Component, OnInit, OnChanges, ... } from '@angular/core';\n```\n\n每一個 Lifecycle  method 前面都有 `ng` 當作前綴字，舉例來說如果要使用 OnInit 這個 Lifecycle method 則要在你的 TypeScript Class 中輸入 ngOnInit( )，而當你要使用某一個 Lifycycle method 時，記得要在你的 Class 使用 `implements` 繼承這個 Lifycycle。\n```typescript\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-first-component',\n  templateUrl: './first-component.component.html',\n  styleUrls: ['./first-component.component.css']\n})\nexport class FirstComponentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n```\n\n## Lifecycle event sequence\n每一個 Lifecycle method 都有對應的被調用時機，Angular 會自動在最適當的時間調用適當的  Lifecycle method，以下是 Angular 按照順序執行的 Lifecycle method。\n\n| Name   |      Purpose      |  Timing\n|----------|:-------------:|:-------------:|\n| ngOnChanges() |  當這制或重置綁定的數據時會被調用，比如你在這個 Component 中綁定了一個由父層傳下來的數據，當這個數據發生改變（父層丟新的東西下來）時就會觸發，要注意的是如果在這個 method 的邏輯沒有處理好，可能會發生無限迴圈的問題，所以需要特別注意。 | 他會在 Component 剛被創造出來就被調用一次，會`比 OnInit() 還早`，還有每當一個或多個數據綁定 @Input 屬性發生改變時會觸發。 \n| ngOnInit() | 會在 Component 完成數據綁定（ngOnChanges）後初始化 Component。 | 在第一個 ngOnChange() 之後觸發，只會被調用一次。\n| ngDoCheck() | `當 Angular 無法獲不會自動檢測到變化並採取行動`，在每次更改檢測運行期間被調用，會跟在 ngOnChanges() 和 ngOnInit() 後面，有點抽象我會在下面有詳細解釋。 | 在每次更改檢測運行時立即在 ngOnChanges() 之後調用，在第一次運行時立即在 ngOnInit() 之後調用。\n| ngAfterContentInit() | Angular 將 ng-content 的內容投影到 Component 的 view 後被調用 | 在第一個 ngDoCheck() 後被調用\n| ngAfterContentChecked() | 每次完成 ng-content 的變更檢測之後調用 | 在 ngAfterContentInit() 之後和每一個 ngDoCheck() 之後被調用\n| ngAfterViewInit() | 當 Angular 初始化自身 Component和子 Component 的 view 後被調用。 | 在第一個 ngAfterContentChecked() 之後調用一次\n| ngAfterViewChecked() | 每次做完自身 Component和子 Component 的變更檢測後呼叫 | 在 ngAfterViewInit() 和每個 ngAfterContentChecked() 之後調用\n| ngOnDestroy() |  在 Angular 銷毀 directive 或 Component 之前調用，主要用於 unsubscribe Observable 以防內存泄露 | 在 Angular 銷毀 directive 或 Component 之前立即調用\n\n## 詳解 ngDoCheck()\n當我第一次在 Angular 官方文件中看到這個我看了十幾次我都看不懂，查了一些文章後才大概了解他是在什麼時候被呼叫到，我們就來詳細介紹一下吧。\n\n在 Angular 官方文檔中這樣寫到：\n> Detect and act upon changes that Angular can’t or won’t detect on its own.\nCalled during every change detection run, immediately after ngOnChanges() and ngOnInit()\n\n相當抽象對吧，，雖然知道他會是在 ngOnChanges( ) 和 ngOnInit( ) 之後觸發的，但是當他被觸發的時候 Component 是否有被檢查？而 Angular 無法自動檢查是指什麼？要解答這個問題我們需要先了解什麼是 Component check，在 Component 變更檢測有三個核心的操作：\n\n- update child component input binding ( @Input( ) )\n- update DOM interpolations ( 在 Template 中的 {{ value }} )\n- update query list\n\n除了這些之外 Angular 還會觸發 Lifecycle 作為變更檢測的一部分，所以當檢查父層時會觸發子層的 Lifycycle，假設我們有一個這樣的結構：\n```\nComponentA\n\tComponentB\n\t\tComponentC\n```\n當 Angular 運行檢測時的順序如下：\n```\nChecking A component:\n  - update B input bindings\n  - call NgDoCheck on the B component\n  - update DOM interpolations for component A\n \n Checking B component:\n    - update C input bindings\n    - call NgDoCheck on the C component\n    - update DOM interpolations for component B\n \n   Checking C component:\n      - update DOM interpolations for component C\n```\n上面的順序只是一個簡單的順序列表，可以看到 DoCheck 會在何時被觸發。\n\n可以看到在檢查父層時子層就會調用 ngDoCheck ，假設我們在 ComponentB 使用了 onPush 會發生什麼事：\n```\nChecking A component:\n  - update B input bindings\n  - call NgDoCheck on the B component\n  - update DOM interpolations for component A\n  \n if (bindings changed) -> checking B component:\n    - update C input bindings\n    - call NgDoCheck on the C component\n    - update DOM interpolations for component B\n \n   Checking C component:\n      - update DOM interpolations for component C\n```\n可以看到我們在 ComponenB 檢測前加上了一個小判斷，如果這個判斷為 false 就會滿足官方文檔提到的`當 Angular 無法獲不會自動檢測到變化並採取行動`，所以即使不會檢查 ComponentB 但是仍然會觸發 ComponentB 上面的 ngDoCheck。\n\n我們來透過程式碼直接操作看看，首先我們先定義一個 sub-component\n```typescript\n@Component({\n  selector: 'app-first-component',\n  template: '<h2>The name is: {{o.name}}</h2>',\n  changeDetection: ChangeDetectionStrategy.OnPush // (1)\n})\n\nexport class FirstComponentComponent implements OnChanges {\n\t@Input() o: { id: number; name: string; } = { id: NaN, name: '' }; // (2)\n\n\tid: number = NaN;\n\n  ngOnChanges() {\n    console.log('first-component OnChange() been call');  // (3)\n    this.id = this.o.id;\n  }\n\n  ngDoCheck() {\n    console.log('first-component DoCheck() been call');  // (4)\n    if (this.id !== this.o.id) {\n      this.cd.markForCheck();\n    }\n  }\n}\n```\n- （1）：利用 OnPush 來變更檢測策略。\n- （2）：使用 @Input( ) 綁定一個 input binding\n- （3）：當 @Input( ) 發生改變時，觸發 sub-component 中的 ngOnChanges\n- （4）：當父層發生變化時，觸發 sub-component 的 ngDoCheck\n\n接著我們在父層將 o 這個物件向下傳給 sub-component，在2秒內他通過更新 name 和 id 來改變這個物件\n```typescript\n@Component({\n  selector: 'app-root',\n  template: `\n\t\t<h1>Hello {{name}}</h1>\n    <a-comp [o]=\"o\"></a-comp>  // (1)\n\t`\n})\nexport class AppComponent implements OnInit{\n  o = {id: 1, name: 'Fandix'};\n\n  ngOnInit() {\n    setTimeout(() => {         // (2)\n      this.o.id = 2;\n      this.o.name = 'Jane';\n    }, 2000);\n  }\n}\n```\n- （1）： 將 o 向下傳遞給 sub-component\n- （2）：利用 setTimeout 在經過兩秒後更改 o 的 property\n\n![https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png](https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png)\n\n由於 Angular 追蹤的是 o 這個物件的 reference，所以當我們以不更改 reference 的情況下改變 o 的內容就不會被 Angular 檢測到，這就是為什麼 sub-component 的 ngOnChanges() 只有被呼叫一次（創建 Component 時第一次呼叫），但是經過上面的解說後可以知道，`就算 sub-component 不會被 Angular 給自動檢測，但是由於父層發生了改變就會讓子層的 ngDoCheck 自動被呼叫到`，所以在 AppComponent 發生改變時 sub-component 的 ngDoCheck 依然會被觸發，這就是`當 Angular 無法或不會自動檢測到變化並採取行動`的意思。\n\n\n# Initializing a component or directive\n大概介紹完 Angular 的 Lifecycle，我們來看看 ngOnInit 的使用場景。\n\n- 在 construstor 之外執行邏輯複雜的初始化任務，如果是 fetch data 就不應該在 constructor 做而應該要在 ngOnInit 處理。\n- 可以在 ngOnInit 中設置輸入屬性，constructor 應該只將初始局部變量設置為簡單的值，所以如果你需要根據 @Input() 的值來設定內容的話，需要在 ngOnInit 中處理。\n\n\n# Cleaning up on instance destruction\n在開發 Angular component 時可以將清理的邏輯放在 ngOnDestroy( ) 中，這些邏輯必須在 Angular 銷毀這個 Component 之前執行，這裡是`釋放不會自動釋放資源的地方`，如果一直建立不會自動釋放資源的東西最後卻沒有將他清理掉，可能會造成內存洩漏或滿載的問題，這裡可以用來：\n\n- Unsubscribe Observable 和 DOM event\n- 停止 interval timers\n- Unregister 所有影響到別的地方的 callback function\n\n\n# 結論\n在本章中我們談到了 Angular 的 Lifecycle，了解有哪些 Lifecycle method 可以使用以及他們被調用的時機點，掌握好如何在對的時機點使用對的 Lifecycle method 是非常重要的，如果在錯的時間使用錯的 Lifecycle method 會造成非預期的錯誤，下一章將介紹在 Angular 中父子層 Component 之間是如何共享數據的，雖然在本章節有提到一點點（ @Input( ) ），不過將會在下一張更詳細的說明，那我們下一章再見。\n\n\n# Reference\n- [Angular.io - lifechcke hook](https://angular.io/guide/lifecycle-hooks)\n- [If you think ngDoCheck means your component is being checked — read this article](https://indepth.dev/posts/1131/if-you-think-ngdocheck-means-your-component-is-being-checked-read-this-article)\n\n","slug":"Angular/angular-05","published":1,"updated":"2022-02-16T01:25:15.410Z","_id":"ckznurmnj000akww3d6dx9lih","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在 Angular 的 Component 中有一個生命週期，<code>當 Angular 實例化這個 Component 並且把它或他的 sub-component 呈現在 UI 時便會開始</code>，而 Lifecycle 會持續的檢測是否有綁定的數據被更改，因為這些綁定數據的更改可能會需要更新 UI 或 Component 的內容，而當 Angular 銷毀了這個 Component 實例並從 DOM 中移除這個 Component 的 Template 後 Lifecycle 就會結束。</p>\n<p>簡單來說，當 Angular 在某一個地方的 HTML 發現了一個 Component 的 selector（身分證號碼）後，便會找到這個 Component 並將他實例化和將他的 Template 呈現在 UI 上（放進 DOM 中），這個時候這個 Component 就開始了他的一生，他會在他的一生中不斷的檢測是否有東西需要改變，最後當使用者離開了這個頁面，代表著這個 Component 不在被需要了，他就會被銷毀掉結束他的一生。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Responding-to-lifecycle-events\"><a href=\"#Responding-to-lifecycle-events\" class=\"headerlink\" title=\"Responding to lifecycle events\"></a>Responding to lifecycle events</h1><p>了解了什麼是 Lifecycle 後，我們要正式介紹 Lifecycle 了，首先你可以透過 import <code>angular/core</code> 引入一個或多個 lifecycle 使用。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">OnChanges</span>, ... &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>每一個 Lifecycle  method 前面都有 <code>ng</code> 當作前綴字，舉例來說如果要使用 OnInit 這個 Lifecycle method 則要在你的 TypeScript Class 中輸入 ngOnInit( )，而當你要使用某一個 Lifycycle method 時，記得要在你的 Class 使用 <code>implements</code> 繼承這個 Lifycycle。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first-component.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./first-component.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponentComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lifecycle-event-sequence\"><a href=\"#Lifecycle-event-sequence\" class=\"headerlink\" title=\"Lifecycle event sequence\"></a>Lifecycle event sequence</h2><p>每一個 Lifecycle method 都有對應的被調用時機，Angular 會自動在最適當的時間調用適當的  Lifecycle method，以下是 Angular 按照順序執行的 Lifecycle method。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Purpose</th>\n<th align=\"center\">Timing</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ngOnChanges()</td>\n<td align=\"center\">當這制或重置綁定的數據時會被調用，比如你在這個 Component 中綁定了一個由父層傳下來的數據，當這個數據發生改變（父層丟新的東西下來）時就會觸發，要注意的是如果在這個 method 的邏輯沒有處理好，可能會發生無限迴圈的問題，所以需要特別注意。</td>\n<td align=\"center\">他會在 Component 剛被創造出來就被調用一次，會<code>比 OnInit() 還早</code>，還有每當一個或多個數據綁定 @Input 屬性發生改變時會觸發。</td>\n</tr>\n<tr>\n<td>ngOnInit()</td>\n<td align=\"center\">會在 Component 完成數據綁定（ngOnChanges）後初始化 Component。</td>\n<td align=\"center\">在第一個 ngOnChange() 之後觸發，只會被調用一次。</td>\n</tr>\n<tr>\n<td>ngDoCheck()</td>\n<td align=\"center\"><code>當 Angular 無法獲不會自動檢測到變化並採取行動</code>，在每次更改檢測運行期間被調用，會跟在 ngOnChanges() 和 ngOnInit() 後面，有點抽象我會在下面有詳細解釋。</td>\n<td align=\"center\">在每次更改檢測運行時立即在 ngOnChanges() 之後調用，在第一次運行時立即在 ngOnInit() 之後調用。</td>\n</tr>\n<tr>\n<td>ngAfterContentInit()</td>\n<td align=\"center\">Angular 將 ng-content 的內容投影到 Component 的 view 後被調用</td>\n<td align=\"center\">在第一個 ngDoCheck() 後被調用</td>\n</tr>\n<tr>\n<td>ngAfterContentChecked()</td>\n<td align=\"center\">每次完成 ng-content 的變更檢測之後調用</td>\n<td align=\"center\">在 ngAfterContentInit() 之後和每一個 ngDoCheck() 之後被調用</td>\n</tr>\n<tr>\n<td>ngAfterViewInit()</td>\n<td align=\"center\">當 Angular 初始化自身 Component和子 Component 的 view 後被調用。</td>\n<td align=\"center\">在第一個 ngAfterContentChecked() 之後調用一次</td>\n</tr>\n<tr>\n<td>ngAfterViewChecked()</td>\n<td align=\"center\">每次做完自身 Component和子 Component 的變更檢測後呼叫</td>\n<td align=\"center\">在 ngAfterViewInit() 和每個 ngAfterContentChecked() 之後調用</td>\n</tr>\n<tr>\n<td>ngOnDestroy()</td>\n<td align=\"center\">在 Angular 銷毀 directive 或 Component 之前調用，主要用於 unsubscribe Observable 以防內存泄露</td>\n<td align=\"center\">在 Angular 銷毀 directive 或 Component 之前立即調用</td>\n</tr>\n</tbody></table>\n<h2 id=\"詳解-ngDoCheck\"><a href=\"#詳解-ngDoCheck\" class=\"headerlink\" title=\"詳解 ngDoCheck()\"></a>詳解 ngDoCheck()</h2><p>當我第一次在 Angular 官方文件中看到這個我看了十幾次我都看不懂，查了一些文章後才大概了解他是在什麼時候被呼叫到，我們就來詳細介紹一下吧。</p>\n<p>在 Angular 官方文檔中這樣寫到：</p>\n<blockquote>\n<p>Detect and act upon changes that Angular can’t or won’t detect on its own.<br>Called during every change detection run, immediately after ngOnChanges() and ngOnInit()</p>\n</blockquote>\n<p>相當抽象對吧，，雖然知道他會是在 ngOnChanges( ) 和 ngOnInit( ) 之後觸發的，但是當他被觸發的時候 Component 是否有被檢查？而 Angular 無法自動檢查是指什麼？要解答這個問題我們需要先了解什麼是 Component check，在 Component 變更檢測有三個核心的操作：</p>\n<ul>\n<li>update child component input binding ( @Input( ) )</li>\n<li>update DOM interpolations ( 在 Template 中的  )</li>\n<li>update query list</li>\n</ul>\n<p>除了這些之外 Angular 還會觸發 Lifecycle 作為變更檢測的一部分，所以當檢查父層時會觸發子層的 Lifycycle，假設我們有一個這樣的結構：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ComponentA</span><br><span class=\"line\">\tComponentB</span><br><span class=\"line\">\t\tComponentC</span><br></pre></td></tr></table></figure>\n<p>當 Angular 運行檢測時的順序如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Checking A component:</span><br><span class=\"line\">  - update B input bindings</span><br><span class=\"line\">  - call NgDoCheck on the B component</span><br><span class=\"line\">  - update DOM interpolations for component A</span><br><span class=\"line\"> </span><br><span class=\"line\"> Checking B component:</span><br><span class=\"line\">    - update C input bindings</span><br><span class=\"line\">    - call NgDoCheck on the C component</span><br><span class=\"line\">    - update DOM interpolations for component B</span><br><span class=\"line\"> </span><br><span class=\"line\">   Checking C component:</span><br><span class=\"line\">      - update DOM interpolations for component C</span><br></pre></td></tr></table></figure>\n<p>上面的順序只是一個簡單的順序列表，可以看到 DoCheck 會在何時被觸發。</p>\n<p>可以看到在檢查父層時子層就會調用 ngDoCheck ，假設我們在 ComponentB 使用了 onPush 會發生什麼事：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Checking A component:</span><br><span class=\"line\">  - update B input bindings</span><br><span class=\"line\">  - call NgDoCheck on the B component</span><br><span class=\"line\">  - update DOM interpolations for component A</span><br><span class=\"line\">  </span><br><span class=\"line\"> if (bindings changed) -&gt; checking B component:</span><br><span class=\"line\">    - update C input bindings</span><br><span class=\"line\">    - call NgDoCheck on the C component</span><br><span class=\"line\">    - update DOM interpolations for component B</span><br><span class=\"line\"> </span><br><span class=\"line\">   Checking C component:</span><br><span class=\"line\">      - update DOM interpolations for component C</span><br></pre></td></tr></table></figure>\n<p>可以看到我們在 ComponenB 檢測前加上了一個小判斷，如果這個判斷為 false 就會滿足官方文檔提到的<code>當 Angular 無法獲不會自動檢測到變化並採取行動</code>，所以即使不會檢查 ComponentB 但是仍然會觸發 ComponentB 上面的 ngDoCheck。</p>\n<p>我們來透過程式碼直接操作看看，首先我們先定義一個 sub-component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h2&gt;The name is: &#123;&#123;o.name&#125;&#125;&lt;/h2&gt;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">changeDetection</span>: <span class=\"title class_\">ChangeDetectionStrategy</span>.<span class=\"property\">OnPush</span> <span class=\"comment\">// (1)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponentComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnChanges</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Input</span>() <span class=\"attr\">o</span>: &#123; <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125; = &#123; <span class=\"attr\">id</span>: <span class=\"title class_\">NaN</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;; <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">id</span>: <span class=\"built_in\">number</span> = <span class=\"title class_\">NaN</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnChanges</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;first-component OnChange() been call&#x27;</span>);  <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngDoCheck</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;first-component DoCheck() been call&#x27;</span>);  <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">id</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cd</span>.<span class=\"title function_\">markForCheck</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>（1）：利用 OnPush 來變更檢測策略。</li>\n<li>（2）：使用 @Input( ) 綁定一個 input binding</li>\n<li>（3）：當 @Input( ) 發生改變時，觸發 sub-component 中的 ngOnChanges</li>\n<li>（4）：當父層發生變化時，觸發 sub-component 的 ngDoCheck</li>\n</ul>\n<p>接著我們在父層將 o 這個物件向下傳給 sub-component，在2秒內他通過更新 name 和 id 來改變這個物件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a-comp [o]=&quot;o&quot;&gt;&lt;/a-comp&gt;  // (1)</span></span><br><span class=\"line\"><span class=\"string\">\t`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>&#123;</span><br><span class=\"line\">  o = &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;         <span class=\"comment\">// (2)</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">id</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Jane&#x27;</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>（1）： 將 o 向下傳遞給 sub-component</li>\n<li>（2）：利用 setTimeout 在經過兩秒後更改 o 的 property</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png\"></p>\n<p>由於 Angular 追蹤的是 o 這個物件的 reference，所以當我們以不更改 reference 的情況下改變 o 的內容就不會被 Angular 檢測到，這就是為什麼 sub-component 的 ngOnChanges() 只有被呼叫一次（創建 Component 時第一次呼叫），但是經過上面的解說後可以知道，<code>就算 sub-component 不會被 Angular 給自動檢測，但是由於父層發生了改變就會讓子層的 ngDoCheck 自動被呼叫到</code>，所以在 AppComponent 發生改變時 sub-component 的 ngDoCheck 依然會被觸發，這就是<code>當 Angular 無法或不會自動檢測到變化並採取行動</code>的意思。</p>\n<h1 id=\"Initializing-a-component-or-directive\"><a href=\"#Initializing-a-component-or-directive\" class=\"headerlink\" title=\"Initializing a component or directive\"></a>Initializing a component or directive</h1><p>大概介紹完 Angular 的 Lifecycle，我們來看看 ngOnInit 的使用場景。</p>\n<ul>\n<li>在 construstor 之外執行邏輯複雜的初始化任務，如果是 fetch data 就不應該在 constructor 做而應該要在 ngOnInit 處理。</li>\n<li>可以在 ngOnInit 中設置輸入屬性，constructor 應該只將初始局部變量設置為簡單的值，所以如果你需要根據 @Input() 的值來設定內容的話，需要在 ngOnInit 中處理。</li>\n</ul>\n<h1 id=\"Cleaning-up-on-instance-destruction\"><a href=\"#Cleaning-up-on-instance-destruction\" class=\"headerlink\" title=\"Cleaning up on instance destruction\"></a>Cleaning up on instance destruction</h1><p>在開發 Angular component 時可以將清理的邏輯放在 ngOnDestroy( ) 中，這些邏輯必須在 Angular 銷毀這個 Component 之前執行，這裡是<code>釋放不會自動釋放資源的地方</code>，如果一直建立不會自動釋放資源的東西最後卻沒有將他清理掉，可能會造成內存洩漏或滿載的問題，這裡可以用來：</p>\n<ul>\n<li>Unsubscribe Observable 和 DOM event</li>\n<li>停止 interval timers</li>\n<li>Unregister 所有影響到別的地方的 callback function</li>\n</ul>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本章中我們談到了 Angular 的 Lifecycle，了解有哪些 Lifecycle method 可以使用以及他們被調用的時機點，掌握好如何在對的時機點使用對的 Lifecycle method 是非常重要的，如果在錯的時間使用錯的 Lifecycle method 會造成非預期的錯誤，下一章將介紹在 Angular 中父子層 Component 之間是如何共享數據的，雖然在本章節有提到一點點（ @Input( ) ），不過將會在下一張更詳細的說明，那我們下一章再見。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/lifecycle-hooks\">Angular.io - lifechcke hook</a></li>\n<li><a href=\"https://indepth.dev/posts/1131/if-you-think-ngdocheck-means-your-component-is-being-checked-read-this-article\">If you think ngDoCheck means your component is being checked — read this article</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在 Angular 的 Component 中有一個生命週期，<code>當 Angular 實例化這個 Component 並且把它或他的 sub-component 呈現在 UI 時便會開始</code>，而 Lifecycle 會持續的檢測是否有綁定的數據被更改，因為這些綁定數據的更改可能會需要更新 UI 或 Component 的內容，而當 Angular 銷毀了這個 Component 實例並從 DOM 中移除這個 Component 的 Template 後 Lifecycle 就會結束。</p>\n<p>簡單來說，當 Angular 在某一個地方的 HTML 發現了一個 Component 的 selector（身分證號碼）後，便會找到這個 Component 並將他實例化和將他的 Template 呈現在 UI 上（放進 DOM 中），這個時候這個 Component 就開始了他的一生，他會在他的一生中不斷的檢測是否有東西需要改變，最後當使用者離開了這個頁面，代表著這個 Component 不在被需要了，他就會被銷毀掉結束他的一生。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767kIMDJfjDfg.png\"></p>","more":"<h1 id=\"Responding-to-lifecycle-events\"><a href=\"#Responding-to-lifecycle-events\" class=\"headerlink\" title=\"Responding to lifecycle events\"></a>Responding to lifecycle events</h1><p>了解了什麼是 Lifecycle 後，我們要正式介紹 Lifecycle 了，首先你可以透過 import <code>angular/core</code> 引入一個或多個 lifecycle 使用。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">OnChanges</span>, ... &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>每一個 Lifecycle  method 前面都有 <code>ng</code> 當作前綴字，舉例來說如果要使用 OnInit 這個 Lifecycle method 則要在你的 TypeScript Class 中輸入 ngOnInit( )，而當你要使用某一個 Lifycycle method 時，記得要在你的 Class 使用 <code>implements</code> 繼承這個 Lifycycle。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first-component.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./first-component.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponentComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lifecycle-event-sequence\"><a href=\"#Lifecycle-event-sequence\" class=\"headerlink\" title=\"Lifecycle event sequence\"></a>Lifecycle event sequence</h2><p>每一個 Lifecycle method 都有對應的被調用時機，Angular 會自動在最適當的時間調用適當的  Lifecycle method，以下是 Angular 按照順序執行的 Lifecycle method。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Purpose</th>\n<th align=\"center\">Timing</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ngOnChanges()</td>\n<td align=\"center\">當這制或重置綁定的數據時會被調用，比如你在這個 Component 中綁定了一個由父層傳下來的數據，當這個數據發生改變（父層丟新的東西下來）時就會觸發，要注意的是如果在這個 method 的邏輯沒有處理好，可能會發生無限迴圈的問題，所以需要特別注意。</td>\n<td align=\"center\">他會在 Component 剛被創造出來就被調用一次，會<code>比 OnInit() 還早</code>，還有每當一個或多個數據綁定 @Input 屬性發生改變時會觸發。</td>\n</tr>\n<tr>\n<td>ngOnInit()</td>\n<td align=\"center\">會在 Component 完成數據綁定（ngOnChanges）後初始化 Component。</td>\n<td align=\"center\">在第一個 ngOnChange() 之後觸發，只會被調用一次。</td>\n</tr>\n<tr>\n<td>ngDoCheck()</td>\n<td align=\"center\"><code>當 Angular 無法獲不會自動檢測到變化並採取行動</code>，在每次更改檢測運行期間被調用，會跟在 ngOnChanges() 和 ngOnInit() 後面，有點抽象我會在下面有詳細解釋。</td>\n<td align=\"center\">在每次更改檢測運行時立即在 ngOnChanges() 之後調用，在第一次運行時立即在 ngOnInit() 之後調用。</td>\n</tr>\n<tr>\n<td>ngAfterContentInit()</td>\n<td align=\"center\">Angular 將 ng-content 的內容投影到 Component 的 view 後被調用</td>\n<td align=\"center\">在第一個 ngDoCheck() 後被調用</td>\n</tr>\n<tr>\n<td>ngAfterContentChecked()</td>\n<td align=\"center\">每次完成 ng-content 的變更檢測之後調用</td>\n<td align=\"center\">在 ngAfterContentInit() 之後和每一個 ngDoCheck() 之後被調用</td>\n</tr>\n<tr>\n<td>ngAfterViewInit()</td>\n<td align=\"center\">當 Angular 初始化自身 Component和子 Component 的 view 後被調用。</td>\n<td align=\"center\">在第一個 ngAfterContentChecked() 之後調用一次</td>\n</tr>\n<tr>\n<td>ngAfterViewChecked()</td>\n<td align=\"center\">每次做完自身 Component和子 Component 的變更檢測後呼叫</td>\n<td align=\"center\">在 ngAfterViewInit() 和每個 ngAfterContentChecked() 之後調用</td>\n</tr>\n<tr>\n<td>ngOnDestroy()</td>\n<td align=\"center\">在 Angular 銷毀 directive 或 Component 之前調用，主要用於 unsubscribe Observable 以防內存泄露</td>\n<td align=\"center\">在 Angular 銷毀 directive 或 Component 之前立即調用</td>\n</tr>\n</tbody></table>\n<h2 id=\"詳解-ngDoCheck\"><a href=\"#詳解-ngDoCheck\" class=\"headerlink\" title=\"詳解 ngDoCheck()\"></a>詳解 ngDoCheck()</h2><p>當我第一次在 Angular 官方文件中看到這個我看了十幾次我都看不懂，查了一些文章後才大概了解他是在什麼時候被呼叫到，我們就來詳細介紹一下吧。</p>\n<p>在 Angular 官方文檔中這樣寫到：</p>\n<blockquote>\n<p>Detect and act upon changes that Angular can’t or won’t detect on its own.<br>Called during every change detection run, immediately after ngOnChanges() and ngOnInit()</p>\n</blockquote>\n<p>相當抽象對吧，，雖然知道他會是在 ngOnChanges( ) 和 ngOnInit( ) 之後觸發的，但是當他被觸發的時候 Component 是否有被檢查？而 Angular 無法自動檢查是指什麼？要解答這個問題我們需要先了解什麼是 Component check，在 Component 變更檢測有三個核心的操作：</p>\n<ul>\n<li>update child component input binding ( @Input( ) )</li>\n<li>update DOM interpolations ( 在 Template 中的  )</li>\n<li>update query list</li>\n</ul>\n<p>除了這些之外 Angular 還會觸發 Lifecycle 作為變更檢測的一部分，所以當檢查父層時會觸發子層的 Lifycycle，假設我們有一個這樣的結構：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ComponentA</span><br><span class=\"line\">\tComponentB</span><br><span class=\"line\">\t\tComponentC</span><br></pre></td></tr></table></figure>\n<p>當 Angular 運行檢測時的順序如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Checking A component:</span><br><span class=\"line\">  - update B input bindings</span><br><span class=\"line\">  - call NgDoCheck on the B component</span><br><span class=\"line\">  - update DOM interpolations for component A</span><br><span class=\"line\"> </span><br><span class=\"line\"> Checking B component:</span><br><span class=\"line\">    - update C input bindings</span><br><span class=\"line\">    - call NgDoCheck on the C component</span><br><span class=\"line\">    - update DOM interpolations for component B</span><br><span class=\"line\"> </span><br><span class=\"line\">   Checking C component:</span><br><span class=\"line\">      - update DOM interpolations for component C</span><br></pre></td></tr></table></figure>\n<p>上面的順序只是一個簡單的順序列表，可以看到 DoCheck 會在何時被觸發。</p>\n<p>可以看到在檢查父層時子層就會調用 ngDoCheck ，假設我們在 ComponentB 使用了 onPush 會發生什麼事：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Checking A component:</span><br><span class=\"line\">  - update B input bindings</span><br><span class=\"line\">  - call NgDoCheck on the B component</span><br><span class=\"line\">  - update DOM interpolations for component A</span><br><span class=\"line\">  </span><br><span class=\"line\"> if (bindings changed) -&gt; checking B component:</span><br><span class=\"line\">    - update C input bindings</span><br><span class=\"line\">    - call NgDoCheck on the C component</span><br><span class=\"line\">    - update DOM interpolations for component B</span><br><span class=\"line\"> </span><br><span class=\"line\">   Checking C component:</span><br><span class=\"line\">      - update DOM interpolations for component C</span><br></pre></td></tr></table></figure>\n<p>可以看到我們在 ComponenB 檢測前加上了一個小判斷，如果這個判斷為 false 就會滿足官方文檔提到的<code>當 Angular 無法獲不會自動檢測到變化並採取行動</code>，所以即使不會檢查 ComponentB 但是仍然會觸發 ComponentB 上面的 ngDoCheck。</p>\n<p>我們來透過程式碼直接操作看看，首先我們先定義一個 sub-component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;h2&gt;The name is: &#123;&#123;o.name&#125;&#125;&lt;/h2&gt;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">changeDetection</span>: <span class=\"title class_\">ChangeDetectionStrategy</span>.<span class=\"property\">OnPush</span> <span class=\"comment\">// (1)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponentComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnChanges</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Input</span>() <span class=\"attr\">o</span>: &#123; <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125; = &#123; <span class=\"attr\">id</span>: <span class=\"title class_\">NaN</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;; <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">id</span>: <span class=\"built_in\">number</span> = <span class=\"title class_\">NaN</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnChanges</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;first-component OnChange() been call&#x27;</span>);  <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngDoCheck</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;first-component DoCheck() been call&#x27;</span>);  <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">id</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cd</span>.<span class=\"title function_\">markForCheck</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>（1）：利用 OnPush 來變更檢測策略。</li>\n<li>（2）：使用 @Input( ) 綁定一個 input binding</li>\n<li>（3）：當 @Input( ) 發生改變時，觸發 sub-component 中的 ngOnChanges</li>\n<li>（4）：當父層發生變化時，觸發 sub-component 的 ngDoCheck</li>\n</ul>\n<p>接著我們在父層將 o 這個物件向下傳給 sub-component，在2秒內他通過更新 name 和 id 來改變這個物件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a-comp [o]=&quot;o&quot;&gt;&lt;/a-comp&gt;  // (1)</span></span><br><span class=\"line\"><span class=\"string\">\t`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>&#123;</span><br><span class=\"line\">  o = &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;         <span class=\"comment\">// (2)</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">id</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">o</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Jane&#x27;</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>（1）： 將 o 向下傳遞給 sub-component</li>\n<li>（2）：利用 setTimeout 在經過兩秒後更改 o 的 property</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210730/20124767T4wP0YOgSv.png\"></p>\n<p>由於 Angular 追蹤的是 o 這個物件的 reference，所以當我們以不更改 reference 的情況下改變 o 的內容就不會被 Angular 檢測到，這就是為什麼 sub-component 的 ngOnChanges() 只有被呼叫一次（創建 Component 時第一次呼叫），但是經過上面的解說後可以知道，<code>就算 sub-component 不會被 Angular 給自動檢測，但是由於父層發生了改變就會讓子層的 ngDoCheck 自動被呼叫到</code>，所以在 AppComponent 發生改變時 sub-component 的 ngDoCheck 依然會被觸發，這就是<code>當 Angular 無法或不會自動檢測到變化並採取行動</code>的意思。</p>\n<h1 id=\"Initializing-a-component-or-directive\"><a href=\"#Initializing-a-component-or-directive\" class=\"headerlink\" title=\"Initializing a component or directive\"></a>Initializing a component or directive</h1><p>大概介紹完 Angular 的 Lifecycle，我們來看看 ngOnInit 的使用場景。</p>\n<ul>\n<li>在 construstor 之外執行邏輯複雜的初始化任務，如果是 fetch data 就不應該在 constructor 做而應該要在 ngOnInit 處理。</li>\n<li>可以在 ngOnInit 中設置輸入屬性，constructor 應該只將初始局部變量設置為簡單的值，所以如果你需要根據 @Input() 的值來設定內容的話，需要在 ngOnInit 中處理。</li>\n</ul>\n<h1 id=\"Cleaning-up-on-instance-destruction\"><a href=\"#Cleaning-up-on-instance-destruction\" class=\"headerlink\" title=\"Cleaning up on instance destruction\"></a>Cleaning up on instance destruction</h1><p>在開發 Angular component 時可以將清理的邏輯放在 ngOnDestroy( ) 中，這些邏輯必須在 Angular 銷毀這個 Component 之前執行，這裡是<code>釋放不會自動釋放資源的地方</code>，如果一直建立不會自動釋放資源的東西最後卻沒有將他清理掉，可能會造成內存洩漏或滿載的問題，這裡可以用來：</p>\n<ul>\n<li>Unsubscribe Observable 和 DOM event</li>\n<li>停止 interval timers</li>\n<li>Unregister 所有影響到別的地方的 callback function</li>\n</ul>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本章中我們談到了 Angular 的 Lifecycle，了解有哪些 Lifecycle method 可以使用以及他們被調用的時機點，掌握好如何在對的時機點使用對的 Lifecycle method 是非常重要的，如果在錯的時間使用錯的 Lifecycle method 會造成非預期的錯誤，下一章將介紹在 Angular 中父子層 Component 之間是如何共享數據的，雖然在本章節有提到一點點（ @Input( ) ），不過將會在下一張更詳細的說明，那我們下一章再見。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/lifecycle-hooks\">Angular.io - lifechcke hook</a></li>\n<li><a href=\"https://indepth.dev/posts/1131/if-you-think-ngdocheck-means-your-component-is-being-checked-read-this-article\">If you think ngDoCheck means your component is being checked — read this article</a></li>\n</ul>"},{"title":"Day6. Sharing data between child and parent directives and components","date":"2021-09-06T02:12:25.000Z","_content":"\n我們了解到 Angular app 是由無數個大大小小的 Component 所組成的，所以就會常常需要使用將 Component 嵌套，一個大個 Component 中包含了 10 個小的 Component 之類的，那麼讓資料在父子層 Component 之間傳遞就非常重要，要實現這個功能就需要使用到 Angular 中的 @Input() 和 @Output()。\n\n@Input() 是讓父層更新子層 Component 中的數據，相反的 @Output() 是為讓子層向父層 Component 發送數據的。\n\n下面我們會做一個簡單的例子來實際使用與講解如使用 @Input() 與 @Output()。\n![https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png](https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png)\n\n<!--more-->\n\n# Sending data to a child component\n大概知道了 Angular 是如何讓父子層 Component  之間傳遞數據的，接下來我們使用一個小小的例子來講解與操作這個功能吧。\n\n## Create child and parent components\n首先我們先透過 Angular CLI 建立兩個父子層關係的 Component。\n```bash\nng generate component parent\nng generate component child\n```\n創建完後，我們將在 parent.component.html 中加入 child.component .ts 中的 selector，建立兩個 Component 的父子層關係。\n```html\n<!-- parent.component.html -->\n<p>parent component works!</p>\n<hr>\n<app-child-component></app-child-component>\n```\n我們打開網頁的開發模式，來確認一下 DOM 是不是確實有將兩個 Component 建立為父子層關係。\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png)\n\n## Configuring the child component\n首先第一步我們要在 child.component.ts 中使用 `@Input()` 裝飾器，先把他透過 import 從 `@angular/core` 中引用進來然後使用它。\n```typescript\nimport { Component, Input } from '@angular/core';  // (1)\n\n@Component({\n  selector: 'app-child-component',\n  templateUrl: './child.component.html'\n})\nexport class ChildComponent {\n  @Input() item = ''; // (2)\n  constructor() { }\n}\n```\n- (1): 使用 import 將 @Input 引入\n- (2): 使用 @Input( ) 裝飾 property \"item\"\n\n可以看到我們使用了 @Input() 裝飾了 ChildComponent 中的 item 這個 property， 雖然在上面的例子中是將他初始化為 string，但是`不代表使用 @Input() 裝飾的 property 只能是字串型態`，他可以是任一種資料型態，代表著這個 property 來自父層。\n\n接下來我們將這個 property 放在 child.component.html 中讓我們可以觀察他的變化。\n```\n<!-- child.component.html  -->\n<p>child component works!</p>\n\n<div>Today's item: {{ item }}</div>\n```\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png)\n在畫面中我們會看到我們打上的 Today's item 後面並沒有東西（因為父層還沒傳資料下來啊～!\n\n## Configuring the parent component\n接下來我們來在父層的 HTML 中綁定屬性：\n1. 先 parent.component.ts 中定義一個 property 並將他賦值\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-parent-component',\n  templateUrl: './parent.component.html'\n})\nexport class ParentComponent {\n  constructor() { }\n  currentItem = 'Television';  // defind a property\n}\n```\n2. 在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層\n```html\n<app-child-component [item]=\"currentItem\"></app-child-component>\n```\n![https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png](https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png)\n\n在畫面中可以看到原本 Today's item 後面什麼都沒有的卻顯示了來自 parent.component.ts 中的 property 內容，這就是透過 @Input( ) 將父層的資料傳遞給子層。\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767EYEXWLzvqp.png](https://lh3.googleusercontent.com/NRaoUQUGHeo774fUM3u9g-s8BMPkiS-pfcrfArgAugzTrNx2OHlVISHGBjmfzGrophrKYmXKFDJeDCV4Apif3v0qpT3Vq5U0bp5_ALAJ7y4xVX9lFjxUlg2TNXiOINLAv-JOCfFZaERBBti_ku0Hr76v9964ZFXAssFbUjCexnaOlVZ64N41va0sAGxUSZ0RTHfarVsNn5fMU3ZKcFiURwxjpdypvb0G89UjExhAb8DflKFsV_RL2AH9FORmTfFi4kCOY0gv4VgMrOF2-OccsVn-1Proaq9GswprjAZN4WcsE9KtQKjNBHY2L4r6SVij5d1DBnloCpDJMprkCbPqNxubfAVHZZ7DSw4x1D1VQLl-SPzxsmmz-W5SrGLJ8tsFEK5DGu9JB6_gdsrFYbTyoWsAo7ylV8wW6_UZrOR2RN4PFbnYOfuzf3XL0MzTeO8sy6hq9_Nr_pmMiIuTJlLduff_WSdpON3wNBYD74gRk21cEDVA-Ih8MIhOmOUt-VEBqqB_-GbDOWIJb3YVD5R6GuNCTuEHy1d6HwCrcOd5z2KdHOVuomgHGsg2aQX81W9ZVQkvT_zOg1RgU5qDNd8MxMwieQasVVvmuh9EJ3b4S5iqN2R2WyrS9pLj0V2cOc6J4YZpBaZm7VXtsVyLX2yUZEv6y02bhrrZiTm8FglASN2s6xjx-ZmAJOo4U7qALg7gmfkwSkpa0DQcimTmlTgWV8ovSy90-dS2pmEBa9Cp0xblaRWT=w700-h180-no)\n上面的圖已看到，[ ] 中的目標是你在子層使用 @Input() 裝飾的 property，而 source (等好右邊的部分) 是父層要提供給子層數據的名稱，也就是在父層中為了要傳遞給子層數值所定義的 property。\n\n我們在 Lifecycle 中有提到，ngOnChange() 被調用的條件，除了 Component 剛被創建出來的第一次調用之外，其他的每一次都是在當有 input binding 發生改變時會被調用，這代表著如果父層要向下傳遞的 property 發生改變時，就會觸發子層的 ngOnChange()。\n\n\n\n# Sending data to a parent component\n講解完如何透過 @Input() 將父層的數據傳給子層後，接下來介紹如何透過 @Output() 讓子層的數據傳遞給父層。\n\n首先 @Output() 裝飾器它可以讓子層的 property 標記成為數據可以傳遞給父層的入口，子層透過使用被 @Output() 裝飾的 property 觸發 event 來通知父層數據已經被更改了，要觸發事件這個子層的 property 必須是 \"EventEmitter\" 型別，他可以從 '@angular/core' 中引入，下面我們一樣會用一個小例子舉例並講解。\n\n## Configuring the child component\n我們在 child 中設置一個可以點擊一個 `<button>` 來觸發 EventEmitter，並將數據傳遞給父層。\n```typescript\nimport { Component, Output, EventEmitter } from '@angular/core';  // (1)\n\n@Component({\n  selector: 'app-child-component',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css']\n})\nexport class ChildComponent {\n  @Output() newItemEvent = new EventEmitter<boolean>();  // (2)\n  constructor() { }\n\n  parentValueChange(value: boolean) {  // (3)\n    this.newItemEvent.emit(value);\n  }\n}\n```\n- (1): 使用 import 將 @Output 與 @EventEmitter 引入\n- (2): 使用 @Output( ) 裝飾一個 property，上面的例子中是 newItemEvent 是一個 EventEmitter 的類型，代表他是一個 event 並會傳遞一個型別為字串的數值\n- (3): 新增一個 method 當使用者點擊畫面的 button 後會觸發此 method 讓子層的數值傳遞給父層\n\n## Configuring the child's template\n接著我們來更改 child.component.html 的內容，我們新增兩個 `<button>` 讓使用者可以對這兩個物件進行操作\n```html\n<!-- child.component.html  -->\n<p>child component works!</p>\n\n<div class=\"button\">\n    <button (click)=\"parentValueChange(true)\">+</button>\n    <button (click)=\"parentValueChange(false)\">-</button>\n</div>\n```\n我們將畫面中的兩個 button 都綁定一個 click event，當點擊 + 這個按鍵就會觸發並將 true 做為參數傳給 parentValueChange，反之傳 false。\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png)\n\n## Configuring the parent component\n接著我們在父層中添加一個 property 讓我們可以透過子層操控這個屬性。\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-parent-component',\n  templateUrl: './parent.component.html'\n})\nexport class ParentComponent {\n  constructor() { }\n  counterValue = 0;\n\n  addOrSub(event: boolean) {       // (1)\n    if (event) {\n      this.counterValue++;\n    } else {\n      this.counterValue--;\n    }\n  }\n}\n```\n- (1): 在 parent.component.ts 中新增一個 method，當接收到子層傳遞上來的數值時，判斷要將 counterValue 增加或減少。\n\n## Configuring the parent's template\n接著在 parent.component.html 中將 method 綁定到 child's event 上，讓子層的事件可以觸發到父層的 method。\n```html\n<!-- parent.component.html -->\n<p>parent component works!</p>\n<div>parent component property counter: {{counterValue}}</div>\n\n<hr>\n<app-child-component (newItemEvent)=\"addOrSub($event)\"></app-child-component>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png](https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png)\n\n如同 @Input() 一樣，在 () 內的是在子層利用 @Output() 裝飾的 property，因為他是一個 event，所以當子層觸發 event 後會將子層更改的值透過 event 傳遞給父層的 method，而 source( 等號右邊 ) 是父層定義用來接子層傳上來數值的 method。\n\n當你要對同一個子層同時使用 @Input() 和 @Output() 時，可以使用 Tow-way Binding [()]，就可以不用像上面一樣寫得這麼長了，這個方法會在之後詳細講解。\n\n\n\n# Parent calls an @ViewChild()\n介紹完 @Input() 與 @Output() 後，接著要來介紹 @ViewChild() 這個東西，他的存在是因為在 Angular 中父層 Component 無法訪問到子層的 Component，因為`每個 Component 都是一個個獨立的 Class instance，所以在沒有互相連接的情況下是不能訪問到子層的 property 和 method`，所以當開發時遇到這類型的狀況時，需要將子層 Component 作為 ViewChild inject 給父層，在下面舉一個簡單的例子。\n\n## Configuring the child component\n首先先在 child.component.ts 新增一個 property 與 method，讓使用者點擊畫面的 button 時可以加減這個值。\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-child-component',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css']\n})\nexport class ChildComponent {\n  childCounter = 0;       // (1)\n  constructor() { }\n\n  parentValueChange(value: boolean) {     // (2)\n    if (value) {\n      this.childCounter++;\n    } else {\n      this.childCounter--;\n    }\n  }\n\n  childCounterValue() {                   // (3)\n    return this.childCounter;\n  }\n}\n```\n- (1): 新增一個 property 讓他可以被增加或減少\n- (2): 新增一個 method，當使用者點擊畫面按鈕時觸發\n- (3): 新增一個 method，他將回傳子層的 property\n\n## Configuring the child's template\n接著我們在 child.component.html 中新增兩個 `<button>` 並將我們的 childCounter 顯示出來。\n```html\n<!-- child.component.html  -->\n<p>child component works!</p>\n\n<p>Child component counter value: {{childCounter}}</p>\n<div class=\"button\">\n    <button (click)=\"parentValueChange(true)\">+</button>\n    <button (click)=\"parentValueChange(false)\">-</button>\n</div>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png)\n\n## Configuring the parent component\n接著我們在父層在 '@angular/core' 中引入 ViewChild 並將他綁定在子層上\n```typescript\nimport { Component, AfterViewInit, ViewChild } from '@angular/core';  // (1)\nimport { ChildComponent } from '../child/child.component';            // (2)\n\n@Component({\n  selector: 'app-parent-component',\n  templateUrl: './parent.component.html'\n})\nexport class ParentComponent implements AfterViewInit {\n  @ViewChild('childComponent')                                        // (3)\n  childComponent!: ChildComponent;                                   \n\n  constructor() { }\n  counterValue = 0;                                                  \n\n  ngAfterViewInit() {}\n\n  getChildCounterValue() {                                            // (4)\n    this.counterValue = this.childComponent.childCounterValue();      // (5)\n  }\n}\n```\n- (1): 透過 import 將 ViewChild 引入\n- (2): 透過 import 將 sub-component 引入\n- (3): 使用 @ViewChild 將 childComponent  property 裝飾為可以獲得子層內容，並將這個 property 的型態設定為 ChildComponent\n- (4): 新增一個 method，當使用者點擊畫面按鈕時觸發\n- (5): 將子層的 property 賦予給父層的 property\n\n## Configuring the parent's template\n接著我們在 parent.compoent.html 中新增一個 `<button>`，當使用這點擊時觸發將子層的 property 賦值給父層的 property 並將他顯示出來。\n```html\n<!-- parent.component.html -->\n<p>parent component works!</p>\n<div>Get child component counter value: {{counterValue}}</div>\n<button (click)=\"getChildCounterValue()\">Get child value</button>\n<hr>\n<app-child-component #childComponent></app-child-component>\n```\n\n可以看到當我們更改了子層的 property 後， 我們點擊了父層的 button 後，父層的 component 透過利用 ViewChild inject 到 parent.component.ts 的方法直接獲得了子層中的 method，並將內容賦予在父層的 property 上。\n\n要注意的是，當要用這個方法獲得子層的 property 或 method 時，需要在 ngAfterViewInit( ) 結束之後才拿得到，因為需要 Angular 需要完整的初始化完自身 Component 和 sub-component 的 view 之後才能拿到  sub-component 的內容，這點要非常注意。\n\n\n\n# 結論\n在本篇章中介紹了如何透過 @Input( ) 進行從父層傳遞資料給子層的動作，也介紹了如何使用 @Output( ) 將子層的事件向上傳遞給父層， Component 之間的溝通再開發 Angular app 之間是非常重要的，所以一定要知道該如何使用，最後也介紹了如何將 sub-component inject 給父層，讓父層可以直接調用到 sub-component 的 property 和 method，下一篇要來介紹 ng-content，就是將一個 component 投影到另一個 component 上，那我們就下一篇再見吧。\n\n\n\n# Reference \n- [Angular.io - input & output](https://angular.io/guide/inputs-outputs)\n","source":"_posts/Angular/angular-06.md","raw":"---\ntitle: Day6. Sharing data between child and parent directives and components\ndate: 2021-09-06 10:12:25\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n我們了解到 Angular app 是由無數個大大小小的 Component 所組成的，所以就會常常需要使用將 Component 嵌套，一個大個 Component 中包含了 10 個小的 Component 之類的，那麼讓資料在父子層 Component 之間傳遞就非常重要，要實現這個功能就需要使用到 Angular 中的 @Input() 和 @Output()。\n\n@Input() 是讓父層更新子層 Component 中的數據，相反的 @Output() 是為讓子層向父層 Component 發送數據的。\n\n下面我們會做一個簡單的例子來實際使用與講解如使用 @Input() 與 @Output()。\n![https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png](https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png)\n\n<!--more-->\n\n# Sending data to a child component\n大概知道了 Angular 是如何讓父子層 Component  之間傳遞數據的，接下來我們使用一個小小的例子來講解與操作這個功能吧。\n\n## Create child and parent components\n首先我們先透過 Angular CLI 建立兩個父子層關係的 Component。\n```bash\nng generate component parent\nng generate component child\n```\n創建完後，我們將在 parent.component.html 中加入 child.component .ts 中的 selector，建立兩個 Component 的父子層關係。\n```html\n<!-- parent.component.html -->\n<p>parent component works!</p>\n<hr>\n<app-child-component></app-child-component>\n```\n我們打開網頁的開發模式，來確認一下 DOM 是不是確實有將兩個 Component 建立為父子層關係。\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png)\n\n## Configuring the child component\n首先第一步我們要在 child.component.ts 中使用 `@Input()` 裝飾器，先把他透過 import 從 `@angular/core` 中引用進來然後使用它。\n```typescript\nimport { Component, Input } from '@angular/core';  // (1)\n\n@Component({\n  selector: 'app-child-component',\n  templateUrl: './child.component.html'\n})\nexport class ChildComponent {\n  @Input() item = ''; // (2)\n  constructor() { }\n}\n```\n- (1): 使用 import 將 @Input 引入\n- (2): 使用 @Input( ) 裝飾 property \"item\"\n\n可以看到我們使用了 @Input() 裝飾了 ChildComponent 中的 item 這個 property， 雖然在上面的例子中是將他初始化為 string，但是`不代表使用 @Input() 裝飾的 property 只能是字串型態`，他可以是任一種資料型態，代表著這個 property 來自父層。\n\n接下來我們將這個 property 放在 child.component.html 中讓我們可以觀察他的變化。\n```\n<!-- child.component.html  -->\n<p>child component works!</p>\n\n<div>Today's item: {{ item }}</div>\n```\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png)\n在畫面中我們會看到我們打上的 Today's item 後面並沒有東西（因為父層還沒傳資料下來啊～!\n\n## Configuring the parent component\n接下來我們來在父層的 HTML 中綁定屬性：\n1. 先 parent.component.ts 中定義一個 property 並將他賦值\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-parent-component',\n  templateUrl: './parent.component.html'\n})\nexport class ParentComponent {\n  constructor() { }\n  currentItem = 'Television';  // defind a property\n}\n```\n2. 在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層\n```html\n<app-child-component [item]=\"currentItem\"></app-child-component>\n```\n![https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png](https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png)\n\n在畫面中可以看到原本 Today's item 後面什麼都沒有的卻顯示了來自 parent.component.ts 中的 property 內容，這就是透過 @Input( ) 將父層的資料傳遞給子層。\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767EYEXWLzvqp.png](https://lh3.googleusercontent.com/NRaoUQUGHeo774fUM3u9g-s8BMPkiS-pfcrfArgAugzTrNx2OHlVISHGBjmfzGrophrKYmXKFDJeDCV4Apif3v0qpT3Vq5U0bp5_ALAJ7y4xVX9lFjxUlg2TNXiOINLAv-JOCfFZaERBBti_ku0Hr76v9964ZFXAssFbUjCexnaOlVZ64N41va0sAGxUSZ0RTHfarVsNn5fMU3ZKcFiURwxjpdypvb0G89UjExhAb8DflKFsV_RL2AH9FORmTfFi4kCOY0gv4VgMrOF2-OccsVn-1Proaq9GswprjAZN4WcsE9KtQKjNBHY2L4r6SVij5d1DBnloCpDJMprkCbPqNxubfAVHZZ7DSw4x1D1VQLl-SPzxsmmz-W5SrGLJ8tsFEK5DGu9JB6_gdsrFYbTyoWsAo7ylV8wW6_UZrOR2RN4PFbnYOfuzf3XL0MzTeO8sy6hq9_Nr_pmMiIuTJlLduff_WSdpON3wNBYD74gRk21cEDVA-Ih8MIhOmOUt-VEBqqB_-GbDOWIJb3YVD5R6GuNCTuEHy1d6HwCrcOd5z2KdHOVuomgHGsg2aQX81W9ZVQkvT_zOg1RgU5qDNd8MxMwieQasVVvmuh9EJ3b4S5iqN2R2WyrS9pLj0V2cOc6J4YZpBaZm7VXtsVyLX2yUZEv6y02bhrrZiTm8FglASN2s6xjx-ZmAJOo4U7qALg7gmfkwSkpa0DQcimTmlTgWV8ovSy90-dS2pmEBa9Cp0xblaRWT=w700-h180-no)\n上面的圖已看到，[ ] 中的目標是你在子層使用 @Input() 裝飾的 property，而 source (等好右邊的部分) 是父層要提供給子層數據的名稱，也就是在父層中為了要傳遞給子層數值所定義的 property。\n\n我們在 Lifecycle 中有提到，ngOnChange() 被調用的條件，除了 Component 剛被創建出來的第一次調用之外，其他的每一次都是在當有 input binding 發生改變時會被調用，這代表著如果父層要向下傳遞的 property 發生改變時，就會觸發子層的 ngOnChange()。\n\n\n\n# Sending data to a parent component\n講解完如何透過 @Input() 將父層的數據傳給子層後，接下來介紹如何透過 @Output() 讓子層的數據傳遞給父層。\n\n首先 @Output() 裝飾器它可以讓子層的 property 標記成為數據可以傳遞給父層的入口，子層透過使用被 @Output() 裝飾的 property 觸發 event 來通知父層數據已經被更改了，要觸發事件這個子層的 property 必須是 \"EventEmitter\" 型別，他可以從 '@angular/core' 中引入，下面我們一樣會用一個小例子舉例並講解。\n\n## Configuring the child component\n我們在 child 中設置一個可以點擊一個 `<button>` 來觸發 EventEmitter，並將數據傳遞給父層。\n```typescript\nimport { Component, Output, EventEmitter } from '@angular/core';  // (1)\n\n@Component({\n  selector: 'app-child-component',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css']\n})\nexport class ChildComponent {\n  @Output() newItemEvent = new EventEmitter<boolean>();  // (2)\n  constructor() { }\n\n  parentValueChange(value: boolean) {  // (3)\n    this.newItemEvent.emit(value);\n  }\n}\n```\n- (1): 使用 import 將 @Output 與 @EventEmitter 引入\n- (2): 使用 @Output( ) 裝飾一個 property，上面的例子中是 newItemEvent 是一個 EventEmitter 的類型，代表他是一個 event 並會傳遞一個型別為字串的數值\n- (3): 新增一個 method 當使用者點擊畫面的 button 後會觸發此 method 讓子層的數值傳遞給父層\n\n## Configuring the child's template\n接著我們來更改 child.component.html 的內容，我們新增兩個 `<button>` 讓使用者可以對這兩個物件進行操作\n```html\n<!-- child.component.html  -->\n<p>child component works!</p>\n\n<div class=\"button\">\n    <button (click)=\"parentValueChange(true)\">+</button>\n    <button (click)=\"parentValueChange(false)\">-</button>\n</div>\n```\n我們將畫面中的兩個 button 都綁定一個 click event，當點擊 + 這個按鍵就會觸發並將 true 做為參數傳給 parentValueChange，反之傳 false。\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png)\n\n## Configuring the parent component\n接著我們在父層中添加一個 property 讓我們可以透過子層操控這個屬性。\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-parent-component',\n  templateUrl: './parent.component.html'\n})\nexport class ParentComponent {\n  constructor() { }\n  counterValue = 0;\n\n  addOrSub(event: boolean) {       // (1)\n    if (event) {\n      this.counterValue++;\n    } else {\n      this.counterValue--;\n    }\n  }\n}\n```\n- (1): 在 parent.component.ts 中新增一個 method，當接收到子層傳遞上來的數值時，判斷要將 counterValue 增加或減少。\n\n## Configuring the parent's template\n接著在 parent.component.html 中將 method 綁定到 child's event 上，讓子層的事件可以觸發到父層的 method。\n```html\n<!-- parent.component.html -->\n<p>parent component works!</p>\n<div>parent component property counter: {{counterValue}}</div>\n\n<hr>\n<app-child-component (newItemEvent)=\"addOrSub($event)\"></app-child-component>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png](https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png)\n\n如同 @Input() 一樣，在 () 內的是在子層利用 @Output() 裝飾的 property，因為他是一個 event，所以當子層觸發 event 後會將子層更改的值透過 event 傳遞給父層的 method，而 source( 等號右邊 ) 是父層定義用來接子層傳上來數值的 method。\n\n當你要對同一個子層同時使用 @Input() 和 @Output() 時，可以使用 Tow-way Binding [()]，就可以不用像上面一樣寫得這麼長了，這個方法會在之後詳細講解。\n\n\n\n# Parent calls an @ViewChild()\n介紹完 @Input() 與 @Output() 後，接著要來介紹 @ViewChild() 這個東西，他的存在是因為在 Angular 中父層 Component 無法訪問到子層的 Component，因為`每個 Component 都是一個個獨立的 Class instance，所以在沒有互相連接的情況下是不能訪問到子層的 property 和 method`，所以當開發時遇到這類型的狀況時，需要將子層 Component 作為 ViewChild inject 給父層，在下面舉一個簡單的例子。\n\n## Configuring the child component\n首先先在 child.component.ts 新增一個 property 與 method，讓使用者點擊畫面的 button 時可以加減這個值。\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-child-component',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css']\n})\nexport class ChildComponent {\n  childCounter = 0;       // (1)\n  constructor() { }\n\n  parentValueChange(value: boolean) {     // (2)\n    if (value) {\n      this.childCounter++;\n    } else {\n      this.childCounter--;\n    }\n  }\n\n  childCounterValue() {                   // (3)\n    return this.childCounter;\n  }\n}\n```\n- (1): 新增一個 property 讓他可以被增加或減少\n- (2): 新增一個 method，當使用者點擊畫面按鈕時觸發\n- (3): 新增一個 method，他將回傳子層的 property\n\n## Configuring the child's template\n接著我們在 child.component.html 中新增兩個 `<button>` 並將我們的 childCounter 顯示出來。\n```html\n<!-- child.component.html  -->\n<p>child component works!</p>\n\n<p>Child component counter value: {{childCounter}}</p>\n<div class=\"button\">\n    <button (click)=\"parentValueChange(true)\">+</button>\n    <button (click)=\"parentValueChange(false)\">-</button>\n</div>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png](https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png)\n\n## Configuring the parent component\n接著我們在父層在 '@angular/core' 中引入 ViewChild 並將他綁定在子層上\n```typescript\nimport { Component, AfterViewInit, ViewChild } from '@angular/core';  // (1)\nimport { ChildComponent } from '../child/child.component';            // (2)\n\n@Component({\n  selector: 'app-parent-component',\n  templateUrl: './parent.component.html'\n})\nexport class ParentComponent implements AfterViewInit {\n  @ViewChild('childComponent')                                        // (3)\n  childComponent!: ChildComponent;                                   \n\n  constructor() { }\n  counterValue = 0;                                                  \n\n  ngAfterViewInit() {}\n\n  getChildCounterValue() {                                            // (4)\n    this.counterValue = this.childComponent.childCounterValue();      // (5)\n  }\n}\n```\n- (1): 透過 import 將 ViewChild 引入\n- (2): 透過 import 將 sub-component 引入\n- (3): 使用 @ViewChild 將 childComponent  property 裝飾為可以獲得子層內容，並將這個 property 的型態設定為 ChildComponent\n- (4): 新增一個 method，當使用者點擊畫面按鈕時觸發\n- (5): 將子層的 property 賦予給父層的 property\n\n## Configuring the parent's template\n接著我們在 parent.compoent.html 中新增一個 `<button>`，當使用這點擊時觸發將子層的 property 賦值給父層的 property 並將他顯示出來。\n```html\n<!-- parent.component.html -->\n<p>parent component works!</p>\n<div>Get child component counter value: {{counterValue}}</div>\n<button (click)=\"getChildCounterValue()\">Get child value</button>\n<hr>\n<app-child-component #childComponent></app-child-component>\n```\n\n可以看到當我們更改了子層的 property 後， 我們點擊了父層的 button 後，父層的 component 透過利用 ViewChild inject 到 parent.component.ts 的方法直接獲得了子層中的 method，並將內容賦予在父層的 property 上。\n\n要注意的是，當要用這個方法獲得子層的 property 或 method 時，需要在 ngAfterViewInit( ) 結束之後才拿得到，因為需要 Angular 需要完整的初始化完自身 Component 和 sub-component 的 view 之後才能拿到  sub-component 的內容，這點要非常注意。\n\n\n\n# 結論\n在本篇章中介紹了如何透過 @Input( ) 進行從父層傳遞資料給子層的動作，也介紹了如何使用 @Output( ) 將子層的事件向上傳遞給父層， Component 之間的溝通再開發 Angular app 之間是非常重要的，所以一定要知道該如何使用，最後也介紹了如何將 sub-component inject 給父層，讓父層可以直接調用到 sub-component 的 property 和 method，下一篇要來介紹 ng-content，就是將一個 component 投影到另一個 component 上，那我們就下一篇再見吧。\n\n\n\n# Reference \n- [Angular.io - input & output](https://angular.io/guide/inputs-outputs)\n","slug":"Angular/angular-06","published":1,"updated":"2022-02-16T01:25:16.538Z","_id":"ckznurmnl000dkww36xbj5wov","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我們了解到 Angular app 是由無數個大大小小的 Component 所組成的，所以就會常常需要使用將 Component 嵌套，一個大個 Component 中包含了 10 個小的 Component 之類的，那麼讓資料在父子層 Component 之間傳遞就非常重要，要實現這個功能就需要使用到 Angular 中的 @Input() 和 @Output()。</p>\n<p>@Input() 是讓父層更新子層 Component 中的數據，相反的 @Output() 是為讓子層向父層 Component 發送數據的。</p>\n<p>下面我們會做一個簡單的例子來實際使用與講解如使用 @Input() 與 @Output()。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Sending-data-to-a-child-component\"><a href=\"#Sending-data-to-a-child-component\" class=\"headerlink\" title=\"Sending data to a child component\"></a>Sending data to a child component</h1><p>大概知道了 Angular 是如何讓父子層 Component  之間傳遞數據的，接下來我們使用一個小小的例子來講解與操作這個功能吧。</p>\n<h2 id=\"Create-child-and-parent-components\"><a href=\"#Create-child-and-parent-components\" class=\"headerlink\" title=\"Create child and parent components\"></a>Create child and parent components</h2><p>首先我們先透過 Angular CLI 建立兩個父子層關係的 Component。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component parent</span><br><span class=\"line\">ng generate component child</span><br></pre></td></tr></table></figure>\n<p>創建完後，我們將在 parent.component.html 中加入 child.component .ts 中的 selector，建立兩個 Component 的父子層關係。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我們打開網頁的開發模式，來確認一下 DOM 是不是確實有將兩個 Component 建立為父子層關係。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png\"></p>\n<h2 id=\"Configuring-the-child-component\"><a href=\"#Configuring-the-child-component\" class=\"headerlink\" title=\"Configuring the child component\"></a>Configuring the child component</h2><p>首先第一步我們要在 child.component.ts 中使用 <code>@Input()</code> 裝飾器，先把他透過 import 從 <code>@angular/core</code> 中引用進來然後使用它。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() item = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 使用 import 將 @Input 引入</li>\n<li>(2): 使用 @Input( ) 裝飾 property “item”</li>\n</ul>\n<p>可以看到我們使用了 @Input() 裝飾了 ChildComponent 中的 item 這個 property， 雖然在上面的例子中是將他初始化為 string，但是<code>不代表使用 @Input() 裝飾的 property 只能是字串型態</code>，他可以是任一種資料型態，代表著這個 property 來自父層。</p>\n<p>接下來我們將這個 property 放在 child.component.html 中讓我們可以觀察他的變化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- child.component.html  --&gt;</span><br><span class=\"line\">&lt;p&gt;child component works!&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;Today&#x27;s item: &#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png\"><br>在畫面中我們會看到我們打上的 Today’s item 後面並沒有東西（因為父層還沒傳資料下來啊～!</p>\n<h2 id=\"Configuring-the-parent-component\"><a href=\"#Configuring-the-parent-component\" class=\"headerlink\" title=\"Configuring the parent component\"></a>Configuring the parent component</h2><p>接下來我們來在父層的 HTML 中綁定屬性：</p>\n<ol>\n<li>先 parent.component.ts 中定義一個 property 並將他賦值<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  currentItem = <span class=\"string\">&#x27;Television&#x27;</span>;  <span class=\"comment\">// defind a property</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> [<span class=\"attr\">item</span>]=<span class=\"string\">&quot;currentItem&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png\"></li>\n</ol>\n<p>在畫面中可以看到原本 Today’s item 後面什麼都沒有的卻顯示了來自 parent.component.ts 中的 property 內容，這就是透過 @Input( ) 將父層的資料傳遞給子層。<br><img src=\"https://lh3.googleusercontent.com/NRaoUQUGHeo774fUM3u9g-s8BMPkiS-pfcrfArgAugzTrNx2OHlVISHGBjmfzGrophrKYmXKFDJeDCV4Apif3v0qpT3Vq5U0bp5_ALAJ7y4xVX9lFjxUlg2TNXiOINLAv-JOCfFZaERBBti_ku0Hr76v9964ZFXAssFbUjCexnaOlVZ64N41va0sAGxUSZ0RTHfarVsNn5fMU3ZKcFiURwxjpdypvb0G89UjExhAb8DflKFsV_RL2AH9FORmTfFi4kCOY0gv4VgMrOF2-OccsVn-1Proaq9GswprjAZN4WcsE9KtQKjNBHY2L4r6SVij5d1DBnloCpDJMprkCbPqNxubfAVHZZ7DSw4x1D1VQLl-SPzxsmmz-W5SrGLJ8tsFEK5DGu9JB6_gdsrFYbTyoWsAo7ylV8wW6_UZrOR2RN4PFbnYOfuzf3XL0MzTeO8sy6hq9_Nr_pmMiIuTJlLduff_WSdpON3wNBYD74gRk21cEDVA-Ih8MIhOmOUt-VEBqqB_-GbDOWIJb3YVD5R6GuNCTuEHy1d6HwCrcOd5z2KdHOVuomgHGsg2aQX81W9ZVQkvT_zOg1RgU5qDNd8MxMwieQasVVvmuh9EJ3b4S5iqN2R2WyrS9pLj0V2cOc6J4YZpBaZm7VXtsVyLX2yUZEv6y02bhrrZiTm8FglASN2s6xjx-ZmAJOo4U7qALg7gmfkwSkpa0DQcimTmlTgWV8ovSy90-dS2pmEBa9Cp0xblaRWT=w700-h180-no\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767EYEXWLzvqp.png\"><br>上面的圖已看到，[ ] 中的目標是你在子層使用 @Input() 裝飾的 property，而 source (等好右邊的部分) 是父層要提供給子層數據的名稱，也就是在父層中為了要傳遞給子層數值所定義的 property。</p>\n<p>我們在 Lifecycle 中有提到，ngOnChange() 被調用的條件，除了 Component 剛被創建出來的第一次調用之外，其他的每一次都是在當有 input binding 發生改變時會被調用，這代表著如果父層要向下傳遞的 property 發生改變時，就會觸發子層的 ngOnChange()。</p>\n<h1 id=\"Sending-data-to-a-parent-component\"><a href=\"#Sending-data-to-a-parent-component\" class=\"headerlink\" title=\"Sending data to a parent component\"></a>Sending data to a parent component</h1><p>講解完如何透過 @Input() 將父層的數據傳給子層後，接下來介紹如何透過 @Output() 讓子層的數據傳遞給父層。</p>\n<p>首先 @Output() 裝飾器它可以讓子層的 property 標記成為數據可以傳遞給父層的入口，子層透過使用被 @Output() 裝飾的 property 觸發 event 來通知父層數據已經被更改了，要觸發事件這個子層的 property 必須是 “EventEmitter” 型別，他可以從 ‘@angular&#x2F;core’ 中引入，下面我們一樣會用一個小例子舉例並講解。</p>\n<h2 id=\"Configuring-the-child-component-1\"><a href=\"#Configuring-the-child-component-1\" class=\"headerlink\" title=\"Configuring the child component\"></a>Configuring the child component</h2><p>我們在 child 中設置一個可以點擊一個 <code>&lt;button&gt;</code> 來觸發 EventEmitter，並將數據傳遞給父層。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() newItemEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">boolean</span>&gt;();  <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">parentValueChange</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) &#123;  <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newItemEvent</span>.<span class=\"title function_\">emit</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 使用 import 將 @Output 與 @EventEmitter 引入</li>\n<li>(2): 使用 @Output( ) 裝飾一個 property，上面的例子中是 newItemEvent 是一個 EventEmitter 的類型，代表他是一個 event 並會傳遞一個型別為字串的數值</li>\n<li>(3): 新增一個 method 當使用者點擊畫面的 button 後會觸發此 method 讓子層的數值傳遞給父層</li>\n</ul>\n<h2 id=\"Configuring-the-child’s-template\"><a href=\"#Configuring-the-child’s-template\" class=\"headerlink\" title=\"Configuring the child’s template\"></a>Configuring the child’s template</h2><p>接著我們來更改 child.component.html 的內容，我們新增兩個 <code>&lt;button&gt;</code> 讓使用者可以對這兩個物件進行操作</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child.component.html  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(true)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(false)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我們將畫面中的兩個 button 都綁定一個 click event，當點擊 + 這個按鍵就會觸發並將 true 做為參數傳給 parentValueChange，反之傳 false。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png\"></p>\n<h2 id=\"Configuring-the-parent-component-1\"><a href=\"#Configuring-the-parent-component-1\" class=\"headerlink\" title=\"Configuring the parent component\"></a>Configuring the parent component</h2><p>接著我們在父層中添加一個 property 讓我們可以透過子層操控這個屬性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  counterValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addOrSub</span>(<span class=\"params\">event: <span class=\"built_in\">boolean</span></span>) &#123;       <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 在 parent.component.ts 中新增一個 method，當接收到子層傳遞上來的數值時，判斷要將 counterValue 增加或減少。</li>\n</ul>\n<h2 id=\"Configuring-the-parent’s-template\"><a href=\"#Configuring-the-parent’s-template\" class=\"headerlink\" title=\"Configuring the parent’s template\"></a>Configuring the parent’s template</h2><p>接著在 parent.component.html 中將 method 綁定到 child’s event 上，讓子層的事件可以觸發到父層的 method。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>parent component property counter: &#123;&#123;counterValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> (<span class=\"attr\">newItemEvent</span>)=<span class=\"string\">&quot;addOrSub($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png\"></p>\n<p>如同 @Input() 一樣，在 () 內的是在子層利用 @Output() 裝飾的 property，因為他是一個 event，所以當子層觸發 event 後會將子層更改的值透過 event 傳遞給父層的 method，而 source( 等號右邊 ) 是父層定義用來接子層傳上來數值的 method。</p>\n<p>當你要對同一個子層同時使用 @Input() 和 @Output() 時，可以使用 Tow-way Binding [()]，就可以不用像上面一樣寫得這麼長了，這個方法會在之後詳細講解。</p>\n<h1 id=\"Parent-calls-an-ViewChild\"><a href=\"#Parent-calls-an-ViewChild\" class=\"headerlink\" title=\"Parent calls an @ViewChild()\"></a>Parent calls an @ViewChild()</h1><p>介紹完 @Input() 與 @Output() 後，接著要來介紹 @ViewChild() 這個東西，他的存在是因為在 Angular 中父層 Component 無法訪問到子層的 Component，因為<code>每個 Component 都是一個個獨立的 Class instance，所以在沒有互相連接的情況下是不能訪問到子層的 property 和 method</code>，所以當開發時遇到這類型的狀況時，需要將子層 Component 作為 ViewChild inject 給父層，在下面舉一個簡單的例子。</p>\n<h2 id=\"Configuring-the-child-component-2\"><a href=\"#Configuring-the-child-component-2\" class=\"headerlink\" title=\"Configuring the child component\"></a>Configuring the child component</h2><p>首先先在 child.component.ts 新增一個 property 與 method，讓使用者點擊畫面的 button 時可以加減這個值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  childCounter = <span class=\"number\">0</span>;       <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">parentValueChange</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) &#123;     <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">childCounter</span>++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">childCounter</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">childCounterValue</span>(<span class=\"params\"></span>) &#123;                   <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">childCounter</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 新增一個 property 讓他可以被增加或減少</li>\n<li>(2): 新增一個 method，當使用者點擊畫面按鈕時觸發</li>\n<li>(3): 新增一個 method，他將回傳子層的 property</li>\n</ul>\n<h2 id=\"Configuring-the-child’s-template-1\"><a href=\"#Configuring-the-child’s-template-1\" class=\"headerlink\" title=\"Configuring the child’s template\"></a>Configuring the child’s template</h2><p>接著我們在 child.component.html 中新增兩個 <code>&lt;button&gt;</code> 並將我們的 childCounter 顯示出來。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child.component.html  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Child component counter value: &#123;&#123;childCounter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(true)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(false)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png\"></p>\n<h2 id=\"Configuring-the-parent-component-2\"><a href=\"#Configuring-the-parent-component-2\" class=\"headerlink\" title=\"Configuring the parent component\"></a>Configuring the parent component</h2><p>接著我們在父層在 ‘@angular&#x2F;core’ 中引入 ViewChild 並將他綁定在子層上</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">AfterViewInit</span>, <span class=\"title class_\">ViewChild</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ChildComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../child/child.component&#x27;</span>;            <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterViewInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">&#x27;childComponent&#x27;</span>)                                        <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  childComponent!: <span class=\"title class_\">ChildComponent</span>;                                   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  counterValue = <span class=\"number\">0</span>;                                                  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngAfterViewInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getChildCounterValue</span>(<span class=\"params\"></span>) &#123;                                            <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">childComponent</span>.<span class=\"title function_\">childCounterValue</span>();      <span class=\"comment\">// (5)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 透過 import 將 ViewChild 引入</li>\n<li>(2): 透過 import 將 sub-component 引入</li>\n<li>(3): 使用 @ViewChild 將 childComponent  property 裝飾為可以獲得子層內容，並將這個 property 的型態設定為 ChildComponent</li>\n<li>(4): 新增一個 method，當使用者點擊畫面按鈕時觸發</li>\n<li>(5): 將子層的 property 賦予給父層的 property</li>\n</ul>\n<h2 id=\"Configuring-the-parent’s-template-1\"><a href=\"#Configuring-the-parent’s-template-1\" class=\"headerlink\" title=\"Configuring the parent’s template\"></a>Configuring the parent’s template</h2><p>接著我們在 parent.compoent.html 中新增一個 <code>&lt;button&gt;</code>，當使用這點擊時觸發將子層的 property 賦值給父層的 property 並將他顯示出來。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Get child component counter value: &#123;&#123;counterValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;getChildCounterValue()&quot;</span>&gt;</span>Get child value<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> #<span class=\"attr\">childComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到當我們更改了子層的 property 後， 我們點擊了父層的 button 後，父層的 component 透過利用 ViewChild inject 到 parent.component.ts 的方法直接獲得了子層中的 method，並將內容賦予在父層的 property 上。</p>\n<p>要注意的是，當要用這個方法獲得子層的 property 或 method 時，需要在 ngAfterViewInit( ) 結束之後才拿得到，因為需要 Angular 需要完整的初始化完自身 Component 和 sub-component 的 view 之後才能拿到  sub-component 的內容，這點要非常注意。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本篇章中介紹了如何透過 @Input( ) 進行從父層傳遞資料給子層的動作，也介紹了如何使用 @Output( ) 將子層的事件向上傳遞給父層， Component 之間的溝通再開發 Angular app 之間是非常重要的，所以一定要知道該如何使用，最後也介紹了如何將 sub-component inject 給父層，讓父層可以直接調用到 sub-component 的 property 和 method，下一篇要來介紹 ng-content，就是將一個 component 投影到另一個 component 上，那我們就下一篇再見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/inputs-outputs\">Angular.io - input &amp; output</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>我們了解到 Angular app 是由無數個大大小小的 Component 所組成的，所以就會常常需要使用將 Component 嵌套，一個大個 Component 中包含了 10 個小的 Component 之類的，那麼讓資料在父子層 Component 之間傳遞就非常重要，要實現這個功能就需要使用到 Angular 中的 @Input() 和 @Output()。</p>\n<p>@Input() 是讓父層更新子層 Component 中的數據，相反的 @Output() 是為讓子層向父層 Component 發送數據的。</p>\n<p>下面我們會做一個簡單的例子來實際使用與講解如使用 @Input() 與 @Output()。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247672eB7GrD26l.png\"></p>","more":"<h1 id=\"Sending-data-to-a-child-component\"><a href=\"#Sending-data-to-a-child-component\" class=\"headerlink\" title=\"Sending data to a child component\"></a>Sending data to a child component</h1><p>大概知道了 Angular 是如何讓父子層 Component  之間傳遞數據的，接下來我們使用一個小小的例子來講解與操作這個功能吧。</p>\n<h2 id=\"Create-child-and-parent-components\"><a href=\"#Create-child-and-parent-components\" class=\"headerlink\" title=\"Create child and parent components\"></a>Create child and parent components</h2><p>首先我們先透過 Angular CLI 建立兩個父子層關係的 Component。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component parent</span><br><span class=\"line\">ng generate component child</span><br></pre></td></tr></table></figure>\n<p>創建完後，我們將在 parent.component.html 中加入 child.component .ts 中的 selector，建立兩個 Component 的父子層關係。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我們打開網頁的開發模式，來確認一下 DOM 是不是確實有將兩個 Component 建立為父子層關係。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767ChY81vvKyk.png\"></p>\n<h2 id=\"Configuring-the-child-component\"><a href=\"#Configuring-the-child-component\" class=\"headerlink\" title=\"Configuring the child component\"></a>Configuring the child component</h2><p>首先第一步我們要在 child.component.ts 中使用 <code>@Input()</code> 裝飾器，先把他透過 import 從 <code>@angular/core</code> 中引用進來然後使用它。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() item = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 使用 import 將 @Input 引入</li>\n<li>(2): 使用 @Input( ) 裝飾 property “item”</li>\n</ul>\n<p>可以看到我們使用了 @Input() 裝飾了 ChildComponent 中的 item 這個 property， 雖然在上面的例子中是將他初始化為 string，但是<code>不代表使用 @Input() 裝飾的 property 只能是字串型態</code>，他可以是任一種資料型態，代表著這個 property 來自父層。</p>\n<p>接下來我們將這個 property 放在 child.component.html 中讓我們可以觀察他的變化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- child.component.html  --&gt;</span><br><span class=\"line\">&lt;p&gt;child component works!&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;Today&#x27;s item: &#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767b4TcSxH9Bf.png\"><br>在畫面中我們會看到我們打上的 Today’s item 後面並沒有東西（因為父層還沒傳資料下來啊～!</p>\n<h2 id=\"Configuring-the-parent-component\"><a href=\"#Configuring-the-parent-component\" class=\"headerlink\" title=\"Configuring the parent component\"></a>Configuring the parent component</h2><p>接下來我們來在父層的 HTML 中綁定屬性：</p>\n<ol>\n<li>先 parent.component.ts 中定義一個 property 並將他賦值<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  currentItem = <span class=\"string\">&#x27;Television&#x27;</span>;  <span class=\"comment\">// defind a property</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> [<span class=\"attr\">item</span>]=<span class=\"string\">&quot;currentItem&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247671HPuawu3l0.png\"></li>\n</ol>\n<p>在畫面中可以看到原本 Today’s item 後面什麼都沒有的卻顯示了來自 parent.component.ts 中的 property 內容，這就是透過 @Input( ) 將父層的資料傳遞給子層。<br><img src=\"https://lh3.googleusercontent.com/NRaoUQUGHeo774fUM3u9g-s8BMPkiS-pfcrfArgAugzTrNx2OHlVISHGBjmfzGrophrKYmXKFDJeDCV4Apif3v0qpT3Vq5U0bp5_ALAJ7y4xVX9lFjxUlg2TNXiOINLAv-JOCfFZaERBBti_ku0Hr76v9964ZFXAssFbUjCexnaOlVZ64N41va0sAGxUSZ0RTHfarVsNn5fMU3ZKcFiURwxjpdypvb0G89UjExhAb8DflKFsV_RL2AH9FORmTfFi4kCOY0gv4VgMrOF2-OccsVn-1Proaq9GswprjAZN4WcsE9KtQKjNBHY2L4r6SVij5d1DBnloCpDJMprkCbPqNxubfAVHZZ7DSw4x1D1VQLl-SPzxsmmz-W5SrGLJ8tsFEK5DGu9JB6_gdsrFYbTyoWsAo7ylV8wW6_UZrOR2RN4PFbnYOfuzf3XL0MzTeO8sy6hq9_Nr_pmMiIuTJlLduff_WSdpON3wNBYD74gRk21cEDVA-Ih8MIhOmOUt-VEBqqB_-GbDOWIJb3YVD5R6GuNCTuEHy1d6HwCrcOd5z2KdHOVuomgHGsg2aQX81W9ZVQkvT_zOg1RgU5qDNd8MxMwieQasVVvmuh9EJ3b4S5iqN2R2WyrS9pLj0V2cOc6J4YZpBaZm7VXtsVyLX2yUZEv6y02bhrrZiTm8FglASN2s6xjx-ZmAJOo4U7qALg7gmfkwSkpa0DQcimTmlTgWV8ovSy90-dS2pmEBa9Cp0xblaRWT=w700-h180-no\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767EYEXWLzvqp.png\"><br>上面的圖已看到，[ ] 中的目標是你在子層使用 @Input() 裝飾的 property，而 source (等好右邊的部分) 是父層要提供給子層數據的名稱，也就是在父層中為了要傳遞給子層數值所定義的 property。</p>\n<p>我們在 Lifecycle 中有提到，ngOnChange() 被調用的條件，除了 Component 剛被創建出來的第一次調用之外，其他的每一次都是在當有 input binding 發生改變時會被調用，這代表著如果父層要向下傳遞的 property 發生改變時，就會觸發子層的 ngOnChange()。</p>\n<h1 id=\"Sending-data-to-a-parent-component\"><a href=\"#Sending-data-to-a-parent-component\" class=\"headerlink\" title=\"Sending data to a parent component\"></a>Sending data to a parent component</h1><p>講解完如何透過 @Input() 將父層的數據傳給子層後，接下來介紹如何透過 @Output() 讓子層的數據傳遞給父層。</p>\n<p>首先 @Output() 裝飾器它可以讓子層的 property 標記成為數據可以傳遞給父層的入口，子層透過使用被 @Output() 裝飾的 property 觸發 event 來通知父層數據已經被更改了，要觸發事件這個子層的 property 必須是 “EventEmitter” 型別，他可以從 ‘@angular&#x2F;core’ 中引入，下面我們一樣會用一個小例子舉例並講解。</p>\n<h2 id=\"Configuring-the-child-component-1\"><a href=\"#Configuring-the-child-component-1\" class=\"headerlink\" title=\"Configuring the child component\"></a>Configuring the child component</h2><p>我們在 child 中設置一個可以點擊一個 <code>&lt;button&gt;</code> 來觸發 EventEmitter，並將數據傳遞給父層。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() newItemEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">boolean</span>&gt;();  <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">parentValueChange</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) &#123;  <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newItemEvent</span>.<span class=\"title function_\">emit</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 使用 import 將 @Output 與 @EventEmitter 引入</li>\n<li>(2): 使用 @Output( ) 裝飾一個 property，上面的例子中是 newItemEvent 是一個 EventEmitter 的類型，代表他是一個 event 並會傳遞一個型別為字串的數值</li>\n<li>(3): 新增一個 method 當使用者點擊畫面的 button 後會觸發此 method 讓子層的數值傳遞給父層</li>\n</ul>\n<h2 id=\"Configuring-the-child’s-template\"><a href=\"#Configuring-the-child’s-template\" class=\"headerlink\" title=\"Configuring the child’s template\"></a>Configuring the child’s template</h2><p>接著我們來更改 child.component.html 的內容，我們新增兩個 <code>&lt;button&gt;</code> 讓使用者可以對這兩個物件進行操作</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child.component.html  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(true)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(false)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我們將畫面中的兩個 button 都綁定一個 click event，當點擊 + 這個按鍵就會觸發並將 true 做為參數傳給 parentValueChange，反之傳 false。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767HMoK6bEpxI.png\"></p>\n<h2 id=\"Configuring-the-parent-component-1\"><a href=\"#Configuring-the-parent-component-1\" class=\"headerlink\" title=\"Configuring the parent component\"></a>Configuring the parent component</h2><p>接著我們在父層中添加一個 property 讓我們可以透過子層操控這個屬性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  counterValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addOrSub</span>(<span class=\"params\">event: <span class=\"built_in\">boolean</span></span>) &#123;       <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 在 parent.component.ts 中新增一個 method，當接收到子層傳遞上來的數值時，判斷要將 counterValue 增加或減少。</li>\n</ul>\n<h2 id=\"Configuring-the-parent’s-template\"><a href=\"#Configuring-the-parent’s-template\" class=\"headerlink\" title=\"Configuring the parent’s template\"></a>Configuring the parent’s template</h2><p>接著在 parent.component.html 中將 method 綁定到 child’s event 上，讓子層的事件可以觸發到父層的 method。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>parent component property counter: &#123;&#123;counterValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> (<span class=\"attr\">newItemEvent</span>)=<span class=\"string\">&quot;addOrSub($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/201247676t6UI5GFIe.png\"></p>\n<p>如同 @Input() 一樣，在 () 內的是在子層利用 @Output() 裝飾的 property，因為他是一個 event，所以當子層觸發 event 後會將子層更改的值透過 event 傳遞給父層的 method，而 source( 等號右邊 ) 是父層定義用來接子層傳上來數值的 method。</p>\n<p>當你要對同一個子層同時使用 @Input() 和 @Output() 時，可以使用 Tow-way Binding [()]，就可以不用像上面一樣寫得這麼長了，這個方法會在之後詳細講解。</p>\n<h1 id=\"Parent-calls-an-ViewChild\"><a href=\"#Parent-calls-an-ViewChild\" class=\"headerlink\" title=\"Parent calls an @ViewChild()\"></a>Parent calls an @ViewChild()</h1><p>介紹完 @Input() 與 @Output() 後，接著要來介紹 @ViewChild() 這個東西，他的存在是因為在 Angular 中父層 Component 無法訪問到子層的 Component，因為<code>每個 Component 都是一個個獨立的 Class instance，所以在沒有互相連接的情況下是不能訪問到子層的 property 和 method</code>，所以當開發時遇到這類型的狀況時，需要將子層 Component 作為 ViewChild inject 給父層，在下面舉一個簡單的例子。</p>\n<h2 id=\"Configuring-the-child-component-2\"><a href=\"#Configuring-the-child-component-2\" class=\"headerlink\" title=\"Configuring the child component\"></a>Configuring the child component</h2><p>首先先在 child.component.ts 新增一個 property 與 method，讓使用者點擊畫面的 button 時可以加減這個值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  childCounter = <span class=\"number\">0</span>;       <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">parentValueChange</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) &#123;     <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">childCounter</span>++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">childCounter</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">childCounterValue</span>(<span class=\"params\"></span>) &#123;                   <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">childCounter</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 新增一個 property 讓他可以被增加或減少</li>\n<li>(2): 新增一個 method，當使用者點擊畫面按鈕時觸發</li>\n<li>(3): 新增一個 method，他將回傳子層的 property</li>\n</ul>\n<h2 id=\"Configuring-the-child’s-template-1\"><a href=\"#Configuring-the-child’s-template-1\" class=\"headerlink\" title=\"Configuring the child’s template\"></a>Configuring the child’s template</h2><p>接著我們在 child.component.html 中新增兩個 <code>&lt;button&gt;</code> 並將我們的 childCounter 顯示出來。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child.component.html  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Child component counter value: &#123;&#123;childCounter&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(true)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(false)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210731/20124767SgNEkRZBMp.png\"></p>\n<h2 id=\"Configuring-the-parent-component-2\"><a href=\"#Configuring-the-parent-component-2\" class=\"headerlink\" title=\"Configuring the parent component\"></a>Configuring the parent component</h2><p>接著我們在父層在 ‘@angular&#x2F;core’ 中引入 ViewChild 並將他綁定在子層上</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">AfterViewInit</span>, <span class=\"title class_\">ViewChild</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ChildComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../child/child.component&#x27;</span>;            <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterViewInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">&#x27;childComponent&#x27;</span>)                                        <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  childComponent!: <span class=\"title class_\">ChildComponent</span>;                                   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  counterValue = <span class=\"number\">0</span>;                                                  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngAfterViewInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getChildCounterValue</span>(<span class=\"params\"></span>) &#123;                                            <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">childComponent</span>.<span class=\"title function_\">childCounterValue</span>();      <span class=\"comment\">// (5)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 透過 import 將 ViewChild 引入</li>\n<li>(2): 透過 import 將 sub-component 引入</li>\n<li>(3): 使用 @ViewChild 將 childComponent  property 裝飾為可以獲得子層內容，並將這個 property 的型態設定為 ChildComponent</li>\n<li>(4): 新增一個 method，當使用者點擊畫面按鈕時觸發</li>\n<li>(5): 將子層的 property 賦予給父層的 property</li>\n</ul>\n<h2 id=\"Configuring-the-parent’s-template-1\"><a href=\"#Configuring-the-parent’s-template-1\" class=\"headerlink\" title=\"Configuring the parent’s template\"></a>Configuring the parent’s template</h2><p>接著我們在 parent.compoent.html 中新增一個 <code>&lt;button&gt;</code>，當使用這點擊時觸發將子層的 property 賦值給父層的 property 並將他顯示出來。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Get child component counter value: &#123;&#123;counterValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;getChildCounterValue()&quot;</span>&gt;</span>Get child value<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> #<span class=\"attr\">childComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到當我們更改了子層的 property 後， 我們點擊了父層的 button 後，父層的 component 透過利用 ViewChild inject 到 parent.component.ts 的方法直接獲得了子層中的 method，並將內容賦予在父層的 property 上。</p>\n<p>要注意的是，當要用這個方法獲得子層的 property 或 method 時，需要在 ngAfterViewInit( ) 結束之後才拿得到，因為需要 Angular 需要完整的初始化完自身 Component 和 sub-component 的 view 之後才能拿到  sub-component 的內容，這點要非常注意。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本篇章中介紹了如何透過 @Input( ) 進行從父層傳遞資料給子層的動作，也介紹了如何使用 @Output( ) 將子層的事件向上傳遞給父層， Component 之間的溝通再開發 Angular app 之間是非常重要的，所以一定要知道該如何使用，最後也介紹了如何將 sub-component inject 給父層，讓父層可以直接調用到 sub-component 的 property 和 method，下一篇要來介紹 ng-content，就是將一個 component 投影到另一個 component 上，那我們就下一篇再見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/inputs-outputs\">Angular.io - input &amp; output</a></li>\n</ul>"},{"title":"Day7. Content projection","date":"2021-09-07T02:17:12.000Z","_content":"\n本章節將要介紹如何使用 ng-content 將一個 Component 的內容投影到另一個 Component 中，創建靈活且可被重複使用的 Component，來滿足程式設計中 DRY (Don't repeat yourself) 的觀念。\n\n在 Angular 中 Content 是一種呈現的模式，可以在其中插入或投影另一個 Component 的內容，簡單來說，當我們在寫 HTML 時常常會有這樣的結構：\n```html\n<div>\n\t<p> Hello World!</p>\n</div>\n```\n在 Angular 的概念中可以把它想像成，有一個 `<p>` tag 被投影到 `<div>` 之中，雖然不是原理可能不這樣子，但是類似的模式。\n\n在 Angular 中有幾種常見的 ng-content 例子：\n\n- **Signle-slot content projection**: 投影來自單一 Source 的 Component 內容\n- **Multi-slot content projection**: 一個 Component 接收來自多個 Source 的 Component 內容\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg)\n\n<!--more-->\n\n# Single-slot content projection\n在 Angular 的 ng-content 中最基本的就是 single-slot content projection，他是指`將一個 Component 的內容投影在另一個 Component 之中`，我們做一個簡單的小例子來解釋這個行為。\n\n1. 首先我們先使用 Angular CLI 建立一個 Component\n\n    ```bash\n    ng generate component zippy-basic\n    ng g c zippy-basic\n    ```\n2. 在 zippy-basic.component.html 中添加 ng-content 到你希望投影內容出現的位置\n\n    ```html\n    <!-- zippy basic.component.html -->\n    <h2>Single-slot content projection</h2>\n    <div>\n        ng-content content: \n        <ng-content></ng-content>\n    </div>\n    ```\n\n3. 接著我們在 app.component.html 中使用 zippy-basic 的 selector\n\n    ```html\n    <!-- app.component.html -->\n    <app-zippy-basic></app-zippy-basic>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png)\n\n在畫面中我們看到，我們使用 ng-content 的位置什麼都沒有，是出了什麼 bug 嗎？其實不是!，是因為我們還沒決定該把什麼內容投影在 <ng-content> 的位置上，我們來更改一下 app.component.html 的內容\n\n```html\n<!-- app.component.html -->\n<app-zippy-basic>\n    <p>From app.component.html projection content to zippy-basic component</p>\n</app-zippy-basic>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png)\n\n當更改玩 app.component.html 的內容後，可以在畫面中看到，Angular 把我們夾在 `<app-zippy-basic>` 的內容放到 `<ng-content>` 的位置了，\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png)\n\n當然可能有人會問了，那...我直接把 `<p>` 放在 zippy-basic.component.html 不就好了嗎？\n\n```html\n<!-- zippy basic.component.html -->\n<h2>Single-slot content projection</h2>\n<div>\n    ng-content content: \n    <p>From app.component.html projection content to zippy-basic component</p>\n</div>\n```\n\n沒有錯，但是其實 ng-content 通常不是讓你放 html tag 的，我們來舉個例子，想像一下一個場景，當你在開發專案時，有沒有遇到在一個地方需要放置三種不同類型的 button ? 如果是這樣的話你是不是會這麼做\n\n```html\n<div>\n\t<!-- style1 button -->\n\t<label>This is style 1 button</label>\n\t<p>Hello world</p>\n\t<button>button</button>\n<div>\n<div>\n\t<!-- style2 button -->\n\t<label> This is style 2 button </label>\n\t<p>Hello world</p>\n\t<button>button</button>\n<div>\n<div>\n\t<!-- style3 button -->\n\t<label> This is style 3 button </label>\n\t<p>Hello world</p>\n\t<button>button</button>\n<div>\n```\n\n有沒有發現當使用上面這種 HTML 結構雖然可以達到我們要的目的，但是 `<label>`、`<p>`、`<button>` 一直在重複出現但內容卻是一樣的，就違背了 DRY 的原則了，這時候我們就可以使用 ng-content 先將模板做好，再把不同 style 的 `<button>` 投影進去就好，來舉個例子吧：\n\n1. 首先我們先建立一個模板 Component\n\n    ```bash\n    ng generate component content-template\n    ng g c content-template\n    ```\n2. 接著我們在 content-template.component.html 中把我們的模板寫好\n\n    ```html\n    <!-- content-template.component.html -->\n\n    <h1>Content projection number {{styleCount}}</h1>\n    <label>This is style {{styleCount}} button</label>\n    <p>Hello world</p>\n    <ng-content></ng-content>\n    ```\n\n    我們在原本放置不同 style 的地方使用 <ng-content> 變成將別的內容投影到這個位置上，對了還記得昨天提到的 @Input( ) 嗎？ 這邊我們來複習一下，`使用 ng-content 一樣可以由父層傳遞數據到子層喔`。\n\n    ```typescript\n    import { Component, Input } from '@angular/core';\n\n    @Component({\n      selector: 'app-content-template',\n      templateUrl: './content-template.component.html',\n    })\n    export class ContentTemplateComponent {\n      @Input() styleCount: string = '';\n      constructor() { }\n    }\n    ```\n3. 接著我們來更改一下 app.component.html 的內容，讓不同 style 的 button 投影到 content-template 吧\n\n    ```html\n    <!-- app.component.html -->\n    <app-content-template [styleCount]=\"'1'\">\n        <button class=\"style1\">Click Me</button>\n    </app-content-template>\n\n    <app-content-template [styleCount]=\"'2'\">\n        <button class=\"style2\">Click Me</button>\n    </app-content-template>\n\n    <app-content-template [styleCount]=\"'3'\">\n        <button class=\"style3\">Click Me</button>\n    </app-content-template>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png)\n\n這樣就完成了我們的目的，簡單的幾行就可以達到相同的目的，透過`先建立模板再將不同樣式或不同的 Component 投影進這個模板 Component 之中`，就可以讓這個模板 Component 在各個地方都被使用並且達到減少重複程式碼的目的。\n\n\n# Multi-slot content projection\n第二種其實與第一種非常相似，只不過變成了一個 Component 中投影了多個不同的內容，不過值得注意的是，由於是多個不同的內容投影在一個 Component 之中，所以就會有順序位置問題，於是 Angular 提供了 `select` 屬性讓你加在 ng-content 上，讓你可以`將某一個內容放在指定的位置上`，一樣舉個例子吧。\n\n1. 首先一樣創建一個新的 Component\n\n    ```bash\n    ng generate component zippy-basic\n    ng g c zippy-basic\n    ```\n2. 接著我們在 zippy-basic.component.html 中添加 ng-content 到想要的位置\n\n    ```html\n    <!-- zippy-basic.component.html -->\n\n    <h2>Multi-slot content projection</h2>\n    Default:\n    <ng-content></ng-content>\n    Question:\n    <ng-content></ng-content>\n    ```\n3. 接著我們把想要的位置添加一個 select 屬性，讓投影的位置固定在我們想要的地方\n\n    ```html\n    <!-- zippy-basic.component.html -->\n\n    <h2>Multi-slot content projection</h2>\n    Default:\n    <ng-content></ng-content>\n    Question:\n    <ng-content select=\"[question]\"></ng-content>\n    ```\n4. 最後我們在 app.component.html  中將我們像要投影的內容放進去，記得！指定位置的內容需要加上 select 的內容喔\n\n    ```html\n    <!-- app.component.html -->\n\n    <app-zippy-basic>\n      <p question>Is content projection cool?</p>\n      <p>Let's learn about content projection!</p>\n    </app-zippy-basic>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png)\n\n可以看到我們在 app.component.html 中 <p> 的順序與 UI 呈現的順序是顛倒的，就因為我們指定了有 question 這個 select  放置的地方。\n\n與 Single-slot content projection 一樣，Multi-slot content projection 的目的不在於放入原生 HTML 的 Tag，目的與上一個一樣，都是可以先建立一個模板之後將不同的內容投影到這個模板中，只不過多了`可以透過 select 讓你選擇放置的位置`與讓你`可以放多個投影`，這邊就不在做一次練習了，有興趣的話可以自己挑戰一下利用 Multi-slot content projection 完成與上面的例子一樣的內容。\n\n\n\n# 結論\n\n在本章中介紹了什麼是 content projection 以及該如何使用它，在官方文檔中其實除了 Single-slot content projection 與 Multi-slot content projection 之外其實還有第三個常見的投影 `Conditional content projection`，但是因為他牽扯的概念跟本篇章使用 ng-content 比較不一樣，他是透過使用 `ng-template` 來做到這個功能，所以就先不將它納入本章的範圍，這個方法會在之後介紹到。\n\n下一篇將會分享 template 是什麼，他在 Angular 中是 HTML 的角色，而可以在 template 中使用許多語法來達到靈活建立畫面的功能，那我們就下一篇再見吧。\n\n\n# Referece\n- [Angular.io - content-projection](https://angular.io/guide/content-projection)\n","source":"_posts/Angular/angular-07.md","raw":"---\ntitle: Day7. Content projection\ndate: 2021-09-07 10:17:12\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n本章節將要介紹如何使用 ng-content 將一個 Component 的內容投影到另一個 Component 中，創建靈活且可被重複使用的 Component，來滿足程式設計中 DRY (Don't repeat yourself) 的觀念。\n\n在 Angular 中 Content 是一種呈現的模式，可以在其中插入或投影另一個 Component 的內容，簡單來說，當我們在寫 HTML 時常常會有這樣的結構：\n```html\n<div>\n\t<p> Hello World!</p>\n</div>\n```\n在 Angular 的概念中可以把它想像成，有一個 `<p>` tag 被投影到 `<div>` 之中，雖然不是原理可能不這樣子，但是類似的模式。\n\n在 Angular 中有幾種常見的 ng-content 例子：\n\n- **Signle-slot content projection**: 投影來自單一 Source 的 Component 內容\n- **Multi-slot content projection**: 一個 Component 接收來自多個 Source 的 Component 內容\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg)\n\n<!--more-->\n\n# Single-slot content projection\n在 Angular 的 ng-content 中最基本的就是 single-slot content projection，他是指`將一個 Component 的內容投影在另一個 Component 之中`，我們做一個簡單的小例子來解釋這個行為。\n\n1. 首先我們先使用 Angular CLI 建立一個 Component\n\n    ```bash\n    ng generate component zippy-basic\n    ng g c zippy-basic\n    ```\n2. 在 zippy-basic.component.html 中添加 ng-content 到你希望投影內容出現的位置\n\n    ```html\n    <!-- zippy basic.component.html -->\n    <h2>Single-slot content projection</h2>\n    <div>\n        ng-content content: \n        <ng-content></ng-content>\n    </div>\n    ```\n\n3. 接著我們在 app.component.html 中使用 zippy-basic 的 selector\n\n    ```html\n    <!-- app.component.html -->\n    <app-zippy-basic></app-zippy-basic>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png)\n\n在畫面中我們看到，我們使用 ng-content 的位置什麼都沒有，是出了什麼 bug 嗎？其實不是!，是因為我們還沒決定該把什麼內容投影在 <ng-content> 的位置上，我們來更改一下 app.component.html 的內容\n\n```html\n<!-- app.component.html -->\n<app-zippy-basic>\n    <p>From app.component.html projection content to zippy-basic component</p>\n</app-zippy-basic>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png)\n\n當更改玩 app.component.html 的內容後，可以在畫面中看到，Angular 把我們夾在 `<app-zippy-basic>` 的內容放到 `<ng-content>` 的位置了，\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png)\n\n當然可能有人會問了，那...我直接把 `<p>` 放在 zippy-basic.component.html 不就好了嗎？\n\n```html\n<!-- zippy basic.component.html -->\n<h2>Single-slot content projection</h2>\n<div>\n    ng-content content: \n    <p>From app.component.html projection content to zippy-basic component</p>\n</div>\n```\n\n沒有錯，但是其實 ng-content 通常不是讓你放 html tag 的，我們來舉個例子，想像一下一個場景，當你在開發專案時，有沒有遇到在一個地方需要放置三種不同類型的 button ? 如果是這樣的話你是不是會這麼做\n\n```html\n<div>\n\t<!-- style1 button -->\n\t<label>This is style 1 button</label>\n\t<p>Hello world</p>\n\t<button>button</button>\n<div>\n<div>\n\t<!-- style2 button -->\n\t<label> This is style 2 button </label>\n\t<p>Hello world</p>\n\t<button>button</button>\n<div>\n<div>\n\t<!-- style3 button -->\n\t<label> This is style 3 button </label>\n\t<p>Hello world</p>\n\t<button>button</button>\n<div>\n```\n\n有沒有發現當使用上面這種 HTML 結構雖然可以達到我們要的目的，但是 `<label>`、`<p>`、`<button>` 一直在重複出現但內容卻是一樣的，就違背了 DRY 的原則了，這時候我們就可以使用 ng-content 先將模板做好，再把不同 style 的 `<button>` 投影進去就好，來舉個例子吧：\n\n1. 首先我們先建立一個模板 Component\n\n    ```bash\n    ng generate component content-template\n    ng g c content-template\n    ```\n2. 接著我們在 content-template.component.html 中把我們的模板寫好\n\n    ```html\n    <!-- content-template.component.html -->\n\n    <h1>Content projection number {{styleCount}}</h1>\n    <label>This is style {{styleCount}} button</label>\n    <p>Hello world</p>\n    <ng-content></ng-content>\n    ```\n\n    我們在原本放置不同 style 的地方使用 <ng-content> 變成將別的內容投影到這個位置上，對了還記得昨天提到的 @Input( ) 嗎？ 這邊我們來複習一下，`使用 ng-content 一樣可以由父層傳遞數據到子層喔`。\n\n    ```typescript\n    import { Component, Input } from '@angular/core';\n\n    @Component({\n      selector: 'app-content-template',\n      templateUrl: './content-template.component.html',\n    })\n    export class ContentTemplateComponent {\n      @Input() styleCount: string = '';\n      constructor() { }\n    }\n    ```\n3. 接著我們來更改一下 app.component.html 的內容，讓不同 style 的 button 投影到 content-template 吧\n\n    ```html\n    <!-- app.component.html -->\n    <app-content-template [styleCount]=\"'1'\">\n        <button class=\"style1\">Click Me</button>\n    </app-content-template>\n\n    <app-content-template [styleCount]=\"'2'\">\n        <button class=\"style2\">Click Me</button>\n    </app-content-template>\n\n    <app-content-template [styleCount]=\"'3'\">\n        <button class=\"style3\">Click Me</button>\n    </app-content-template>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png)\n\n這樣就完成了我們的目的，簡單的幾行就可以達到相同的目的，透過`先建立模板再將不同樣式或不同的 Component 投影進這個模板 Component 之中`，就可以讓這個模板 Component 在各個地方都被使用並且達到減少重複程式碼的目的。\n\n\n# Multi-slot content projection\n第二種其實與第一種非常相似，只不過變成了一個 Component 中投影了多個不同的內容，不過值得注意的是，由於是多個不同的內容投影在一個 Component 之中，所以就會有順序位置問題，於是 Angular 提供了 `select` 屬性讓你加在 ng-content 上，讓你可以`將某一個內容放在指定的位置上`，一樣舉個例子吧。\n\n1. 首先一樣創建一個新的 Component\n\n    ```bash\n    ng generate component zippy-basic\n    ng g c zippy-basic\n    ```\n2. 接著我們在 zippy-basic.component.html 中添加 ng-content 到想要的位置\n\n    ```html\n    <!-- zippy-basic.component.html -->\n\n    <h2>Multi-slot content projection</h2>\n    Default:\n    <ng-content></ng-content>\n    Question:\n    <ng-content></ng-content>\n    ```\n3. 接著我們把想要的位置添加一個 select 屬性，讓投影的位置固定在我們想要的地方\n\n    ```html\n    <!-- zippy-basic.component.html -->\n\n    <h2>Multi-slot content projection</h2>\n    Default:\n    <ng-content></ng-content>\n    Question:\n    <ng-content select=\"[question]\"></ng-content>\n    ```\n4. 最後我們在 app.component.html  中將我們像要投影的內容放進去，記得！指定位置的內容需要加上 select 的內容喔\n\n    ```html\n    <!-- app.component.html -->\n\n    <app-zippy-basic>\n      <p question>Is content projection cool?</p>\n      <p>Let's learn about content projection!</p>\n    </app-zippy-basic>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png](https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png)\n\n可以看到我們在 app.component.html 中 <p> 的順序與 UI 呈現的順序是顛倒的，就因為我們指定了有 question 這個 select  放置的地方。\n\n與 Single-slot content projection 一樣，Multi-slot content projection 的目的不在於放入原生 HTML 的 Tag，目的與上一個一樣，都是可以先建立一個模板之後將不同的內容投影到這個模板中，只不過多了`可以透過 select 讓你選擇放置的位置`與讓你`可以放多個投影`，這邊就不在做一次練習了，有興趣的話可以自己挑戰一下利用 Multi-slot content projection 完成與上面的例子一樣的內容。\n\n\n\n# 結論\n\n在本章中介紹了什麼是 content projection 以及該如何使用它，在官方文檔中其實除了 Single-slot content projection 與 Multi-slot content projection 之外其實還有第三個常見的投影 `Conditional content projection`，但是因為他牽扯的概念跟本篇章使用 ng-content 比較不一樣，他是透過使用 `ng-template` 來做到這個功能，所以就先不將它納入本章的範圍，這個方法會在之後介紹到。\n\n下一篇將會分享 template 是什麼，他在 Angular 中是 HTML 的角色，而可以在 template 中使用許多語法來達到靈活建立畫面的功能，那我們就下一篇再見吧。\n\n\n# Referece\n- [Angular.io - content-projection](https://angular.io/guide/content-projection)\n","slug":"Angular/angular-07","published":1,"updated":"2022-02-16T01:25:23.159Z","_id":"ckznurmnm000ekww3ehqsfmtv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本章節將要介紹如何使用 ng-content 將一個 Component 的內容投影到另一個 Component 中，創建靈活且可被重複使用的 Component，來滿足程式設計中 DRY (Don’t repeat yourself) 的觀念。</p>\n<p>在 Angular 中 Content 是一種呈現的模式，可以在其中插入或投影另一個 Component 的內容，簡單來說，當我們在寫 HTML 時常常會有這樣的結構：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Hello World!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 Angular 的概念中可以把它想像成，有一個 <code>&lt;p&gt;</code> tag 被投影到 <code>&lt;div&gt;</code> 之中，雖然不是原理可能不這樣子，但是類似的模式。</p>\n<p>在 Angular 中有幾種常見的 ng-content 例子：</p>\n<ul>\n<li><strong>Signle-slot content projection</strong>: 投影來自單一 Source 的 Component 內容</li>\n<li><strong>Multi-slot content projection</strong>: 一個 Component 接收來自多個 Source 的 Component 內容</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Single-slot-content-projection\"><a href=\"#Single-slot-content-projection\" class=\"headerlink\" title=\"Single-slot content projection\"></a>Single-slot content projection</h1><p>在 Angular 的 ng-content 中最基本的就是 single-slot content projection，他是指<code>將一個 Component 的內容投影在另一個 Component 之中</code>，我們做一個簡單的小例子來解釋這個行為。</p>\n<ol>\n<li><p>首先我們先使用 Angular CLI 建立一個 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component zippy-basic</span><br><span class=\"line\">ng g c zippy-basic</span><br></pre></td></tr></table></figure></li>\n<li><p>在 zippy-basic.component.html 中添加 ng-content 到你希望投影內容出現的位置</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy basic.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Single-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    ng-content content: </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著我們在 app.component.html 中使用 zippy-basic 的 selector</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-zippy-basic</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png\"></p>\n<p>在畫面中我們看到，我們使用 ng-content 的位置什麼都沒有，是出了什麼 bug 嗎？其實不是!，是因為我們還沒決定該把什麼內容投影在 <ng-content> 的位置上，我們來更改一下 app.component.html 的內容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>From app.component.html projection content to zippy-basic component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png\"></p>\n<p>當更改玩 app.component.html 的內容後，可以在畫面中看到，Angular 把我們夾在 <code>&lt;app-zippy-basic&gt;</code> 的內容放到 <code>&lt;ng-content&gt;</code> 的位置了，<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png\"></p>\n<p>當然可能有人會問了，那…我直接把 <code>&lt;p&gt;</code> 放在 zippy-basic.component.html 不就好了嗎？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy basic.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Single-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    ng-content content: </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>From app.component.html projection content to zippy-basic component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>沒有錯，但是其實 ng-content 通常不是讓你放 html tag 的，我們來舉個例子，想像一下一個場景，當你在開發專案時，有沒有遇到在一個地方需要放置三種不同類型的 button ? 如果是這樣的話你是不是會這麼做</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- style1 button --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>This is style 1 button<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- style2 button --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> This is style 2 button <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- style3 button --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> This is style 3 button <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有沒有發現當使用上面這種 HTML 結構雖然可以達到我們要的目的，但是 <code>&lt;label&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;button&gt;</code> 一直在重複出現但內容卻是一樣的，就違背了 DRY 的原則了，這時候我們就可以使用 ng-content 先將模板做好，再把不同 style 的 <code>&lt;button&gt;</code> 投影進去就好，來舉個例子吧：</p>\n<ol>\n<li><p>首先我們先建立一個模板 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component content-template</span><br><span class=\"line\">ng g c content-template</span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們在 content-template.component.html 中把我們的模板寫好</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- content-template.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Content projection number &#123;&#123;styleCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>This is style &#123;&#123;styleCount&#125;&#125; button<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 我們在原本放置不同 style 的地方使用 <ng-content> 變成將別的內容投影到這個位置上，對了還記得昨天提到的 @Input( ) 嗎？ 這邊我們來複習一下，<code>使用 ng-content 一樣可以由父層傳遞數據到子層喔</code>。</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-content-template&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./content-template.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContentTemplateComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">styleCount</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們來更改一下 app.component.html 的內容，讓不同 style 的 button 投影到 content-template 吧</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-content-template</span> [<span class=\"attr\">styleCount</span>]=<span class=\"string\">&quot;&#x27;1&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;style1&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-content-template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-content-template</span> [<span class=\"attr\">styleCount</span>]=<span class=\"string\">&quot;&#x27;2&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;style2&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-content-template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-content-template</span> [<span class=\"attr\">styleCount</span>]=<span class=\"string\">&quot;&#x27;3&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;style3&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-content-template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png\"></p>\n<p>這樣就完成了我們的目的，簡單的幾行就可以達到相同的目的，透過<code>先建立模板再將不同樣式或不同的 Component 投影進這個模板 Component 之中</code>，就可以讓這個模板 Component 在各個地方都被使用並且達到減少重複程式碼的目的。</p>\n<h1 id=\"Multi-slot-content-projection\"><a href=\"#Multi-slot-content-projection\" class=\"headerlink\" title=\"Multi-slot content projection\"></a>Multi-slot content projection</h1><p>第二種其實與第一種非常相似，只不過變成了一個 Component 中投影了多個不同的內容，不過值得注意的是，由於是多個不同的內容投影在一個 Component 之中，所以就會有順序位置問題，於是 Angular 提供了 <code>select</code> 屬性讓你加在 ng-content 上，讓你可以<code>將某一個內容放在指定的位置上</code>，一樣舉個例子吧。</p>\n<ol>\n<li><p>首先一樣創建一個新的 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component zippy-basic</span><br><span class=\"line\">ng g c zippy-basic</span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們在 zippy-basic.component.html 中添加 ng-content 到想要的位置</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy-basic.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Multi-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">Default:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">Question:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們把想要的位置添加一個 select 屬性，讓投影的位置固定在我們想要的地方</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy-basic.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Multi-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">Default:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">Question:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;[question]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>最後我們在 app.component.html  中將我們像要投影的內容放進去，記得！指定位置的內容需要加上 select 的內容喔</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">question</span>&gt;</span>Is content projection cool?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Let&#x27;s learn about content projection!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png\"></p>\n<p>可以看到我們在 app.component.html 中 <p> 的順序與 UI 呈現的順序是顛倒的，就因為我們指定了有 question 這個 select  放置的地方。</p>\n<p>與 Single-slot content projection 一樣，Multi-slot content projection 的目的不在於放入原生 HTML 的 Tag，目的與上一個一樣，都是可以先建立一個模板之後將不同的內容投影到這個模板中，只不過多了<code>可以透過 select 讓你選擇放置的位置</code>與讓你<code>可以放多個投影</code>，這邊就不在做一次練習了，有興趣的話可以自己挑戰一下利用 Multi-slot content projection 完成與上面的例子一樣的內容。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本章中介紹了什麼是 content projection 以及該如何使用它，在官方文檔中其實除了 Single-slot content projection 與 Multi-slot content projection 之外其實還有第三個常見的投影 <code>Conditional content projection</code>，但是因為他牽扯的概念跟本篇章使用 ng-content 比較不一樣，他是透過使用 <code>ng-template</code> 來做到這個功能，所以就先不將它納入本章的範圍，這個方法會在之後介紹到。</p>\n<p>下一篇將會分享 template 是什麼，他在 Angular 中是 HTML 的角色，而可以在 template 中使用許多語法來達到靈活建立畫面的功能，那我們就下一篇再見吧。</p>\n<h1 id=\"Referece\"><a href=\"#Referece\" class=\"headerlink\" title=\"Referece\"></a>Referece</h1><ul>\n<li><a href=\"https://angular.io/guide/content-projection\">Angular.io - content-projection</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本章節將要介紹如何使用 ng-content 將一個 Component 的內容投影到另一個 Component 中，創建靈活且可被重複使用的 Component，來滿足程式設計中 DRY (Don’t repeat yourself) 的觀念。</p>\n<p>在 Angular 中 Content 是一種呈現的模式，可以在其中插入或投影另一個 Component 的內容，簡單來說，當我們在寫 HTML 時常常會有這樣的結構：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Hello World!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 Angular 的概念中可以把它想像成，有一個 <code>&lt;p&gt;</code> tag 被投影到 <code>&lt;div&gt;</code> 之中，雖然不是原理可能不這樣子，但是類似的模式。</p>\n<p>在 Angular 中有幾種常見的 ng-content 例子：</p>\n<ul>\n<li><strong>Signle-slot content projection</strong>: 投影來自單一 Source 的 Component 內容</li>\n<li><strong>Multi-slot content projection</strong>: 一個 Component 接收來自多個 Source 的 Component 內容</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767Bs01NpTA05.jpg\"></p>","more":"<h1 id=\"Single-slot-content-projection\"><a href=\"#Single-slot-content-projection\" class=\"headerlink\" title=\"Single-slot content projection\"></a>Single-slot content projection</h1><p>在 Angular 的 ng-content 中最基本的就是 single-slot content projection，他是指<code>將一個 Component 的內容投影在另一個 Component 之中</code>，我們做一個簡單的小例子來解釋這個行為。</p>\n<ol>\n<li><p>首先我們先使用 Angular CLI 建立一個 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component zippy-basic</span><br><span class=\"line\">ng g c zippy-basic</span><br></pre></td></tr></table></figure></li>\n<li><p>在 zippy-basic.component.html 中添加 ng-content 到你希望投影內容出現的位置</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy basic.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Single-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    ng-content content: </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著我們在 app.component.html 中使用 zippy-basic 的 selector</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-zippy-basic</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767DnHr1yIlhY.png\"></p>\n<p>在畫面中我們看到，我們使用 ng-content 的位置什麼都沒有，是出了什麼 bug 嗎？其實不是!，是因為我們還沒決定該把什麼內容投影在 <ng-content> 的位置上，我們來更改一下 app.component.html 的內容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>From app.component.html projection content to zippy-basic component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767EQg91a8KNp.png\"></p>\n<p>當更改玩 app.component.html 的內容後，可以在畫面中看到，Angular 把我們夾在 <code>&lt;app-zippy-basic&gt;</code> 的內容放到 <code>&lt;ng-content&gt;</code> 的位置了，<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767bUsgQrsaND.png\"></p>\n<p>當然可能有人會問了，那…我直接把 <code>&lt;p&gt;</code> 放在 zippy-basic.component.html 不就好了嗎？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy basic.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Single-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    ng-content content: </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>From app.component.html projection content to zippy-basic component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>沒有錯，但是其實 ng-content 通常不是讓你放 html tag 的，我們來舉個例子，想像一下一個場景，當你在開發專案時，有沒有遇到在一個地方需要放置三種不同類型的 button ? 如果是這樣的話你是不是會這麼做</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- style1 button --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>This is style 1 button<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- style2 button --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> This is style 2 button <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- style3 button --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> This is style 3 button <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有沒有發現當使用上面這種 HTML 結構雖然可以達到我們要的目的，但是 <code>&lt;label&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;button&gt;</code> 一直在重複出現但內容卻是一樣的，就違背了 DRY 的原則了，這時候我們就可以使用 ng-content 先將模板做好，再把不同 style 的 <code>&lt;button&gt;</code> 投影進去就好，來舉個例子吧：</p>\n<ol>\n<li><p>首先我們先建立一個模板 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component content-template</span><br><span class=\"line\">ng g c content-template</span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們在 content-template.component.html 中把我們的模板寫好</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- content-template.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Content projection number &#123;&#123;styleCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>This is style &#123;&#123;styleCount&#125;&#125; button<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 我們在原本放置不同 style 的地方使用 <ng-content> 變成將別的內容投影到這個位置上，對了還記得昨天提到的 @Input( ) 嗎？ 這邊我們來複習一下，<code>使用 ng-content 一樣可以由父層傳遞數據到子層喔</code>。</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-content-template&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./content-template.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContentTemplateComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">styleCount</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們來更改一下 app.component.html 的內容，讓不同 style 的 button 投影到 content-template 吧</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-content-template</span> [<span class=\"attr\">styleCount</span>]=<span class=\"string\">&quot;&#x27;1&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;style1&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-content-template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-content-template</span> [<span class=\"attr\">styleCount</span>]=<span class=\"string\">&quot;&#x27;2&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;style2&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-content-template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-content-template</span> [<span class=\"attr\">styleCount</span>]=<span class=\"string\">&quot;&#x27;3&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;style3&quot;</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-content-template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767W7aNxciNY5.png\"></p>\n<p>這樣就完成了我們的目的，簡單的幾行就可以達到相同的目的，透過<code>先建立模板再將不同樣式或不同的 Component 投影進這個模板 Component 之中</code>，就可以讓這個模板 Component 在各個地方都被使用並且達到減少重複程式碼的目的。</p>\n<h1 id=\"Multi-slot-content-projection\"><a href=\"#Multi-slot-content-projection\" class=\"headerlink\" title=\"Multi-slot content projection\"></a>Multi-slot content projection</h1><p>第二種其實與第一種非常相似，只不過變成了一個 Component 中投影了多個不同的內容，不過值得注意的是，由於是多個不同的內容投影在一個 Component 之中，所以就會有順序位置問題，於是 Angular 提供了 <code>select</code> 屬性讓你加在 ng-content 上，讓你可以<code>將某一個內容放在指定的位置上</code>，一樣舉個例子吧。</p>\n<ol>\n<li><p>首先一樣創建一個新的 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component zippy-basic</span><br><span class=\"line\">ng g c zippy-basic</span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們在 zippy-basic.component.html 中添加 ng-content 到想要的位置</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy-basic.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Multi-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">Default:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">Question:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>接著我們把想要的位置添加一個 select 屬性，讓投影的位置固定在我們想要的地方</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- zippy-basic.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Multi-slot content projection<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">Default:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">Question:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;[question]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>最後我們在 app.component.html  中將我們像要投影的內容放進去，記得！指定位置的內容需要加上 select 的內容喔</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">question</span>&gt;</span>Is content projection cool?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Let&#x27;s learn about content projection!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-zippy-basic</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210801/20124767IFrm7OvyYX.png\"></p>\n<p>可以看到我們在 app.component.html 中 <p> 的順序與 UI 呈現的順序是顛倒的，就因為我們指定了有 question 這個 select  放置的地方。</p>\n<p>與 Single-slot content projection 一樣，Multi-slot content projection 的目的不在於放入原生 HTML 的 Tag，目的與上一個一樣，都是可以先建立一個模板之後將不同的內容投影到這個模板中，只不過多了<code>可以透過 select 讓你選擇放置的位置</code>與讓你<code>可以放多個投影</code>，這邊就不在做一次練習了，有興趣的話可以自己挑戰一下利用 Multi-slot content projection 完成與上面的例子一樣的內容。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本章中介紹了什麼是 content projection 以及該如何使用它，在官方文檔中其實除了 Single-slot content projection 與 Multi-slot content projection 之外其實還有第三個常見的投影 <code>Conditional content projection</code>，但是因為他牽扯的概念跟本篇章使用 ng-content 比較不一樣，他是透過使用 <code>ng-template</code> 來做到這個功能，所以就先不將它納入本章的範圍，這個方法會在之後介紹到。</p>\n<p>下一篇將會分享 template 是什麼，他在 Angular 中是 HTML 的角色，而可以在 template 中使用許多語法來達到靈活建立畫面的功能，那我們就下一篇再見吧。</p>\n<h1 id=\"Referece\"><a href=\"#Referece\" class=\"headerlink\" title=\"Referece\"></a>Referece</h1><ul>\n<li><a href=\"https://angular.io/guide/content-projection\">Angular.io - content-projection</a></li>\n</ul>"},{"title":"Day8. Templates and Text interpolation","date":"2021-09-08T02:12:25.000Z","_content":"\n前幾天大概講完了 Angular 的 Component 的基本功能與介紹，在很多例子中可以看到在 component.html 中使用了滿多沒看過的語法，比如 `{{ value }}` 或 `(clicl)=\"onClick()\"` 等等的，在前幾天可能會對他覺得非常陌生，別擔心接下來我們會對這些語法有詳細的說明。\n\n在 Angular 中，Templates 是一段 HTML，可以在 Templates 中使用特殊的語法來構建 Angular app 的畫面，那就讓我們繼續往下看吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png](https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png)\n\n<!-- more -->\n\n\n# Empower your HTML\n在我們開發 Angular app 時，可以在 Templates 使用特殊的語法來擴展 HTML 的詞彙表，舉例來說可以在 Angular 通過內置模板函數、變量、event  和數據綁定，可以幫助你在開發過程中動態的獲得和設置 DOM 的值。\n\n雖然說 Angular 的 Template 是一段 HTML，但是所有的 templates 都只是整個網頁的一部分，而不是整個頁面，所以不需要在每一個 templates 中添加 `<html>`、`<body>` 或 `<base>` 之類的元素，而出於安全考量 Angular 也不允許在 templates 中加入 `<script>` 。\n\n\n\n# Text interpolation\n介紹完什麼是 Templates 後接著要來介紹一些 templates 的語法，首先我們要介紹的是 Text interpolation，顧名思義就是將 component.ts 中的變量插入到 templates 中，`當這個變量在 component.ts 中發生變化時，也會同步在 template 中發生變化`，意味著畫面也會跟著變化。\n\n在默認情況下，插值是使用雙花括號 `{{` 和 `}}` 將插值夾在其中，來舉個簡單的例子：\n1. 首先先在 app.component.ts 中添加一個變量\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      currentCustomer = 'Fandix'\n    }\n    ```\n2. 在 app.component.html 中將這個值插入到 template 中\n\n    ```typescript\n    <!-- app.component.html -->\n\n    <h3>Current customer: {{ currentCustomer }}</h3>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png)\n\n在畫面可以看到確實有將 component.ts 當中的變量（currentCustomer）的內容呈現出來，那我們將變量的值更改一下\n\n```typescript\ncurrentCustomer = 'Tako'\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png)\n當 component.ts 中的變量內容改變後會動態的顯示在畫面中，這就是 Text interpolation 的用途。\n\n\n# Template expressions\n可以在 template expressions 在雙花括號中`{{ }}`產生一個值，Angular 會自動解析表達式並將解析過後的內容分配給綁定目標的屬性，這個目標可以是 HTML Tag、Component selector 或 directive。\n\n## Resolving expressions with interpolation\n\n一般來說在雙花括號之間填入一個模板表達式的話，Angular 會先將他做計算，得到結果後將它轉成字串並顯示出來，舉個簡單的例子，透過差值將兩個數字相加並呈現出來：\n\n```html\n<!-- app.component.html -->\n\n<h3>The sum of 1 + 1 is {{1 + 1}}</h3>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png)\n\nAngular 在 templates 的雙花括號中收到了一個表達式，他會自動將這個表達式做計算，像上面的例子中的 `1 + 1`，得到結果後將它轉成字串並顯示出來，所以畫面中會顯示 1 + 1 = 2。\n\n而表達式也可以調用這個 component.ts 中的 method，比如說：\n\n1. 在  app.component.ts 中新增一個 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      getValue() {\n        return 'Fandix';\n      }\n    }\n    ```\n2. 在 app.component.html 中將調用 method 的表達式填入到雙花括號中\n\n    ```html\n    <!-- app.component.html -->\n\n    <h3>Hello {{ getValue() }}</h3>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png)\n\n可以看到 Angular 在 template 調用了 component.ts 中的 method ，獲得到的值將他呈現在畫面中，而 Angular 在遇到差值時會執行以下的任務：\n1. 計算雙花括號中的所有表達式\n2. 將表達式的結果轉換為字串\n3. 將結果鏈接到任何相鄰的文字字串\n4. 將組合分配給element 或 directive 屬性\n\n## Syntas\n\n一樣的，要運用一個新的程式語言之前，需要先充分熟悉他的語法，不然會產生意料之外的錯誤喔，其實 templates expressions 的語法基本上都跟 Javascript expressions 一樣，但是有幾個特例：\n\n- 你不能使用有會產生 side effects 的 javascript expressions\n    - 賦值（=, +=, -=, ...）\n    - 運算符（new, typeof, instanceof）\n    - 用分號（;）鏈結 expressions\n    - 遞增或遞減運算符（++,  --）\n    - 還有一些 ES6 的運算符\n- 與 javascript 語法有明顯差異的：\n    - 不支援 bit 的運算符（|,  &）\n    - 新的 template expressions（|,  ?,  !, ...）\n\n\n\n# Preventing name collisions\n\n介紹完如何將 component 中的變量插入 template 讓畫面隨著變量動態改變後，要注意的是在使用這個功能時要防止名稱衝突，因為當你使用了 Text interpolationt 插入變量後， Angular 對這個表達式的計算 context 是從 `template variable`、`directive` 和 `component member` 的聯合，所以當你插入了一個名稱到 template 但這個名稱在多個地方都有定義的話， Angular 會用以下的邏輯來確定 context：\n\n1. 在 template 中的變量名稱 (ngFor 中的變量)\n2. 在 directive 中的 context 名稱\n3. Component 中的變量名稱\n\n所以當你在使用 Text interpolationt  時盡量保持所有變量名稱唯一，不然可能會被 shadowing 掉你原本想要呈現內容，我們舉個例子：\n\n這邊先提早介紹 *ngFor，他也是使用在 template 當中，用法與 javascript 的 for loop 一樣，當你的 component 中的變量是一個 arr 時，想要把這個 arr 中的數值都呈現在畫面上就可以使用這個方法，一樣舉個簡單的例子吧：\n\n1. 首先先在 app.component.ts 中宣告一個 arr 變數並將裡面填上要呈現的內容。\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      displayArray = ['Hello', 'world', 'Angular', 'good'];\n    }\n    ```\n\n2. 接著在 app.component.html 中使用 *ngFor 將他們全部呈現在畫面上\n\n    ```html\n    <!-- app.component.html -->\n\n    <div *ngFor=\"let content of displayArray\">\n        {{content}}\n    </div>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png)\n\n在畫面中可以看到透過 *ngFor 不斷的遞迴將 displayArray 中的內容都顯示出來，這邊暫時介紹到這邊，之後會更詳細的介紹他的使用方法。\n\n大概了解的 *ngFor 的使用方法後，將畫面回到命名衝突，當你使用 *ngFor 命名迭代出來的每一個值得名稱時要注意這個名稱有沒有在其他地方被引用到，如果有則會將其他相同名稱的內容 shadowing 掉，舉個小例子吧。\n\n1. 先在 app.component.ts 中定義兩個變量\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      customers = [ 'Ebony', 'Chiho'];\n      customer = 'Padma';\n    }\n    ```\n\n2. 在 app.component.html 中將這兩個變量呈現在畫面中\n\n    ```html\n    <!-- app.component.html -->\n\n    <div>\n      <ul>\n        <li *ngFor=\"let customer of customers\">\n    \t\t\t<h1>Hello, {{ customer }}</h1>\n    \t\t\t{{ customer }}\n    \t\t</li>\n      </ul>\n    </div>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png)\n在畫面中可以看到，原本我們希望在每次迭代 customers 中的值時，都將 customer = 'Padma' 添加在上面，但是由於 *ngFor 中的變量 shadowing 了 customer 所以導致 'Padma' 無法呈現出來，所以在使用 Text interpolationt 插入變量時要注意有沒有相同的名稱喔！\n\n\n\n# 結論\n\n本篇中介紹了如何在 template 中插入 component 的變量以及該注意的事情，最後介紹幾個在使用 Text interpolationt 時最好的設計規範以避免發生錯誤或是增加程式的可閱讀性：\n\n- **使用簡短的表達**：盡可能使用 component 中 property 的名稱或 method 調用。將應用程序和業務邏輯保留在 component 中而 template 只負責調用就可以，這樣以便進行開發和測試。\n- **快速執行**：Angular 會在在每個變更檢測週期後執行模板表達式，許多非同步的行為都會觸發變更檢測週期，比如 Promise、HTTP 的結果、timer events、按鍵與滑鼠的移動等等，expression 應該快速的完成不然會讓使用者體驗下降，所以當需要進行長時間計算的事情時，請考慮使用緩存值。\n- **沒有明顯的 side effect**：模板表達式不應該更改除了目標屬性值之外的任何應用程序狀態，讀取 component 的值時不應更改到其他的顯示值。\n\n\n\n# Reference\n\n- [Angular.io - interpolation](https://angular.io/guide/interpolation)","source":"_posts/Angular/angular-08.md","raw":"---\ntitle: Day8. Templates and Text interpolation\ndate: 2021-09-08 10:12:25\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n前幾天大概講完了 Angular 的 Component 的基本功能與介紹，在很多例子中可以看到在 component.html 中使用了滿多沒看過的語法，比如 `{{ value }}` 或 `(clicl)=\"onClick()\"` 等等的，在前幾天可能會對他覺得非常陌生，別擔心接下來我們會對這些語法有詳細的說明。\n\n在 Angular 中，Templates 是一段 HTML，可以在 Templates 中使用特殊的語法來構建 Angular app 的畫面，那就讓我們繼續往下看吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png](https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png)\n\n<!-- more -->\n\n\n# Empower your HTML\n在我們開發 Angular app 時，可以在 Templates 使用特殊的語法來擴展 HTML 的詞彙表，舉例來說可以在 Angular 通過內置模板函數、變量、event  和數據綁定，可以幫助你在開發過程中動態的獲得和設置 DOM 的值。\n\n雖然說 Angular 的 Template 是一段 HTML，但是所有的 templates 都只是整個網頁的一部分，而不是整個頁面，所以不需要在每一個 templates 中添加 `<html>`、`<body>` 或 `<base>` 之類的元素，而出於安全考量 Angular 也不允許在 templates 中加入 `<script>` 。\n\n\n\n# Text interpolation\n介紹完什麼是 Templates 後接著要來介紹一些 templates 的語法，首先我們要介紹的是 Text interpolation，顧名思義就是將 component.ts 中的變量插入到 templates 中，`當這個變量在 component.ts 中發生變化時，也會同步在 template 中發生變化`，意味著畫面也會跟著變化。\n\n在默認情況下，插值是使用雙花括號 `{{` 和 `}}` 將插值夾在其中，來舉個簡單的例子：\n1. 首先先在 app.component.ts 中添加一個變量\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      currentCustomer = 'Fandix'\n    }\n    ```\n2. 在 app.component.html 中將這個值插入到 template 中\n\n    ```typescript\n    <!-- app.component.html -->\n\n    <h3>Current customer: {{ currentCustomer }}</h3>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png)\n\n在畫面可以看到確實有將 component.ts 當中的變量（currentCustomer）的內容呈現出來，那我們將變量的值更改一下\n\n```typescript\ncurrentCustomer = 'Tako'\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png)\n當 component.ts 中的變量內容改變後會動態的顯示在畫面中，這就是 Text interpolation 的用途。\n\n\n# Template expressions\n可以在 template expressions 在雙花括號中`{{ }}`產生一個值，Angular 會自動解析表達式並將解析過後的內容分配給綁定目標的屬性，這個目標可以是 HTML Tag、Component selector 或 directive。\n\n## Resolving expressions with interpolation\n\n一般來說在雙花括號之間填入一個模板表達式的話，Angular 會先將他做計算，得到結果後將它轉成字串並顯示出來，舉個簡單的例子，透過差值將兩個數字相加並呈現出來：\n\n```html\n<!-- app.component.html -->\n\n<h3>The sum of 1 + 1 is {{1 + 1}}</h3>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png)\n\nAngular 在 templates 的雙花括號中收到了一個表達式，他會自動將這個表達式做計算，像上面的例子中的 `1 + 1`，得到結果後將它轉成字串並顯示出來，所以畫面中會顯示 1 + 1 = 2。\n\n而表達式也可以調用這個 component.ts 中的 method，比如說：\n\n1. 在  app.component.ts 中新增一個 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      getValue() {\n        return 'Fandix';\n      }\n    }\n    ```\n2. 在 app.component.html 中將調用 method 的表達式填入到雙花括號中\n\n    ```html\n    <!-- app.component.html -->\n\n    <h3>Hello {{ getValue() }}</h3>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png)\n\n可以看到 Angular 在 template 調用了 component.ts 中的 method ，獲得到的值將他呈現在畫面中，而 Angular 在遇到差值時會執行以下的任務：\n1. 計算雙花括號中的所有表達式\n2. 將表達式的結果轉換為字串\n3. 將結果鏈接到任何相鄰的文字字串\n4. 將組合分配給element 或 directive 屬性\n\n## Syntas\n\n一樣的，要運用一個新的程式語言之前，需要先充分熟悉他的語法，不然會產生意料之外的錯誤喔，其實 templates expressions 的語法基本上都跟 Javascript expressions 一樣，但是有幾個特例：\n\n- 你不能使用有會產生 side effects 的 javascript expressions\n    - 賦值（=, +=, -=, ...）\n    - 運算符（new, typeof, instanceof）\n    - 用分號（;）鏈結 expressions\n    - 遞增或遞減運算符（++,  --）\n    - 還有一些 ES6 的運算符\n- 與 javascript 語法有明顯差異的：\n    - 不支援 bit 的運算符（|,  &）\n    - 新的 template expressions（|,  ?,  !, ...）\n\n\n\n# Preventing name collisions\n\n介紹完如何將 component 中的變量插入 template 讓畫面隨著變量動態改變後，要注意的是在使用這個功能時要防止名稱衝突，因為當你使用了 Text interpolationt 插入變量後， Angular 對這個表達式的計算 context 是從 `template variable`、`directive` 和 `component member` 的聯合，所以當你插入了一個名稱到 template 但這個名稱在多個地方都有定義的話， Angular 會用以下的邏輯來確定 context：\n\n1. 在 template 中的變量名稱 (ngFor 中的變量)\n2. 在 directive 中的 context 名稱\n3. Component 中的變量名稱\n\n所以當你在使用 Text interpolationt  時盡量保持所有變量名稱唯一，不然可能會被 shadowing 掉你原本想要呈現內容，我們舉個例子：\n\n這邊先提早介紹 *ngFor，他也是使用在 template 當中，用法與 javascript 的 for loop 一樣，當你的 component 中的變量是一個 arr 時，想要把這個 arr 中的數值都呈現在畫面上就可以使用這個方法，一樣舉個簡單的例子吧：\n\n1. 首先先在 app.component.ts 中宣告一個 arr 變數並將裡面填上要呈現的內容。\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      displayArray = ['Hello', 'world', 'Angular', 'good'];\n    }\n    ```\n\n2. 接著在 app.component.html 中使用 *ngFor 將他們全部呈現在畫面上\n\n    ```html\n    <!-- app.component.html -->\n\n    <div *ngFor=\"let content of displayArray\">\n        {{content}}\n    </div>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png)\n\n在畫面中可以看到透過 *ngFor 不斷的遞迴將 displayArray 中的內容都顯示出來，這邊暫時介紹到這邊，之後會更詳細的介紹他的使用方法。\n\n大概了解的 *ngFor 的使用方法後，將畫面回到命名衝突，當你使用 *ngFor 命名迭代出來的每一個值得名稱時要注意這個名稱有沒有在其他地方被引用到，如果有則會將其他相同名稱的內容 shadowing 掉，舉個小例子吧。\n\n1. 先在 app.component.ts 中定義兩個變量\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      customers = [ 'Ebony', 'Chiho'];\n      customer = 'Padma';\n    }\n    ```\n\n2. 在 app.component.html 中將這兩個變量呈現在畫面中\n\n    ```html\n    <!-- app.component.html -->\n\n    <div>\n      <ul>\n        <li *ngFor=\"let customer of customers\">\n    \t\t\t<h1>Hello, {{ customer }}</h1>\n    \t\t\t{{ customer }}\n    \t\t</li>\n      </ul>\n    </div>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png](https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png)\n在畫面中可以看到，原本我們希望在每次迭代 customers 中的值時，都將 customer = 'Padma' 添加在上面，但是由於 *ngFor 中的變量 shadowing 了 customer 所以導致 'Padma' 無法呈現出來，所以在使用 Text interpolationt 插入變量時要注意有沒有相同的名稱喔！\n\n\n\n# 結論\n\n本篇中介紹了如何在 template 中插入 component 的變量以及該注意的事情，最後介紹幾個在使用 Text interpolationt 時最好的設計規範以避免發生錯誤或是增加程式的可閱讀性：\n\n- **使用簡短的表達**：盡可能使用 component 中 property 的名稱或 method 調用。將應用程序和業務邏輯保留在 component 中而 template 只負責調用就可以，這樣以便進行開發和測試。\n- **快速執行**：Angular 會在在每個變更檢測週期後執行模板表達式，許多非同步的行為都會觸發變更檢測週期，比如 Promise、HTTP 的結果、timer events、按鍵與滑鼠的移動等等，expression 應該快速的完成不然會讓使用者體驗下降，所以當需要進行長時間計算的事情時，請考慮使用緩存值。\n- **沒有明顯的 side effect**：模板表達式不應該更改除了目標屬性值之外的任何應用程序狀態，讀取 component 的值時不應更改到其他的顯示值。\n\n\n\n# Reference\n\n- [Angular.io - interpolation](https://angular.io/guide/interpolation)","slug":"Angular/angular-08","published":1,"updated":"2022-02-16T01:25:21.271Z","_id":"ckznurmnn000jkww3et9t3tk5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前幾天大概講完了 Angular 的 Component 的基本功能與介紹，在很多例子中可以看到在 component.html 中使用了滿多沒看過的語法，比如 <code>&#123;&#123; value &#125;&#125;</code> 或 <code>(clicl)=&quot;onClick()&quot;</code> 等等的，在前幾天可能會對他覺得非常陌生，別擔心接下來我們會對這些語法有詳細的說明。</p>\n<p>在 Angular 中，Templates 是一段 HTML，可以在 Templates 中使用特殊的語法來構建 Angular app 的畫面，那就讓我們繼續往下看吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png\"></p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"Empower-your-HTML\"><a href=\"#Empower-your-HTML\" class=\"headerlink\" title=\"Empower your HTML\"></a>Empower your HTML</h1><p>在我們開發 Angular app 時，可以在 Templates 使用特殊的語法來擴展 HTML 的詞彙表，舉例來說可以在 Angular 通過內置模板函數、變量、event  和數據綁定，可以幫助你在開發過程中動態的獲得和設置 DOM 的值。</p>\n<p>雖然說 Angular 的 Template 是一段 HTML，但是所有的 templates 都只是整個網頁的一部分，而不是整個頁面，所以不需要在每一個 templates 中添加 <code>&lt;html&gt;</code>、<code>&lt;body&gt;</code> 或 <code>&lt;base&gt;</code> 之類的元素，而出於安全考量 Angular 也不允許在 templates 中加入 <code>&lt;script&gt;</code> 。</p>\n<h1 id=\"Text-interpolation\"><a href=\"#Text-interpolation\" class=\"headerlink\" title=\"Text interpolation\"></a>Text interpolation</h1><p>介紹完什麼是 Templates 後接著要來介紹一些 templates 的語法，首先我們要介紹的是 Text interpolation，顧名思義就是將 component.ts 中的變量插入到 templates 中，<code>當這個變量在 component.ts 中發生變化時，也會同步在 template 中發生變化</code>，意味著畫面也會跟著變化。</p>\n<p>在默認情況下，插值是使用雙花括號 <code>&#123;&#123;` 和 `&#125;&#125;</code> 將插值夾在其中，來舉個簡單的例子：</p>\n<ol>\n<li><p>首先先在 app.component.ts 中添加一個變量</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  currentCustomer = <span class=\"string\">&#x27;Fandix&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在 app.component.html 中將這個值插入到 template 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- app.<span class=\"property\">component</span>.<span class=\"property\">html</span> --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Current customer: &#123;&#123; currentCustomer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png\"></p>\n<p>在畫面可以看到確實有將 component.ts 當中的變量（currentCustomer）的內容呈現出來，那我們將變量的值更改一下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentCustomer = <span class=\"string\">&#x27;Tako&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png\"><br>當 component.ts 中的變量內容改變後會動態的顯示在畫面中，這就是 Text interpolation 的用途。</p>\n<h1 id=\"Template-expressions\"><a href=\"#Template-expressions\" class=\"headerlink\" title=\"Template expressions\"></a>Template expressions</h1><p>可以在 template expressions 在雙花括號中<code>&#123;&#123; &#125;&#125;</code>產生一個值，Angular 會自動解析表達式並將解析過後的內容分配給綁定目標的屬性，這個目標可以是 HTML Tag、Component selector 或 directive。</p>\n<h2 id=\"Resolving-expressions-with-interpolation\"><a href=\"#Resolving-expressions-with-interpolation\" class=\"headerlink\" title=\"Resolving expressions with interpolation\"></a>Resolving expressions with interpolation</h2><p>一般來說在雙花括號之間填入一個模板表達式的話，Angular 會先將他做計算，得到結果後將它轉成字串並顯示出來，舉個簡單的例子，透過差值將兩個數字相加並呈現出來：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>The sum of 1 + 1 is &#123;&#123;1 + 1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png\"></p>\n<p>Angular 在 templates 的雙花括號中收到了一個表達式，他會自動將這個表達式做計算，像上面的例子中的 <code>1 + 1</code>，得到結果後將它轉成字串並顯示出來，所以畫面中會顯示 1 + 1 &#x3D; 2。</p>\n<p>而表達式也可以調用這個 component.ts 中的 method，比如說：</p>\n<ol>\n<li><p>在  app.component.ts 中新增一個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Fandix&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在 app.component.html 中將調用 method 的表達式填入到雙花括號中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Hello &#123;&#123; getValue() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png\"></p>\n<p>可以看到 Angular 在 template 調用了 component.ts 中的 method ，獲得到的值將他呈現在畫面中，而 Angular 在遇到差值時會執行以下的任務：</p>\n<ol>\n<li>計算雙花括號中的所有表達式</li>\n<li>將表達式的結果轉換為字串</li>\n<li>將結果鏈接到任何相鄰的文字字串</li>\n<li>將組合分配給element 或 directive 屬性</li>\n</ol>\n<h2 id=\"Syntas\"><a href=\"#Syntas\" class=\"headerlink\" title=\"Syntas\"></a>Syntas</h2><p>一樣的，要運用一個新的程式語言之前，需要先充分熟悉他的語法，不然會產生意料之外的錯誤喔，其實 templates expressions 的語法基本上都跟 Javascript expressions 一樣，但是有幾個特例：</p>\n<ul>\n<li>你不能使用有會產生 side effects 的 javascript expressions<ul>\n<li>賦值（&#x3D;, +&#x3D;, -&#x3D;, …）</li>\n<li>運算符（new, typeof, instanceof）</li>\n<li>用分號（;）鏈結 expressions</li>\n<li>遞增或遞減運算符（++,  –）</li>\n<li>還有一些 ES6 的運算符</li>\n</ul>\n</li>\n<li>與 javascript 語法有明顯差異的：<ul>\n<li>不支援 bit 的運算符（|,  &amp;）</li>\n<li>新的 template expressions（|,  ?,  !, …）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Preventing-name-collisions\"><a href=\"#Preventing-name-collisions\" class=\"headerlink\" title=\"Preventing name collisions\"></a>Preventing name collisions</h1><p>介紹完如何將 component 中的變量插入 template 讓畫面隨著變量動態改變後，要注意的是在使用這個功能時要防止名稱衝突，因為當你使用了 Text interpolationt 插入變量後， Angular 對這個表達式的計算 context 是從 <code>template variable</code>、<code>directive</code> 和 <code>component member</code> 的聯合，所以當你插入了一個名稱到 template 但這個名稱在多個地方都有定義的話， Angular 會用以下的邏輯來確定 context：</p>\n<ol>\n<li>在 template 中的變量名稱 (ngFor 中的變量)</li>\n<li>在 directive 中的 context 名稱</li>\n<li>Component 中的變量名稱</li>\n</ol>\n<p>所以當你在使用 Text interpolationt  時盡量保持所有變量名稱唯一，不然可能會被 shadowing 掉你原本想要呈現內容，我們舉個例子：</p>\n<p>這邊先提早介紹 *ngFor，他也是使用在 template 當中，用法與 javascript 的 for loop 一樣，當你的 component 中的變量是一個 arr 時，想要把這個 arr 中的數值都呈現在畫面上就可以使用這個方法，一樣舉個簡單的例子吧：</p>\n<ol>\n<li><p>首先先在 app.component.ts 中宣告一個 arr 變數並將裡面填上要呈現的內容。</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  displayArray = [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>, <span class=\"string\">&#x27;Angular&#x27;</span>, <span class=\"string\">&#x27;good&#x27;</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 app.component.html 中使用 *ngFor 將他們全部呈現在畫面上</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let content of displayArray&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;content&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png\"></p>\n<p>在畫面中可以看到透過 *ngFor 不斷的遞迴將 displayArray 中的內容都顯示出來，這邊暫時介紹到這邊，之後會更詳細的介紹他的使用方法。</p>\n<p>大概了解的 *ngFor 的使用方法後，將畫面回到命名衝突，當你使用 *ngFor 命名迭代出來的每一個值得名稱時要注意這個名稱有沒有在其他地方被引用到，如果有則會將其他相同名稱的內容 shadowing 掉，舉個小例子吧。</p>\n<ol>\n<li><p>先在 app.component.ts 中定義兩個變量</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  customers = [ <span class=\"string\">&#x27;Ebony&#x27;</span>, <span class=\"string\">&#x27;Chiho&#x27;</span>];</span><br><span class=\"line\">  customer = <span class=\"string\">&#x27;Padma&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中將這兩個變量呈現在畫面中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let customer of customers&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;&#123; customer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t&#123;&#123; customer &#125;&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png\"><br>在畫面中可以看到，原本我們希望在每次迭代 customers 中的值時，都將 customer &#x3D; ‘Padma’ 添加在上面，但是由於 *ngFor 中的變量 shadowing 了 customer 所以導致 ‘Padma’ 無法呈現出來，所以在使用 Text interpolationt 插入變量時要注意有沒有相同的名稱喔！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中介紹了如何在 template 中插入 component 的變量以及該注意的事情，最後介紹幾個在使用 Text interpolationt 時最好的設計規範以避免發生錯誤或是增加程式的可閱讀性：</p>\n<ul>\n<li><strong>使用簡短的表達</strong>：盡可能使用 component 中 property 的名稱或 method 調用。將應用程序和業務邏輯保留在 component 中而 template 只負責調用就可以，這樣以便進行開發和測試。</li>\n<li><strong>快速執行</strong>：Angular 會在在每個變更檢測週期後執行模板表達式，許多非同步的行為都會觸發變更檢測週期，比如 Promise、HTTP 的結果、timer events、按鍵與滑鼠的移動等等，expression 應該快速的完成不然會讓使用者體驗下降，所以當需要進行長時間計算的事情時，請考慮使用緩存值。</li>\n<li><strong>沒有明顯的 side effect</strong>：模板表達式不應該更改除了目標屬性值之外的任何應用程序狀態，讀取 component 的值時不應更改到其他的顯示值。</li>\n</ul>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/interpolation\">Angular.io - interpolation</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>前幾天大概講完了 Angular 的 Component 的基本功能與介紹，在很多例子中可以看到在 component.html 中使用了滿多沒看過的語法，比如 <code>&#123;&#123; value &#125;&#125;</code> 或 <code>(clicl)=&quot;onClick()&quot;</code> 等等的，在前幾天可能會對他覺得非常陌生，別擔心接下來我們會對這些語法有詳細的說明。</p>\n<p>在 Angular 中，Templates 是一段 HTML，可以在 Templates 中使用特殊的語法來構建 Angular app 的畫面，那就讓我們繼續往下看吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/201247672iUKFGyC6V.png\"></p>","more":"<h1 id=\"Empower-your-HTML\"><a href=\"#Empower-your-HTML\" class=\"headerlink\" title=\"Empower your HTML\"></a>Empower your HTML</h1><p>在我們開發 Angular app 時，可以在 Templates 使用特殊的語法來擴展 HTML 的詞彙表，舉例來說可以在 Angular 通過內置模板函數、變量、event  和數據綁定，可以幫助你在開發過程中動態的獲得和設置 DOM 的值。</p>\n<p>雖然說 Angular 的 Template 是一段 HTML，但是所有的 templates 都只是整個網頁的一部分，而不是整個頁面，所以不需要在每一個 templates 中添加 <code>&lt;html&gt;</code>、<code>&lt;body&gt;</code> 或 <code>&lt;base&gt;</code> 之類的元素，而出於安全考量 Angular 也不允許在 templates 中加入 <code>&lt;script&gt;</code> 。</p>\n<h1 id=\"Text-interpolation\"><a href=\"#Text-interpolation\" class=\"headerlink\" title=\"Text interpolation\"></a>Text interpolation</h1><p>介紹完什麼是 Templates 後接著要來介紹一些 templates 的語法，首先我們要介紹的是 Text interpolation，顧名思義就是將 component.ts 中的變量插入到 templates 中，<code>當這個變量在 component.ts 中發生變化時，也會同步在 template 中發生變化</code>，意味著畫面也會跟著變化。</p>\n<p>在默認情況下，插值是使用雙花括號 <code>&#123;&#123;` 和 `&#125;&#125;</code> 將插值夾在其中，來舉個簡單的例子：</p>\n<ol>\n<li><p>首先先在 app.component.ts 中添加一個變量</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  currentCustomer = <span class=\"string\">&#x27;Fandix&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在 app.component.html 中將這個值插入到 template 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- app.<span class=\"property\">component</span>.<span class=\"property\">html</span> --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Current customer: &#123;&#123; currentCustomer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767SfgZjpfW0a.png\"></p>\n<p>在畫面可以看到確實有將 component.ts 當中的變量（currentCustomer）的內容呈現出來，那我們將變量的值更改一下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentCustomer = <span class=\"string\">&#x27;Tako&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767zWCwZTqGtJ.png\"><br>當 component.ts 中的變量內容改變後會動態的顯示在畫面中，這就是 Text interpolation 的用途。</p>\n<h1 id=\"Template-expressions\"><a href=\"#Template-expressions\" class=\"headerlink\" title=\"Template expressions\"></a>Template expressions</h1><p>可以在 template expressions 在雙花括號中<code>&#123;&#123; &#125;&#125;</code>產生一個值，Angular 會自動解析表達式並將解析過後的內容分配給綁定目標的屬性，這個目標可以是 HTML Tag、Component selector 或 directive。</p>\n<h2 id=\"Resolving-expressions-with-interpolation\"><a href=\"#Resolving-expressions-with-interpolation\" class=\"headerlink\" title=\"Resolving expressions with interpolation\"></a>Resolving expressions with interpolation</h2><p>一般來說在雙花括號之間填入一個模板表達式的話，Angular 會先將他做計算，得到結果後將它轉成字串並顯示出來，舉個簡單的例子，透過差值將兩個數字相加並呈現出來：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>The sum of 1 + 1 is &#123;&#123;1 + 1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767CF8r7xaM47.png\"></p>\n<p>Angular 在 templates 的雙花括號中收到了一個表達式，他會自動將這個表達式做計算，像上面的例子中的 <code>1 + 1</code>，得到結果後將它轉成字串並顯示出來，所以畫面中會顯示 1 + 1 &#x3D; 2。</p>\n<p>而表達式也可以調用這個 component.ts 中的 method，比如說：</p>\n<ol>\n<li><p>在  app.component.ts 中新增一個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Fandix&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在 app.component.html 中將調用 method 的表達式填入到雙花括號中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Hello &#123;&#123; getValue() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767dSHzApckq2.png\"></p>\n<p>可以看到 Angular 在 template 調用了 component.ts 中的 method ，獲得到的值將他呈現在畫面中，而 Angular 在遇到差值時會執行以下的任務：</p>\n<ol>\n<li>計算雙花括號中的所有表達式</li>\n<li>將表達式的結果轉換為字串</li>\n<li>將結果鏈接到任何相鄰的文字字串</li>\n<li>將組合分配給element 或 directive 屬性</li>\n</ol>\n<h2 id=\"Syntas\"><a href=\"#Syntas\" class=\"headerlink\" title=\"Syntas\"></a>Syntas</h2><p>一樣的，要運用一個新的程式語言之前，需要先充分熟悉他的語法，不然會產生意料之外的錯誤喔，其實 templates expressions 的語法基本上都跟 Javascript expressions 一樣，但是有幾個特例：</p>\n<ul>\n<li>你不能使用有會產生 side effects 的 javascript expressions<ul>\n<li>賦值（&#x3D;, +&#x3D;, -&#x3D;, …）</li>\n<li>運算符（new, typeof, instanceof）</li>\n<li>用分號（;）鏈結 expressions</li>\n<li>遞增或遞減運算符（++,  –）</li>\n<li>還有一些 ES6 的運算符</li>\n</ul>\n</li>\n<li>與 javascript 語法有明顯差異的：<ul>\n<li>不支援 bit 的運算符（|,  &amp;）</li>\n<li>新的 template expressions（|,  ?,  !, …）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Preventing-name-collisions\"><a href=\"#Preventing-name-collisions\" class=\"headerlink\" title=\"Preventing name collisions\"></a>Preventing name collisions</h1><p>介紹完如何將 component 中的變量插入 template 讓畫面隨著變量動態改變後，要注意的是在使用這個功能時要防止名稱衝突，因為當你使用了 Text interpolationt 插入變量後， Angular 對這個表達式的計算 context 是從 <code>template variable</code>、<code>directive</code> 和 <code>component member</code> 的聯合，所以當你插入了一個名稱到 template 但這個名稱在多個地方都有定義的話， Angular 會用以下的邏輯來確定 context：</p>\n<ol>\n<li>在 template 中的變量名稱 (ngFor 中的變量)</li>\n<li>在 directive 中的 context 名稱</li>\n<li>Component 中的變量名稱</li>\n</ol>\n<p>所以當你在使用 Text interpolationt  時盡量保持所有變量名稱唯一，不然可能會被 shadowing 掉你原本想要呈現內容，我們舉個例子：</p>\n<p>這邊先提早介紹 *ngFor，他也是使用在 template 當中，用法與 javascript 的 for loop 一樣，當你的 component 中的變量是一個 arr 時，想要把這個 arr 中的數值都呈現在畫面上就可以使用這個方法，一樣舉個簡單的例子吧：</p>\n<ol>\n<li><p>首先先在 app.component.ts 中宣告一個 arr 變數並將裡面填上要呈現的內容。</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  displayArray = [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>, <span class=\"string\">&#x27;Angular&#x27;</span>, <span class=\"string\">&#x27;good&#x27;</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 app.component.html 中使用 *ngFor 將他們全部呈現在畫面上</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let content of displayArray&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;content&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Dasf05ADZV.png\"></p>\n<p>在畫面中可以看到透過 *ngFor 不斷的遞迴將 displayArray 中的內容都顯示出來，這邊暫時介紹到這邊，之後會更詳細的介紹他的使用方法。</p>\n<p>大概了解的 *ngFor 的使用方法後，將畫面回到命名衝突，當你使用 *ngFor 命名迭代出來的每一個值得名稱時要注意這個名稱有沒有在其他地方被引用到，如果有則會將其他相同名稱的內容 shadowing 掉，舉個小例子吧。</p>\n<ol>\n<li><p>先在 app.component.ts 中定義兩個變量</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  customers = [ <span class=\"string\">&#x27;Ebony&#x27;</span>, <span class=\"string\">&#x27;Chiho&#x27;</span>];</span><br><span class=\"line\">  customer = <span class=\"string\">&#x27;Padma&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中將這兩個變量呈現在畫面中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let customer of customers&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;&#123; customer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t&#123;&#123; customer &#125;&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210802/20124767Gofwpc8OrA.png\"><br>在畫面中可以看到，原本我們希望在每次迭代 customers 中的值時，都將 customer &#x3D; ‘Padma’ 添加在上面，但是由於 *ngFor 中的變量 shadowing 了 customer 所以導致 ‘Padma’ 無法呈現出來，所以在使用 Text interpolationt 插入變量時要注意有沒有相同的名稱喔！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中介紹了如何在 template 中插入 component 的變量以及該注意的事情，最後介紹幾個在使用 Text interpolationt 時最好的設計規範以避免發生錯誤或是增加程式的可閱讀性：</p>\n<ul>\n<li><strong>使用簡短的表達</strong>：盡可能使用 component 中 property 的名稱或 method 調用。將應用程序和業務邏輯保留在 component 中而 template 只負責調用就可以，這樣以便進行開發和測試。</li>\n<li><strong>快速執行</strong>：Angular 會在在每個變更檢測週期後執行模板表達式，許多非同步的行為都會觸發變更檢測週期，比如 Promise、HTTP 的結果、timer events、按鍵與滑鼠的移動等等，expression 應該快速的完成不然會讓使用者體驗下降，所以當需要進行長時間計算的事情時，請考慮使用緩存值。</li>\n<li><strong>沒有明顯的 side effect</strong>：模板表達式不應該更改除了目標屬性值之外的任何應用程序狀態，讀取 component 的值時不應更改到其他的顯示值。</li>\n</ul>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/interpolation\">Angular.io - interpolation</a></li>\n</ul>"},{"title":"Day9. Transforming Data Using Pipes","date":"2021-09-09T02:17:12.000Z","_content":"\n在上一章中介紹了如何在 template 中插入 component 的變量，而本章節要介紹如何使用 angular 的 pipes 來轉換插入的值（字串、貨幣金額、日期或其他數據）， pipes 是在模板表達式中的簡單函數，用於接受輸入值並返迴轉換後的值，而 Anngular 提供了幾個預設的 pipes 提供使用：\n\n- **DatePipe**：根據區域設置規則格式化日期值\n- **UpperCasePipe**：將內容都變更為大寫\n- **LowerCasePipe**：將內容都變更為小寫\n- **CurrencyPipe**：將數字轉換為貨幣字串，根據區域設置規則進行格式化。\n- **DecimalPipe**：將數字轉換為帶小數點的字串，並根據區域設置規則進行格式化。\n- **PercentPipe**：將數字轉換為百分比字串，根據區域設置規則進行格式化。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png)\n\n<!-- more -->\n\n# Using a pipe in a template\n要在 template 中使用 pipes 功能請使用管道運算符 ( | )，一樣舉個例子吧：\n\n1. 在 app.component.ts 中新增一個變數，賦予它 javescript 的 Date 型別資料\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      birthday = new Date(1995, 9, 25);\n    }\n    ```\n\n2. 在 app.component.html 中將 birthday 插入並將其中一個使用 pipes 改變他的型態\n\n    ```html\n    <!-- app.component.html -->\n\n    <p>My birthday is {{birthday}}</p>\n    <p>My birthday is {{birthday | date }}</p>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png)\n\n在畫面中可以看到，沒有使用 pipes 轉換過的數值就是 javascript Date 型態的內容，而使用了 pipes 轉換過的數值看起來就好看多了，而這就是 pipes 的用法。\n\n\n\n# Transforming data with parameters and chained pipes\n\n在使用 pipes 改變呈現內容時，可以輸入可選的參數來微調 pipes 輸出的結果，比如說可以將國家單位（EUR）當作參數傳遞給 CurrencyPipe，將轉換過的貨幣單位以歐元顯示 `{{ amount | currency:'EUR' }}`，如果要對一個 pipes 使用多個參數時請使用冒號分隔這些參數，比如 `{{ amount | currency:'EUR':'Euros '}}`，也可以使用任何一個有效的模板表達式作為參數。\n\n有些 pipes 需要至少一個參數才可以使用，比如說 SlicePipe ，`{{ slice:1:5 }}` 會創建一個新陣列或字串，其中包含從  element-1 開始到 element-5 結束的元素子集。\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  sayHello = 'Hello world'\n}\n```\n\n```html\n<!-- app.component.html -->\n\n<h2>{{ sayHello | slice:1:5 }}</h2>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png)\n\n畫面中原本要呈現的 `Hello world`，變成了 ello ，是因為透過 slice 選擇了 index[1] ~ index[5] 的資料。\n\n\n\n# Creating pipes for custom data transformations\n\n在開頭時提到了 Angular 有提供幾個預設的 pipes 可以使用，但這些不夠應付我們可能面面臨到的問題，這時候客製化 pipes 就很重要了，客製化的 pipes 也和預設的一樣，接收一個輸入將他轉換過後輸出，那麼就來看看該如何使用客製化 pipes 吧。\n\n## Marking a class as a pipe\n\n要建立一個客製化的 pipes，首先需要向建立 component 一樣先建立一個 typescript 的 class，但是不同的是，當我們創建 Component Class 時使用的裝飾器是 `@Component`，代表這個 Class 是屬於 Component 的，但是要建立 pipis class 則需要使用 `@Pipe` 這個裝飾器，而對這個 Class 的命名請使用 `駝峰命名法`，不要在名稱中間使用連字符號( - )，舉個例子吧，可以建立一個 pipes 接收一個數值作為輸入與一個參數，將輸入的數值做參數的次方，比如輸入 = 2 參數 = 10 那麼就會等於 2^10 = 1024。\n\n1. 使用 Angular CLI 建立一個 pipes class\n\n    ```bash\n    ng generate pipe exponential-strength\n    ```\n\n2. 在 exponential-strength.pipe.ts 中添加轉換 method\n\n    ```typescript\n    import { Pipe, PipeTransform } from '@angular/core';\n\n    @Pipe({name: 'exponentialStrength'})\n    export class ExponentialStrengthPipe implements PipeTransform {\n      transform(value: number, exponent: number = 1): number {\n        return Math.pow(value, exponent);\n      }\n    }\n    ```\n\n3. 如果你是使用 Angular CLI 他會自動將這個 pipes class 放到 app.module.ts 的 declarations 中，如果你是手動建立的話要記得將它放到 app.module.ts 的 declarations 裡面喔！\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { AppComponent } from './app.component';\n    import { ExponentialStrengthPipe } from './exponential-strengh.pipe';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n        ExponentialStrengthPipe,\n      ]\n    })\n    export class AppModule { }\n    ```\n4. 在 app.component.html 中使用客製化的 pipe 轉換資料\n\n    ```html\n    <!-- app.component.html -->\n\n    <h2>Power boost: {{ 2 | exponentialStrength:10 }}</h2>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png)\n\n\n\n# Detecting changes with data binding in pipes\n\n還記得昨天提到的 Text interpolation 的特性嗎？他可以隨著 class 的 property 變化而動態的顯示，而這個動態變化也可以套用到 pipe 中，所以當客製化的 pipe 輸入是 `string` 或 `number` 時且發生改變時，會動態的作為輸入進到 pipe 中進行轉換，但如果是 `Date` 或 `Array` 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換，舉個例子吧\n\n1. 在 app.component.ts 中定義兩個 property，一個代表要被轉換的值（輸入）另一個代表輸入要做幾次方\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styles: ['input {margin: .5rem 0;}']\n    })\n    export class AppComponent {\n      power = 2;\n      factor = 1;\n    }\n    ```\n\n2. 在 app.component.module.ts 的 imports 中加入 `FormsModule` ，這個是因為要在這個例子中使用到 form，所以要加入這個（之後會詳細的介紹 form）\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { FormsModule } from '@angular/forms';\n    import { ExponentialStrengthPipe } from './exponential-strengh.pipe';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n        ExponentialStrengthPipe,\n      ],\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```\n\n3. 在 app.component.html 中使用 pipe\n\n    ```html\n    <!-- app.component.html -->\n\n    <h2>Power Boost Calculator</h2>\n    <label for=\"power-input\">Normal power: </label>\n    <input id=\"power-input\" type=\"text\" [(ngModel)]=\"power\" />\n    <label for=\"boost-input\">Boost factor: </label>\n    <input id=\"boost-input\" type=\"text\" [(ngModel)]=\"factor\" />\n    <p>Super Hero Power: {{ power | exponentialStrength: factor }}</p>\n    ```\n\n    這邊可能會有疑問，`[(ngModel)]` 這個是什麼？這邊大概介紹一下，如果將 component 中的 property 使用 `[(ngModel)]` 綁定，代表當 user 在畫面中的 `<input>` 中改變數值時，他會同步改變到 Component 中的 property，當然如果你改 Component 中的 property 的數值一樣會同步更改到畫面 `<input>` 中的值，這稱為 `雙向綁定`，之後會詳細講解，這邊先有大概的概念就好。\n    \n![img](https://i.imgur.com/Y92boUn.gif)\n\n在畫面中可以看到，當我們每次更改 factor 的值時，pipe 都會自動重新計算結果。\n\n\n\n# Detecting pure changes to primitives and object references\n\n在上面提到 `如果是 `Date` 或 `Array` 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換` 這邊要來詳細的說明一下。\n\n在默認情況下 pipe 要被定義成 pure 的，以便 Angular 只有在檢測到輸入值變化時才執行 pipe ，所以必須要是沒有 side effect 的 pure function，而如果是將複合對象當作輸入送進 pipe （現有的 arr 添加新元素）時，因為檢查他的 reference 比深入到 arr 中遞迴的檢查每個元素快得多，所以 Angular 會通過檢查他的 reference 來判定是否發生改變，所以當你將一個 arr 作為輸入送進一個 pipe 時，可能會發生意料之外的錯誤，下面來句個例子：\n\n對了！如果是新手對 javascript 的 object reference 不熟悉的話，建議先去了解一下為什麼對 arr 使用 push 時不算對 reference 的改變，這也是為什麼使用 const 宣告 arr 卻可以對他新增內容的原因\n\n，我在 [ES6 學習筆記_01(let & const)](https://ithelp.ithome.com.tw/articles/10231666)  中提到 const 的本質是什麼，有興趣可以去看一下。\n\n1. 首先一樣先創建一個 pipe \n\n    ```typescript\n    import { Pipe, PipeTransform } from '@angular/core';\n\n    @Pipe({name: 'flyingHeros'})\n    export class FlyingHerosPipe implements PipeTransform {\n      transform(allHeroes: any) {\n        return allHeroes.filter((hero: any) => hero.caFly);\n      }\n    }\n    ```\n\n2. 在 app.component.ts 中定義 Hero list\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      Hero = [\n        { id: 11, name: 'Dr Nice', canFly: true },\n        { id: 12, name: 'Narco', canFly: false },\n        { id: 13, name: 'Bombasto',  canFly: false },\n        { id: 14, name: 'Celeritas',  canFly: true },\n        { id: 15, name: 'Magneta',  canFly: false },\n        { id: 16, name: 'RubberMan',  canFly: true },\n        { id: 17, name: 'Dynama',  canFly: true },\n        { id: 18, name: 'Dr IQ',  canFly: true },\n        { id: 19, name: 'Magma',  canFly: false },\n        { id: 20, name: 'Tornado',  canFly: true },\n      ];\n    }\n    ```\n\n3. 在 app.component.html 中使用 pipe 將可以飛的英雄顯示出來\n\n    ```html\n    <!-- app.component.html -->\n\n    <div *ngFor=\"let hero of ( heros | flyingHeros )\">\n        {{hero.name}}\n    </div>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png](https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png)\n\n在畫面中可以看到只有會飛的英雄顯示出來，這時我們在 heros 中使用 push 新增英雄。\n\n```typescript\nonAddHero() {\n  this.heros.push({ id: 1, name: 'Fandix', canFly: true });\n}\n```\n\n當我將新的英雄 push 近 heros 中，卻發現畫面沒有更改，是壞掉了嗎？ 讓我們將 heros console 出來確認是否真的有將他 push 進去。\n\n```typescript\nonAddHero() {\n  this.heros.push({ id: 1, name: 'Fandix', canFly: true });\n\tconsole.log(this.heros);\n}\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png)\n\n在 console 中可以看到我們確實有將新英雄 push 進 heros 中，這就是剛剛提到的 Angular 在面對 arr 時，只有在他的 reference 發生改變時才會觸發 pipe，有興趣的可以自己嘗試一下，把 `onAddHero()` 變成\n\n```typescript\nonAddHero() {\n  this.heros = [\n      { id: 11, name: 'Dr Nice', canFly: true },\n      { id: 12, name: 'Narco', canFly: false },\n      { id: 13, name: 'Bombasto', canFly: false },\n      { id: 14, name: 'Celeritas', canFly: true },\n      { id: 15, name: 'Magneta', canFly: false },\n      { id: 16, name: 'RubberMan', canFly: true },\n      { id: 17, name: 'Dynama', canFly: true },\n      { id: 18, name: 'Dr IQ', canFly: true },\n      { id: 19, name: 'Magma', canFly: false },\n      { id: 20, name: 'Tornado', canFly: true },\n      { id: 1, name: 'Fandix', canFly: true },\n    ];\n}\n```\n\n會發生什麼事。\n\n所以在使用者種複合型的資料時，需要特別注意`只有當輸入的 Reference 發生改變時，才會觸發 pipe `。\n\n\n\n# Detecting impure changes within composite objects\n\n那你可能想說，我不要啊我天生反骨我就是想要使用 push 就可以觸發 pipe 可不可以？\n\n當然可以，Angular 提供了當複合數據內發生改變時也可以觸發 pipe 的方法，首先你`需要將這個 pipe 變得 impure`，這樣才可以檢測到 impure 的變化，所以 Angular 只要檢測到每次按鍵或滑鼠的變化時都會觸發一個 impure 的 pipe，要做的很簡單，只要在 pipe.ts 中增加一個屬性就可以了\n\n```typescript\n@Pipe({name: 'flyingHeros', pure: false})\n```\n\n一樣有興趣的可以拿上面的例子直接將他變成 impure 試試看，這邊就不再做一次了。\n\n\n\n# Pipes and precedence\n\n介紹了這麼多的 pipe 用法，可能有人會問：既然 pipe 是透過 ｜ 加在數值後面的，那如果這個數值在進行其他的 Javascript expressions 怎麼辦？\n\n其實在 Angular 中 pipe 運算符的優先級是高於三元運算子（: ?），這意味著如果你有一個 Text interpolation 長這樣 `{{ a ? b : c | x }}` ，那麼他會被解析成 `{{ a ? b : (c | x) }}` 而這個結果可能不是你所希望的，如果你希望達到 `{{ a ? b : c | x }}` 這個結果，請使用括號將前面的三元運算子括起來 `{{ (a ? b : c) | x }}`\n\n\n\n# 結論\n\n本篇章中介紹了什麼是 pipe、該怎麼使用它以及客製化自己的 pipe，了解 pipe 對於開發專案是有幫助的，也要特別注意在預設情況下 pipe 是 pure 的，當傳入的輸入是複合型資料時，只有在他的 reference 發生改變時才會觸發，如果想要避免這個問題可以將 pipe 更改為 impure 就可以了。\n\n在官方文檔中還有介紹 `observable` 與 `HTTP` 的 pipe，但是因為牽扯到太多其他的技巧不太符合我們新手入門的領域，所以不在這邊介紹，不過了解了pipe 的基本原理之後，當遇到類似問題再去看就會比較容易看懂，所以就允許我偷懶一下吧\n\n下一篇會介紹 template 的 property binding，它的作用是可以讓你設置 HTML Tag 或 directive 的屬性質，詳細的介紹就期待明天吧。\n\n\n\n# Reference\n\n- [Angular.io - pipes](https://angular.io/guide/pipes)\n","source":"_posts/Angular/angular-09.md","raw":"---\ntitle: Day9. Transforming Data Using Pipes\ndate: 2021-09-09 10:17:12\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一章中介紹了如何在 template 中插入 component 的變量，而本章節要介紹如何使用 angular 的 pipes 來轉換插入的值（字串、貨幣金額、日期或其他數據）， pipes 是在模板表達式中的簡單函數，用於接受輸入值並返迴轉換後的值，而 Anngular 提供了幾個預設的 pipes 提供使用：\n\n- **DatePipe**：根據區域設置規則格式化日期值\n- **UpperCasePipe**：將內容都變更為大寫\n- **LowerCasePipe**：將內容都變更為小寫\n- **CurrencyPipe**：將數字轉換為貨幣字串，根據區域設置規則進行格式化。\n- **DecimalPipe**：將數字轉換為帶小數點的字串，並根據區域設置規則進行格式化。\n- **PercentPipe**：將數字轉換為百分比字串，根據區域設置規則進行格式化。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png)\n\n<!-- more -->\n\n# Using a pipe in a template\n要在 template 中使用 pipes 功能請使用管道運算符 ( | )，一樣舉個例子吧：\n\n1. 在 app.component.ts 中新增一個變數，賦予它 javescript 的 Date 型別資料\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n      birthday = new Date(1995, 9, 25);\n    }\n    ```\n\n2. 在 app.component.html 中將 birthday 插入並將其中一個使用 pipes 改變他的型態\n\n    ```html\n    <!-- app.component.html -->\n\n    <p>My birthday is {{birthday}}</p>\n    <p>My birthday is {{birthday | date }}</p>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png)\n\n在畫面中可以看到，沒有使用 pipes 轉換過的數值就是 javascript Date 型態的內容，而使用了 pipes 轉換過的數值看起來就好看多了，而這就是 pipes 的用法。\n\n\n\n# Transforming data with parameters and chained pipes\n\n在使用 pipes 改變呈現內容時，可以輸入可選的參數來微調 pipes 輸出的結果，比如說可以將國家單位（EUR）當作參數傳遞給 CurrencyPipe，將轉換過的貨幣單位以歐元顯示 `{{ amount | currency:'EUR' }}`，如果要對一個 pipes 使用多個參數時請使用冒號分隔這些參數，比如 `{{ amount | currency:'EUR':'Euros '}}`，也可以使用任何一個有效的模板表達式作為參數。\n\n有些 pipes 需要至少一個參數才可以使用，比如說 SlicePipe ，`{{ slice:1:5 }}` 會創建一個新陣列或字串，其中包含從  element-1 開始到 element-5 結束的元素子集。\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  sayHello = 'Hello world'\n}\n```\n\n```html\n<!-- app.component.html -->\n\n<h2>{{ sayHello | slice:1:5 }}</h2>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png)\n\n畫面中原本要呈現的 `Hello world`，變成了 ello ，是因為透過 slice 選擇了 index[1] ~ index[5] 的資料。\n\n\n\n# Creating pipes for custom data transformations\n\n在開頭時提到了 Angular 有提供幾個預設的 pipes 可以使用，但這些不夠應付我們可能面面臨到的問題，這時候客製化 pipes 就很重要了，客製化的 pipes 也和預設的一樣，接收一個輸入將他轉換過後輸出，那麼就來看看該如何使用客製化 pipes 吧。\n\n## Marking a class as a pipe\n\n要建立一個客製化的 pipes，首先需要向建立 component 一樣先建立一個 typescript 的 class，但是不同的是，當我們創建 Component Class 時使用的裝飾器是 `@Component`，代表這個 Class 是屬於 Component 的，但是要建立 pipis class 則需要使用 `@Pipe` 這個裝飾器，而對這個 Class 的命名請使用 `駝峰命名法`，不要在名稱中間使用連字符號( - )，舉個例子吧，可以建立一個 pipes 接收一個數值作為輸入與一個參數，將輸入的數值做參數的次方，比如輸入 = 2 參數 = 10 那麼就會等於 2^10 = 1024。\n\n1. 使用 Angular CLI 建立一個 pipes class\n\n    ```bash\n    ng generate pipe exponential-strength\n    ```\n\n2. 在 exponential-strength.pipe.ts 中添加轉換 method\n\n    ```typescript\n    import { Pipe, PipeTransform } from '@angular/core';\n\n    @Pipe({name: 'exponentialStrength'})\n    export class ExponentialStrengthPipe implements PipeTransform {\n      transform(value: number, exponent: number = 1): number {\n        return Math.pow(value, exponent);\n      }\n    }\n    ```\n\n3. 如果你是使用 Angular CLI 他會自動將這個 pipes class 放到 app.module.ts 的 declarations 中，如果你是手動建立的話要記得將它放到 app.module.ts 的 declarations 裡面喔！\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { AppComponent } from './app.component';\n    import { ExponentialStrengthPipe } from './exponential-strengh.pipe';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n        ExponentialStrengthPipe,\n      ]\n    })\n    export class AppModule { }\n    ```\n4. 在 app.component.html 中使用客製化的 pipe 轉換資料\n\n    ```html\n    <!-- app.component.html -->\n\n    <h2>Power boost: {{ 2 | exponentialStrength:10 }}</h2>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png)\n\n\n\n# Detecting changes with data binding in pipes\n\n還記得昨天提到的 Text interpolation 的特性嗎？他可以隨著 class 的 property 變化而動態的顯示，而這個動態變化也可以套用到 pipe 中，所以當客製化的 pipe 輸入是 `string` 或 `number` 時且發生改變時，會動態的作為輸入進到 pipe 中進行轉換，但如果是 `Date` 或 `Array` 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換，舉個例子吧\n\n1. 在 app.component.ts 中定義兩個 property，一個代表要被轉換的值（輸入）另一個代表輸入要做幾次方\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styles: ['input {margin: .5rem 0;}']\n    })\n    export class AppComponent {\n      power = 2;\n      factor = 1;\n    }\n    ```\n\n2. 在 app.component.module.ts 的 imports 中加入 `FormsModule` ，這個是因為要在這個例子中使用到 form，所以要加入這個（之後會詳細的介紹 form）\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { FormsModule } from '@angular/forms';\n    import { ExponentialStrengthPipe } from './exponential-strengh.pipe';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n        ExponentialStrengthPipe,\n      ],\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```\n\n3. 在 app.component.html 中使用 pipe\n\n    ```html\n    <!-- app.component.html -->\n\n    <h2>Power Boost Calculator</h2>\n    <label for=\"power-input\">Normal power: </label>\n    <input id=\"power-input\" type=\"text\" [(ngModel)]=\"power\" />\n    <label for=\"boost-input\">Boost factor: </label>\n    <input id=\"boost-input\" type=\"text\" [(ngModel)]=\"factor\" />\n    <p>Super Hero Power: {{ power | exponentialStrength: factor }}</p>\n    ```\n\n    這邊可能會有疑問，`[(ngModel)]` 這個是什麼？這邊大概介紹一下，如果將 component 中的 property 使用 `[(ngModel)]` 綁定，代表當 user 在畫面中的 `<input>` 中改變數值時，他會同步改變到 Component 中的 property，當然如果你改 Component 中的 property 的數值一樣會同步更改到畫面 `<input>` 中的值，這稱為 `雙向綁定`，之後會詳細講解，這邊先有大概的概念就好。\n    \n![img](https://i.imgur.com/Y92boUn.gif)\n\n在畫面中可以看到，當我們每次更改 factor 的值時，pipe 都會自動重新計算結果。\n\n\n\n# Detecting pure changes to primitives and object references\n\n在上面提到 `如果是 `Date` 或 `Array` 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換` 這邊要來詳細的說明一下。\n\n在默認情況下 pipe 要被定義成 pure 的，以便 Angular 只有在檢測到輸入值變化時才執行 pipe ，所以必須要是沒有 side effect 的 pure function，而如果是將複合對象當作輸入送進 pipe （現有的 arr 添加新元素）時，因為檢查他的 reference 比深入到 arr 中遞迴的檢查每個元素快得多，所以 Angular 會通過檢查他的 reference 來判定是否發生改變，所以當你將一個 arr 作為輸入送進一個 pipe 時，可能會發生意料之外的錯誤，下面來句個例子：\n\n對了！如果是新手對 javascript 的 object reference 不熟悉的話，建議先去了解一下為什麼對 arr 使用 push 時不算對 reference 的改變，這也是為什麼使用 const 宣告 arr 卻可以對他新增內容的原因\n\n，我在 [ES6 學習筆記_01(let & const)](https://ithelp.ithome.com.tw/articles/10231666)  中提到 const 的本質是什麼，有興趣可以去看一下。\n\n1. 首先一樣先創建一個 pipe \n\n    ```typescript\n    import { Pipe, PipeTransform } from '@angular/core';\n\n    @Pipe({name: 'flyingHeros'})\n    export class FlyingHerosPipe implements PipeTransform {\n      transform(allHeroes: any) {\n        return allHeroes.filter((hero: any) => hero.caFly);\n      }\n    }\n    ```\n\n2. 在 app.component.ts 中定義 Hero list\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      Hero = [\n        { id: 11, name: 'Dr Nice', canFly: true },\n        { id: 12, name: 'Narco', canFly: false },\n        { id: 13, name: 'Bombasto',  canFly: false },\n        { id: 14, name: 'Celeritas',  canFly: true },\n        { id: 15, name: 'Magneta',  canFly: false },\n        { id: 16, name: 'RubberMan',  canFly: true },\n        { id: 17, name: 'Dynama',  canFly: true },\n        { id: 18, name: 'Dr IQ',  canFly: true },\n        { id: 19, name: 'Magma',  canFly: false },\n        { id: 20, name: 'Tornado',  canFly: true },\n      ];\n    }\n    ```\n\n3. 在 app.component.html 中使用 pipe 將可以飛的英雄顯示出來\n\n    ```html\n    <!-- app.component.html -->\n\n    <div *ngFor=\"let hero of ( heros | flyingHeros )\">\n        {{hero.name}}\n    </div>\n    ```\n\n![https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png](https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png)\n\n在畫面中可以看到只有會飛的英雄顯示出來，這時我們在 heros 中使用 push 新增英雄。\n\n```typescript\nonAddHero() {\n  this.heros.push({ id: 1, name: 'Fandix', canFly: true });\n}\n```\n\n當我將新的英雄 push 近 heros 中，卻發現畫面沒有更改，是壞掉了嗎？ 讓我們將 heros console 出來確認是否真的有將他 push 進去。\n\n```typescript\nonAddHero() {\n  this.heros.push({ id: 1, name: 'Fandix', canFly: true });\n\tconsole.log(this.heros);\n}\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png](https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png)\n\n在 console 中可以看到我們確實有將新英雄 push 進 heros 中，這就是剛剛提到的 Angular 在面對 arr 時，只有在他的 reference 發生改變時才會觸發 pipe，有興趣的可以自己嘗試一下，把 `onAddHero()` 變成\n\n```typescript\nonAddHero() {\n  this.heros = [\n      { id: 11, name: 'Dr Nice', canFly: true },\n      { id: 12, name: 'Narco', canFly: false },\n      { id: 13, name: 'Bombasto', canFly: false },\n      { id: 14, name: 'Celeritas', canFly: true },\n      { id: 15, name: 'Magneta', canFly: false },\n      { id: 16, name: 'RubberMan', canFly: true },\n      { id: 17, name: 'Dynama', canFly: true },\n      { id: 18, name: 'Dr IQ', canFly: true },\n      { id: 19, name: 'Magma', canFly: false },\n      { id: 20, name: 'Tornado', canFly: true },\n      { id: 1, name: 'Fandix', canFly: true },\n    ];\n}\n```\n\n會發生什麼事。\n\n所以在使用者種複合型的資料時，需要特別注意`只有當輸入的 Reference 發生改變時，才會觸發 pipe `。\n\n\n\n# Detecting impure changes within composite objects\n\n那你可能想說，我不要啊我天生反骨我就是想要使用 push 就可以觸發 pipe 可不可以？\n\n當然可以，Angular 提供了當複合數據內發生改變時也可以觸發 pipe 的方法，首先你`需要將這個 pipe 變得 impure`，這樣才可以檢測到 impure 的變化，所以 Angular 只要檢測到每次按鍵或滑鼠的變化時都會觸發一個 impure 的 pipe，要做的很簡單，只要在 pipe.ts 中增加一個屬性就可以了\n\n```typescript\n@Pipe({name: 'flyingHeros', pure: false})\n```\n\n一樣有興趣的可以拿上面的例子直接將他變成 impure 試試看，這邊就不再做一次了。\n\n\n\n# Pipes and precedence\n\n介紹了這麼多的 pipe 用法，可能有人會問：既然 pipe 是透過 ｜ 加在數值後面的，那如果這個數值在進行其他的 Javascript expressions 怎麼辦？\n\n其實在 Angular 中 pipe 運算符的優先級是高於三元運算子（: ?），這意味著如果你有一個 Text interpolation 長這樣 `{{ a ? b : c | x }}` ，那麼他會被解析成 `{{ a ? b : (c | x) }}` 而這個結果可能不是你所希望的，如果你希望達到 `{{ a ? b : c | x }}` 這個結果，請使用括號將前面的三元運算子括起來 `{{ (a ? b : c) | x }}`\n\n\n\n# 結論\n\n本篇章中介紹了什麼是 pipe、該怎麼使用它以及客製化自己的 pipe，了解 pipe 對於開發專案是有幫助的，也要特別注意在預設情況下 pipe 是 pure 的，當傳入的輸入是複合型資料時，只有在他的 reference 發生改變時才會觸發，如果想要避免這個問題可以將 pipe 更改為 impure 就可以了。\n\n在官方文檔中還有介紹 `observable` 與 `HTTP` 的 pipe，但是因為牽扯到太多其他的技巧不太符合我們新手入門的領域，所以不在這邊介紹，不過了解了pipe 的基本原理之後，當遇到類似問題再去看就會比較容易看懂，所以就允許我偷懶一下吧\n\n下一篇會介紹 template 的 property binding，它的作用是可以讓你設置 HTML Tag 或 directive 的屬性質，詳細的介紹就期待明天吧。\n\n\n\n# Reference\n\n- [Angular.io - pipes](https://angular.io/guide/pipes)\n","slug":"Angular/angular-09","published":1,"updated":"2022-02-16T01:25:12.642Z","_id":"ckznus5dt001ckww30je6escn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在上一章中介紹了如何在 template 中插入 component 的變量，而本章節要介紹如何使用 angular 的 pipes 來轉換插入的值（字串、貨幣金額、日期或其他數據）， pipes 是在模板表達式中的簡單函數，用於接受輸入值並返迴轉換後的值，而 Anngular 提供了幾個預設的 pipes 提供使用：</p>\n<ul>\n<li><strong>DatePipe</strong>：根據區域設置規則格式化日期值</li>\n<li><strong>UpperCasePipe</strong>：將內容都變更為大寫</li>\n<li><strong>LowerCasePipe</strong>：將內容都變更為小寫</li>\n<li><strong>CurrencyPipe</strong>：將數字轉換為貨幣字串，根據區域設置規則進行格式化。</li>\n<li><strong>DecimalPipe</strong>：將數字轉換為帶小數點的字串，並根據區域設置規則進行格式化。</li>\n<li><strong>PercentPipe</strong>：將數字轉換為百分比字串，根據區域設置規則進行格式化。</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Using-a-pipe-in-a-template\"><a href=\"#Using-a-pipe-in-a-template\" class=\"headerlink\" title=\"Using a pipe in a template\"></a>Using a pipe in a template</h1><p>要在 template 中使用 pipes 功能請使用管道運算符 ( | )，一樣舉個例子吧：</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個變數，賦予它 javescript 的 Date 型別資料</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  birthday = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">1995</span>, <span class=\"number\">9</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中將 birthday 插入並將其中一個使用 pipes 改變他的型態</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My birthday is &#123;&#123;birthday&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My birthday is &#123;&#123;birthday | date &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png\"></p>\n<p>在畫面中可以看到，沒有使用 pipes 轉換過的數值就是 javascript Date 型態的內容，而使用了 pipes 轉換過的數值看起來就好看多了，而這就是 pipes 的用法。</p>\n<h1 id=\"Transforming-data-with-parameters-and-chained-pipes\"><a href=\"#Transforming-data-with-parameters-and-chained-pipes\" class=\"headerlink\" title=\"Transforming data with parameters and chained pipes\"></a>Transforming data with parameters and chained pipes</h1><p>在使用 pipes 改變呈現內容時，可以輸入可選的參數來微調 pipes 輸出的結果，比如說可以將國家單位（EUR）當作參數傳遞給 CurrencyPipe，將轉換過的貨幣單位以歐元顯示 <code>&#123;&#123; amount | currency:'EUR' &#125;&#125;</code>，如果要對一個 pipes 使用多個參數時請使用冒號分隔這些參數，比如 <code>&#123;&#123; amount | currency:'EUR':'Euros '&#125;&#125;</code>，也可以使用任何一個有效的模板表達式作為參數。</p>\n<p>有些 pipes 需要至少一個參數才可以使用，比如說 SlicePipe ，<code>&#123;&#123; slice:1:5 &#125;&#125;</code> 會創建一個新陣列或字串，其中包含從  element-1 開始到 element-5 結束的元素子集。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  sayHello = <span class=\"string\">&#x27;Hello world&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; sayHello | slice:1:5 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png\"></p>\n<p>畫面中原本要呈現的 <code>Hello world</code>，變成了 ello ，是因為透過 slice 選擇了 index[1] ~ index[5] 的資料。</p>\n<h1 id=\"Creating-pipes-for-custom-data-transformations\"><a href=\"#Creating-pipes-for-custom-data-transformations\" class=\"headerlink\" title=\"Creating pipes for custom data transformations\"></a>Creating pipes for custom data transformations</h1><p>在開頭時提到了 Angular 有提供幾個預設的 pipes 可以使用，但這些不夠應付我們可能面面臨到的問題，這時候客製化 pipes 就很重要了，客製化的 pipes 也和預設的一樣，接收一個輸入將他轉換過後輸出，那麼就來看看該如何使用客製化 pipes 吧。</p>\n<h2 id=\"Marking-a-class-as-a-pipe\"><a href=\"#Marking-a-class-as-a-pipe\" class=\"headerlink\" title=\"Marking a class as a pipe\"></a>Marking a class as a pipe</h2><p>要建立一個客製化的 pipes，首先需要向建立 component 一樣先建立一個 typescript 的 class，但是不同的是，當我們創建 Component Class 時使用的裝飾器是 <code>@Component</code>，代表這個 Class 是屬於 Component 的，但是要建立 pipis class 則需要使用 <code>@Pipe</code> 這個裝飾器，而對這個 Class 的命名請使用 <code>駝峰命名法</code>，不要在名稱中間使用連字符號( - )，舉個例子吧，可以建立一個 pipes 接收一個數值作為輸入與一個參數，將輸入的數值做參數的次方，比如輸入 &#x3D; 2 參數 &#x3D; 10 那麼就會等於 2^10 &#x3D; 1024。</p>\n<ol>\n<li><p>使用 Angular CLI 建立一個 pipes class</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate pipe exponential-strength</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 exponential-strength.pipe.ts 中添加轉換 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Pipe</span>, <span class=\"title class_\">PipeTransform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;exponentialStrength&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExponentialStrengthPipe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PipeTransform</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"attr\">value</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">exponent</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(value, exponent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果你是使用 Angular CLI 他會自動將這個 pipes class 放到 app.module.ts 的 declarations 中，如果你是手動建立的話要記得將它放到 app.module.ts 的 declarations 裡面喔！</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExponentialStrengthPipe</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exponential-strengh.pipe&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ExponentialStrengthPipe</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在 app.component.html 中使用客製化的 pipe 轉換資料</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Power boost: &#123;&#123; 2 | exponentialStrength:10 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png\"></p>\n<h1 id=\"Detecting-changes-with-data-binding-in-pipes\"><a href=\"#Detecting-changes-with-data-binding-in-pipes\" class=\"headerlink\" title=\"Detecting changes with data binding in pipes\"></a>Detecting changes with data binding in pipes</h1><p>還記得昨天提到的 Text interpolation 的特性嗎？他可以隨著 class 的 property 變化而動態的顯示，而這個動態變化也可以套用到 pipe 中，所以當客製化的 pipe 輸入是 <code>string</code> 或 <code>number</code> 時且發生改變時，會動態的作為輸入進到 pipe 中進行轉換，但如果是 <code>Date</code> 或 <code>Array</code> 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換，舉個例子吧</p>\n<ol>\n<li><p>在 app.component.ts 中定義兩個 property，一個代表要被轉換的值（輸入）另一個代表輸入要做幾次方</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: [<span class=\"string\">&#x27;input &#123;margin: .5rem 0;&#125;&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  power = <span class=\"number\">2</span>;</span><br><span class=\"line\">  factor = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.module.ts 的 imports 中加入 <code>FormsModule</code> ，這個是因為要在這個例子中使用到 form，所以要加入這個（之後會詳細的介紹 form）</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExponentialStrengthPipe</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exponential-strengh.pipe&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ExponentialStrengthPipe</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中使用 pipe</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Power Boost Calculator<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power-input&quot;</span>&gt;</span>Normal power: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;power-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;power&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;boost-input&quot;</span>&gt;</span>Boost factor: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boost-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;factor&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Super Hero Power: &#123;&#123; power | exponentialStrength: factor &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊可能會有疑問，<code>[(ngModel)]</code> 這個是什麼？這邊大概介紹一下，如果將 component 中的 property 使用 <code>[(ngModel)]</code> 綁定，代表當 user 在畫面中的 <code>&lt;input&gt;</code> 中改變數值時，他會同步改變到 Component 中的 property，當然如果你改 Component 中的 property 的數值一樣會同步更改到畫面 <code>&lt;input&gt;</code> 中的值，這稱為 <code>雙向綁定</code>，之後會詳細講解，這邊先有大概的概念就好。</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Y92boUn.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們每次更改 factor 的值時，pipe 都會自動重新計算結果。</p>\n<h1 id=\"Detecting-pure-changes-to-primitives-and-object-references\"><a href=\"#Detecting-pure-changes-to-primitives-and-object-references\" class=\"headerlink\" title=\"Detecting pure changes to primitives and object references\"></a>Detecting pure changes to primitives and object references</h1><p>在上面提到 <code>如果是 </code>Date<code>或</code>Array<code> 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換</code> 這邊要來詳細的說明一下。</p>\n<p>在默認情況下 pipe 要被定義成 pure 的，以便 Angular 只有在檢測到輸入值變化時才執行 pipe ，所以必須要是沒有 side effect 的 pure function，而如果是將複合對象當作輸入送進 pipe （現有的 arr 添加新元素）時，因為檢查他的 reference 比深入到 arr 中遞迴的檢查每個元素快得多，所以 Angular 會通過檢查他的 reference 來判定是否發生改變，所以當你將一個 arr 作為輸入送進一個 pipe 時，可能會發生意料之外的錯誤，下面來句個例子：</p>\n<p>對了！如果是新手對 javascript 的 object reference 不熟悉的話，建議先去了解一下為什麼對 arr 使用 push 時不算對 reference 的改變，這也是為什麼使用 const 宣告 arr 卻可以對他新增內容的原因</p>\n<p>，我在 <a href=\"https://ithelp.ithome.com.tw/articles/10231666\">ES6 學習筆記_01(let &amp; const)</a>  中提到 const 的本質是什麼，有興趣可以去看一下。</p>\n<ol>\n<li><p>首先一樣先創建一個 pipe </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Pipe</span>, <span class=\"title class_\">PipeTransform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;flyingHeros&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyingHerosPipe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PipeTransform</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"params\">allHeroes: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> allHeroes.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">hero: <span class=\"built_in\">any</span></span>) =&gt;</span> hero.<span class=\"property\">caFly</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中定義 Hero list</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Hero</span> = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr Nice&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Narco&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Celeritas&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">15</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magneta&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">16</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RubberMan&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">17</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dynama&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magma&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tornado&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中使用 pipe 將可以飛的英雄顯示出來</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let hero of ( heros | flyingHeros )&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png\"></p>\n<p>在畫面中可以看到只有會飛的英雄顯示出來，這時我們在 heros 中使用 push 新增英雄。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onAddHero</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當我將新的英雄 push 近 heros 中，卻發現畫面沒有更改，是壞掉了嗎？ 讓我們將 heros console 出來確認是否真的有將他 push 進去。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onAddHero</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heros</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png\"></p>\n<p>在 console 中可以看到我們確實有將新英雄 push 進 heros 中，這就是剛剛提到的 Angular 在面對 arr 時，只有在他的 reference 發生改變時才會觸發 pipe，有興趣的可以自己嘗試一下，把 <code>onAddHero()</code> 變成</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onAddHero</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr Nice&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Narco&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Celeritas&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">15</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magneta&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">16</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RubberMan&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">17</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dynama&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magma&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tornado&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>會發生什麼事。</p>\n<p>所以在使用者種複合型的資料時，需要特別注意<code>只有當輸入的 Reference 發生改變時，才會觸發 pipe </code>。</p>\n<h1 id=\"Detecting-impure-changes-within-composite-objects\"><a href=\"#Detecting-impure-changes-within-composite-objects\" class=\"headerlink\" title=\"Detecting impure changes within composite objects\"></a>Detecting impure changes within composite objects</h1><p>那你可能想說，我不要啊我天生反骨我就是想要使用 push 就可以觸發 pipe 可不可以？</p>\n<p>當然可以，Angular 提供了當複合數據內發生改變時也可以觸發 pipe 的方法，首先你<code>需要將這個 pipe 變得 impure</code>，這樣才可以檢測到 impure 的變化，所以 Angular 只要檢測到每次按鍵或滑鼠的變化時都會觸發一個 impure 的 pipe，要做的很簡單，只要在 pipe.ts 中增加一個屬性就可以了</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;flyingHeros&#x27;</span>, <span class=\"attr\">pure</span>: <span class=\"literal\">false</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>一樣有興趣的可以拿上面的例子直接將他變成 impure 試試看，這邊就不再做一次了。</p>\n<h1 id=\"Pipes-and-precedence\"><a href=\"#Pipes-and-precedence\" class=\"headerlink\" title=\"Pipes and precedence\"></a>Pipes and precedence</h1><p>介紹了這麼多的 pipe 用法，可能有人會問：既然 pipe 是透過 ｜ 加在數值後面的，那如果這個數值在進行其他的 Javascript expressions 怎麼辦？</p>\n<p>其實在 Angular 中 pipe 運算符的優先級是高於三元運算子（: ?），這意味著如果你有一個 Text interpolation 長這樣 <code>&#123;&#123; a ? b : c | x &#125;&#125;</code> ，那麼他會被解析成 <code>&#123;&#123; a ? b : (c | x) &#125;&#125;</code> 而這個結果可能不是你所希望的，如果你希望達到 <code>&#123;&#123; a ? b : c | x &#125;&#125;</code> 這個結果，請使用括號將前面的三元運算子括起來 <code>&#123;&#123; (a ? b : c) | x &#125;&#125;</code></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇章中介紹了什麼是 pipe、該怎麼使用它以及客製化自己的 pipe，了解 pipe 對於開發專案是有幫助的，也要特別注意在預設情況下 pipe 是 pure 的，當傳入的輸入是複合型資料時，只有在他的 reference 發生改變時才會觸發，如果想要避免這個問題可以將 pipe 更改為 impure 就可以了。</p>\n<p>在官方文檔中還有介紹 <code>observable</code> 與 <code>HTTP</code> 的 pipe，但是因為牽扯到太多其他的技巧不太符合我們新手入門的領域，所以不在這邊介紹，不過了解了pipe 的基本原理之後，當遇到類似問題再去看就會比較容易看懂，所以就允許我偷懶一下吧</p>\n<p>下一篇會介紹 template 的 property binding，它的作用是可以讓你設置 HTML Tag 或 directive 的屬性質，詳細的介紹就期待明天吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/pipes\">Angular.io - pipes</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一章中介紹了如何在 template 中插入 component 的變量，而本章節要介紹如何使用 angular 的 pipes 來轉換插入的值（字串、貨幣金額、日期或其他數據）， pipes 是在模板表達式中的簡單函數，用於接受輸入值並返迴轉換後的值，而 Anngular 提供了幾個預設的 pipes 提供使用：</p>\n<ul>\n<li><strong>DatePipe</strong>：根據區域設置規則格式化日期值</li>\n<li><strong>UpperCasePipe</strong>：將內容都變更為大寫</li>\n<li><strong>LowerCasePipe</strong>：將內容都變更為小寫</li>\n<li><strong>CurrencyPipe</strong>：將數字轉換為貨幣字串，根據區域設置規則進行格式化。</li>\n<li><strong>DecimalPipe</strong>：將數字轉換為帶小數點的字串，並根據區域設置規則進行格式化。</li>\n<li><strong>PercentPipe</strong>：將數字轉換為百分比字串，根據區域設置規則進行格式化。</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767iCR0nyUNiR.png\"></p>","more":"<h1 id=\"Using-a-pipe-in-a-template\"><a href=\"#Using-a-pipe-in-a-template\" class=\"headerlink\" title=\"Using a pipe in a template\"></a>Using a pipe in a template</h1><p>要在 template 中使用 pipes 功能請使用管道運算符 ( | )，一樣舉個例子吧：</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個變數，賦予它 javescript 的 Date 型別資料</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  birthday = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">1995</span>, <span class=\"number\">9</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中將 birthday 插入並將其中一個使用 pipes 改變他的型態</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My birthday is &#123;&#123;birthday&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My birthday is &#123;&#123;birthday | date &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767GlSkfWn7Na.png\"></p>\n<p>在畫面中可以看到，沒有使用 pipes 轉換過的數值就是 javascript Date 型態的內容，而使用了 pipes 轉換過的數值看起來就好看多了，而這就是 pipes 的用法。</p>\n<h1 id=\"Transforming-data-with-parameters-and-chained-pipes\"><a href=\"#Transforming-data-with-parameters-and-chained-pipes\" class=\"headerlink\" title=\"Transforming data with parameters and chained pipes\"></a>Transforming data with parameters and chained pipes</h1><p>在使用 pipes 改變呈現內容時，可以輸入可選的參數來微調 pipes 輸出的結果，比如說可以將國家單位（EUR）當作參數傳遞給 CurrencyPipe，將轉換過的貨幣單位以歐元顯示 <code>&#123;&#123; amount | currency:'EUR' &#125;&#125;</code>，如果要對一個 pipes 使用多個參數時請使用冒號分隔這些參數，比如 <code>&#123;&#123; amount | currency:'EUR':'Euros '&#125;&#125;</code>，也可以使用任何一個有效的模板表達式作為參數。</p>\n<p>有些 pipes 需要至少一個參數才可以使用，比如說 SlicePipe ，<code>&#123;&#123; slice:1:5 &#125;&#125;</code> 會創建一個新陣列或字串，其中包含從  element-1 開始到 element-5 結束的元素子集。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  sayHello = <span class=\"string\">&#x27;Hello world&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; sayHello | slice:1:5 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767cAsa3R4sC4.png\"></p>\n<p>畫面中原本要呈現的 <code>Hello world</code>，變成了 ello ，是因為透過 slice 選擇了 index[1] ~ index[5] 的資料。</p>\n<h1 id=\"Creating-pipes-for-custom-data-transformations\"><a href=\"#Creating-pipes-for-custom-data-transformations\" class=\"headerlink\" title=\"Creating pipes for custom data transformations\"></a>Creating pipes for custom data transformations</h1><p>在開頭時提到了 Angular 有提供幾個預設的 pipes 可以使用，但這些不夠應付我們可能面面臨到的問題，這時候客製化 pipes 就很重要了，客製化的 pipes 也和預設的一樣，接收一個輸入將他轉換過後輸出，那麼就來看看該如何使用客製化 pipes 吧。</p>\n<h2 id=\"Marking-a-class-as-a-pipe\"><a href=\"#Marking-a-class-as-a-pipe\" class=\"headerlink\" title=\"Marking a class as a pipe\"></a>Marking a class as a pipe</h2><p>要建立一個客製化的 pipes，首先需要向建立 component 一樣先建立一個 typescript 的 class，但是不同的是，當我們創建 Component Class 時使用的裝飾器是 <code>@Component</code>，代表這個 Class 是屬於 Component 的，但是要建立 pipis class 則需要使用 <code>@Pipe</code> 這個裝飾器，而對這個 Class 的命名請使用 <code>駝峰命名法</code>，不要在名稱中間使用連字符號( - )，舉個例子吧，可以建立一個 pipes 接收一個數值作為輸入與一個參數，將輸入的數值做參數的次方，比如輸入 &#x3D; 2 參數 &#x3D; 10 那麼就會等於 2^10 &#x3D; 1024。</p>\n<ol>\n<li><p>使用 Angular CLI 建立一個 pipes class</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate pipe exponential-strength</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 exponential-strength.pipe.ts 中添加轉換 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Pipe</span>, <span class=\"title class_\">PipeTransform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;exponentialStrength&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExponentialStrengthPipe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PipeTransform</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"attr\">value</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">exponent</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(value, exponent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果你是使用 Angular CLI 他會自動將這個 pipes class 放到 app.module.ts 的 declarations 中，如果你是手動建立的話要記得將它放到 app.module.ts 的 declarations 裡面喔！</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExponentialStrengthPipe</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exponential-strengh.pipe&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ExponentialStrengthPipe</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在 app.component.html 中使用客製化的 pipe 轉換資料</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Power boost: &#123;&#123; 2 | exponentialStrength:10 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767RueRFUir7N.png\"></p>\n<h1 id=\"Detecting-changes-with-data-binding-in-pipes\"><a href=\"#Detecting-changes-with-data-binding-in-pipes\" class=\"headerlink\" title=\"Detecting changes with data binding in pipes\"></a>Detecting changes with data binding in pipes</h1><p>還記得昨天提到的 Text interpolation 的特性嗎？他可以隨著 class 的 property 變化而動態的顯示，而這個動態變化也可以套用到 pipe 中，所以當客製化的 pipe 輸入是 <code>string</code> 或 <code>number</code> 時且發生改變時，會動態的作為輸入進到 pipe 中進行轉換，但如果是 <code>Date</code> 或 <code>Array</code> 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換，舉個例子吧</p>\n<ol>\n<li><p>在 app.component.ts 中定義兩個 property，一個代表要被轉換的值（輸入）另一個代表輸入要做幾次方</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: [<span class=\"string\">&#x27;input &#123;margin: .5rem 0;&#125;&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  power = <span class=\"number\">2</span>;</span><br><span class=\"line\">  factor = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.module.ts 的 imports 中加入 <code>FormsModule</code> ，這個是因為要在這個例子中使用到 form，所以要加入這個（之後會詳細的介紹 form）</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExponentialStrengthPipe</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exponential-strengh.pipe&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ExponentialStrengthPipe</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中使用 pipe</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Power Boost Calculator<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power-input&quot;</span>&gt;</span>Normal power: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;power-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;power&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;boost-input&quot;</span>&gt;</span>Boost factor: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boost-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;factor&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Super Hero Power: &#123;&#123; power | exponentialStrength: factor &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊可能會有疑問，<code>[(ngModel)]</code> 這個是什麼？這邊大概介紹一下，如果將 component 中的 property 使用 <code>[(ngModel)]</code> 綁定，代表當 user 在畫面中的 <code>&lt;input&gt;</code> 中改變數值時，他會同步改變到 Component 中的 property，當然如果你改 Component 中的 property 的數值一樣會同步更改到畫面 <code>&lt;input&gt;</code> 中的值，這稱為 <code>雙向綁定</code>，之後會詳細講解，這邊先有大概的概念就好。</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Y92boUn.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們每次更改 factor 的值時，pipe 都會自動重新計算結果。</p>\n<h1 id=\"Detecting-pure-changes-to-primitives-and-object-references\"><a href=\"#Detecting-pure-changes-to-primitives-and-object-references\" class=\"headerlink\" title=\"Detecting pure changes to primitives and object references\"></a>Detecting pure changes to primitives and object references</h1><p>在上面提到 <code>如果是 </code>Date<code>或</code>Array<code> 類型時，Angular 會檢測到 reference 發生改變時才會觸發執行 pipe 的轉換</code> 這邊要來詳細的說明一下。</p>\n<p>在默認情況下 pipe 要被定義成 pure 的，以便 Angular 只有在檢測到輸入值變化時才執行 pipe ，所以必須要是沒有 side effect 的 pure function，而如果是將複合對象當作輸入送進 pipe （現有的 arr 添加新元素）時，因為檢查他的 reference 比深入到 arr 中遞迴的檢查每個元素快得多，所以 Angular 會通過檢查他的 reference 來判定是否發生改變，所以當你將一個 arr 作為輸入送進一個 pipe 時，可能會發生意料之外的錯誤，下面來句個例子：</p>\n<p>對了！如果是新手對 javascript 的 object reference 不熟悉的話，建議先去了解一下為什麼對 arr 使用 push 時不算對 reference 的改變，這也是為什麼使用 const 宣告 arr 卻可以對他新增內容的原因</p>\n<p>，我在 <a href=\"https://ithelp.ithome.com.tw/articles/10231666\">ES6 學習筆記_01(let &amp; const)</a>  中提到 const 的本質是什麼，有興趣可以去看一下。</p>\n<ol>\n<li><p>首先一樣先創建一個 pipe </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Pipe</span>, <span class=\"title class_\">PipeTransform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;flyingHeros&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyingHerosPipe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PipeTransform</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"params\">allHeroes: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> allHeroes.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">hero: <span class=\"built_in\">any</span></span>) =&gt;</span> hero.<span class=\"property\">caFly</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中定義 Hero list</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Hero</span> = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr Nice&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Narco&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Celeritas&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">15</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magneta&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">16</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RubberMan&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">17</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dynama&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magma&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tornado&#x27;</span>,  <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中使用 pipe 將可以飛的英雄顯示出來</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let hero of ( heros | flyingHeros )&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/201247677rVVugO8sm.png\"></p>\n<p>在畫面中可以看到只有會飛的英雄顯示出來，這時我們在 heros 中使用 push 新增英雄。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onAddHero</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當我將新的英雄 push 近 heros 中，卻發現畫面沒有更改，是壞掉了嗎？ 讓我們將 heros console 出來確認是否真的有將他 push 進去。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onAddHero</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heros</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210803/20124767DNrdyLkdv3.png\"></p>\n<p>在 console 中可以看到我們確實有將新英雄 push 進 heros 中，這就是剛剛提到的 Angular 在面對 arr 時，只有在他的 reference 發生改變時才會觸發 pipe，有興趣的可以自己嘗試一下，把 <code>onAddHero()</code> 變成</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onAddHero</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr Nice&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Narco&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Celeritas&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">15</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magneta&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">16</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RubberMan&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">17</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dynama&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magma&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tornado&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>, <span class=\"attr\">canFly</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>會發生什麼事。</p>\n<p>所以在使用者種複合型的資料時，需要特別注意<code>只有當輸入的 Reference 發生改變時，才會觸發 pipe </code>。</p>\n<h1 id=\"Detecting-impure-changes-within-composite-objects\"><a href=\"#Detecting-impure-changes-within-composite-objects\" class=\"headerlink\" title=\"Detecting impure changes within composite objects\"></a>Detecting impure changes within composite objects</h1><p>那你可能想說，我不要啊我天生反骨我就是想要使用 push 就可以觸發 pipe 可不可以？</p>\n<p>當然可以，Angular 提供了當複合數據內發生改變時也可以觸發 pipe 的方法，首先你<code>需要將這個 pipe 變得 impure</code>，這樣才可以檢測到 impure 的變化，所以 Angular 只要檢測到每次按鍵或滑鼠的變化時都會觸發一個 impure 的 pipe，要做的很簡單，只要在 pipe.ts 中增加一個屬性就可以了</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;flyingHeros&#x27;</span>, <span class=\"attr\">pure</span>: <span class=\"literal\">false</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>一樣有興趣的可以拿上面的例子直接將他變成 impure 試試看，這邊就不再做一次了。</p>\n<h1 id=\"Pipes-and-precedence\"><a href=\"#Pipes-and-precedence\" class=\"headerlink\" title=\"Pipes and precedence\"></a>Pipes and precedence</h1><p>介紹了這麼多的 pipe 用法，可能有人會問：既然 pipe 是透過 ｜ 加在數值後面的，那如果這個數值在進行其他的 Javascript expressions 怎麼辦？</p>\n<p>其實在 Angular 中 pipe 運算符的優先級是高於三元運算子（: ?），這意味著如果你有一個 Text interpolation 長這樣 <code>&#123;&#123; a ? b : c | x &#125;&#125;</code> ，那麼他會被解析成 <code>&#123;&#123; a ? b : (c | x) &#125;&#125;</code> 而這個結果可能不是你所希望的，如果你希望達到 <code>&#123;&#123; a ? b : c | x &#125;&#125;</code> 這個結果，請使用括號將前面的三元運算子括起來 <code>&#123;&#123; (a ? b : c) | x &#125;&#125;</code></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇章中介紹了什麼是 pipe、該怎麼使用它以及客製化自己的 pipe，了解 pipe 對於開發專案是有幫助的，也要特別注意在預設情況下 pipe 是 pure 的，當傳入的輸入是複合型資料時，只有在他的 reference 發生改變時才會觸發，如果想要避免這個問題可以將 pipe 更改為 impure 就可以了。</p>\n<p>在官方文檔中還有介紹 <code>observable</code> 與 <code>HTTP</code> 的 pipe，但是因為牽扯到太多其他的技巧不太符合我們新手入門的領域，所以不在這邊介紹，不過了解了pipe 的基本原理之後，當遇到類似問題再去看就會比較容易看懂，所以就允許我偷懶一下吧</p>\n<p>下一篇會介紹 template 的 property binding，它的作用是可以讓你設置 HTML Tag 或 directive 的屬性質，詳細的介紹就期待明天吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/pipes\">Angular.io - pipes</a></li>\n</ul>"},{"title":"Day10. Property binding and Event binding","date":"2021-09-10T08:54:52.000Z","_content":"\n本篇中將介紹 Angular 的 `property binding` 與 `event binding`，property binding 可以讓你`設置 HTML Tag 或 directive 的屬性值`，可以利用 property binding 做到切換按鈕、以程式方式設置 url 路徑以及在各個 Component 之間共享數據等等。\n\n而 Event binding 則是可以`將事件綁定在 HTML 的元件上`，隨時監聽使用者的操作，例如按下按鍵、滑鼠移動、點擊以及觸摸，就先從 property binding 開始介紹吧。\n\n![img](https://bs-uploads.toptal.io/blackfish-uploads/components/blog_post_page/content/cover_image_file/cover_image/687521/retina_1708x683_cover-top-18-most-common-angularjs-developer-mistakes-41f9ad303a51db70e4a5204e101e7414.png)\n\n<!-- more -->\n\n# Binding to a property\n\n在 Angular 中的 property binding 會讓數據往一個方向流動，就是從 component 流向 HTML 的元件，而如果要將數據綁定到 HTML 元件請使用`方括號（ [ ] ）`將他括在其中，比如說可以將 `<img>`中的 `src` 屬性利用 property binding 綁定。\n\n```html\n<img [src]=\"itemImageUrl\">\n```\n\n在大多數形況下目標名稱就是屬性的名稱，所以以上面的例子來說，src 就是 `<img>` 元件的屬性名稱，而方括號會讓 Angular 將等號右邊評估為動態表達式，如果沒有括號 Angular 會將右側視為字串文字並將屬性設置為該靜態值。\n\n\n# Setting an element property to a component property value\n\n以上面的例子來說，如果要將 `<img>` 的屬性綁定到 Component 的 property，請將 src 放在方括號中，後面加上等號與 component 的 property 名稱。\n\n```html\n<img [src]=\"itemImageUrl\">\n```\n\n這時就可以在 Component 中定義一個 property 並將他賦值，那麼這個值就會綁定到 HTML 的元件上\n\n```typescript\nitemImageUrl: '../assets/phone.png'\n```\n\n\n# Toggling button functionality\n\n在 `<button>` 這個 HTML 中有一個屬性可以控制是否可以點擊這個按鈕那就是 `disabled`，我們可以透過 property binding 將這個屬性綁定到 component 的 property，建立一個動態改變他狀態的功能，一樣來舉個例子吧：\n\n1. 在 app.component.ts 中新增一個 property 用來綁定 `<button>` 與一個 method 用來更改 property 的值\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      isUnchanged = true;\n\n      onButtonChange() {\n        this.isUnchanged = !this.isUnchanged;\n      }\n    }\n    ```\n\n2. 在 app.component.html 中新增兩個 `<button>` 一個用來做 property binding 另一個用來改變 property 的內容\n\n    ```html\n    <!-- app.component.html -->\n\n    <div style=\"margin-bottom: 10px;\">\n      <button [disabled]=\"isUnchanged\">Property binding</button>\n    </div>\n\n    <button (click)=\"onButtonChange()\">Change Property value</button>\n    ```\n\n\n在畫面中可以看到，當我們點擊 `Change Property value` 時，他將 Component 中的 isUnchanged 內容更改，所以讓 `Property binding` 這個 `<button>` 可以動態被 disable 與 enable。\n\n\n\n# Bind values between components\n\n在前幾天介紹 @Input() 時常常在用到的 `<app-child-component [item]=\"currentItem\"></app-child-component>` 其實就是 property binding，將父層 component 中的 property 綁定給子層，當父層 Component 的這個 property 發生改變時，因為綁定的關係所以會將這個改變也帶給子層，\n\n這邊再稍微複習一下該怎麼使用 @Input() 吧![/images/emoticon/emoticon05.gif](/images/emoticon/emoticon05.gif)\n\n1. 先 parent.component.ts 中定義一個 property 並將他賦值\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-parent-component',\n      templateUrl: './parent.component.html'\n    })\n    export class ParentComponent {\n      constructor() { }\n      currentItem = 'Television';  // defind a property\n    }\n    ```\n\n2. 在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層\n\n    ```html\n    <app-child-component [item]=\"currentItem\"></app-child-component>\n    ```\n\n3. 在 child.component.ts 中使用 @Input( ) 裝飾器將 property 裝飾為是從父層傳下來的\n\n    ```typescript\n    import { Component, Input } from '@angular/core'; \n\n    @Component({\n      selector: 'app-child-component',\n      templateUrl: './child.component.html'\n    })\n    export class ChildComponent {\n      @Input() item = '';\n      constructor() { }\n    }\n    ```\n\n4. 在 child.component.html 中使用 Text interpolation 將他呈現在畫面上\n\n    ```html\n    <div>Today's item: {{ item }}</div>\n    ```\n    \n當初在介紹 @Input() 時還有很多技巧沒有講到（property binding、test interpolation）現在在重複看一次之前的例子有沒有比較可以把前幾章的內容串起來了呢。\n\n\n\n# Property binding and security\n\n既然 property binding 這麼好用，那有沒有什麼問題或是缺點呢？來看看下面的例子\n\n```typescript\nevilTitle = 'Template <script>alert(\"evil never sleeps\")</script> Syntax';\n```\n\n當我在一個 component 中添加一個屬性，並將這個屬性裡面多加了 `<script>`，在這個裡面放了一些會危害到你專案的 javascript 程式，那麼會發生什麼事？\n\n其實不會發生上面說的會危害到你專案的情況發生，因為 Angular 在 property binding 中有做一個限制，`不允許帶有 <script> 標籤的 HTML 元件，也不允許帶有插值和屬性綁定`，所以將上面那個 property 差值到你的 HTML file 中時，會有下面的 error message\n\n```bash\n\"Template <script>alert(\"evil never sleeps\")</script> Syntax\" is the interpolated evil title.\n```\n\n這是 Angular 對 property binding 做的安全機制。\n\n\n\n# Property binding and interpolation\n\n可能有人會問拉：property binding 與 text interpolation 都是將 component 中的 property 綁定在 HTML file 中，那們他們有什麼不一樣嗎？\n\n其實這個問題非常好，他們兩個理論上可以達到相同的目的\n\n```html\n<p>\n  <img src=\"{{itemImageUrl}}\"> is the <i>interpolated</i> image.\n</p>\n<p>\n  <img [src]=\"itemImageUrl\"> is the <i>property bound</i> image.\n</p>\n```\n\n上面這兩個的結果會是一樣的，無論是透過 text interpolation 將 property 插進 `<img>` 的 src 屬性，還是利用 proprety binding 住 `<img>` 的 src 屬性都是可以將 component 的 property 放進我們想放的位置。\n\n雖然兩個都可以達到目的，所以`當在將數據值呈現為字串時可以使用兩種方法的其中一種`，但為了可讀性更傾向於使用 text interpolation，但是當將元素屬性設置為`非字串數值`時，就必須使用屬性綁定，比如上面提到的 `<button>` 的 disabled 屬性。\n\n\n\n# Binding to events\n\n介紹完 property binding 後，接著要來介紹 event binding，顧名思義他就是將 event 綁定到 HTML 的元件上用於監聽使用這的操作，event binding 的語法是將`目標事件名稱放在等號左邊的括弧中`和將`引號的模板語句` 放在右側，舉個例子吧，當畫面中的一個按鈕被點擊到時，要觸發 component 中的 onSave() method，這時就可以這樣寫\n\n```html\n<button (click)=\"onSave()\">Save</button>\n```\n\n![https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png](https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png)\n\n如果你的 method 是帶有參數的，只要再等號右邊的 method 的括號中填入參數即可\n\n```html\n<button (click)=\"onSave(data)\">Save</button>\n```\n\n\n\n# Custom events with EventEmitter\n\n還記得在前幾天中介紹的 @Output() 嗎？來複習一下吧， @Output() 的用意是將子層的內容透過一個 event 往上傳遞給父層，一樣舉個子來回憶一下吧\n\n1. 在 child.component.ts 中加入一個 property 並將他使用 @Output() 裝飾成 EventEmitter 型態\n\n    ```typescript\n    import { Component, Output, EventEmitter } from '@angular/core'; \n\n    @Component({\n      selector: 'app-child-component',\n      templateUrl: './child.component.html',\n      styleUrls: ['./child.component.css']\n    })\n    export class ChildComponent {\n      @Output() newItemEvent = new EventEmitter<boolean>();  // (2)\n      constructor() { }\n\n      parentValueChange(value: boolean) { \n        this.newItemEvent.emit(value);\n      }\n    }\n    ```\n\n2.  在 child.component.html 中新增兩個 `<button>` 用來讓 user 點擊觸發 event\n\n    ```html\n    <!-- child.component.html  -->\n    <p>child component works!</p>\n\n    <div class=\"button\">\n        <button (click)=\"parentValueChange(true)\">+</button>\n        <button (click)=\"parentValueChange(false)\">-</button>\n    </div>\n    ```\n\n3. 在 parent.component.ts 中添加一個 method，用來處理當子層傳送的數據\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-parent-component',\n      templateUrl: './parent.component.html'\n    })\n    export class ParentComponent {\n      constructor() { }\n      counterValue = 0;\n\n      addOrSub(event: boolean) { \n        if (event) {\n          this.counterValue++;\n        } else {\n          this.counterValue--;\n        }\n      }\n    }\n    ```\n\n4. 在 parent.component.html 中使用 event binding 將子層傳送的事件與 parent.component.ts 的 method 綁定\n\n    ```html\n    <!-- parent.component.html -->\n    <p>parent component works!</p>\n    <div>parent component property counter: {{counterValue}}</div>\n\n    <hr>\n    <app-child-component (newItemEvent)=\"addOrSub($event)\"></app-child-component>\n    ```\n\n在介紹完 event binding 後再回來看這個例子，有沒有更能夠了解如何使用 @Output() 與 evebt binding 了呢？\n\n\n\n# Determining an event target\n\n在使用 Event binding 時，Angular 會檢查 event target 的名稱是否與已知指令事件屬性匹配，比如說\n\n```html\n<button (myClick)=\"clickMessage=$event\" clickable>click with myClick</button>\n```\n\n你使用了一個自訂義的 `(myClick)` 作爲 event target 時，因為他不符合已知指令事件屬性，所以 Angular 會傳出 `unknown directive` 的錯誤訊息，所以在使用 event binding 時要記得使用正確的 event target 喔！\n\n\n\n# 結論\n\n在本章中介紹了兩種 binding，property binding 是用於將 component 中的 property 綁定給 HTML 中的元件，常用在將父層的 property 綁定給子層、將比較複雜或是需要邏輯計算的 HTML 元件屬性放到 component 中計算後再放回等等。\n\n而 event binding 是將 component 中的 method 綁定到 HTML 的元件上用於監聽使用者的操作，常用再處理使用者使用者操作畫面而處發的事件、將子層透過 EventEmitter 往父層傳遞數據時的綁定。\n\n下一章將會介紹另外兩種 binding 方法，分別是 Attrubute, class, strle binding 與 Two-way binding， Attrubute, class, strle binding 顧名思義就是將 component 中的 property 綁定到 HTML 的 class 或 attrubute，而 Two-way binding 則是可以讓父子層之間只使用一個 binding 就可以同時監聽事件與更新值，不需要使用 property binding 和 event binding。\n\n\n\n# Reference\n- [Angular.io - property binding](https://angular.io/guide/property-binding)\n- [Angular.io - event binding](https://angular.io/guide/event-binding)","source":"_posts/Angular/angular-10.md","raw":"---\ntitle: Day10. Property binding and Event binding\ndate: 2021-09-10 16:54:52\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n本篇中將介紹 Angular 的 `property binding` 與 `event binding`，property binding 可以讓你`設置 HTML Tag 或 directive 的屬性值`，可以利用 property binding 做到切換按鈕、以程式方式設置 url 路徑以及在各個 Component 之間共享數據等等。\n\n而 Event binding 則是可以`將事件綁定在 HTML 的元件上`，隨時監聽使用者的操作，例如按下按鍵、滑鼠移動、點擊以及觸摸，就先從 property binding 開始介紹吧。\n\n![img](https://bs-uploads.toptal.io/blackfish-uploads/components/blog_post_page/content/cover_image_file/cover_image/687521/retina_1708x683_cover-top-18-most-common-angularjs-developer-mistakes-41f9ad303a51db70e4a5204e101e7414.png)\n\n<!-- more -->\n\n# Binding to a property\n\n在 Angular 中的 property binding 會讓數據往一個方向流動，就是從 component 流向 HTML 的元件，而如果要將數據綁定到 HTML 元件請使用`方括號（ [ ] ）`將他括在其中，比如說可以將 `<img>`中的 `src` 屬性利用 property binding 綁定。\n\n```html\n<img [src]=\"itemImageUrl\">\n```\n\n在大多數形況下目標名稱就是屬性的名稱，所以以上面的例子來說，src 就是 `<img>` 元件的屬性名稱，而方括號會讓 Angular 將等號右邊評估為動態表達式，如果沒有括號 Angular 會將右側視為字串文字並將屬性設置為該靜態值。\n\n\n# Setting an element property to a component property value\n\n以上面的例子來說，如果要將 `<img>` 的屬性綁定到 Component 的 property，請將 src 放在方括號中，後面加上等號與 component 的 property 名稱。\n\n```html\n<img [src]=\"itemImageUrl\">\n```\n\n這時就可以在 Component 中定義一個 property 並將他賦值，那麼這個值就會綁定到 HTML 的元件上\n\n```typescript\nitemImageUrl: '../assets/phone.png'\n```\n\n\n# Toggling button functionality\n\n在 `<button>` 這個 HTML 中有一個屬性可以控制是否可以點擊這個按鈕那就是 `disabled`，我們可以透過 property binding 將這個屬性綁定到 component 的 property，建立一個動態改變他狀態的功能，一樣來舉個例子吧：\n\n1. 在 app.component.ts 中新增一個 property 用來綁定 `<button>` 與一個 method 用來更改 property 的值\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      isUnchanged = true;\n\n      onButtonChange() {\n        this.isUnchanged = !this.isUnchanged;\n      }\n    }\n    ```\n\n2. 在 app.component.html 中新增兩個 `<button>` 一個用來做 property binding 另一個用來改變 property 的內容\n\n    ```html\n    <!-- app.component.html -->\n\n    <div style=\"margin-bottom: 10px;\">\n      <button [disabled]=\"isUnchanged\">Property binding</button>\n    </div>\n\n    <button (click)=\"onButtonChange()\">Change Property value</button>\n    ```\n\n\n在畫面中可以看到，當我們點擊 `Change Property value` 時，他將 Component 中的 isUnchanged 內容更改，所以讓 `Property binding` 這個 `<button>` 可以動態被 disable 與 enable。\n\n\n\n# Bind values between components\n\n在前幾天介紹 @Input() 時常常在用到的 `<app-child-component [item]=\"currentItem\"></app-child-component>` 其實就是 property binding，將父層 component 中的 property 綁定給子層，當父層 Component 的這個 property 發生改變時，因為綁定的關係所以會將這個改變也帶給子層，\n\n這邊再稍微複習一下該怎麼使用 @Input() 吧![/images/emoticon/emoticon05.gif](/images/emoticon/emoticon05.gif)\n\n1. 先 parent.component.ts 中定義一個 property 並將他賦值\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-parent-component',\n      templateUrl: './parent.component.html'\n    })\n    export class ParentComponent {\n      constructor() { }\n      currentItem = 'Television';  // defind a property\n    }\n    ```\n\n2. 在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層\n\n    ```html\n    <app-child-component [item]=\"currentItem\"></app-child-component>\n    ```\n\n3. 在 child.component.ts 中使用 @Input( ) 裝飾器將 property 裝飾為是從父層傳下來的\n\n    ```typescript\n    import { Component, Input } from '@angular/core'; \n\n    @Component({\n      selector: 'app-child-component',\n      templateUrl: './child.component.html'\n    })\n    export class ChildComponent {\n      @Input() item = '';\n      constructor() { }\n    }\n    ```\n\n4. 在 child.component.html 中使用 Text interpolation 將他呈現在畫面上\n\n    ```html\n    <div>Today's item: {{ item }}</div>\n    ```\n    \n當初在介紹 @Input() 時還有很多技巧沒有講到（property binding、test interpolation）現在在重複看一次之前的例子有沒有比較可以把前幾章的內容串起來了呢。\n\n\n\n# Property binding and security\n\n既然 property binding 這麼好用，那有沒有什麼問題或是缺點呢？來看看下面的例子\n\n```typescript\nevilTitle = 'Template <script>alert(\"evil never sleeps\")</script> Syntax';\n```\n\n當我在一個 component 中添加一個屬性，並將這個屬性裡面多加了 `<script>`，在這個裡面放了一些會危害到你專案的 javascript 程式，那麼會發生什麼事？\n\n其實不會發生上面說的會危害到你專案的情況發生，因為 Angular 在 property binding 中有做一個限制，`不允許帶有 <script> 標籤的 HTML 元件，也不允許帶有插值和屬性綁定`，所以將上面那個 property 差值到你的 HTML file 中時，會有下面的 error message\n\n```bash\n\"Template <script>alert(\"evil never sleeps\")</script> Syntax\" is the interpolated evil title.\n```\n\n這是 Angular 對 property binding 做的安全機制。\n\n\n\n# Property binding and interpolation\n\n可能有人會問拉：property binding 與 text interpolation 都是將 component 中的 property 綁定在 HTML file 中，那們他們有什麼不一樣嗎？\n\n其實這個問題非常好，他們兩個理論上可以達到相同的目的\n\n```html\n<p>\n  <img src=\"{{itemImageUrl}}\"> is the <i>interpolated</i> image.\n</p>\n<p>\n  <img [src]=\"itemImageUrl\"> is the <i>property bound</i> image.\n</p>\n```\n\n上面這兩個的結果會是一樣的，無論是透過 text interpolation 將 property 插進 `<img>` 的 src 屬性，還是利用 proprety binding 住 `<img>` 的 src 屬性都是可以將 component 的 property 放進我們想放的位置。\n\n雖然兩個都可以達到目的，所以`當在將數據值呈現為字串時可以使用兩種方法的其中一種`，但為了可讀性更傾向於使用 text interpolation，但是當將元素屬性設置為`非字串數值`時，就必須使用屬性綁定，比如上面提到的 `<button>` 的 disabled 屬性。\n\n\n\n# Binding to events\n\n介紹完 property binding 後，接著要來介紹 event binding，顧名思義他就是將 event 綁定到 HTML 的元件上用於監聽使用這的操作，event binding 的語法是將`目標事件名稱放在等號左邊的括弧中`和將`引號的模板語句` 放在右側，舉個例子吧，當畫面中的一個按鈕被點擊到時，要觸發 component 中的 onSave() method，這時就可以這樣寫\n\n```html\n<button (click)=\"onSave()\">Save</button>\n```\n\n![https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png](https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png)\n\n如果你的 method 是帶有參數的，只要再等號右邊的 method 的括號中填入參數即可\n\n```html\n<button (click)=\"onSave(data)\">Save</button>\n```\n\n\n\n# Custom events with EventEmitter\n\n還記得在前幾天中介紹的 @Output() 嗎？來複習一下吧， @Output() 的用意是將子層的內容透過一個 event 往上傳遞給父層，一樣舉個子來回憶一下吧\n\n1. 在 child.component.ts 中加入一個 property 並將他使用 @Output() 裝飾成 EventEmitter 型態\n\n    ```typescript\n    import { Component, Output, EventEmitter } from '@angular/core'; \n\n    @Component({\n      selector: 'app-child-component',\n      templateUrl: './child.component.html',\n      styleUrls: ['./child.component.css']\n    })\n    export class ChildComponent {\n      @Output() newItemEvent = new EventEmitter<boolean>();  // (2)\n      constructor() { }\n\n      parentValueChange(value: boolean) { \n        this.newItemEvent.emit(value);\n      }\n    }\n    ```\n\n2.  在 child.component.html 中新增兩個 `<button>` 用來讓 user 點擊觸發 event\n\n    ```html\n    <!-- child.component.html  -->\n    <p>child component works!</p>\n\n    <div class=\"button\">\n        <button (click)=\"parentValueChange(true)\">+</button>\n        <button (click)=\"parentValueChange(false)\">-</button>\n    </div>\n    ```\n\n3. 在 parent.component.ts 中添加一個 method，用來處理當子層傳送的數據\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-parent-component',\n      templateUrl: './parent.component.html'\n    })\n    export class ParentComponent {\n      constructor() { }\n      counterValue = 0;\n\n      addOrSub(event: boolean) { \n        if (event) {\n          this.counterValue++;\n        } else {\n          this.counterValue--;\n        }\n      }\n    }\n    ```\n\n4. 在 parent.component.html 中使用 event binding 將子層傳送的事件與 parent.component.ts 的 method 綁定\n\n    ```html\n    <!-- parent.component.html -->\n    <p>parent component works!</p>\n    <div>parent component property counter: {{counterValue}}</div>\n\n    <hr>\n    <app-child-component (newItemEvent)=\"addOrSub($event)\"></app-child-component>\n    ```\n\n在介紹完 event binding 後再回來看這個例子，有沒有更能夠了解如何使用 @Output() 與 evebt binding 了呢？\n\n\n\n# Determining an event target\n\n在使用 Event binding 時，Angular 會檢查 event target 的名稱是否與已知指令事件屬性匹配，比如說\n\n```html\n<button (myClick)=\"clickMessage=$event\" clickable>click with myClick</button>\n```\n\n你使用了一個自訂義的 `(myClick)` 作爲 event target 時，因為他不符合已知指令事件屬性，所以 Angular 會傳出 `unknown directive` 的錯誤訊息，所以在使用 event binding 時要記得使用正確的 event target 喔！\n\n\n\n# 結論\n\n在本章中介紹了兩種 binding，property binding 是用於將 component 中的 property 綁定給 HTML 中的元件，常用在將父層的 property 綁定給子層、將比較複雜或是需要邏輯計算的 HTML 元件屬性放到 component 中計算後再放回等等。\n\n而 event binding 是將 component 中的 method 綁定到 HTML 的元件上用於監聽使用者的操作，常用再處理使用者使用者操作畫面而處發的事件、將子層透過 EventEmitter 往父層傳遞數據時的綁定。\n\n下一章將會介紹另外兩種 binding 方法，分別是 Attrubute, class, strle binding 與 Two-way binding， Attrubute, class, strle binding 顧名思義就是將 component 中的 property 綁定到 HTML 的 class 或 attrubute，而 Two-way binding 則是可以讓父子層之間只使用一個 binding 就可以同時監聽事件與更新值，不需要使用 property binding 和 event binding。\n\n\n\n# Reference\n- [Angular.io - property binding](https://angular.io/guide/property-binding)\n- [Angular.io - event binding](https://angular.io/guide/event-binding)","slug":"Angular/angular-10","published":1,"updated":"2022-02-16T01:25:43.823Z","_id":"ckznuvv3o001hkww3bs3y8xyp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本篇中將介紹 Angular 的 <code>property binding</code> 與 <code>event binding</code>，property binding 可以讓你<code>設置 HTML Tag 或 directive 的屬性值</code>，可以利用 property binding 做到切換按鈕、以程式方式設置 url 路徑以及在各個 Component 之間共享數據等等。</p>\n<p>而 Event binding 則是可以<code>將事件綁定在 HTML 的元件上</code>，隨時監聽使用者的操作，例如按下按鍵、滑鼠移動、點擊以及觸摸，就先從 property binding 開始介紹吧。</p>\n<p><img src=\"https://bs-uploads.toptal.io/blackfish-uploads/components/blog_post_page/content/cover_image_file/cover_image/687521/retina_1708x683_cover-top-18-most-common-angularjs-developer-mistakes-41f9ad303a51db70e4a5204e101e7414.png\" alt=\"img\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Binding-to-a-property\"><a href=\"#Binding-to-a-property\" class=\"headerlink\" title=\"Binding to a property\"></a>Binding to a property</h1><p>在 Angular 中的 property binding 會讓數據往一個方向流動，就是從 component 流向 HTML 的元件，而如果要將數據綁定到 HTML 元件請使用<code>方括號（ [ ] ）</code>將他括在其中，比如說可以將 <code>&lt;img&gt;</code>中的 <code>src</code> 屬性利用 property binding 綁定。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;itemImageUrl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在大多數形況下目標名稱就是屬性的名稱，所以以上面的例子來說，src 就是 <code>&lt;img&gt;</code> 元件的屬性名稱，而方括號會讓 Angular 將等號右邊評估為動態表達式，如果沒有括號 Angular 會將右側視為字串文字並將屬性設置為該靜態值。</p>\n<h1 id=\"Setting-an-element-property-to-a-component-property-value\"><a href=\"#Setting-an-element-property-to-a-component-property-value\" class=\"headerlink\" title=\"Setting an element property to a component property value\"></a>Setting an element property to a component property value</h1><p>以上面的例子來說，如果要將 <code>&lt;img&gt;</code> 的屬性綁定到 Component 的 property，請將 src 放在方括號中，後面加上等號與 component 的 property 名稱。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;itemImageUrl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這時就可以在 Component 中定義一個 property 並將他賦值，那麼這個值就會綁定到 HTML 的元件上</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">itemImageUrl</span>: <span class=\"string\">&#x27;../assets/phone.png&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Toggling-button-functionality\"><a href=\"#Toggling-button-functionality\" class=\"headerlink\" title=\"Toggling button functionality\"></a>Toggling button functionality</h1><p>在 <code>&lt;button&gt;</code> 這個 HTML 中有一個屬性可以控制是否可以點擊這個按鈕那就是 <code>disabled</code>，我們可以透過 property binding 將這個屬性綁定到 component 的 property，建立一個動態改變他狀態的功能，一樣來舉個例子吧：</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個 property 用來綁定 <code>&lt;button&gt;</code> 與一個 method 用來更改 property 的值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isUnchanged = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onButtonChange</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isUnchanged</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isUnchanged</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中新增兩個 <code>&lt;button&gt;</code> 一個用來做 property binding 另一個用來改變 property 的內容</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-bottom: 10px;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;isUnchanged&quot;</span>&gt;</span>Property binding<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onButtonChange()&quot;</span>&gt;</span>Change Property value<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在畫面中可以看到，當我們點擊 <code>Change Property value</code> 時，他將 Component 中的 isUnchanged 內容更改，所以讓 <code>Property binding</code> 這個 <code>&lt;button&gt;</code> 可以動態被 disable 與 enable。</p>\n<h1 id=\"Bind-values-between-components\"><a href=\"#Bind-values-between-components\" class=\"headerlink\" title=\"Bind values between components\"></a>Bind values between components</h1><p>在前幾天介紹 @Input() 時常常在用到的 <code>&lt;app-child-component [item]=&quot;currentItem&quot;&gt;&lt;/app-child-component&gt;</code> 其實就是 property binding，將父層 component 中的 property 綁定給子層，當父層 Component 的這個 property 發生改變時，因為綁定的關係所以會將這個改變也帶給子層，</p>\n<p>這邊再稍微複習一下該怎麼使用 @Input() 吧<img src=\"/images/emoticon/emoticon05.gif\" alt=\"/images/emoticon/emoticon05.gif\"></p>\n<ol>\n<li><p>先 parent.component.ts 中定義一個 property 並將他賦值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  currentItem = <span class=\"string\">&#x27;Television&#x27;</span>;  <span class=\"comment\">// defind a property</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> [<span class=\"attr\">item</span>]=<span class=\"string\">&quot;currentItem&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 child.component.ts 中使用 @Input( ) 裝飾器將 property 裝飾為是從父層傳下來的</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() item = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 child.component.html 中使用 Text interpolation 將他呈現在畫面上</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Today&#x27;s item: &#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>當初在介紹 @Input() 時還有很多技巧沒有講到（property binding、test interpolation）現在在重複看一次之前的例子有沒有比較可以把前幾章的內容串起來了呢。</p>\n<h1 id=\"Property-binding-and-security\"><a href=\"#Property-binding-and-security\" class=\"headerlink\" title=\"Property binding and security\"></a>Property binding and security</h1><p>既然 property binding 這麼好用，那有沒有什麼問題或是缺點呢？來看看下面的例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evilTitle = <span class=\"string\">&#x27;Template &lt;script&gt;alert(&quot;evil never sleeps&quot;)&lt;/script&gt; Syntax&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>當我在一個 component 中添加一個屬性，並將這個屬性裡面多加了 <code>&lt;script&gt;</code>，在這個裡面放了一些會危害到你專案的 javascript 程式，那麼會發生什麼事？</p>\n<p>其實不會發生上面說的會危害到你專案的情況發生，因為 Angular 在 property binding 中有做一個限制，<code>不允許帶有 &lt;script&gt; 標籤的 HTML 元件，也不允許帶有插值和屬性綁定</code>，所以將上面那個 property 差值到你的 HTML file 中時，會有下面的 error message</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Template &lt;script&gt;alert(&quot;</span>evil never sleeps<span class=\"string\">&quot;)&lt;/script&gt; Syntax&quot;</span> is the interpolated evil title.</span><br></pre></td></tr></table></figure>\n\n<p>這是 Angular 對 property binding 做的安全機制。</p>\n<h1 id=\"Property-binding-and-interpolation\"><a href=\"#Property-binding-and-interpolation\" class=\"headerlink\" title=\"Property binding and interpolation\"></a>Property binding and interpolation</h1><p>可能有人會問拉：property binding 與 text interpolation 都是將 component 中的 property 綁定在 HTML file 中，那們他們有什麼不一樣嗎？</p>\n<p>其實這個問題非常好，他們兩個理論上可以達到相同的目的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;itemImageUrl&#125;&#125;&quot;</span>&gt;</span> is the <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>interpolated<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> image.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;itemImageUrl&quot;</span>&gt;</span> is the <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>property bound<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> image.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面這兩個的結果會是一樣的，無論是透過 text interpolation 將 property 插進 <code>&lt;img&gt;</code> 的 src 屬性，還是利用 proprety binding 住 <code>&lt;img&gt;</code> 的 src 屬性都是可以將 component 的 property 放進我們想放的位置。</p>\n<p>雖然兩個都可以達到目的，所以<code>當在將數據值呈現為字串時可以使用兩種方法的其中一種</code>，但為了可讀性更傾向於使用 text interpolation，但是當將元素屬性設置為<code>非字串數值</code>時，就必須使用屬性綁定，比如上面提到的 <code>&lt;button&gt;</code> 的 disabled 屬性。</p>\n<h1 id=\"Binding-to-events\"><a href=\"#Binding-to-events\" class=\"headerlink\" title=\"Binding to events\"></a>Binding to events</h1><p>介紹完 property binding 後，接著要來介紹 event binding，顧名思義他就是將 event 綁定到 HTML 的元件上用於監聽使用這的操作，event binding 的語法是將<code>目標事件名稱放在等號左邊的括弧中</code>和將<code>引號的模板語句</code> 放在右側，舉個例子吧，當畫面中的一個按鈕被點擊到時，要觸發 component 中的 onSave() method，這時就可以這樣寫</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSave()&quot;</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png\" alt=\"https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png\"></p>\n<p>如果你的 method 是帶有參數的，只要再等號右邊的 method 的括號中填入參數即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSave(data)&quot;</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Custom-events-with-EventEmitter\"><a href=\"#Custom-events-with-EventEmitter\" class=\"headerlink\" title=\"Custom events with EventEmitter\"></a>Custom events with EventEmitter</h1><p>還記得在前幾天中介紹的 @Output() 嗎？來複習一下吧， @Output() 的用意是將子層的內容透過一個 event 往上傳遞給父層，一樣舉個子來回憶一下吧</p>\n<ol>\n<li><p>在 child.component.ts 中加入一個 property 並將他使用 @Output() 裝飾成 EventEmitter 型態</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() newItemEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">boolean</span>&gt;();  <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">parentValueChange</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newItemEvent</span>.<span class=\"title function_\">emit</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 child.component.html 中新增兩個 <code>&lt;button&gt;</code> 用來讓 user 點擊觸發 event</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child.component.html  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(true)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(false)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.ts 中添加一個 method，用來處理當子層傳送的數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  counterValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addOrSub</span>(<span class=\"params\">event: <span class=\"built_in\">boolean</span></span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.html 中使用 event binding 將子層傳送的事件與 parent.component.ts 的 method 綁定</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>parent component property counter: &#123;&#123;counterValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> (<span class=\"attr\">newItemEvent</span>)=<span class=\"string\">&quot;addOrSub($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在介紹完 event binding 後再回來看這個例子，有沒有更能夠了解如何使用 @Output() 與 evebt binding 了呢？</p>\n<h1 id=\"Determining-an-event-target\"><a href=\"#Determining-an-event-target\" class=\"headerlink\" title=\"Determining an event target\"></a>Determining an event target</h1><p>在使用 Event binding 時，Angular 會檢查 event target 的名稱是否與已知指令事件屬性匹配，比如說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">myClick</span>)=<span class=\"string\">&quot;clickMessage=$event&quot;</span> <span class=\"attr\">clickable</span>&gt;</span>click with myClick<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>你使用了一個自訂義的 <code>(myClick)</code> 作爲 event target 時，因為他不符合已知指令事件屬性，所以 Angular 會傳出 <code>unknown directive</code> 的錯誤訊息，所以在使用 event binding 時要記得使用正確的 event target 喔！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本章中介紹了兩種 binding，property binding 是用於將 component 中的 property 綁定給 HTML 中的元件，常用在將父層的 property 綁定給子層、將比較複雜或是需要邏輯計算的 HTML 元件屬性放到 component 中計算後再放回等等。</p>\n<p>而 event binding 是將 component 中的 method 綁定到 HTML 的元件上用於監聽使用者的操作，常用再處理使用者使用者操作畫面而處發的事件、將子層透過 EventEmitter 往父層傳遞數據時的綁定。</p>\n<p>下一章將會介紹另外兩種 binding 方法，分別是 Attrubute, class, strle binding 與 Two-way binding， Attrubute, class, strle binding 顧名思義就是將 component 中的 property 綁定到 HTML 的 class 或 attrubute，而 Two-way binding 則是可以讓父子層之間只使用一個 binding 就可以同時監聽事件與更新值，不需要使用 property binding 和 event binding。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/property-binding\">Angular.io - property binding</a></li>\n<li><a href=\"https://angular.io/guide/event-binding\">Angular.io - event binding</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本篇中將介紹 Angular 的 <code>property binding</code> 與 <code>event binding</code>，property binding 可以讓你<code>設置 HTML Tag 或 directive 的屬性值</code>，可以利用 property binding 做到切換按鈕、以程式方式設置 url 路徑以及在各個 Component 之間共享數據等等。</p>\n<p>而 Event binding 則是可以<code>將事件綁定在 HTML 的元件上</code>，隨時監聽使用者的操作，例如按下按鍵、滑鼠移動、點擊以及觸摸，就先從 property binding 開始介紹吧。</p>\n<p><img src=\"https://bs-uploads.toptal.io/blackfish-uploads/components/blog_post_page/content/cover_image_file/cover_image/687521/retina_1708x683_cover-top-18-most-common-angularjs-developer-mistakes-41f9ad303a51db70e4a5204e101e7414.png\" alt=\"img\"></p>","more":"<h1 id=\"Binding-to-a-property\"><a href=\"#Binding-to-a-property\" class=\"headerlink\" title=\"Binding to a property\"></a>Binding to a property</h1><p>在 Angular 中的 property binding 會讓數據往一個方向流動，就是從 component 流向 HTML 的元件，而如果要將數據綁定到 HTML 元件請使用<code>方括號（ [ ] ）</code>將他括在其中，比如說可以將 <code>&lt;img&gt;</code>中的 <code>src</code> 屬性利用 property binding 綁定。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;itemImageUrl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在大多數形況下目標名稱就是屬性的名稱，所以以上面的例子來說，src 就是 <code>&lt;img&gt;</code> 元件的屬性名稱，而方括號會讓 Angular 將等號右邊評估為動態表達式，如果沒有括號 Angular 會將右側視為字串文字並將屬性設置為該靜態值。</p>\n<h1 id=\"Setting-an-element-property-to-a-component-property-value\"><a href=\"#Setting-an-element-property-to-a-component-property-value\" class=\"headerlink\" title=\"Setting an element property to a component property value\"></a>Setting an element property to a component property value</h1><p>以上面的例子來說，如果要將 <code>&lt;img&gt;</code> 的屬性綁定到 Component 的 property，請將 src 放在方括號中，後面加上等號與 component 的 property 名稱。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;itemImageUrl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這時就可以在 Component 中定義一個 property 並將他賦值，那麼這個值就會綁定到 HTML 的元件上</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">itemImageUrl</span>: <span class=\"string\">&#x27;../assets/phone.png&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Toggling-button-functionality\"><a href=\"#Toggling-button-functionality\" class=\"headerlink\" title=\"Toggling button functionality\"></a>Toggling button functionality</h1><p>在 <code>&lt;button&gt;</code> 這個 HTML 中有一個屬性可以控制是否可以點擊這個按鈕那就是 <code>disabled</code>，我們可以透過 property binding 將這個屬性綁定到 component 的 property，建立一個動態改變他狀態的功能，一樣來舉個例子吧：</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個 property 用來綁定 <code>&lt;button&gt;</code> 與一個 method 用來更改 property 的值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isUnchanged = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onButtonChange</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isUnchanged</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isUnchanged</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中新增兩個 <code>&lt;button&gt;</code> 一個用來做 property binding 另一個用來改變 property 的內容</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-bottom: 10px;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;isUnchanged&quot;</span>&gt;</span>Property binding<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onButtonChange()&quot;</span>&gt;</span>Change Property value<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在畫面中可以看到，當我們點擊 <code>Change Property value</code> 時，他將 Component 中的 isUnchanged 內容更改，所以讓 <code>Property binding</code> 這個 <code>&lt;button&gt;</code> 可以動態被 disable 與 enable。</p>\n<h1 id=\"Bind-values-between-components\"><a href=\"#Bind-values-between-components\" class=\"headerlink\" title=\"Bind values between components\"></a>Bind values between components</h1><p>在前幾天介紹 @Input() 時常常在用到的 <code>&lt;app-child-component [item]=&quot;currentItem&quot;&gt;&lt;/app-child-component&gt;</code> 其實就是 property binding，將父層 component 中的 property 綁定給子層，當父層 Component 的這個 property 發生改變時，因為綁定的關係所以會將這個改變也帶給子層，</p>\n<p>這邊再稍微複習一下該怎麼使用 @Input() 吧<img src=\"/images/emoticon/emoticon05.gif\" alt=\"/images/emoticon/emoticon05.gif\"></p>\n<ol>\n<li><p>先 parent.component.ts 中定義一個 property 並將他賦值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  currentItem = <span class=\"string\">&#x27;Television&#x27;</span>;  <span class=\"comment\">// defind a property</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.html 中使用 property binding 將父層的 currentItem property 綁定給子層</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> [<span class=\"attr\">item</span>]=<span class=\"string\">&quot;currentItem&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 child.component.ts 中使用 @Input( ) 裝飾器將 property 裝飾為是從父層傳下來的</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() item = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 child.component.html 中使用 Text interpolation 將他呈現在畫面上</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Today&#x27;s item: &#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>當初在介紹 @Input() 時還有很多技巧沒有講到（property binding、test interpolation）現在在重複看一次之前的例子有沒有比較可以把前幾章的內容串起來了呢。</p>\n<h1 id=\"Property-binding-and-security\"><a href=\"#Property-binding-and-security\" class=\"headerlink\" title=\"Property binding and security\"></a>Property binding and security</h1><p>既然 property binding 這麼好用，那有沒有什麼問題或是缺點呢？來看看下面的例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evilTitle = <span class=\"string\">&#x27;Template &lt;script&gt;alert(&quot;evil never sleeps&quot;)&lt;/script&gt; Syntax&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>當我在一個 component 中添加一個屬性，並將這個屬性裡面多加了 <code>&lt;script&gt;</code>，在這個裡面放了一些會危害到你專案的 javascript 程式，那麼會發生什麼事？</p>\n<p>其實不會發生上面說的會危害到你專案的情況發生，因為 Angular 在 property binding 中有做一個限制，<code>不允許帶有 &lt;script&gt; 標籤的 HTML 元件，也不允許帶有插值和屬性綁定</code>，所以將上面那個 property 差值到你的 HTML file 中時，會有下面的 error message</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Template &lt;script&gt;alert(&quot;</span>evil never sleeps<span class=\"string\">&quot;)&lt;/script&gt; Syntax&quot;</span> is the interpolated evil title.</span><br></pre></td></tr></table></figure>\n\n<p>這是 Angular 對 property binding 做的安全機制。</p>\n<h1 id=\"Property-binding-and-interpolation\"><a href=\"#Property-binding-and-interpolation\" class=\"headerlink\" title=\"Property binding and interpolation\"></a>Property binding and interpolation</h1><p>可能有人會問拉：property binding 與 text interpolation 都是將 component 中的 property 綁定在 HTML file 中，那們他們有什麼不一樣嗎？</p>\n<p>其實這個問題非常好，他們兩個理論上可以達到相同的目的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;itemImageUrl&#125;&#125;&quot;</span>&gt;</span> is the <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>interpolated<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> image.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;itemImageUrl&quot;</span>&gt;</span> is the <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>property bound<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> image.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面這兩個的結果會是一樣的，無論是透過 text interpolation 將 property 插進 <code>&lt;img&gt;</code> 的 src 屬性，還是利用 proprety binding 住 <code>&lt;img&gt;</code> 的 src 屬性都是可以將 component 的 property 放進我們想放的位置。</p>\n<p>雖然兩個都可以達到目的，所以<code>當在將數據值呈現為字串時可以使用兩種方法的其中一種</code>，但為了可讀性更傾向於使用 text interpolation，但是當將元素屬性設置為<code>非字串數值</code>時，就必須使用屬性綁定，比如上面提到的 <code>&lt;button&gt;</code> 的 disabled 屬性。</p>\n<h1 id=\"Binding-to-events\"><a href=\"#Binding-to-events\" class=\"headerlink\" title=\"Binding to events\"></a>Binding to events</h1><p>介紹完 property binding 後，接著要來介紹 event binding，顧名思義他就是將 event 綁定到 HTML 的元件上用於監聽使用這的操作，event binding 的語法是將<code>目標事件名稱放在等號左邊的括弧中</code>和將<code>引號的模板語句</code> 放在右側，舉個例子吧，當畫面中的一個按鈕被點擊到時，要觸發 component 中的 onSave() method，這時就可以這樣寫</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSave()&quot;</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png\" alt=\"https://www.tektutorialshub.com/wp-content/uploads/2020/03/Event-Binding-in-Angular.png\"></p>\n<p>如果你的 method 是帶有參數的，只要再等號右邊的 method 的括號中填入參數即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSave(data)&quot;</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Custom-events-with-EventEmitter\"><a href=\"#Custom-events-with-EventEmitter\" class=\"headerlink\" title=\"Custom events with EventEmitter\"></a>Custom events with EventEmitter</h1><p>還記得在前幾天中介紹的 @Output() 嗎？來複習一下吧， @Output() 的用意是將子層的內容透過一個 event 往上傳遞給父層，一樣舉個子來回憶一下吧</p>\n<ol>\n<li><p>在 child.component.ts 中加入一個 property 並將他使用 @Output() 裝飾成 EventEmitter 型態</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() newItemEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">boolean</span>&gt;();  <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">parentValueChange</span>(<span class=\"params\">value: <span class=\"built_in\">boolean</span></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newItemEvent</span>.<span class=\"title function_\">emit</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 child.component.html 中新增兩個 <code>&lt;button&gt;</code> 用來讓 user 點擊觸發 event</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child.component.html  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(true)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;parentValueChange(false)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.ts 中添加一個 method，用來處理當子層傳送的數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent-component&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  counterValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addOrSub</span>(<span class=\"params\">event: <span class=\"built_in\">boolean</span></span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">counterValue</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.html 中使用 event binding 將子層傳送的事件與 parent.component.ts 的 method 綁定</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>parent component property counter: &#123;&#123;counterValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-component</span> (<span class=\"attr\">newItemEvent</span>)=<span class=\"string\">&quot;addOrSub($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-component</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在介紹完 event binding 後再回來看這個例子，有沒有更能夠了解如何使用 @Output() 與 evebt binding 了呢？</p>\n<h1 id=\"Determining-an-event-target\"><a href=\"#Determining-an-event-target\" class=\"headerlink\" title=\"Determining an event target\"></a>Determining an event target</h1><p>在使用 Event binding 時，Angular 會檢查 event target 的名稱是否與已知指令事件屬性匹配，比如說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">myClick</span>)=<span class=\"string\">&quot;clickMessage=$event&quot;</span> <span class=\"attr\">clickable</span>&gt;</span>click with myClick<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>你使用了一個自訂義的 <code>(myClick)</code> 作爲 event target 時，因為他不符合已知指令事件屬性，所以 Angular 會傳出 <code>unknown directive</code> 的錯誤訊息，所以在使用 event binding 時要記得使用正確的 event target 喔！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>在本章中介紹了兩種 binding，property binding 是用於將 component 中的 property 綁定給 HTML 中的元件，常用在將父層的 property 綁定給子層、將比較複雜或是需要邏輯計算的 HTML 元件屬性放到 component 中計算後再放回等等。</p>\n<p>而 event binding 是將 component 中的 method 綁定到 HTML 的元件上用於監聽使用者的操作，常用再處理使用者使用者操作畫面而處發的事件、將子層透過 EventEmitter 往父層傳遞數據時的綁定。</p>\n<p>下一章將會介紹另外兩種 binding 方法，分別是 Attrubute, class, strle binding 與 Two-way binding， Attrubute, class, strle binding 顧名思義就是將 component 中的 property 綁定到 HTML 的 class 或 attrubute，而 Two-way binding 則是可以讓父子層之間只使用一個 binding 就可以同時監聽事件與更新值，不需要使用 property binding 和 event binding。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/property-binding\">Angular.io - property binding</a></li>\n<li><a href=\"https://angular.io/guide/event-binding\">Angular.io - event binding</a></li>\n</ul>"},{"title":"Day11. Attribute, class, and style bindings and Two-way binding","date":"2021-09-11T03:04:04.000Z","_content":"\n在上一張中介紹了 property binding 是用來將 Component 中的 property 綁定給 HTML Tag 的 property，還介紹了 event binding 是用來將 Component 中的 method 綁定給 HTML Tag 用來監聽畫面事件，而本章將持續介紹兩種 binding 方式。\n\nAttribute binding 可以用來讓你在開發 Template 時直接設置 property 值，透過 attuibute 可以提高訪問性、動態設置畫面樣式與可以同時管理多個 CSS Class 或樣式。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png)\n\n<!-- more -->\n\n# Binding to an attribute\n\n在大部分的情況下，對於設置 HTML 元件屬性都建議你都使用 property binding 來做，但是有時候會遇到你可能要綁定某一個元件的某個屬性，但這個元件並沒有這個屬性，如果強制使用 property binding 則會出錯，這實際需要使用 attibute binding了，比如說 [ARIA（WAI-ARIA）](https://www.w3.org/WAI/standards-guidelines/aria/) 或 [SVG（Scalable Vector Graphic）](https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it) 都是 `purely attribute`，代表他們既沒有元件的 property 也無法對他進行設置，這時就必須使用 attribute binding。\n\n到這邊可能有滿多新手開始頭暈了，attribute 跟 property 不是都是屬性嗎？有什麼不一樣，這邊簡單來說 `attributes 由 HTML 定義，所有出現在 HTML 標籤內的描述皆為 attributes` ，而 DOM properties 則是 `標準的 HTML attributes 經過瀏覽器解析後會產生相對應的 DOM properties`，有興趣可以看看 [這篇文章](https://jimmyswebnote.com/html-attributes-and-dom-properties/) 裡面詳細的介紹了什麼是 HTML attribute 與 DOM Property 的區別。\n## Syntax\n\n要了解一個新的用法就必須先瞭解他的語法，而 attribure binding 的語法與 property binding 相似，但不是將 element property 放在括號之間，而是在 attuibute 前面加上一個前綴字 `attr 後跟一個點（.）`，這樣就會把你輸入在後面的字串表達式解析成 attribute 值。\n\n**Note**: 這邊的介紹可能都會使用英文介紹對應的專有名詞，畢竟 property 與 attribute 的中文都是屬性...\n\n```html\n<p [attr.attribute-you-are-targeting]=\"expression\"></p>\n```\n\n注意喔！如果將後面的字串表達式設置為 `null` 或 `undefined` 的話，Angular 會直接將這個屬性完全刪除。\n\n\n\n# Example: Binding to colspan\n\n舉個 attribute binding 的例子吧，常見的使用 attribute binding 的例子是 table 中的 `colspan` attribute，colspan 是用來改變一個單元的格子應該跨越多少格，所以如果使用 attribute binding 可以做到動態這是 table。\n\n```html\n<!--  expression calculates colspan=2 -->\n<tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n```\n\n這樣的設定可以使綁定的 `<tr>` 跨越兩列。\n\n**Note**: 要注意，`<tr>` 元件擁有的是 `colspan`  attribute，而如果是 property 的話則是 `colSpan`，大小寫要非常注意！ \n\n\n\n# Binding to the class attribute\n\nattribute 還有一個常用的用法，就是用於綁定 element 中的 CSS class，可以做到同時新增或刪除等管理多個 CSS class。\n\n## Binding to a single CSS class\n\n如果要綁定單個 CSS class 請使用 `class` 當作前綴後面跟上一個點（.）和 CSS class 的名稱，例如 `[class.sale]=\"onSale\"`，當訂的表達是為 true 時 Angular 會為這個 element 多添加一個 CSS class，反之則會被移除。\n\n## Binding to multiple CSS classes\n\n如果要同時綁定多個 CSS class 請使用 `[class]`，例如：[class]=\"classExpression\"，插入的表達是可以是：\n\n- 以`空格`分隔的 CSS class 的名字\n- 以 object 的 key 作為名稱，以 true 或 false 表達式作為值的物件\n- 包含多個 CSS class 名字的陣列\n\n\n\n# Binding to the style attribute\n\nattribute binding 也可以做到動態設置你的 element stype。\n\n## Binding to a single style\n\n要創建單個的 style binding，請使用前綴字 `style`後跟一個點（.）和 CSS stype property，例如 `[style.width]=\"width\"`， Angular 將 property 設置為綁定表達式的值，通常是一個字串或著可以添加像 `em` 或 `%` 的單位擴展符。\n\n**Note**: 可以使用破折號或駝峰命民法來編寫 style property 的名稱\n\n```html\n<nav [style.background-color]=\"expression\"></nav>\n\n<nav [style.backgroundColor]=\"expression\"></nav>\n```\n\n## Binding to multiple styles\n\n要綁定多個 style 請綁定到 [style] property，例如 [style]=\"styleExpression\" 而 styleExpression 可以是以下之一：\n\n- 樣式的字串列表：`\"width: 100px; height: 100px; background-color: cornflowerblue;\"`\n- 以樣式名稱為 key，以樣式值為 value 的物件：`{width: '100px', height: '100px', backgroundColor: 'cornflowerblue'}`\n\n**Note**: 注意！ [style] 不像 [class] 一樣支持綁定陣列喔！\n\n\n\n# Styling Precedence\n\n可以將多個源頭的值綁定給單一 HTML element 的 CSS class 和 style，當同一個 CSS class 或 style property 有多個綁定時，Angular 會遵循一組優先規則解決衝突並確定哪些 CSS class 或 stype 最終被應用於 HTML element。\n\n1. Template bindings\n    1. **Property binding**: `<div [class.foo]=\"hasFoo\"> or <div [style.colo]=\"color\">`\n    2. **Map binding**: `<div [class]=\"classExpr\"> or <div [style]=\"styleExpr\"`\n    3. **Static value**:  `<div class=\"foo\"> or <div style=\"color: blue\">`\n2. Directive host bindings\n    1. **Property binding**: `host: {'[class.foo]': 'hasFoo'} or host: {'[style.color]': 'color'}`\n    2. **Map binding**: `host: {'[class]': 'classExpr'} or host: {'[style]': 'styleExpr'}`\n    3. **Static value**: `host: {'class': 'foo'} or host: {'style': 'color: blue'}`\n3. Component host bindings\n    1. **Property binding**: `host: {'[class.foo]': 'hasFoo'} or host: {'[style.color]': 'color'}`\n    2. **Map binding**: `host: {'[class]': 'classExpr'} or host: {'[style]': 'styleExpr'}`\n    3. **Static value**: `host: {'class': 'foo'} or host: {'style': 'color: blue'}`\n\n可以看到 CSS class 或 style 越具體其優先級就越高，綁定到特定 CSS class（[class.foo]）會優先於通用 [class] 的綁定，而通用 [class] 的綁定又會優先於特定樣式綁定（[style.bar]），而他又會優先於通用 [style]  的綁定。\n\n\n\n# Two-way binding\n\n介紹完 attribute, class, style binding 後，接著要來介紹另一個非常常用的 binding 方法 `Two-way binding`，還記得在前幾天介紹的 @Input() 與 @Output() 嗎？在父層的 HTML 中如果要傳遞數據給子層，需要將父層的 property 利用 porperty binding 將它放入中括號 ( [ ] ) 中傳遞給子層，而父層要接受子層傳遞的數據時，需要利用 event binding 將子層的 EventEmitter 放括號中，當子層傳遞數據時觸發父層中綁定的 method\n\n```html\n<app-childComponent [inputData]=\"inputData\" (outputData)=\"onChildOutpu($event)\"></app-childComponent>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png](https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png)\n\n所以如果同一個子層同時要有 @Input() 與 @Output() 那就會把他家的很長不太好看，所以 Angular  提供了 `Two-way binding`，將 property binding 與 event binding 整合再一起，語法是將方括號與圓括號組合再一起 `[()]`。\n\n```html\n<app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n```\n\n\n# How two-way binding works\n\n要讓 Two-way binding 可以正常運作需要將 @Output() property 使用 `inputChange` 模式，其中 input 是 @Input() 的名稱，舉例來說當你的 @Input() 命名為 size 則要將 @Output() 命名為 sizeChange，讓我們舉個例吧\n\n1. 在 child.component.ts 中建立一個 @Input() 屬性 size 與 @Output() 屬性 sizeChange 並加入三個 method\n\n    ```typescript\n    import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n    @Component({\n      selector: 'app-child',\n      templateUrl: './child.component.html',\n      styleUrls: ['./child.component.css'],\n    })\n    export class ChildComponent {\n      @Input() size!: number | string;                             // (1)\n      @Output() sizeChange = new EventEmitter<number>();           // (2)\n      constructor() {}\n\n      dec() {                                                      // (3)\n        this.resize(-1);\n      }\n      inc() {                                                      // (4)\n        this.resize(+1);\n      }\n\n      resize(delta: number) {                                      // (5)\n        this.size = Math.min(40, Math.max(8, +this.size + delta));\n        this.sizeChange.emit(this.size);\n      }\n    }\n    ```\n\n    - (1):  使用 @Input() 將 size 裝飾為父層傳遞下來的數據\n    - (2): 使用@Output() 將 sizeChange 裝飾為一個 EventEmitter 用於將數據向上傳給父層\n    - (3): 用於減小字體大小\n    - (4): 用於增加字體大小\n    - (5): 增加或減少字體大小的 method\n2. 在 child.component.html 中新增兩個按鈕用於讓使用者增加或減少字體大小，和使用 text interpolation 將 size 插入到 template 中\n\n    ```html\n    <div>\n      <button (click)=\"dec()\" title=\"smaller\">-</button>\n      <button (click)=\"inc()\" title=\"bigger\">+</button>\n      <label [style.font-size.px]=\"size\">FontSize: {{size}}px</label>\n    </div>\n    ```\n\n3. 在 parent.component.ts 中新增一個 property \n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-parent',\n      templateUrl: './parent.component.html',\n    })\n    export class ParentComponent {\n      frontSizePx = 16;\n      constructor() { }\n    }\n    ```\n\n4. 在 parent.component.html 中將 frontSizePx 使用 Two-way binding 綁定給子層\n\n    ```html\n    <app-child [(size)]=\"fontSizePx\"></app-child>\n    <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n    ```\n    \n![img](https://i.imgur.com/oKbjOZJ.gif)\n在畫面中可以看到，當我們點擊畫面中的 button 後，首先先讓子層向父層傳遞更改的大小，父層收到後再透過 @Input() 將變更的大小傳遞回子層讓子層可以顯示出 FontSize 的數值，這又就可以透過一個綁定就完成需要 @Input() 與 @Output() 的情況。\n\n\n\n# 結論\n\n本章中介紹了什麼最後的兩種綁定模式，可以使用 attribute binding 對沒有 property 的 HTML 元件動態綁定，可以使用 class binding 對一個 HTML 元件綁定一個或多個 CSS class，可以使用 style binding 對一個 HTML 元件綁定一個或多個樣式，而 CSS class 與 style 的綁定優先級遵守越具體其優先級就越高的概念。\n\n第二種介紹了 Two-way binding，如何透過一種綁定就達成 property binding 與 event binding，要注意的是如果要讓 Two-way binding 成功作用必須將 @Output() 麼名稱設定為 @Input() 的名稱加上Change。\n\n下一篇將會介紹 `Template variables`，他可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，詳細的內容就留到明天在介紹吧，那我們明天見。\n\n\n\n# Reference\n\n- [Angular.io - Attribute, class, and style bindings](https://angular.io/guide/attribute-binding)\n- [Angular.io - Two-way binding](https://angular.io/guide/two-way-binding)\n- [HTML Attributes 與 DOM Properties 的區別](https://jimmyswebnote.com/html-attributes-and-dom-properties/)\n- [What is an SVG File (And How Do You Use it)?](https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it)\n- [WAI-ARIA Overview](https://www.w3.org/WAI/standards-guidelines/aria/)","source":"_posts/Angular/angular-11.md","raw":"---\ntitle: Day11. Attribute, class, and style bindings and Two-way binding\ndate: 2021-09-11 11:04:04\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一張中介紹了 property binding 是用來將 Component 中的 property 綁定給 HTML Tag 的 property，還介紹了 event binding 是用來將 Component 中的 method 綁定給 HTML Tag 用來監聽畫面事件，而本章將持續介紹兩種 binding 方式。\n\nAttribute binding 可以用來讓你在開發 Template 時直接設置 property 值，透過 attuibute 可以提高訪問性、動態設置畫面樣式與可以同時管理多個 CSS Class 或樣式。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png)\n\n<!-- more -->\n\n# Binding to an attribute\n\n在大部分的情況下，對於設置 HTML 元件屬性都建議你都使用 property binding 來做，但是有時候會遇到你可能要綁定某一個元件的某個屬性，但這個元件並沒有這個屬性，如果強制使用 property binding 則會出錯，這實際需要使用 attibute binding了，比如說 [ARIA（WAI-ARIA）](https://www.w3.org/WAI/standards-guidelines/aria/) 或 [SVG（Scalable Vector Graphic）](https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it) 都是 `purely attribute`，代表他們既沒有元件的 property 也無法對他進行設置，這時就必須使用 attribute binding。\n\n到這邊可能有滿多新手開始頭暈了，attribute 跟 property 不是都是屬性嗎？有什麼不一樣，這邊簡單來說 `attributes 由 HTML 定義，所有出現在 HTML 標籤內的描述皆為 attributes` ，而 DOM properties 則是 `標準的 HTML attributes 經過瀏覽器解析後會產生相對應的 DOM properties`，有興趣可以看看 [這篇文章](https://jimmyswebnote.com/html-attributes-and-dom-properties/) 裡面詳細的介紹了什麼是 HTML attribute 與 DOM Property 的區別。\n## Syntax\n\n要了解一個新的用法就必須先瞭解他的語法，而 attribure binding 的語法與 property binding 相似，但不是將 element property 放在括號之間，而是在 attuibute 前面加上一個前綴字 `attr 後跟一個點（.）`，這樣就會把你輸入在後面的字串表達式解析成 attribute 值。\n\n**Note**: 這邊的介紹可能都會使用英文介紹對應的專有名詞，畢竟 property 與 attribute 的中文都是屬性...\n\n```html\n<p [attr.attribute-you-are-targeting]=\"expression\"></p>\n```\n\n注意喔！如果將後面的字串表達式設置為 `null` 或 `undefined` 的話，Angular 會直接將這個屬性完全刪除。\n\n\n\n# Example: Binding to colspan\n\n舉個 attribute binding 的例子吧，常見的使用 attribute binding 的例子是 table 中的 `colspan` attribute，colspan 是用來改變一個單元的格子應該跨越多少格，所以如果使用 attribute binding 可以做到動態這是 table。\n\n```html\n<!--  expression calculates colspan=2 -->\n<tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n```\n\n這樣的設定可以使綁定的 `<tr>` 跨越兩列。\n\n**Note**: 要注意，`<tr>` 元件擁有的是 `colspan`  attribute，而如果是 property 的話則是 `colSpan`，大小寫要非常注意！ \n\n\n\n# Binding to the class attribute\n\nattribute 還有一個常用的用法，就是用於綁定 element 中的 CSS class，可以做到同時新增或刪除等管理多個 CSS class。\n\n## Binding to a single CSS class\n\n如果要綁定單個 CSS class 請使用 `class` 當作前綴後面跟上一個點（.）和 CSS class 的名稱，例如 `[class.sale]=\"onSale\"`，當訂的表達是為 true 時 Angular 會為這個 element 多添加一個 CSS class，反之則會被移除。\n\n## Binding to multiple CSS classes\n\n如果要同時綁定多個 CSS class 請使用 `[class]`，例如：[class]=\"classExpression\"，插入的表達是可以是：\n\n- 以`空格`分隔的 CSS class 的名字\n- 以 object 的 key 作為名稱，以 true 或 false 表達式作為值的物件\n- 包含多個 CSS class 名字的陣列\n\n\n\n# Binding to the style attribute\n\nattribute binding 也可以做到動態設置你的 element stype。\n\n## Binding to a single style\n\n要創建單個的 style binding，請使用前綴字 `style`後跟一個點（.）和 CSS stype property，例如 `[style.width]=\"width\"`， Angular 將 property 設置為綁定表達式的值，通常是一個字串或著可以添加像 `em` 或 `%` 的單位擴展符。\n\n**Note**: 可以使用破折號或駝峰命民法來編寫 style property 的名稱\n\n```html\n<nav [style.background-color]=\"expression\"></nav>\n\n<nav [style.backgroundColor]=\"expression\"></nav>\n```\n\n## Binding to multiple styles\n\n要綁定多個 style 請綁定到 [style] property，例如 [style]=\"styleExpression\" 而 styleExpression 可以是以下之一：\n\n- 樣式的字串列表：`\"width: 100px; height: 100px; background-color: cornflowerblue;\"`\n- 以樣式名稱為 key，以樣式值為 value 的物件：`{width: '100px', height: '100px', backgroundColor: 'cornflowerblue'}`\n\n**Note**: 注意！ [style] 不像 [class] 一樣支持綁定陣列喔！\n\n\n\n# Styling Precedence\n\n可以將多個源頭的值綁定給單一 HTML element 的 CSS class 和 style，當同一個 CSS class 或 style property 有多個綁定時，Angular 會遵循一組優先規則解決衝突並確定哪些 CSS class 或 stype 最終被應用於 HTML element。\n\n1. Template bindings\n    1. **Property binding**: `<div [class.foo]=\"hasFoo\"> or <div [style.colo]=\"color\">`\n    2. **Map binding**: `<div [class]=\"classExpr\"> or <div [style]=\"styleExpr\"`\n    3. **Static value**:  `<div class=\"foo\"> or <div style=\"color: blue\">`\n2. Directive host bindings\n    1. **Property binding**: `host: {'[class.foo]': 'hasFoo'} or host: {'[style.color]': 'color'}`\n    2. **Map binding**: `host: {'[class]': 'classExpr'} or host: {'[style]': 'styleExpr'}`\n    3. **Static value**: `host: {'class': 'foo'} or host: {'style': 'color: blue'}`\n3. Component host bindings\n    1. **Property binding**: `host: {'[class.foo]': 'hasFoo'} or host: {'[style.color]': 'color'}`\n    2. **Map binding**: `host: {'[class]': 'classExpr'} or host: {'[style]': 'styleExpr'}`\n    3. **Static value**: `host: {'class': 'foo'} or host: {'style': 'color: blue'}`\n\n可以看到 CSS class 或 style 越具體其優先級就越高，綁定到特定 CSS class（[class.foo]）會優先於通用 [class] 的綁定，而通用 [class] 的綁定又會優先於特定樣式綁定（[style.bar]），而他又會優先於通用 [style]  的綁定。\n\n\n\n# Two-way binding\n\n介紹完 attribute, class, style binding 後，接著要來介紹另一個非常常用的 binding 方法 `Two-way binding`，還記得在前幾天介紹的 @Input() 與 @Output() 嗎？在父層的 HTML 中如果要傳遞數據給子層，需要將父層的 property 利用 porperty binding 將它放入中括號 ( [ ] ) 中傳遞給子層，而父層要接受子層傳遞的數據時，需要利用 event binding 將子層的 EventEmitter 放括號中，當子層傳遞數據時觸發父層中綁定的 method\n\n```html\n<app-childComponent [inputData]=\"inputData\" (outputData)=\"onChildOutpu($event)\"></app-childComponent>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png](https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png)\n\n所以如果同一個子層同時要有 @Input() 與 @Output() 那就會把他家的很長不太好看，所以 Angular  提供了 `Two-way binding`，將 property binding 與 event binding 整合再一起，語法是將方括號與圓括號組合再一起 `[()]`。\n\n```html\n<app-sizer [(size)]=\"fontSizePx\"></app-sizer>\n```\n\n\n# How two-way binding works\n\n要讓 Two-way binding 可以正常運作需要將 @Output() property 使用 `inputChange` 模式，其中 input 是 @Input() 的名稱，舉例來說當你的 @Input() 命名為 size 則要將 @Output() 命名為 sizeChange，讓我們舉個例吧\n\n1. 在 child.component.ts 中建立一個 @Input() 屬性 size 與 @Output() 屬性 sizeChange 並加入三個 method\n\n    ```typescript\n    import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n    @Component({\n      selector: 'app-child',\n      templateUrl: './child.component.html',\n      styleUrls: ['./child.component.css'],\n    })\n    export class ChildComponent {\n      @Input() size!: number | string;                             // (1)\n      @Output() sizeChange = new EventEmitter<number>();           // (2)\n      constructor() {}\n\n      dec() {                                                      // (3)\n        this.resize(-1);\n      }\n      inc() {                                                      // (4)\n        this.resize(+1);\n      }\n\n      resize(delta: number) {                                      // (5)\n        this.size = Math.min(40, Math.max(8, +this.size + delta));\n        this.sizeChange.emit(this.size);\n      }\n    }\n    ```\n\n    - (1):  使用 @Input() 將 size 裝飾為父層傳遞下來的數據\n    - (2): 使用@Output() 將 sizeChange 裝飾為一個 EventEmitter 用於將數據向上傳給父層\n    - (3): 用於減小字體大小\n    - (4): 用於增加字體大小\n    - (5): 增加或減少字體大小的 method\n2. 在 child.component.html 中新增兩個按鈕用於讓使用者增加或減少字體大小，和使用 text interpolation 將 size 插入到 template 中\n\n    ```html\n    <div>\n      <button (click)=\"dec()\" title=\"smaller\">-</button>\n      <button (click)=\"inc()\" title=\"bigger\">+</button>\n      <label [style.font-size.px]=\"size\">FontSize: {{size}}px</label>\n    </div>\n    ```\n\n3. 在 parent.component.ts 中新增一個 property \n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-parent',\n      templateUrl: './parent.component.html',\n    })\n    export class ParentComponent {\n      frontSizePx = 16;\n      constructor() { }\n    }\n    ```\n\n4. 在 parent.component.html 中將 frontSizePx 使用 Two-way binding 綁定給子層\n\n    ```html\n    <app-child [(size)]=\"fontSizePx\"></app-child>\n    <div [style.font-size.px]=\"fontSizePx\">Resizable Text</div>\n    ```\n    \n![img](https://i.imgur.com/oKbjOZJ.gif)\n在畫面中可以看到，當我們點擊畫面中的 button 後，首先先讓子層向父層傳遞更改的大小，父層收到後再透過 @Input() 將變更的大小傳遞回子層讓子層可以顯示出 FontSize 的數值，這又就可以透過一個綁定就完成需要 @Input() 與 @Output() 的情況。\n\n\n\n# 結論\n\n本章中介紹了什麼最後的兩種綁定模式，可以使用 attribute binding 對沒有 property 的 HTML 元件動態綁定，可以使用 class binding 對一個 HTML 元件綁定一個或多個 CSS class，可以使用 style binding 對一個 HTML 元件綁定一個或多個樣式，而 CSS class 與 style 的綁定優先級遵守越具體其優先級就越高的概念。\n\n第二種介紹了 Two-way binding，如何透過一種綁定就達成 property binding 與 event binding，要注意的是如果要讓 Two-way binding 成功作用必須將 @Output() 麼名稱設定為 @Input() 的名稱加上Change。\n\n下一篇將會介紹 `Template variables`，他可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，詳細的內容就留到明天在介紹吧，那我們明天見。\n\n\n\n# Reference\n\n- [Angular.io - Attribute, class, and style bindings](https://angular.io/guide/attribute-binding)\n- [Angular.io - Two-way binding](https://angular.io/guide/two-way-binding)\n- [HTML Attributes 與 DOM Properties 的區別](https://jimmyswebnote.com/html-attributes-and-dom-properties/)\n- [What is an SVG File (And How Do You Use it)?](https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it)\n- [WAI-ARIA Overview](https://www.w3.org/WAI/standards-guidelines/aria/)","slug":"Angular/angular-11","published":1,"updated":"2022-02-16T01:25:58.764Z","_id":"ckznz1lmg001mkww3bld65c2x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在上一張中介紹了 property binding 是用來將 Component 中的 property 綁定給 HTML Tag 的 property，還介紹了 event binding 是用來將 Component 中的 method 綁定給 HTML Tag 用來監聽畫面事件，而本章將持續介紹兩種 binding 方式。</p>\n<p>Attribute binding 可以用來讓你在開發 Template 時直接設置 property 值，透過 attuibute 可以提高訪問性、動態設置畫面樣式與可以同時管理多個 CSS Class 或樣式。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Binding-to-an-attribute\"><a href=\"#Binding-to-an-attribute\" class=\"headerlink\" title=\"Binding to an attribute\"></a>Binding to an attribute</h1><p>在大部分的情況下，對於設置 HTML 元件屬性都建議你都使用 property binding 來做，但是有時候會遇到你可能要綁定某一個元件的某個屬性，但這個元件並沒有這個屬性，如果強制使用 property binding 則會出錯，這實際需要使用 attibute binding了，比如說 <a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\">ARIA（WAI-ARIA）</a> 或 <a href=\"https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it\">SVG（Scalable Vector Graphic）</a> 都是 <code>purely attribute</code>，代表他們既沒有元件的 property 也無法對他進行設置，這時就必須使用 attribute binding。</p>\n<p>到這邊可能有滿多新手開始頭暈了，attribute 跟 property 不是都是屬性嗎？有什麼不一樣，這邊簡單來說 <code>attributes 由 HTML 定義，所有出現在 HTML 標籤內的描述皆為 attributes</code> ，而 DOM properties 則是 <code>標準的 HTML attributes 經過瀏覽器解析後會產生相對應的 DOM properties</code>，有興趣可以看看 <a href=\"https://jimmyswebnote.com/html-attributes-and-dom-properties/\">這篇文章</a> 裡面詳細的介紹了什麼是 HTML attribute 與 DOM Property 的區別。</p>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><p>要了解一個新的用法就必須先瞭解他的語法，而 attribure binding 的語法與 property binding 相似，但不是將 element property 放在括號之間，而是在 attuibute 前面加上一個前綴字 <code>attr 後跟一個點（.）</code>，這樣就會把你輸入在後面的字串表達式解析成 attribute 值。</p>\n<p><strong>Note</strong>: 這邊的介紹可能都會使用英文介紹對應的專有名詞，畢竟 property 與 attribute 的中文都是屬性…</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">attr.attribute-you-are-targeting</span>]=<span class=\"string\">&quot;expression&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意喔！如果將後面的字串表達式設置為 <code>null</code> 或 <code>undefined</code> 的話，Angular 會直接將這個屬性完全刪除。</p>\n<h1 id=\"Example-Binding-to-colspan\"><a href=\"#Example-Binding-to-colspan\" class=\"headerlink\" title=\"Example: Binding to colspan\"></a>Example: Binding to colspan</h1><p>舉個 attribute binding 的例子吧，常見的使用 attribute binding 的例子是 table 中的 <code>colspan</code> attribute，colspan 是用來改變一個單元的格子應該跨越多少格，所以如果使用 attribute binding 可以做到動態這是 table。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  expression calculates colspan=2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> [<span class=\"attr\">attr.colspan</span>]=<span class=\"string\">&quot;1 + 1&quot;</span>&gt;</span>One-Two<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣的設定可以使綁定的 <code>&lt;tr&gt;</code> 跨越兩列。</p>\n<p><strong>Note</strong>: 要注意，<code>&lt;tr&gt;</code> 元件擁有的是 <code>colspan</code>  attribute，而如果是 property 的話則是 <code>colSpan</code>，大小寫要非常注意！ </p>\n<h1 id=\"Binding-to-the-class-attribute\"><a href=\"#Binding-to-the-class-attribute\" class=\"headerlink\" title=\"Binding to the class attribute\"></a>Binding to the class attribute</h1><p>attribute 還有一個常用的用法，就是用於綁定 element 中的 CSS class，可以做到同時新增或刪除等管理多個 CSS class。</p>\n<h2 id=\"Binding-to-a-single-CSS-class\"><a href=\"#Binding-to-a-single-CSS-class\" class=\"headerlink\" title=\"Binding to a single CSS class\"></a>Binding to a single CSS class</h2><p>如果要綁定單個 CSS class 請使用 <code>class</code> 當作前綴後面跟上一個點（.）和 CSS class 的名稱，例如 <code>[class.sale]=&quot;onSale&quot;</code>，當訂的表達是為 true 時 Angular 會為這個 element 多添加一個 CSS class，反之則會被移除。</p>\n<h2 id=\"Binding-to-multiple-CSS-classes\"><a href=\"#Binding-to-multiple-CSS-classes\" class=\"headerlink\" title=\"Binding to multiple CSS classes\"></a>Binding to multiple CSS classes</h2><p>如果要同時綁定多個 CSS class 請使用 <code>[class]</code>，例如：[class]&#x3D;”classExpression”，插入的表達是可以是：</p>\n<ul>\n<li>以<code>空格</code>分隔的 CSS class 的名字</li>\n<li>以 object 的 key 作為名稱，以 true 或 false 表達式作為值的物件</li>\n<li>包含多個 CSS class 名字的陣列</li>\n</ul>\n<h1 id=\"Binding-to-the-style-attribute\"><a href=\"#Binding-to-the-style-attribute\" class=\"headerlink\" title=\"Binding to the style attribute\"></a>Binding to the style attribute</h1><p>attribute binding 也可以做到動態設置你的 element stype。</p>\n<h2 id=\"Binding-to-a-single-style\"><a href=\"#Binding-to-a-single-style\" class=\"headerlink\" title=\"Binding to a single style\"></a>Binding to a single style</h2><p>要創建單個的 style binding，請使用前綴字 <code>style</code>後跟一個點（.）和 CSS stype property，例如 <code>[style.width]=&quot;width&quot;</code>， Angular 將 property 設置為綁定表達式的值，通常是一個字串或著可以添加像 <code>em</code> 或 <code>%</code> 的單位擴展符。</p>\n<p><strong>Note</strong>: 可以使用破折號或駝峰命民法來編寫 style property 的名稱</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> [<span class=\"attr\">style.background-color</span>]=<span class=\"string\">&quot;expression&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> [<span class=\"attr\">style.backgroundColor</span>]=<span class=\"string\">&quot;expression&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Binding-to-multiple-styles\"><a href=\"#Binding-to-multiple-styles\" class=\"headerlink\" title=\"Binding to multiple styles\"></a>Binding to multiple styles</h2><p>要綁定多個 style 請綁定到 [style] property，例如 [style]&#x3D;”styleExpression” 而 styleExpression 可以是以下之一：</p>\n<ul>\n<li>樣式的字串列表：<code>&quot;width: 100px; height: 100px; background-color: cornflowerblue;&quot;</code></li>\n<li>以樣式名稱為 key，以樣式值為 value 的物件：<code>&#123;width: &#39;100px&#39;, height: &#39;100px&#39;, backgroundColor: &#39;cornflowerblue&#39;&#125;</code></li>\n</ul>\n<p><strong>Note</strong>: 注意！ [style] 不像 [class] 一樣支持綁定陣列喔！</p>\n<h1 id=\"Styling-Precedence\"><a href=\"#Styling-Precedence\" class=\"headerlink\" title=\"Styling Precedence\"></a>Styling Precedence</h1><p>可以將多個源頭的值綁定給單一 HTML element 的 CSS class 和 style，當同一個 CSS class 或 style property 有多個綁定時，Angular 會遵循一組優先規則解決衝突並確定哪些 CSS class 或 stype 最終被應用於 HTML element。</p>\n<ol>\n<li>Template bindings<ol>\n<li><strong>Property binding</strong>: <code>&lt;div [class.foo]=&quot;hasFoo&quot;&gt; or &lt;div [style.colo]=&quot;color&quot;&gt;</code></li>\n<li><strong>Map binding</strong>: <code>&lt;div [class]=&quot;classExpr&quot;&gt; or &lt;div [style]=&quot;styleExpr&quot;</code></li>\n<li><strong>Static value</strong>:  <code>&lt;div class=&quot;foo&quot;&gt; or &lt;div style=&quot;color: blue&quot;&gt;</code></li>\n</ol>\n</li>\n<li>Directive host bindings<ol>\n<li><strong>Property binding</strong>: <code>host: &#123;&#39;[class.foo]&#39;: &#39;hasFoo&#39;&#125; or host: &#123;&#39;[style.color]&#39;: &#39;color&#39;&#125;</code></li>\n<li><strong>Map binding</strong>: <code>host: &#123;&#39;[class]&#39;: &#39;classExpr&#39;&#125; or host: &#123;&#39;[style]&#39;: &#39;styleExpr&#39;&#125;</code></li>\n<li><strong>Static value</strong>: <code>host: &#123;&#39;class&#39;: &#39;foo&#39;&#125; or host: &#123;&#39;style&#39;: &#39;color: blue&#39;&#125;</code></li>\n</ol>\n</li>\n<li>Component host bindings<ol>\n<li><strong>Property binding</strong>: <code>host: &#123;&#39;[class.foo]&#39;: &#39;hasFoo&#39;&#125; or host: &#123;&#39;[style.color]&#39;: &#39;color&#39;&#125;</code></li>\n<li><strong>Map binding</strong>: <code>host: &#123;&#39;[class]&#39;: &#39;classExpr&#39;&#125; or host: &#123;&#39;[style]&#39;: &#39;styleExpr&#39;&#125;</code></li>\n<li><strong>Static value</strong>: <code>host: &#123;&#39;class&#39;: &#39;foo&#39;&#125; or host: &#123;&#39;style&#39;: &#39;color: blue&#39;&#125;</code></li>\n</ol>\n</li>\n</ol>\n<p>可以看到 CSS class 或 style 越具體其優先級就越高，綁定到特定 CSS class（[class.foo]）會優先於通用 [class] 的綁定，而通用 [class] 的綁定又會優先於特定樣式綁定（[style.bar]），而他又會優先於通用 [style]  的綁定。</p>\n<h1 id=\"Two-way-binding\"><a href=\"#Two-way-binding\" class=\"headerlink\" title=\"Two-way binding\"></a>Two-way binding</h1><p>介紹完 attribute, class, style binding 後，接著要來介紹另一個非常常用的 binding 方法 <code>Two-way binding</code>，還記得在前幾天介紹的 @Input() 與 @Output() 嗎？在父層的 HTML 中如果要傳遞數據給子層，需要將父層的 property 利用 porperty binding 將它放入中括號 ( [ ] ) 中傳遞給子層，而父層要接受子層傳遞的數據時，需要利用 event binding 將子層的 EventEmitter 放括號中，當子層傳遞數據時觸發父層中綁定的 method</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-childComponent</span> [<span class=\"attr\">inputData</span>]=<span class=\"string\">&quot;inputData&quot;</span> (<span class=\"attr\">outputData</span>)=<span class=\"string\">&quot;onChildOutpu($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-childComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png\"></p>\n<p>所以如果同一個子層同時要有 @Input() 與 @Output() 那就會把他家的很長不太好看，所以 Angular  提供了 <code>Two-way binding</code>，將 property binding 與 event binding 整合再一起，語法是將方括號與圓括號組合再一起 <code>[()]</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-sizer</span> [(<span class=\"attr\">size</span>)]=<span class=\"string\">&quot;fontSizePx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sizer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"How-two-way-binding-works\"><a href=\"#How-two-way-binding-works\" class=\"headerlink\" title=\"How two-way binding works\"></a>How two-way binding works</h1><p>要讓 Two-way binding 可以正常運作需要將 @Output() property 使用 <code>inputChange</code> 模式，其中 input 是 @Input() 的名稱，舉例來說當你的 @Input() 命名為 size 則要將 @Output() 命名為 sizeChange，讓我們舉個例吧</p>\n<ol>\n<li><p>在 child.component.ts 中建立一個 @Input() 屬性 size 與 @Output() 屬性 sizeChange 並加入三個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() size!: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;                             <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() sizeChange = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();           <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dec</span>(<span class=\"params\"></span>) &#123;                                                      <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">resize</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">inc</span>(<span class=\"params\"></span>) &#123;                                                      <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">resize</span>(+<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resize</span>(<span class=\"params\">delta: <span class=\"built_in\">number</span></span>) &#123;                                      <span class=\"comment\">// (5)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"number\">40</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">8</span>, +<span class=\"variable language_\">this</span>.<span class=\"property\">size</span> + delta));</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sizeChange</span>.<span class=\"title function_\">emit</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">size</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1):  使用 @Input() 將 size 裝飾為父層傳遞下來的數據</li>\n<li>(2): 使用@Output() 將 sizeChange 裝飾為一個 EventEmitter 用於將數據向上傳給父層</li>\n<li>(3): 用於減小字體大小</li>\n<li>(4): 用於增加字體大小</li>\n<li>(5): 增加或減少字體大小的 method</li>\n</ul>\n</li>\n<li><p>在 child.component.html 中新增兩個按鈕用於讓使用者增加或減少字體大小，和使用 text interpolation 將 size 插入到 template 中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;dec()&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;smaller&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;inc()&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;bigger&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> [<span class=\"attr\">style.font-size.px</span>]=<span class=\"string\">&quot;size&quot;</span>&gt;</span>FontSize: &#123;&#123;size&#125;&#125;px<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.ts 中新增一個 property </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  frontSizePx = <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.html 中將 frontSizePx 使用 Two-way binding 綁定給子層</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [(<span class=\"attr\">size</span>)]=<span class=\"string\">&quot;fontSizePx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.font-size.px</span>]=<span class=\"string\">&quot;fontSizePx&quot;</span>&gt;</span>Resizable Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/oKbjOZJ.gif\" alt=\"img\"><br>在畫面中可以看到，當我們點擊畫面中的 button 後，首先先讓子層向父層傳遞更改的大小，父層收到後再透過 @Input() 將變更的大小傳遞回子層讓子層可以顯示出 FontSize 的數值，這又就可以透過一個綁定就完成需要 @Input() 與 @Output() 的情況。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼最後的兩種綁定模式，可以使用 attribute binding 對沒有 property 的 HTML 元件動態綁定，可以使用 class binding 對一個 HTML 元件綁定一個或多個 CSS class，可以使用 style binding 對一個 HTML 元件綁定一個或多個樣式，而 CSS class 與 style 的綁定優先級遵守越具體其優先級就越高的概念。</p>\n<p>第二種介紹了 Two-way binding，如何透過一種綁定就達成 property binding 與 event binding，要注意的是如果要讓 Two-way binding 成功作用必須將 @Output() 麼名稱設定為 @Input() 的名稱加上Change。</p>\n<p>下一篇將會介紹 <code>Template variables</code>，他可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，詳細的內容就留到明天在介紹吧，那我們明天見。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/attribute-binding\">Angular.io - Attribute, class, and style bindings</a></li>\n<li><a href=\"https://angular.io/guide/two-way-binding\">Angular.io - Two-way binding</a></li>\n<li><a href=\"https://jimmyswebnote.com/html-attributes-and-dom-properties/\">HTML Attributes 與 DOM Properties 的區別</a></li>\n<li><a href=\"https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it\">What is an SVG File (And How Do You Use it)?</a></li>\n<li><a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\">WAI-ARIA Overview</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一張中介紹了 property binding 是用來將 Component 中的 property 綁定給 HTML Tag 的 property，還介紹了 event binding 是用來將 Component 中的 method 綁定給 HTML Tag 用來監聽畫面事件，而本章將持續介紹兩種 binding 方式。</p>\n<p>Attribute binding 可以用來讓你在開發 Template 時直接設置 property 值，透過 attuibute 可以提高訪問性、動態設置畫面樣式與可以同時管理多個 CSS Class 或樣式。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767uy096133tc.png\"></p>","more":"<h1 id=\"Binding-to-an-attribute\"><a href=\"#Binding-to-an-attribute\" class=\"headerlink\" title=\"Binding to an attribute\"></a>Binding to an attribute</h1><p>在大部分的情況下，對於設置 HTML 元件屬性都建議你都使用 property binding 來做，但是有時候會遇到你可能要綁定某一個元件的某個屬性，但這個元件並沒有這個屬性，如果強制使用 property binding 則會出錯，這實際需要使用 attibute binding了，比如說 <a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\">ARIA（WAI-ARIA）</a> 或 <a href=\"https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it\">SVG（Scalable Vector Graphic）</a> 都是 <code>purely attribute</code>，代表他們既沒有元件的 property 也無法對他進行設置，這時就必須使用 attribute binding。</p>\n<p>到這邊可能有滿多新手開始頭暈了，attribute 跟 property 不是都是屬性嗎？有什麼不一樣，這邊簡單來說 <code>attributes 由 HTML 定義，所有出現在 HTML 標籤內的描述皆為 attributes</code> ，而 DOM properties 則是 <code>標準的 HTML attributes 經過瀏覽器解析後會產生相對應的 DOM properties</code>，有興趣可以看看 <a href=\"https://jimmyswebnote.com/html-attributes-and-dom-properties/\">這篇文章</a> 裡面詳細的介紹了什麼是 HTML attribute 與 DOM Property 的區別。</p>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><p>要了解一個新的用法就必須先瞭解他的語法，而 attribure binding 的語法與 property binding 相似，但不是將 element property 放在括號之間，而是在 attuibute 前面加上一個前綴字 <code>attr 後跟一個點（.）</code>，這樣就會把你輸入在後面的字串表達式解析成 attribute 值。</p>\n<p><strong>Note</strong>: 這邊的介紹可能都會使用英文介紹對應的專有名詞，畢竟 property 與 attribute 的中文都是屬性…</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">attr.attribute-you-are-targeting</span>]=<span class=\"string\">&quot;expression&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意喔！如果將後面的字串表達式設置為 <code>null</code> 或 <code>undefined</code> 的話，Angular 會直接將這個屬性完全刪除。</p>\n<h1 id=\"Example-Binding-to-colspan\"><a href=\"#Example-Binding-to-colspan\" class=\"headerlink\" title=\"Example: Binding to colspan\"></a>Example: Binding to colspan</h1><p>舉個 attribute binding 的例子吧，常見的使用 attribute binding 的例子是 table 中的 <code>colspan</code> attribute，colspan 是用來改變一個單元的格子應該跨越多少格，所以如果使用 attribute binding 可以做到動態這是 table。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  expression calculates colspan=2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> [<span class=\"attr\">attr.colspan</span>]=<span class=\"string\">&quot;1 + 1&quot;</span>&gt;</span>One-Two<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣的設定可以使綁定的 <code>&lt;tr&gt;</code> 跨越兩列。</p>\n<p><strong>Note</strong>: 要注意，<code>&lt;tr&gt;</code> 元件擁有的是 <code>colspan</code>  attribute，而如果是 property 的話則是 <code>colSpan</code>，大小寫要非常注意！ </p>\n<h1 id=\"Binding-to-the-class-attribute\"><a href=\"#Binding-to-the-class-attribute\" class=\"headerlink\" title=\"Binding to the class attribute\"></a>Binding to the class attribute</h1><p>attribute 還有一個常用的用法，就是用於綁定 element 中的 CSS class，可以做到同時新增或刪除等管理多個 CSS class。</p>\n<h2 id=\"Binding-to-a-single-CSS-class\"><a href=\"#Binding-to-a-single-CSS-class\" class=\"headerlink\" title=\"Binding to a single CSS class\"></a>Binding to a single CSS class</h2><p>如果要綁定單個 CSS class 請使用 <code>class</code> 當作前綴後面跟上一個點（.）和 CSS class 的名稱，例如 <code>[class.sale]=&quot;onSale&quot;</code>，當訂的表達是為 true 時 Angular 會為這個 element 多添加一個 CSS class，反之則會被移除。</p>\n<h2 id=\"Binding-to-multiple-CSS-classes\"><a href=\"#Binding-to-multiple-CSS-classes\" class=\"headerlink\" title=\"Binding to multiple CSS classes\"></a>Binding to multiple CSS classes</h2><p>如果要同時綁定多個 CSS class 請使用 <code>[class]</code>，例如：[class]&#x3D;”classExpression”，插入的表達是可以是：</p>\n<ul>\n<li>以<code>空格</code>分隔的 CSS class 的名字</li>\n<li>以 object 的 key 作為名稱，以 true 或 false 表達式作為值的物件</li>\n<li>包含多個 CSS class 名字的陣列</li>\n</ul>\n<h1 id=\"Binding-to-the-style-attribute\"><a href=\"#Binding-to-the-style-attribute\" class=\"headerlink\" title=\"Binding to the style attribute\"></a>Binding to the style attribute</h1><p>attribute binding 也可以做到動態設置你的 element stype。</p>\n<h2 id=\"Binding-to-a-single-style\"><a href=\"#Binding-to-a-single-style\" class=\"headerlink\" title=\"Binding to a single style\"></a>Binding to a single style</h2><p>要創建單個的 style binding，請使用前綴字 <code>style</code>後跟一個點（.）和 CSS stype property，例如 <code>[style.width]=&quot;width&quot;</code>， Angular 將 property 設置為綁定表達式的值，通常是一個字串或著可以添加像 <code>em</code> 或 <code>%</code> 的單位擴展符。</p>\n<p><strong>Note</strong>: 可以使用破折號或駝峰命民法來編寫 style property 的名稱</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> [<span class=\"attr\">style.background-color</span>]=<span class=\"string\">&quot;expression&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> [<span class=\"attr\">style.backgroundColor</span>]=<span class=\"string\">&quot;expression&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Binding-to-multiple-styles\"><a href=\"#Binding-to-multiple-styles\" class=\"headerlink\" title=\"Binding to multiple styles\"></a>Binding to multiple styles</h2><p>要綁定多個 style 請綁定到 [style] property，例如 [style]&#x3D;”styleExpression” 而 styleExpression 可以是以下之一：</p>\n<ul>\n<li>樣式的字串列表：<code>&quot;width: 100px; height: 100px; background-color: cornflowerblue;&quot;</code></li>\n<li>以樣式名稱為 key，以樣式值為 value 的物件：<code>&#123;width: &#39;100px&#39;, height: &#39;100px&#39;, backgroundColor: &#39;cornflowerblue&#39;&#125;</code></li>\n</ul>\n<p><strong>Note</strong>: 注意！ [style] 不像 [class] 一樣支持綁定陣列喔！</p>\n<h1 id=\"Styling-Precedence\"><a href=\"#Styling-Precedence\" class=\"headerlink\" title=\"Styling Precedence\"></a>Styling Precedence</h1><p>可以將多個源頭的值綁定給單一 HTML element 的 CSS class 和 style，當同一個 CSS class 或 style property 有多個綁定時，Angular 會遵循一組優先規則解決衝突並確定哪些 CSS class 或 stype 最終被應用於 HTML element。</p>\n<ol>\n<li>Template bindings<ol>\n<li><strong>Property binding</strong>: <code>&lt;div [class.foo]=&quot;hasFoo&quot;&gt; or &lt;div [style.colo]=&quot;color&quot;&gt;</code></li>\n<li><strong>Map binding</strong>: <code>&lt;div [class]=&quot;classExpr&quot;&gt; or &lt;div [style]=&quot;styleExpr&quot;</code></li>\n<li><strong>Static value</strong>:  <code>&lt;div class=&quot;foo&quot;&gt; or &lt;div style=&quot;color: blue&quot;&gt;</code></li>\n</ol>\n</li>\n<li>Directive host bindings<ol>\n<li><strong>Property binding</strong>: <code>host: &#123;&#39;[class.foo]&#39;: &#39;hasFoo&#39;&#125; or host: &#123;&#39;[style.color]&#39;: &#39;color&#39;&#125;</code></li>\n<li><strong>Map binding</strong>: <code>host: &#123;&#39;[class]&#39;: &#39;classExpr&#39;&#125; or host: &#123;&#39;[style]&#39;: &#39;styleExpr&#39;&#125;</code></li>\n<li><strong>Static value</strong>: <code>host: &#123;&#39;class&#39;: &#39;foo&#39;&#125; or host: &#123;&#39;style&#39;: &#39;color: blue&#39;&#125;</code></li>\n</ol>\n</li>\n<li>Component host bindings<ol>\n<li><strong>Property binding</strong>: <code>host: &#123;&#39;[class.foo]&#39;: &#39;hasFoo&#39;&#125; or host: &#123;&#39;[style.color]&#39;: &#39;color&#39;&#125;</code></li>\n<li><strong>Map binding</strong>: <code>host: &#123;&#39;[class]&#39;: &#39;classExpr&#39;&#125; or host: &#123;&#39;[style]&#39;: &#39;styleExpr&#39;&#125;</code></li>\n<li><strong>Static value</strong>: <code>host: &#123;&#39;class&#39;: &#39;foo&#39;&#125; or host: &#123;&#39;style&#39;: &#39;color: blue&#39;&#125;</code></li>\n</ol>\n</li>\n</ol>\n<p>可以看到 CSS class 或 style 越具體其優先級就越高，綁定到特定 CSS class（[class.foo]）會優先於通用 [class] 的綁定，而通用 [class] 的綁定又會優先於特定樣式綁定（[style.bar]），而他又會優先於通用 [style]  的綁定。</p>\n<h1 id=\"Two-way-binding\"><a href=\"#Two-way-binding\" class=\"headerlink\" title=\"Two-way binding\"></a>Two-way binding</h1><p>介紹完 attribute, class, style binding 後，接著要來介紹另一個非常常用的 binding 方法 <code>Two-way binding</code>，還記得在前幾天介紹的 @Input() 與 @Output() 嗎？在父層的 HTML 中如果要傳遞數據給子層，需要將父層的 property 利用 porperty binding 將它放入中括號 ( [ ] ) 中傳遞給子層，而父層要接受子層傳遞的數據時，需要利用 event binding 將子層的 EventEmitter 放括號中，當子層傳遞數據時觸發父層中綁定的 method</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-childComponent</span> [<span class=\"attr\">inputData</span>]=<span class=\"string\">&quot;inputData&quot;</span> (<span class=\"attr\">outputData</span>)=<span class=\"string\">&quot;onChildOutpu($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-childComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210805/20124767zQSQyFVxiV.png\"></p>\n<p>所以如果同一個子層同時要有 @Input() 與 @Output() 那就會把他家的很長不太好看，所以 Angular  提供了 <code>Two-way binding</code>，將 property binding 與 event binding 整合再一起，語法是將方括號與圓括號組合再一起 <code>[()]</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-sizer</span> [(<span class=\"attr\">size</span>)]=<span class=\"string\">&quot;fontSizePx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sizer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"How-two-way-binding-works\"><a href=\"#How-two-way-binding-works\" class=\"headerlink\" title=\"How two-way binding works\"></a>How two-way binding works</h1><p>要讓 Two-way binding 可以正常運作需要將 @Output() property 使用 <code>inputChange</code> 模式，其中 input 是 @Input() 的名稱，舉例來說當你的 @Input() 命名為 size 則要將 @Output() 命名為 sizeChange，讓我們舉個例吧</p>\n<ol>\n<li><p>在 child.component.ts 中建立一個 @Input() 屬性 size 與 @Output() 屬性 sizeChange 並加入三個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-child&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./child.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./child.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChildComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() size!: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;                             <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() sizeChange = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();           <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dec</span>(<span class=\"params\"></span>) &#123;                                                      <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">resize</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">inc</span>(<span class=\"params\"></span>) &#123;                                                      <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">resize</span>(+<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resize</span>(<span class=\"params\">delta: <span class=\"built_in\">number</span></span>) &#123;                                      <span class=\"comment\">// (5)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"number\">40</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">8</span>, +<span class=\"variable language_\">this</span>.<span class=\"property\">size</span> + delta));</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sizeChange</span>.<span class=\"title function_\">emit</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">size</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1):  使用 @Input() 將 size 裝飾為父層傳遞下來的數據</li>\n<li>(2): 使用@Output() 將 sizeChange 裝飾為一個 EventEmitter 用於將數據向上傳給父層</li>\n<li>(3): 用於減小字體大小</li>\n<li>(4): 用於增加字體大小</li>\n<li>(5): 增加或減少字體大小的 method</li>\n</ul>\n</li>\n<li><p>在 child.component.html 中新增兩個按鈕用於讓使用者增加或減少字體大小，和使用 text interpolation 將 size 插入到 template 中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;dec()&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;smaller&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;inc()&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;bigger&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> [<span class=\"attr\">style.font-size.px</span>]=<span class=\"string\">&quot;size&quot;</span>&gt;</span>FontSize: &#123;&#123;size&#125;&#125;px<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.ts 中新增一個 property </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-parent&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./parent.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParentComponent</span> &#123;</span><br><span class=\"line\">  frontSizePx = <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 parent.component.html 中將 frontSizePx 使用 Two-way binding 綁定給子層</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [(<span class=\"attr\">size</span>)]=<span class=\"string\">&quot;fontSizePx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.font-size.px</span>]=<span class=\"string\">&quot;fontSizePx&quot;</span>&gt;</span>Resizable Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/oKbjOZJ.gif\" alt=\"img\"><br>在畫面中可以看到，當我們點擊畫面中的 button 後，首先先讓子層向父層傳遞更改的大小，父層收到後再透過 @Input() 將變更的大小傳遞回子層讓子層可以顯示出 FontSize 的數值，這又就可以透過一個綁定就完成需要 @Input() 與 @Output() 的情況。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼最後的兩種綁定模式，可以使用 attribute binding 對沒有 property 的 HTML 元件動態綁定，可以使用 class binding 對一個 HTML 元件綁定一個或多個 CSS class，可以使用 style binding 對一個 HTML 元件綁定一個或多個樣式，而 CSS class 與 style 的綁定優先級遵守越具體其優先級就越高的概念。</p>\n<p>第二種介紹了 Two-way binding，如何透過一種綁定就達成 property binding 與 event binding，要注意的是如果要讓 Two-way binding 成功作用必須將 @Output() 麼名稱設定為 @Input() 的名稱加上Change。</p>\n<p>下一篇將會介紹 <code>Template variables</code>，他可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，詳細的內容就留到明天在介紹吧，那我們明天見。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/attribute-binding\">Angular.io - Attribute, class, and style bindings</a></li>\n<li><a href=\"https://angular.io/guide/two-way-binding\">Angular.io - Two-way binding</a></li>\n<li><a href=\"https://jimmyswebnote.com/html-attributes-and-dom-properties/\">HTML Attributes 與 DOM Properties 的區別</a></li>\n<li><a href=\"https://www.elegantthemes.com/blog/wordpress/what-is-an-svg-file-and-how-do-you-use-it\">What is an SVG File (And How Do You Use it)?</a></li>\n<li><a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\">WAI-ARIA Overview</a></li>\n</ul>"},{"title":"Day12. Template variables","date":"2021-09-12T06:07:10.000Z","_content":"\nTemplate variable 可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，例如響應使用者的輸入或微調應用程序的表單，簡單來說當你在畫面中有一個 `<input>`，除了透過 Form 獲得使用者在這個 `<input>` 所以輸入的數據之外，也可以透過將這個 `<input>` 設定為 template variable，這樣就可以讓在別的地方的 `<button>` 中的 event binding 獲得這個 `<input>` 的數據，詳細的內容讓我們繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png)\n\n<!-- more -->\n\n# Syntax\n\n要將 template 中的元件聲明為 template variable，需要在這個元件上加上`哈希符號 #`，舉個例子\n\n```html\n<input #phone placeholder=\"phone number\" />\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its `value` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n```\n\n雖然在 template 中 `<button>` 離 `<input>` 很遠，但因為`<input>` 透過 # 被標記為 template variable，所以遠處的 `<button>` 可以透過呼叫 phone.value 獲取這個 `<input>` 的值。\n\n\n# How Angular assigns values to template variables\n\n了解了 template variable 後，接著要來介紹 Angular 是如何根據你聲明變量的位置為 template variable 分配一個值：\n\n- 如果在 component 的 selector 上聲明變量，則是指這個 component 的 instance\n- 如果在標準 HTML element 上聲明變量，則是指這個 HTML 的 element\n- 如果在 `<ng-template>` 上聲明變量，則該變量引用一個 `TemplateRef` 的 instance，它代表著這個 template，這個之後會詳細介紹\n- 如果在變量右邊指定了一個名稱，例如 `#var=\"ngModel\"，則該變量引用匹配 ngModel 名稱 (exportAs name) 的元素上的 directive 或 component\n\n## Using NgForm with template variables\n\n在大多數情況下，Angular 將 template varibale 的值設置為他出現的元素，比如上面的例子，phone 是指 `<input>`，而點擊了按鈕則會將 `<input>` 的內容傳遞給 component 中的 callPhone() method。\n\n不過也可以透過在變量右邊指定一個名稱達到其他的效果，比如說可以使用 NgForm directive 來達到 Form 的效果，他通過引用 directive 的 exportAs name 來獲取對不同值得引用，來舉個例子吧\n\n1. 在 app.component.ts 中加入 property 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      submitMessage: string = '';                 // (1)\n\n      onSubmit($event: any) {                     // (2)\n        this.submitMessage = $event.form.value.name;\n      }\n    }\n    ```\n\n    - (1): 新增 property 用於在畫面中顯示 `<input>` 的值\n    - (2): 新增一個 method 用於當使用者點擊按鈕時觸發\n2. 在 app.component.html 中添加 `<form>`\n\n    ```html\n    <!-- app.component.html -->\n\n    <form #itemForm=\"ngForm\" (ngSubmit)=\"onSubmit(itemForm)\">\n      <label for=\"name\"\n        >Name <input class=\"form-control\" name=\"name\" ngModel required />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <div [hidden]=\"!itemForm.form.valid\">\n      <p>{{ submitMessage }}</p>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/ZhvCzuM.gif)\n\n如果沒有在 #itemForm 右邊使用 `ngForm` 則 #itemForm 的引用值將是 `HTMLFormElement` 的 `<form>` 元件，但這邊是使用了 `ngForm` 所以 #itemForm 是對 NgForm directive 的引用，他可以跟蹤表單中的每一個可控制元件的值和有效性，這與原生的 `<form>` 元素不同，NgForm directive 中有一個 property，他用於檢測整個表單的有效性，所以當 itemForm.form.valid 無效時，則整個 NgForm 會將 submit 按鈕 disable。\n\n\n# Template variable scope\n\n既然提到 variable 就不免俗的要提到 scope，至於什麼是 scope？簡單來說 `scope 就是一個變數的生存範圍，一但超出了這個範圍就無法存取到這個變數` 至於詳細的內容可以看我這一篇 [[JS] You Don't Know JavaScript [Scope & Closures] - What is Scope?](https://ithelp.ithome.com.tw/articles/10249231) 文章中有詳細的介紹什麼是 scope。\n\n而 template variable 則可以在 template 中的任何一個位置中調用到，但是 `Structural directive` （*ngIf, *ngFor, `<ng-template>` ...） 他會充當 template 的邊界，所以你會無法訪問到 Structural directive 內部的 template variable。\n\n## Accessing in a nested template\n\n就如同 Javascript 的 scope 一樣，template 中內部的 template 可以訪問外部 template 的變量，但相反的話不行，舉個在同層級的例子\n\n```html\n<input #ref1 type=\"text\" [(ngModel)]=\"firstExample\" />\n<span *ngIf=\"true\">Value: {{ ref1.value }}</span> \n```\n\n 當更改了 `<input>` 的內容時會立即更改 `<span>` 中的內容，因為 Angular 會立即通過 template variable ref1 來更新內容，接著再舉一個由內部訪問到外部變量的例子\n\n```html\n<input #ref1 type=\"text\" [(ngModel)]=\"firstExample\" />\n\n<!-- New template -->\n<ng-template [ngIf]=\"true\">\n  <!-- Because the context is inherited, the value is available to the new template -->\n  <span>Value: {{ ref1.value }}</span>\n</ng-template>\n```\n\n像上面提到的，`<ng-template>` 會創造一個新的 template 範圍，但是因為在這個新的 template 範圍中的 `<span>` 是從內部訪問外部的變量 ref1，所以是可以正常訪問到的，就跟 Javascript  一樣\n\n```javascript\nconst ref1 = 'input value';\n\nfunction spanValue() {\n\tconsole.log(ref1); // input value\n}\n```\n\n雖然 ref1 與 function spanValue 是不同的 scope，但因為內部可以訪問外部變量，所以可以將 ref1 給 console 出來，接著來看父層如果訪問子層變量會發生什麼事\n\n```html\n<ng-template [ngIf]=\"true\">\n  <!-- The reference is defined within a template -->\n  <input #ref2 type=\"text\" [(ngModel)]=\"secondExample\" />\n</ng-template>\n<!-- ref2 accessed from outside that template doesn't work -->\n<span>Value: {{ ref2?.value }}</span>\n```\n\n如果是上面例子的情況，`<span>` 會無法獲得 ref2 的內容，因為對於 ref2 來說他是存在於子層的變量，所以無法透過父層呼叫到，就跟 Javascript 一樣\n\n```javascript\nfunction inputScope() {\n    let ref2 = 'in child scope';\n}\n\nconsole.log(ref2);  // Uncaught ReferenceError: ref2 is not defined\n```\n\n外部無法呼叫到內部 scope 的變量，所以在使用 template variable 時要記得存取變量的規則， `外部 scope 無法存取到內部 scope 的變量`。\n\n\n# 結論\n\n本章中介紹了什麼是 template variable 與他的使用方法，簡單來說就是可以利用他獲得其他 element 的內容，不過因為他也是屬於變量所以也會有 scope 的問題，要記住外部 scope 是無法訪問到內部 scope 的變量的，而使用了 `Structural directive` 則會創造一個獨立的 template 讓整個 template 出現父子層的現象，就跟在 javescript 中使用 function 建立 function scope  一樣，所以要特別注意。\n\n而本篇也是講解 template 的最後一篇，明天開始將會進入到 directive，這個觀念在前面多多少少都有提到一點，但沒關係之後會詳細地對他進行講解，那我們就明天見吧。\n\n---\n\n# Reference\n\n- [Angular.io](https://angular.io/guide/template-reference-variables)","source":"_posts/Angular/angular-12.md","raw":"---\ntitle: Day12. Template variables\ndate: 2021-09-12 14:07:10\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\nTemplate variable 可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，例如響應使用者的輸入或微調應用程序的表單，簡單來說當你在畫面中有一個 `<input>`，除了透過 Form 獲得使用者在這個 `<input>` 所以輸入的數據之外，也可以透過將這個 `<input>` 設定為 template variable，這樣就可以讓在別的地方的 `<button>` 中的 event binding 獲得這個 `<input>` 的數據，詳細的內容讓我們繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png)\n\n<!-- more -->\n\n# Syntax\n\n要將 template 中的元件聲明為 template variable，需要在這個元件上加上`哈希符號 #`，舉個例子\n\n```html\n<input #phone placeholder=\"phone number\" />\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its `value` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n```\n\n雖然在 template 中 `<button>` 離 `<input>` 很遠，但因為`<input>` 透過 # 被標記為 template variable，所以遠處的 `<button>` 可以透過呼叫 phone.value 獲取這個 `<input>` 的值。\n\n\n# How Angular assigns values to template variables\n\n了解了 template variable 後，接著要來介紹 Angular 是如何根據你聲明變量的位置為 template variable 分配一個值：\n\n- 如果在 component 的 selector 上聲明變量，則是指這個 component 的 instance\n- 如果在標準 HTML element 上聲明變量，則是指這個 HTML 的 element\n- 如果在 `<ng-template>` 上聲明變量，則該變量引用一個 `TemplateRef` 的 instance，它代表著這個 template，這個之後會詳細介紹\n- 如果在變量右邊指定了一個名稱，例如 `#var=\"ngModel\"，則該變量引用匹配 ngModel 名稱 (exportAs name) 的元素上的 directive 或 component\n\n## Using NgForm with template variables\n\n在大多數情況下，Angular 將 template varibale 的值設置為他出現的元素，比如上面的例子，phone 是指 `<input>`，而點擊了按鈕則會將 `<input>` 的內容傳遞給 component 中的 callPhone() method。\n\n不過也可以透過在變量右邊指定一個名稱達到其他的效果，比如說可以使用 NgForm directive 來達到 Form 的效果，他通過引用 directive 的 exportAs name 來獲取對不同值得引用，來舉個例子吧\n\n1. 在 app.component.ts 中加入 property 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      submitMessage: string = '';                 // (1)\n\n      onSubmit($event: any) {                     // (2)\n        this.submitMessage = $event.form.value.name;\n      }\n    }\n    ```\n\n    - (1): 新增 property 用於在畫面中顯示 `<input>` 的值\n    - (2): 新增一個 method 用於當使用者點擊按鈕時觸發\n2. 在 app.component.html 中添加 `<form>`\n\n    ```html\n    <!-- app.component.html -->\n\n    <form #itemForm=\"ngForm\" (ngSubmit)=\"onSubmit(itemForm)\">\n      <label for=\"name\"\n        >Name <input class=\"form-control\" name=\"name\" ngModel required />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <div [hidden]=\"!itemForm.form.valid\">\n      <p>{{ submitMessage }}</p>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/ZhvCzuM.gif)\n\n如果沒有在 #itemForm 右邊使用 `ngForm` 則 #itemForm 的引用值將是 `HTMLFormElement` 的 `<form>` 元件，但這邊是使用了 `ngForm` 所以 #itemForm 是對 NgForm directive 的引用，他可以跟蹤表單中的每一個可控制元件的值和有效性，這與原生的 `<form>` 元素不同，NgForm directive 中有一個 property，他用於檢測整個表單的有效性，所以當 itemForm.form.valid 無效時，則整個 NgForm 會將 submit 按鈕 disable。\n\n\n# Template variable scope\n\n既然提到 variable 就不免俗的要提到 scope，至於什麼是 scope？簡單來說 `scope 就是一個變數的生存範圍，一但超出了這個範圍就無法存取到這個變數` 至於詳細的內容可以看我這一篇 [[JS] You Don't Know JavaScript [Scope & Closures] - What is Scope?](https://ithelp.ithome.com.tw/articles/10249231) 文章中有詳細的介紹什麼是 scope。\n\n而 template variable 則可以在 template 中的任何一個位置中調用到，但是 `Structural directive` （*ngIf, *ngFor, `<ng-template>` ...） 他會充當 template 的邊界，所以你會無法訪問到 Structural directive 內部的 template variable。\n\n## Accessing in a nested template\n\n就如同 Javascript 的 scope 一樣，template 中內部的 template 可以訪問外部 template 的變量，但相反的話不行，舉個在同層級的例子\n\n```html\n<input #ref1 type=\"text\" [(ngModel)]=\"firstExample\" />\n<span *ngIf=\"true\">Value: {{ ref1.value }}</span> \n```\n\n 當更改了 `<input>` 的內容時會立即更改 `<span>` 中的內容，因為 Angular 會立即通過 template variable ref1 來更新內容，接著再舉一個由內部訪問到外部變量的例子\n\n```html\n<input #ref1 type=\"text\" [(ngModel)]=\"firstExample\" />\n\n<!-- New template -->\n<ng-template [ngIf]=\"true\">\n  <!-- Because the context is inherited, the value is available to the new template -->\n  <span>Value: {{ ref1.value }}</span>\n</ng-template>\n```\n\n像上面提到的，`<ng-template>` 會創造一個新的 template 範圍，但是因為在這個新的 template 範圍中的 `<span>` 是從內部訪問外部的變量 ref1，所以是可以正常訪問到的，就跟 Javascript  一樣\n\n```javascript\nconst ref1 = 'input value';\n\nfunction spanValue() {\n\tconsole.log(ref1); // input value\n}\n```\n\n雖然 ref1 與 function spanValue 是不同的 scope，但因為內部可以訪問外部變量，所以可以將 ref1 給 console 出來，接著來看父層如果訪問子層變量會發生什麼事\n\n```html\n<ng-template [ngIf]=\"true\">\n  <!-- The reference is defined within a template -->\n  <input #ref2 type=\"text\" [(ngModel)]=\"secondExample\" />\n</ng-template>\n<!-- ref2 accessed from outside that template doesn't work -->\n<span>Value: {{ ref2?.value }}</span>\n```\n\n如果是上面例子的情況，`<span>` 會無法獲得 ref2 的內容，因為對於 ref2 來說他是存在於子層的變量，所以無法透過父層呼叫到，就跟 Javascript 一樣\n\n```javascript\nfunction inputScope() {\n    let ref2 = 'in child scope';\n}\n\nconsole.log(ref2);  // Uncaught ReferenceError: ref2 is not defined\n```\n\n外部無法呼叫到內部 scope 的變量，所以在使用 template variable 時要記得存取變量的規則， `外部 scope 無法存取到內部 scope 的變量`。\n\n\n# 結論\n\n本章中介紹了什麼是 template variable 與他的使用方法，簡單來說就是可以利用他獲得其他 element 的內容，不過因為他也是屬於變量所以也會有 scope 的問題，要記住外部 scope 是無法訪問到內部 scope 的變量的，而使用了 `Structural directive` 則會創造一個獨立的 template 讓整個 template 出現父子層的現象，就跟在 javescript 中使用 function 建立 function scope  一樣，所以要特別注意。\n\n而本篇也是講解 template 的最後一篇，明天開始將會進入到 directive，這個觀念在前面多多少少都有提到一點，但沒關係之後會詳細地對他進行講解，那我們就明天見吧。\n\n---\n\n# Reference\n\n- [Angular.io](https://angular.io/guide/template-reference-variables)","slug":"Angular/angular-12","published":1,"updated":"2022-02-16T01:26:25.349Z","_id":"ckzov8v8x001rkww36guggd8c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Template variable 可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，例如響應使用者的輸入或微調應用程序的表單，簡單來說當你在畫面中有一個 <code>&lt;input&gt;</code>，除了透過 Form 獲得使用者在這個 <code>&lt;input&gt;</code> 所以輸入的數據之外，也可以透過將這個 <code>&lt;input&gt;</code> 設定為 template variable，這樣就可以讓在別的地方的 <code>&lt;button&gt;</code> 中的 event binding 獲得這個 <code>&lt;input&gt;</code> 的數據，詳細的內容讓我們繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h1><p>要將 template 中的元件聲明為 template variable，需要在這個元件上加上<code>哈希符號 #</code>，舉個例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">phone</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;phone number&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- lots of other elements --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;callPhone(phone.value)&quot;</span>&gt;</span>Call<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>雖然在 template 中 <code>&lt;button&gt;</code> 離 <code>&lt;input&gt;</code> 很遠，但因為<code>&lt;input&gt;</code> 透過 # 被標記為 template variable，所以遠處的 <code>&lt;button&gt;</code> 可以透過呼叫 phone.value 獲取這個 <code>&lt;input&gt;</code> 的值。</p>\n<h1 id=\"How-Angular-assigns-values-to-template-variables\"><a href=\"#How-Angular-assigns-values-to-template-variables\" class=\"headerlink\" title=\"How Angular assigns values to template variables\"></a>How Angular assigns values to template variables</h1><p>了解了 template variable 後，接著要來介紹 Angular 是如何根據你聲明變量的位置為 template variable 分配一個值：</p>\n<ul>\n<li>如果在 component 的 selector 上聲明變量，則是指這個 component 的 instance</li>\n<li>如果在標準 HTML element 上聲明變量，則是指這個 HTML 的 element</li>\n<li>如果在 <code>&lt;ng-template&gt;</code> 上聲明變量，則該變量引用一個 <code>TemplateRef</code> 的 instance，它代表著這個 template，這個之後會詳細介紹</li>\n<li>如果在變量右邊指定了一個名稱，例如 &#96;#var&#x3D;”ngModel”，則該變量引用匹配 ngModel 名稱 (exportAs name) 的元素上的 directive 或 component</li>\n</ul>\n<h2 id=\"Using-NgForm-with-template-variables\"><a href=\"#Using-NgForm-with-template-variables\" class=\"headerlink\" title=\"Using NgForm with template variables\"></a>Using NgForm with template variables</h2><p>在大多數情況下，Angular 將 template varibale 的值設置為他出現的元素，比如上面的例子，phone 是指 <code>&lt;input&gt;</code>，而點擊了按鈕則會將 <code>&lt;input&gt;</code> 的內容傳遞給 component 中的 callPhone() method。</p>\n<p>不過也可以透過在變量右邊指定一個名稱達到其他的效果，比如說可以使用 NgForm directive 來達到 Form 的效果，他通過引用 directive 的 exportAs name 來獲取對不同值得引用，來舉個例子吧</p>\n<ol>\n<li><p>在 app.component.ts 中加入 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">submitMessage</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\">$event: <span class=\"built_in\">any</span></span>) &#123;                     <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">submitMessage</span> = $event.<span class=\"property\">form</span>.<span class=\"property\">value</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增 property 用於在畫面中顯示 <code>&lt;input&gt;</code> 的值</li>\n<li>(2): 新增一個 method 用於當使用者點擊按鈕時觸發</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中添加 <code>&lt;form&gt;</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">itemForm</span>=<span class=\"string\">&quot;ngForm&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit(itemForm)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>Name <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">&quot;!itemForm.form.valid&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; submitMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/ZhvCzuM.gif\" alt=\"img\"></p>\n<p>如果沒有在 #itemForm 右邊使用 <code>ngForm</code> 則 #itemForm 的引用值將是 <code>HTMLFormElement</code> 的 <code>&lt;form&gt;</code> 元件，但這邊是使用了 <code>ngForm</code> 所以 #itemForm 是對 NgForm directive 的引用，他可以跟蹤表單中的每一個可控制元件的值和有效性，這與原生的 <code>&lt;form&gt;</code> 元素不同，NgForm directive 中有一個 property，他用於檢測整個表單的有效性，所以當 itemForm.form.valid 無效時，則整個 NgForm 會將 submit 按鈕 disable。</p>\n<h1 id=\"Template-variable-scope\"><a href=\"#Template-variable-scope\" class=\"headerlink\" title=\"Template variable scope\"></a>Template variable scope</h1><p>既然提到 variable 就不免俗的要提到 scope，至於什麼是 scope？簡單來說 <code>scope 就是一個變數的生存範圍，一但超出了這個範圍就無法存取到這個變數</code> 至於詳細的內容可以看我這一篇 <a href=\"https://ithelp.ithome.com.tw/articles/10249231\">[JS] You Don’t Know JavaScript [Scope &amp; Closures] - What is Scope?</a> 文章中有詳細的介紹什麼是 scope。</p>\n<p>而 template variable 則可以在 template 中的任何一個位置中調用到，但是 <code>Structural directive</code> （*ngIf, *ngFor, <code>&lt;ng-template&gt;</code> …） 他會充當 template 的邊界，所以你會無法訪問到 Structural directive 內部的 template variable。</p>\n<h2 id=\"Accessing-in-a-nested-template\"><a href=\"#Accessing-in-a-nested-template\" class=\"headerlink\" title=\"Accessing in a nested template\"></a>Accessing in a nested template</h2><p>就如同 Javascript 的 scope 一樣，template 中內部的 template 可以訪問外部 template 的變量，但相反的話不行，舉個在同層級的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">ref1</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;firstExample&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>Value: &#123;&#123; ref1.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p> 當更改了 <code>&lt;input&gt;</code> 的內容時會立即更改 <code>&lt;span&gt;</code> 中的內容，因為 Angular 會立即通過 template variable ref1 來更新內容，接著再舉一個由內部訪問到外部變量的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">ref1</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;firstExample&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- New template --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> [<span class=\"attr\">ngIf</span>]=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Because the context is inherited, the value is available to the new template --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Value: &#123;&#123; ref1.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>像上面提到的，<code>&lt;ng-template&gt;</code> 會創造一個新的 template 範圍，但是因為在這個新的 template 範圍中的 <code>&lt;span&gt;</code> 是從內部訪問外部的變量 ref1，所以是可以正常訪問到的，就跟 Javascript  一樣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ref1 = <span class=\"string\">&#x27;input value&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">spanValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ref1); <span class=\"comment\">// input value</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>雖然 ref1 與 function spanValue 是不同的 scope，但因為內部可以訪問外部變量，所以可以將 ref1 給 console 出來，接著來看父層如果訪問子層變量會發生什麼事</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> [<span class=\"attr\">ngIf</span>]=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- The reference is defined within a template --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">ref2</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;secondExample&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ref2 accessed from outside that template doesn&#x27;t work --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Value: &#123;&#123; ref2?.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是上面例子的情況，<code>&lt;span&gt;</code> 會無法獲得 ref2 的內容，因為對於 ref2 來說他是存在於子層的變量，所以無法透過父層呼叫到，就跟 Javascript 一樣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inputScope</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref2 = <span class=\"string\">&#x27;in child scope&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ref2);  <span class=\"comment\">// Uncaught ReferenceError: ref2 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>外部無法呼叫到內部 scope 的變量，所以在使用 template variable 時要記得存取變量的規則， <code>外部 scope 無法存取到內部 scope 的變量</code>。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 template variable 與他的使用方法，簡單來說就是可以利用他獲得其他 element 的內容，不過因為他也是屬於變量所以也會有 scope 的問題，要記住外部 scope 是無法訪問到內部 scope 的變量的，而使用了 <code>Structural directive</code> 則會創造一個獨立的 template 讓整個 template 出現父子層的現象，就跟在 javescript 中使用 function 建立 function scope  一樣，所以要特別注意。</p>\n<p>而本篇也是講解 template 的最後一篇，明天開始將會進入到 directive，這個觀念在前面多多少少都有提到一點，但沒關係之後會詳細地對他進行講解，那我們就明天見吧。</p>\n<hr>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/template-reference-variables\">Angular.io</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Template variable 可以讓你在 template 的任意一處使用被標記過的 HTML 元件的數據，例如響應使用者的輸入或微調應用程序的表單，簡單來說當你在畫面中有一個 <code>&lt;input&gt;</code>，除了透過 Form 獲得使用者在這個 <code>&lt;input&gt;</code> 所以輸入的數據之外，也可以透過將這個 <code>&lt;input&gt;</code> 設定為 template variable，這樣就可以讓在別的地方的 <code>&lt;button&gt;</code> 中的 event binding 獲得這個 <code>&lt;input&gt;</code> 的數據，詳細的內容讓我們繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767lMmC7T1IVB.png\"></p>","more":"<h1 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h1><p>要將 template 中的元件聲明為 template variable，需要在這個元件上加上<code>哈希符號 #</code>，舉個例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">phone</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;phone number&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- lots of other elements --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;callPhone(phone.value)&quot;</span>&gt;</span>Call<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>雖然在 template 中 <code>&lt;button&gt;</code> 離 <code>&lt;input&gt;</code> 很遠，但因為<code>&lt;input&gt;</code> 透過 # 被標記為 template variable，所以遠處的 <code>&lt;button&gt;</code> 可以透過呼叫 phone.value 獲取這個 <code>&lt;input&gt;</code> 的值。</p>\n<h1 id=\"How-Angular-assigns-values-to-template-variables\"><a href=\"#How-Angular-assigns-values-to-template-variables\" class=\"headerlink\" title=\"How Angular assigns values to template variables\"></a>How Angular assigns values to template variables</h1><p>了解了 template variable 後，接著要來介紹 Angular 是如何根據你聲明變量的位置為 template variable 分配一個值：</p>\n<ul>\n<li>如果在 component 的 selector 上聲明變量，則是指這個 component 的 instance</li>\n<li>如果在標準 HTML element 上聲明變量，則是指這個 HTML 的 element</li>\n<li>如果在 <code>&lt;ng-template&gt;</code> 上聲明變量，則該變量引用一個 <code>TemplateRef</code> 的 instance，它代表著這個 template，這個之後會詳細介紹</li>\n<li>如果在變量右邊指定了一個名稱，例如 &#96;#var&#x3D;”ngModel”，則該變量引用匹配 ngModel 名稱 (exportAs name) 的元素上的 directive 或 component</li>\n</ul>\n<h2 id=\"Using-NgForm-with-template-variables\"><a href=\"#Using-NgForm-with-template-variables\" class=\"headerlink\" title=\"Using NgForm with template variables\"></a>Using NgForm with template variables</h2><p>在大多數情況下，Angular 將 template varibale 的值設置為他出現的元素，比如上面的例子，phone 是指 <code>&lt;input&gt;</code>，而點擊了按鈕則會將 <code>&lt;input&gt;</code> 的內容傳遞給 component 中的 callPhone() method。</p>\n<p>不過也可以透過在變量右邊指定一個名稱達到其他的效果，比如說可以使用 NgForm directive 來達到 Form 的效果，他通過引用 directive 的 exportAs name 來獲取對不同值得引用，來舉個例子吧</p>\n<ol>\n<li><p>在 app.component.ts 中加入 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">submitMessage</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\">$event: <span class=\"built_in\">any</span></span>) &#123;                     <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">submitMessage</span> = $event.<span class=\"property\">form</span>.<span class=\"property\">value</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增 property 用於在畫面中顯示 <code>&lt;input&gt;</code> 的值</li>\n<li>(2): 新增一個 method 用於當使用者點擊按鈕時觸發</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中添加 <code>&lt;form&gt;</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">itemForm</span>=<span class=\"string\">&quot;ngForm&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit(itemForm)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>Name <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">&quot;!itemForm.form.valid&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; submitMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/ZhvCzuM.gif\" alt=\"img\"></p>\n<p>如果沒有在 #itemForm 右邊使用 <code>ngForm</code> 則 #itemForm 的引用值將是 <code>HTMLFormElement</code> 的 <code>&lt;form&gt;</code> 元件，但這邊是使用了 <code>ngForm</code> 所以 #itemForm 是對 NgForm directive 的引用，他可以跟蹤表單中的每一個可控制元件的值和有效性，這與原生的 <code>&lt;form&gt;</code> 元素不同，NgForm directive 中有一個 property，他用於檢測整個表單的有效性，所以當 itemForm.form.valid 無效時，則整個 NgForm 會將 submit 按鈕 disable。</p>\n<h1 id=\"Template-variable-scope\"><a href=\"#Template-variable-scope\" class=\"headerlink\" title=\"Template variable scope\"></a>Template variable scope</h1><p>既然提到 variable 就不免俗的要提到 scope，至於什麼是 scope？簡單來說 <code>scope 就是一個變數的生存範圍，一但超出了這個範圍就無法存取到這個變數</code> 至於詳細的內容可以看我這一篇 <a href=\"https://ithelp.ithome.com.tw/articles/10249231\">[JS] You Don’t Know JavaScript [Scope &amp; Closures] - What is Scope?</a> 文章中有詳細的介紹什麼是 scope。</p>\n<p>而 template variable 則可以在 template 中的任何一個位置中調用到，但是 <code>Structural directive</code> （*ngIf, *ngFor, <code>&lt;ng-template&gt;</code> …） 他會充當 template 的邊界，所以你會無法訪問到 Structural directive 內部的 template variable。</p>\n<h2 id=\"Accessing-in-a-nested-template\"><a href=\"#Accessing-in-a-nested-template\" class=\"headerlink\" title=\"Accessing in a nested template\"></a>Accessing in a nested template</h2><p>就如同 Javascript 的 scope 一樣，template 中內部的 template 可以訪問外部 template 的變量，但相反的話不行，舉個在同層級的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">ref1</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;firstExample&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>Value: &#123;&#123; ref1.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p> 當更改了 <code>&lt;input&gt;</code> 的內容時會立即更改 <code>&lt;span&gt;</code> 中的內容，因為 Angular 會立即通過 template variable ref1 來更新內容，接著再舉一個由內部訪問到外部變量的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">ref1</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;firstExample&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- New template --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> [<span class=\"attr\">ngIf</span>]=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Because the context is inherited, the value is available to the new template --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Value: &#123;&#123; ref1.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>像上面提到的，<code>&lt;ng-template&gt;</code> 會創造一個新的 template 範圍，但是因為在這個新的 template 範圍中的 <code>&lt;span&gt;</code> 是從內部訪問外部的變量 ref1，所以是可以正常訪問到的，就跟 Javascript  一樣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ref1 = <span class=\"string\">&#x27;input value&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">spanValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ref1); <span class=\"comment\">// input value</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>雖然 ref1 與 function spanValue 是不同的 scope，但因為內部可以訪問外部變量，所以可以將 ref1 給 console 出來，接著來看父層如果訪問子層變量會發生什麼事</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> [<span class=\"attr\">ngIf</span>]=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- The reference is defined within a template --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">ref2</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;secondExample&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ref2 accessed from outside that template doesn&#x27;t work --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Value: &#123;&#123; ref2?.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是上面例子的情況，<code>&lt;span&gt;</code> 會無法獲得 ref2 的內容，因為對於 ref2 來說他是存在於子層的變量，所以無法透過父層呼叫到，就跟 Javascript 一樣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inputScope</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref2 = <span class=\"string\">&#x27;in child scope&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ref2);  <span class=\"comment\">// Uncaught ReferenceError: ref2 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>外部無法呼叫到內部 scope 的變量，所以在使用 template variable 時要記得存取變量的規則， <code>外部 scope 無法存取到內部 scope 的變量</code>。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 template variable 與他的使用方法，簡單來說就是可以利用他獲得其他 element 的內容，不過因為他也是屬於變量所以也會有 scope 的問題，要記住外部 scope 是無法訪問到內部 scope 的變量的，而使用了 <code>Structural directive</code> 則會創造一個獨立的 template 讓整個 template 出現父子層的現象，就跟在 javescript 中使用 function 建立 function scope  一樣，所以要特別注意。</p>\n<p>而本篇也是講解 template 的最後一篇，明天開始將會進入到 directive，這個觀念在前面多多少少都有提到一點，但沒關係之後會詳細地對他進行講解，那我們就明天見吧。</p>\n<hr>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/template-reference-variables\">Angular.io</a></li>\n</ul>"},{"title":"Day13. Built-in directives - attribute","date":"2021-09-13T02:54:04.000Z","_content":"\n在介紹完 component 與 template 後，接著要來介紹什麼是 dierctive，可能在前面的章節中多多少少都有提到，但是可能都沒有詳細的講解過，也有遇過實際上已經有在使用了但卻不知道這個其實就是 directive，不過沒關係接下來會詳細的介紹什麼是 directive。\n\ndirective 是 Angular 中為了應用程序元素額外添加行為的 class，可以使用 Angular 內建的 directive 來管理 `form` 、`lists`、 `style` 和 `使用者看到的內容`。\n\n而 directive 有不同類性的用法，以下分為三種：\n\n1. Component: 帶有 template 的 directive，這種是最常見的 directive\n2. Attribute directive: 改變 element, component 或其他 directive 的外觀或行為的 directive\n3. Structureal directive: 通過添加或刪除 DOM element 來改變 DOM 的佈局\n\n\n![https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png](https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png)\n\n<!-- more -->\n\n# Built-in attribute directives\n\nattribute directive 是用來監聽和修改 HTML 的 element、attribute、property 和 component 的行為，比如 RouterModule 或 FormsModule 這類型的 NgModule，他都有定義自己的 attribute directive，而常見的的 attribute directive 有：\n\n- NgClass: 添加或刪除一組 css class\n- NgStyle: 添加或刪除一組 HTML style\n- NgModule: 像 HTML 的 `<form>` element 添加雙向數據綁定\n\n\n# Adding and removing classes with NgClass\n\n可以使用 ngClass 同時添加或刪除一個或多個 CSS class，而如果要添加或刪除一個 CSS class 則不要使用 ngClass，請使用 class binding。\n\n## Using NgClass with an expression\n\n要在設置樣式的 element 上添加 [ngClass] 並將一個表達式賦予給他，來舉個子吧\n```html\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n```\n\n在上面的例子中可以看到將一個`三元運算子`作為表達式賦予給 [ngClass]，所以當 `isSpecial` 為 true 時，就會在這個 `<div>` element 中套用名為 ` special` 的 CSS class 反之則不套用任何 class。\n\n## Using NgClass with a method\n\n除了將表達式賦予給 [ngClass] 之外，也可以與 component 中的 method 一起使用，舉個例子吧，希望透過畫面中三個 check box 來更換畫面中的字體或顏色。\n\n1. 在 app.component.html 中建立三個 chech box 與一個按鈕\n    ```html\n    <!-- app.component.html -->\n\n    <div [ngClass]=\"currentClasses\">\n      This div element CSS class is initial color, size and bgcColor\n    </div>\n\n    <ul>\n      <li>\n        <label for=\"colorChange\">Change color</label>\n        <input type=\"checkbox\" id=\"colorChange\" (change)=\"onChange('color')\" />\n      </li>\n      <li>\n        <label for=\"fontSizeChange\">Font size change</label>\n        <input type=\"checkbox\" id=\"fontSizeChange\" (change)=\"onChange('size')\" />\n      </li>\n      <li>\n        <label for=\"bgcChange\">Background color change</label>\n        <input type=\"checkbox\" id=\"bgcChange\" (change)=\"onChange('bgcColor')\" />\n      </li>\n    </ul>\n\n    <button (click)=\"onSetCurrentClasses()\">Change div CSS class</button>\n    ```\n\n    - (1): 在最上面添加一個 `<div>` 並將他使用 [ngClass]=\"currentClasses\"，透過 currentClasses 的內容決定要將幾個 CSS class 綁定在上面\n    - (2): 新增三個 check box 並將他們綁定一個 method，當使用者點擊時改變他們各自的狀態\n    - (3): 當使用者選擇好 check box 後，點擊按鈕觸發重新設置 currentClasses\n2. 在 app.component.ts 中新增 property 與 method\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      color = false;                                      // (1)\n      size = false;\n      bgcColor = false;\n      currentClasses = { color: false, size: false, bgcColor: false };\n\n      onChange(checkboxId: string) {                      // (2)\n        switch (checkboxId) {\n          case 'color':\n            this.color = !this.color;\n            break;\n          case 'size':\n            this.size = !this.size;\n            break;\n          case 'bgcColor':\n            this.bgcColor = !this.bgcColor;\n            break;\n          default:\n            break;\n        }\n      }\n\n      onSetCurrentClasses() {                             // (3)\n        this.currentClasses = {\n          color: this.color,\n          size: this.size, \n          bgcColor: this.bgcColor\n        }\n      }\n    }\n    ```\n\n    - (1): 新增每個 check box 所控制的 property，並新增 currentClasses 用於改變整體樣式\n    - (2): 新增當 check box 被點擊時觸發的 method\n    - (3): 新增當畫面中的 button 被點擊時觸發的 method\n3. 在 app.component.css 中新增三個 CSS class\n\n    ```css\n    .color {\n        color: lightskyblue;\n    }\n\n    .size {\n        font-size: 36px;\n    }\n\n    .bgcColor {\n        background-color: lightpink;\n    }\n    ```\n    \n![img](https://i.imgur.com/6gn4aw4.gif)\n\n在畫面中可以看到，當我們點選一個或多個 check box 時，會依照對應的名稱對 `<div>` 添加或刪除一個或多個 CSS class，當點擊其中一個 check box 先將他的對應的 property 變更狀態，等全部都變更好後，當使用者點擊了 change 的按鈕，會將 [ngClass] 所綁定的 object 進行更新從而更新 `<div>` 中的 CSS class。\n\n還記得為什麼綁定物件時可以更改 CSS class 的綁定嗎？在前幾篇的 class binding 中有提到，可以使用物件綁定，他的要求是 `key 為 class 名稱， value 為布林值（用於控制是否呈現）` 的這種型別的 object，忘記的可以回去複習一下喔！\n\n## Setting inline styles with NgStyle\n\n講完了 NgClass 後接著來介紹 NgStyle 的用法，他與 NgClass 差不多，唯一不同的是他是可以添加或刪除一個或多個 style，既然他們的使用方法差不多，那我們就以上面的例子，將上面的例子從 NgClass 更改為 NgStyle 吧。\n\n1. 首先先將 app.component.html 中顯示的 `<div>` 從 [ngClass] 更改為 [ngStyle] 並將綁定的名稱更改為 currentStyle，其他我們保持不變\n\n    ```html\n    <!-- app.component.html -->\n\n    <!-- Change [ngClass] to [ngStyle] -->\n    <div [ngStyle]=\"currentStyle\">\n      This div element style is initial color, size and bgcColor\n    </div>\n\n    <ul>\n      <li>\n        <label for=\"colorChange\">Change color</label>\n        <input type=\"checkbox\" id=\"colorChange\" (change)=\"onChange('color')\" />\n      </li>\n      <li>\n        <label for=\"fontSizeChange\">Font size change</label>\n        <input type=\"checkbox\" id=\"fontSizeChange\" (change)=\"onChange('size')\" />\n      </li>\n      <li>\n        <label for=\"bgcChange\">Background color change</label>\n        <input type=\"checkbox\" id=\"bgcChange\" (change)=\"onChange('bgcColor')\" />\n      </li>\n    </ul>\n\n    <!-- Change method name -->\n    <button (click)=\"onSetCurrentStyle()\">Change div Style</button>\n    ```\n\n2. 接著我們改寫 app.component.ts 中的 property name 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      color = false;\n      size = false;\n      bgcColor = false;\n      currentStyle: Record<string, string> = {};    // (1)\n\n      onChange(checkboxId: string) {\n        switch (checkboxId) {\n          case 'color':\n            this.color = !this.color;\n            break;\n          case 'size':\n            this.size = !this.size;\n            break;\n          case 'bgcColor':\n            this.bgcColor = !this.bgcColor;\n            break;\n          default:\n            break;\n        }\n      }\n\n      onSetCurrentStyle() {                        // (2)\n        this.currentStyle = {\n          'color':  this.color ? 'lightskyblue' : '',\n          'font-size': this.size ? '36px' : '',\n          'background-color': this.bgcColor? 'lightpink': ''\n        }\n      }\n    }\n    ```\n\n    - (1): 將原本的 currentClasses 改名為 currentStyle （因為已經將 `<div>` 重新使用 [ngStyle] 綁定過了）\n    - (2): 更改使用者點擊按鈕時處發的 method\n\n![img](https://i.imgur.com/JNULNN0.gif)\n\n在畫面中可以看到雖然將 `<div>` 重新使用 [ngStyle] 綁定過但是結果與使用 [ngClass] 一樣，唯一不同的是在 onSetCurrentStyle 中的操作改了，如果是要綁定 style 的話需要使用`以樣式名稱為 key，以樣式值為 value 的物件` 一樣在前幾天的 style binding 裡面有提到喔！\n\n\n# Displaying and updating properties with ngModel\n\n介紹完如何透過 [ngClass] 與 [ngStyle] 改變 HTML element 的樣式後，接著介紹如何使用 ngModel\n\nngModel directive 是用在顯示數據 property 與當用戶對被綁定的 HTML element 進行更改時同步更新 property， 一樣舉個例子吧\n\n1. 首先要使用 ngModel 必須要在 app.module.ts 中引用 `FormsModule` 並將他放在 `import` 當中，可能很多新手會覺得為什麼要放在這邊，沒關係之後再講解 Module 時會專門為大家講解\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { FormsModule } from '@angular/forms';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n      ],\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```\n\n2. 在 app.component.ts 中新增一個 property 用於綁定畫面中的 `<input>`\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      currentItem = '';\n    }\n    ```\n\n3. 在 app.component.html 中新增一個 `<input>` 並將他綁定\n\n    ```html\n    <!-- app.component.html -->\n\n    <label for=\"example-ngModel\">[(ngModel)]: </label>\n    <input [(ngModel)]=\"currentItem\" id=\"example-ngModel\">\n\n    <div>{{currentItem}}</div>\n    ```\n    \n![img](https://i.imgur.com/hIek2rn.gif)\n\n在畫面中可以看到當我們在 `<input>` 中輸入數值時，會同步的將 component 中的 property 更改。\n\n可能有人會問：阿這個跟 Two-way binding 有什麼不一樣？這個答案我可以很明確地告訴你，他們是一樣的，所以你也可以把它理解為在同一層中的 Two-way binidng，於是你也可以利用 property binding 與 event binding 達到相同的結果\n\n```html\n<input [currentItem]=\"currentItem\" (change)=\"onChnge($event)\" id=\"example-ngModel\">\n\n<div>{{currentItem}}</div>\n```\n\n有興趣的可以嘗試看看把他從 ngModel 改寫為 property binding 與 event binding 喔！\n\n\n# 結論\n\n本章中介紹了什麼是 attribute directive 與該怎使用，可以利用 ngClass 對 HTML 的 element 進行一個或多個的 CSS class 綁定，也可以使用 ngStyle 對 HTML 的 element 進行一個或多個的 Style 綁定，最後介紹的是 ngModel 的綁定，在使用他之前需要在 app.module.ts 的 imports 中引入 `FormsModule` 才可以使用，他的作用可以把它想像成是在同一層中的 Two-way binding，對於表單的控制非常好用，本章中使用了比較多例子，如果在嘗試的時候遇到問題也歡迎在底下留言。\n\n雖然本章的開頭提到 Angular 的預設有 attribute 與 structural directives 兩種，但礙於篇章長度的問題將它分為本篇的 attribute directive 與下一篇的 structural directive。\n\nstructural directive 的概念其實我們在前面的例子中多多少少都有用到一點，比如 `*ngFor` 或 `*ngIf` 等等的，主要的目的是用來改變 DOM 的結構與佈局，詳細的內容會在明天介紹，那我們就明天見吧！\n\n\n\n# Reference\n\n- [Angular.io - build in directives](https://angular.io/guide/built-in-directives)","source":"_posts/Angular/angular-13.md","raw":"---\ntitle: Day13. Built-in directives - attribute\ndate: 2021-09-13 10:54:04\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在介紹完 component 與 template 後，接著要來介紹什麼是 dierctive，可能在前面的章節中多多少少都有提到，但是可能都沒有詳細的講解過，也有遇過實際上已經有在使用了但卻不知道這個其實就是 directive，不過沒關係接下來會詳細的介紹什麼是 directive。\n\ndirective 是 Angular 中為了應用程序元素額外添加行為的 class，可以使用 Angular 內建的 directive 來管理 `form` 、`lists`、 `style` 和 `使用者看到的內容`。\n\n而 directive 有不同類性的用法，以下分為三種：\n\n1. Component: 帶有 template 的 directive，這種是最常見的 directive\n2. Attribute directive: 改變 element, component 或其他 directive 的外觀或行為的 directive\n3. Structureal directive: 通過添加或刪除 DOM element 來改變 DOM 的佈局\n\n\n![https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png](https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png)\n\n<!-- more -->\n\n# Built-in attribute directives\n\nattribute directive 是用來監聽和修改 HTML 的 element、attribute、property 和 component 的行為，比如 RouterModule 或 FormsModule 這類型的 NgModule，他都有定義自己的 attribute directive，而常見的的 attribute directive 有：\n\n- NgClass: 添加或刪除一組 css class\n- NgStyle: 添加或刪除一組 HTML style\n- NgModule: 像 HTML 的 `<form>` element 添加雙向數據綁定\n\n\n# Adding and removing classes with NgClass\n\n可以使用 ngClass 同時添加或刪除一個或多個 CSS class，而如果要添加或刪除一個 CSS class 則不要使用 ngClass，請使用 class binding。\n\n## Using NgClass with an expression\n\n要在設置樣式的 element 上添加 [ngClass] 並將一個表達式賦予給他，來舉個子吧\n```html\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n```\n\n在上面的例子中可以看到將一個`三元運算子`作為表達式賦予給 [ngClass]，所以當 `isSpecial` 為 true 時，就會在這個 `<div>` element 中套用名為 ` special` 的 CSS class 反之則不套用任何 class。\n\n## Using NgClass with a method\n\n除了將表達式賦予給 [ngClass] 之外，也可以與 component 中的 method 一起使用，舉個例子吧，希望透過畫面中三個 check box 來更換畫面中的字體或顏色。\n\n1. 在 app.component.html 中建立三個 chech box 與一個按鈕\n    ```html\n    <!-- app.component.html -->\n\n    <div [ngClass]=\"currentClasses\">\n      This div element CSS class is initial color, size and bgcColor\n    </div>\n\n    <ul>\n      <li>\n        <label for=\"colorChange\">Change color</label>\n        <input type=\"checkbox\" id=\"colorChange\" (change)=\"onChange('color')\" />\n      </li>\n      <li>\n        <label for=\"fontSizeChange\">Font size change</label>\n        <input type=\"checkbox\" id=\"fontSizeChange\" (change)=\"onChange('size')\" />\n      </li>\n      <li>\n        <label for=\"bgcChange\">Background color change</label>\n        <input type=\"checkbox\" id=\"bgcChange\" (change)=\"onChange('bgcColor')\" />\n      </li>\n    </ul>\n\n    <button (click)=\"onSetCurrentClasses()\">Change div CSS class</button>\n    ```\n\n    - (1): 在最上面添加一個 `<div>` 並將他使用 [ngClass]=\"currentClasses\"，透過 currentClasses 的內容決定要將幾個 CSS class 綁定在上面\n    - (2): 新增三個 check box 並將他們綁定一個 method，當使用者點擊時改變他們各自的狀態\n    - (3): 當使用者選擇好 check box 後，點擊按鈕觸發重新設置 currentClasses\n2. 在 app.component.ts 中新增 property 與 method\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      color = false;                                      // (1)\n      size = false;\n      bgcColor = false;\n      currentClasses = { color: false, size: false, bgcColor: false };\n\n      onChange(checkboxId: string) {                      // (2)\n        switch (checkboxId) {\n          case 'color':\n            this.color = !this.color;\n            break;\n          case 'size':\n            this.size = !this.size;\n            break;\n          case 'bgcColor':\n            this.bgcColor = !this.bgcColor;\n            break;\n          default:\n            break;\n        }\n      }\n\n      onSetCurrentClasses() {                             // (3)\n        this.currentClasses = {\n          color: this.color,\n          size: this.size, \n          bgcColor: this.bgcColor\n        }\n      }\n    }\n    ```\n\n    - (1): 新增每個 check box 所控制的 property，並新增 currentClasses 用於改變整體樣式\n    - (2): 新增當 check box 被點擊時觸發的 method\n    - (3): 新增當畫面中的 button 被點擊時觸發的 method\n3. 在 app.component.css 中新增三個 CSS class\n\n    ```css\n    .color {\n        color: lightskyblue;\n    }\n\n    .size {\n        font-size: 36px;\n    }\n\n    .bgcColor {\n        background-color: lightpink;\n    }\n    ```\n    \n![img](https://i.imgur.com/6gn4aw4.gif)\n\n在畫面中可以看到，當我們點選一個或多個 check box 時，會依照對應的名稱對 `<div>` 添加或刪除一個或多個 CSS class，當點擊其中一個 check box 先將他的對應的 property 變更狀態，等全部都變更好後，當使用者點擊了 change 的按鈕，會將 [ngClass] 所綁定的 object 進行更新從而更新 `<div>` 中的 CSS class。\n\n還記得為什麼綁定物件時可以更改 CSS class 的綁定嗎？在前幾篇的 class binding 中有提到，可以使用物件綁定，他的要求是 `key 為 class 名稱， value 為布林值（用於控制是否呈現）` 的這種型別的 object，忘記的可以回去複習一下喔！\n\n## Setting inline styles with NgStyle\n\n講完了 NgClass 後接著來介紹 NgStyle 的用法，他與 NgClass 差不多，唯一不同的是他是可以添加或刪除一個或多個 style，既然他們的使用方法差不多，那我們就以上面的例子，將上面的例子從 NgClass 更改為 NgStyle 吧。\n\n1. 首先先將 app.component.html 中顯示的 `<div>` 從 [ngClass] 更改為 [ngStyle] 並將綁定的名稱更改為 currentStyle，其他我們保持不變\n\n    ```html\n    <!-- app.component.html -->\n\n    <!-- Change [ngClass] to [ngStyle] -->\n    <div [ngStyle]=\"currentStyle\">\n      This div element style is initial color, size and bgcColor\n    </div>\n\n    <ul>\n      <li>\n        <label for=\"colorChange\">Change color</label>\n        <input type=\"checkbox\" id=\"colorChange\" (change)=\"onChange('color')\" />\n      </li>\n      <li>\n        <label for=\"fontSizeChange\">Font size change</label>\n        <input type=\"checkbox\" id=\"fontSizeChange\" (change)=\"onChange('size')\" />\n      </li>\n      <li>\n        <label for=\"bgcChange\">Background color change</label>\n        <input type=\"checkbox\" id=\"bgcChange\" (change)=\"onChange('bgcColor')\" />\n      </li>\n    </ul>\n\n    <!-- Change method name -->\n    <button (click)=\"onSetCurrentStyle()\">Change div Style</button>\n    ```\n\n2. 接著我們改寫 app.component.ts 中的 property name 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      color = false;\n      size = false;\n      bgcColor = false;\n      currentStyle: Record<string, string> = {};    // (1)\n\n      onChange(checkboxId: string) {\n        switch (checkboxId) {\n          case 'color':\n            this.color = !this.color;\n            break;\n          case 'size':\n            this.size = !this.size;\n            break;\n          case 'bgcColor':\n            this.bgcColor = !this.bgcColor;\n            break;\n          default:\n            break;\n        }\n      }\n\n      onSetCurrentStyle() {                        // (2)\n        this.currentStyle = {\n          'color':  this.color ? 'lightskyblue' : '',\n          'font-size': this.size ? '36px' : '',\n          'background-color': this.bgcColor? 'lightpink': ''\n        }\n      }\n    }\n    ```\n\n    - (1): 將原本的 currentClasses 改名為 currentStyle （因為已經將 `<div>` 重新使用 [ngStyle] 綁定過了）\n    - (2): 更改使用者點擊按鈕時處發的 method\n\n![img](https://i.imgur.com/JNULNN0.gif)\n\n在畫面中可以看到雖然將 `<div>` 重新使用 [ngStyle] 綁定過但是結果與使用 [ngClass] 一樣，唯一不同的是在 onSetCurrentStyle 中的操作改了，如果是要綁定 style 的話需要使用`以樣式名稱為 key，以樣式值為 value 的物件` 一樣在前幾天的 style binding 裡面有提到喔！\n\n\n# Displaying and updating properties with ngModel\n\n介紹完如何透過 [ngClass] 與 [ngStyle] 改變 HTML element 的樣式後，接著介紹如何使用 ngModel\n\nngModel directive 是用在顯示數據 property 與當用戶對被綁定的 HTML element 進行更改時同步更新 property， 一樣舉個例子吧\n\n1. 首先要使用 ngModel 必須要在 app.module.ts 中引用 `FormsModule` 並將他放在 `import` 當中，可能很多新手會覺得為什麼要放在這邊，沒關係之後再講解 Module 時會專門為大家講解\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { FormsModule } from '@angular/forms';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n      ],\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```\n\n2. 在 app.component.ts 中新增一個 property 用於綁定畫面中的 `<input>`\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      currentItem = '';\n    }\n    ```\n\n3. 在 app.component.html 中新增一個 `<input>` 並將他綁定\n\n    ```html\n    <!-- app.component.html -->\n\n    <label for=\"example-ngModel\">[(ngModel)]: </label>\n    <input [(ngModel)]=\"currentItem\" id=\"example-ngModel\">\n\n    <div>{{currentItem}}</div>\n    ```\n    \n![img](https://i.imgur.com/hIek2rn.gif)\n\n在畫面中可以看到當我們在 `<input>` 中輸入數值時，會同步的將 component 中的 property 更改。\n\n可能有人會問：阿這個跟 Two-way binding 有什麼不一樣？這個答案我可以很明確地告訴你，他們是一樣的，所以你也可以把它理解為在同一層中的 Two-way binidng，於是你也可以利用 property binding 與 event binding 達到相同的結果\n\n```html\n<input [currentItem]=\"currentItem\" (change)=\"onChnge($event)\" id=\"example-ngModel\">\n\n<div>{{currentItem}}</div>\n```\n\n有興趣的可以嘗試看看把他從 ngModel 改寫為 property binding 與 event binding 喔！\n\n\n# 結論\n\n本章中介紹了什麼是 attribute directive 與該怎使用，可以利用 ngClass 對 HTML 的 element 進行一個或多個的 CSS class 綁定，也可以使用 ngStyle 對 HTML 的 element 進行一個或多個的 Style 綁定，最後介紹的是 ngModel 的綁定，在使用他之前需要在 app.module.ts 的 imports 中引入 `FormsModule` 才可以使用，他的作用可以把它想像成是在同一層中的 Two-way binding，對於表單的控制非常好用，本章中使用了比較多例子，如果在嘗試的時候遇到問題也歡迎在底下留言。\n\n雖然本章的開頭提到 Angular 的預設有 attribute 與 structural directives 兩種，但礙於篇章長度的問題將它分為本篇的 attribute directive 與下一篇的 structural directive。\n\nstructural directive 的概念其實我們在前面的例子中多多少少都有用到一點，比如 `*ngFor` 或 `*ngIf` 等等的，主要的目的是用來改變 DOM 的結構與佈局，詳細的內容會在明天介紹，那我們就明天見吧！\n\n\n\n# Reference\n\n- [Angular.io - build in directives](https://angular.io/guide/built-in-directives)","slug":"Angular/angular-13","published":1,"updated":"2022-02-16T01:29:29.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdp000095w35vsq2lfm","content":"<p>在介紹完 component 與 template 後，接著要來介紹什麼是 dierctive，可能在前面的章節中多多少少都有提到，但是可能都沒有詳細的講解過，也有遇過實際上已經有在使用了但卻不知道這個其實就是 directive，不過沒關係接下來會詳細的介紹什麼是 directive。</p>\n<p>directive 是 Angular 中為了應用程序元素額外添加行為的 class，可以使用 Angular 內建的 directive 來管理 <code>form</code> 、<code>lists</code>、 <code>style</code> 和 <code>使用者看到的內容</code>。</p>\n<p>而 directive 有不同類性的用法，以下分為三種：</p>\n<ol>\n<li>Component: 帶有 template 的 directive，這種是最常見的 directive</li>\n<li>Attribute directive: 改變 element, component 或其他 directive 的外觀或行為的 directive</li>\n<li>Structureal directive: 通過添加或刪除 DOM element 來改變 DOM 的佈局</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Built-in-attribute-directives\"><a href=\"#Built-in-attribute-directives\" class=\"headerlink\" title=\"Built-in attribute directives\"></a>Built-in attribute directives</h1><p>attribute directive 是用來監聽和修改 HTML 的 element、attribute、property 和 component 的行為，比如 RouterModule 或 FormsModule 這類型的 NgModule，他都有定義自己的 attribute directive，而常見的的 attribute directive 有：</p>\n<ul>\n<li>NgClass: 添加或刪除一組 css class</li>\n<li>NgStyle: 添加或刪除一組 HTML style</li>\n<li>NgModule: 像 HTML 的 <code>&lt;form&gt;</code> element 添加雙向數據綁定</li>\n</ul>\n<h1 id=\"Adding-and-removing-classes-with-NgClass\"><a href=\"#Adding-and-removing-classes-with-NgClass\" class=\"headerlink\" title=\"Adding and removing classes with NgClass\"></a>Adding and removing classes with NgClass</h1><p>可以使用 ngClass 同時添加或刪除一個或多個 CSS class，而如果要添加或刪除一個 CSS class 則不要使用 ngClass，請使用 class binding。</p>\n<h2 id=\"Using-NgClass-with-an-expression\"><a href=\"#Using-NgClass-with-an-expression\" class=\"headerlink\" title=\"Using NgClass with an expression\"></a>Using NgClass with an expression</h2><p>要在設置樣式的 element 上添加 [ngClass] 並將一個表達式賦予給他，來舉個子吧</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;isSpecial ? &#x27;special&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>This div is special<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中可以看到將一個<code>三元運算子</code>作為表達式賦予給 [ngClass]，所以當 <code>isSpecial</code> 為 true 時，就會在這個 <code>&lt;div&gt;</code> element 中套用名為 <code> special</code> 的 CSS class 反之則不套用任何 class。</p>\n<h2 id=\"Using-NgClass-with-a-method\"><a href=\"#Using-NgClass-with-a-method\" class=\"headerlink\" title=\"Using NgClass with a method\"></a>Using NgClass with a method</h2><p>除了將表達式賦予給 [ngClass] 之外，也可以與 component 中的 method 一起使用，舉個例子吧，希望透過畫面中三個 check box 來更換畫面中的字體或顏色。</p>\n<ol>\n<li><p>在 app.component.html 中建立三個 chech box 與一個按鈕</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;currentClasses&quot;</span>&gt;</span></span><br><span class=\"line\">  This div element CSS class is initial color, size and bgcColor</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;colorChange&quot;</span>&gt;</span>Change color<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;colorChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;color&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span>&gt;</span>Font size change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;size&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;bgcChange&quot;</span>&gt;</span>Background color change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bgcChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;bgcColor&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSetCurrentClasses()&quot;</span>&gt;</span>Change div CSS class<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 在最上面添加一個 <code>&lt;div&gt;</code> 並將他使用 [ngClass]&#x3D;”currentClasses”，透過 currentClasses 的內容決定要將幾個 CSS class 綁定在上面</li>\n<li>(2): 新增三個 check box 並將他們綁定一個 method，當使用者點擊時改變他們各自的狀態</li>\n<li>(3): 當使用者選擇好 check box 後，點擊按鈕觸發重新設置 currentClasses</li>\n</ul>\n</li>\n<li><p>在 app.component.ts 中新增 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  color = <span class=\"literal\">false</span>;                                      <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  size = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  bgcColor = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  currentClasses = &#123; <span class=\"attr\">color</span>: <span class=\"literal\">false</span>, <span class=\"attr\">size</span>: <span class=\"literal\">false</span>, <span class=\"attr\">bgcColor</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onChange</span>(<span class=\"params\">checkboxId: <span class=\"built_in\">string</span></span>) &#123;                      <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (checkboxId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;color&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;size&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;bgcColor&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSetCurrentClasses</span>(<span class=\"params\"></span>) &#123;                             <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentClasses</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">color</span>,</span><br><span class=\"line\">      <span class=\"attr\">size</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">size</span>, </span><br><span class=\"line\">      <span class=\"attr\">bgcColor</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增每個 check box 所控制的 property，並新增 currentClasses 用於改變整體樣式</li>\n<li>(2): 新增當 check box 被點擊時觸發的 method</li>\n<li>(3): 新增當畫面中的 button 被點擊時觸發的 method</li>\n</ul>\n</li>\n<li><p>在 app.component.css 中新增三個 CSS class</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.color</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightskyblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.size</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bgcColor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/6gn4aw4.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們點選一個或多個 check box 時，會依照對應的名稱對 <code>&lt;div&gt;</code> 添加或刪除一個或多個 CSS class，當點擊其中一個 check box 先將他的對應的 property 變更狀態，等全部都變更好後，當使用者點擊了 change 的按鈕，會將 [ngClass] 所綁定的 object 進行更新從而更新 <code>&lt;div&gt;</code> 中的 CSS class。</p>\n<p>還記得為什麼綁定物件時可以更改 CSS class 的綁定嗎？在前幾篇的 class binding 中有提到，可以使用物件綁定，他的要求是 <code>key 為 class 名稱， value 為布林值（用於控制是否呈現）</code> 的這種型別的 object，忘記的可以回去複習一下喔！</p>\n<h2 id=\"Setting-inline-styles-with-NgStyle\"><a href=\"#Setting-inline-styles-with-NgStyle\" class=\"headerlink\" title=\"Setting inline styles with NgStyle\"></a>Setting inline styles with NgStyle</h2><p>講完了 NgClass 後接著來介紹 NgStyle 的用法，他與 NgClass 差不多，唯一不同的是他是可以添加或刪除一個或多個 style，既然他們的使用方法差不多，那我們就以上面的例子，將上面的例子從 NgClass 更改為 NgStyle 吧。</p>\n<ol>\n<li><p>首先先將 app.component.html 中顯示的 <code>&lt;div&gt;</code> 從 [ngClass] 更改為 [ngStyle] 並將綁定的名稱更改為 currentStyle，其他我們保持不變</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Change [ngClass] to [ngStyle] --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">&quot;currentStyle&quot;</span>&gt;</span></span><br><span class=\"line\">  This div element style is initial color, size and bgcColor</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;colorChange&quot;</span>&gt;</span>Change color<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;colorChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;color&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span>&gt;</span>Font size change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;size&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;bgcChange&quot;</span>&gt;</span>Background color change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bgcChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;bgcColor&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Change method name --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSetCurrentStyle()&quot;</span>&gt;</span>Change div Style<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著我們改寫 app.component.ts 中的 property name 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  color = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  size = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  bgcColor = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"attr\">currentStyle</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; = &#123;&#125;;    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onChange</span>(<span class=\"params\">checkboxId: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (checkboxId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;color&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;size&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;bgcColor&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSetCurrentStyle</span>(<span class=\"params\"></span>) &#123;                        <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentStyle</span> = &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;color&#x27;</span>:  <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> ? <span class=\"string\">&#x27;lightskyblue&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;font-size&#x27;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> ? <span class=\"string\">&#x27;36px&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;background-color&#x27;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span>? <span class=\"string\">&#x27;lightpink&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 將原本的 currentClasses 改名為 currentStyle （因為已經將 <code>&lt;div&gt;</code> 重新使用 [ngStyle] 綁定過了）</li>\n<li>(2): 更改使用者點擊按鈕時處發的 method</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/JNULNN0.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到雖然將 <code>&lt;div&gt;</code> 重新使用 [ngStyle] 綁定過但是結果與使用 [ngClass] 一樣，唯一不同的是在 onSetCurrentStyle 中的操作改了，如果是要綁定 style 的話需要使用<code>以樣式名稱為 key，以樣式值為 value 的物件</code> 一樣在前幾天的 style binding 裡面有提到喔！</p>\n<h1 id=\"Displaying-and-updating-properties-with-ngModel\"><a href=\"#Displaying-and-updating-properties-with-ngModel\" class=\"headerlink\" title=\"Displaying and updating properties with ngModel\"></a>Displaying and updating properties with ngModel</h1><p>介紹完如何透過 [ngClass] 與 [ngStyle] 改變 HTML element 的樣式後，接著介紹如何使用 ngModel</p>\n<p>ngModel directive 是用在顯示數據 property 與當用戶對被綁定的 HTML element 進行更改時同步更新 property， 一樣舉個例子吧</p>\n<ol>\n<li><p>首先要使用 ngModel 必須要在 app.module.ts 中引用 <code>FormsModule</code> 並將他放在 <code>import</code> 當中，可能很多新手會覺得為什麼要放在這邊，沒關係之後再講解 Module 時會專門為大家講解</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中新增一個 property 用於綁定畫面中的 <code>&lt;input&gt;</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  currentItem = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中新增一個 <code>&lt;input&gt;</code> 並將他綁定</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;example-ngModel&quot;</span>&gt;</span>[(ngModel)]: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;currentItem&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example-ngModel&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;currentItem&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/hIek2rn.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到當我們在 <code>&lt;input&gt;</code> 中輸入數值時，會同步的將 component 中的 property 更改。</p>\n<p>可能有人會問：阿這個跟 Two-way binding 有什麼不一樣？這個答案我可以很明確地告訴你，他們是一樣的，所以你也可以把它理解為在同一層中的 Two-way binidng，於是你也可以利用 property binding 與 event binding 達到相同的結果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> [<span class=\"attr\">currentItem</span>]=<span class=\"string\">&quot;currentItem&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChnge($event)&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example-ngModel&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;currentItem&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有興趣的可以嘗試看看把他從 ngModel 改寫為 property binding 與 event binding 喔！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 attribute directive 與該怎使用，可以利用 ngClass 對 HTML 的 element 進行一個或多個的 CSS class 綁定，也可以使用 ngStyle 對 HTML 的 element 進行一個或多個的 Style 綁定，最後介紹的是 ngModel 的綁定，在使用他之前需要在 app.module.ts 的 imports 中引入 <code>FormsModule</code> 才可以使用，他的作用可以把它想像成是在同一層中的 Two-way binding，對於表單的控制非常好用，本章中使用了比較多例子，如果在嘗試的時候遇到問題也歡迎在底下留言。</p>\n<p>雖然本章的開頭提到 Angular 的預設有 attribute 與 structural directives 兩種，但礙於篇章長度的問題將它分為本篇的 attribute directive 與下一篇的 structural directive。</p>\n<p>structural directive 的概念其實我們在前面的例子中多多少少都有用到一點，比如 <code>*ngFor</code> 或 <code>*ngIf</code> 等等的，主要的目的是用來改變 DOM 的結構與佈局，詳細的內容會在明天介紹，那我們就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/built-in-directives\">Angular.io - build in directives</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在介紹完 component 與 template 後，接著要來介紹什麼是 dierctive，可能在前面的章節中多多少少都有提到，但是可能都沒有詳細的講解過，也有遇過實際上已經有在使用了但卻不知道這個其實就是 directive，不過沒關係接下來會詳細的介紹什麼是 directive。</p>\n<p>directive 是 Angular 中為了應用程序元素額外添加行為的 class，可以使用 Angular 內建的 directive 來管理 <code>form</code> 、<code>lists</code>、 <code>style</code> 和 <code>使用者看到的內容</code>。</p>\n<p>而 directive 有不同類性的用法，以下分為三種：</p>\n<ol>\n<li>Component: 帶有 template 的 directive，這種是最常見的 directive</li>\n<li>Attribute directive: 改變 element, component 或其他 directive 的外觀或行為的 directive</li>\n<li>Structureal directive: 通過添加或刪除 DOM element 來改變 DOM 的佈局</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210807/20124767SxBTFn4QZA.png\"></p>","more":"<h1 id=\"Built-in-attribute-directives\"><a href=\"#Built-in-attribute-directives\" class=\"headerlink\" title=\"Built-in attribute directives\"></a>Built-in attribute directives</h1><p>attribute directive 是用來監聽和修改 HTML 的 element、attribute、property 和 component 的行為，比如 RouterModule 或 FormsModule 這類型的 NgModule，他都有定義自己的 attribute directive，而常見的的 attribute directive 有：</p>\n<ul>\n<li>NgClass: 添加或刪除一組 css class</li>\n<li>NgStyle: 添加或刪除一組 HTML style</li>\n<li>NgModule: 像 HTML 的 <code>&lt;form&gt;</code> element 添加雙向數據綁定</li>\n</ul>\n<h1 id=\"Adding-and-removing-classes-with-NgClass\"><a href=\"#Adding-and-removing-classes-with-NgClass\" class=\"headerlink\" title=\"Adding and removing classes with NgClass\"></a>Adding and removing classes with NgClass</h1><p>可以使用 ngClass 同時添加或刪除一個或多個 CSS class，而如果要添加或刪除一個 CSS class 則不要使用 ngClass，請使用 class binding。</p>\n<h2 id=\"Using-NgClass-with-an-expression\"><a href=\"#Using-NgClass-with-an-expression\" class=\"headerlink\" title=\"Using NgClass with an expression\"></a>Using NgClass with an expression</h2><p>要在設置樣式的 element 上添加 [ngClass] 並將一個表達式賦予給他，來舉個子吧</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;isSpecial ? &#x27;special&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>This div is special<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中可以看到將一個<code>三元運算子</code>作為表達式賦予給 [ngClass]，所以當 <code>isSpecial</code> 為 true 時，就會在這個 <code>&lt;div&gt;</code> element 中套用名為 <code> special</code> 的 CSS class 反之則不套用任何 class。</p>\n<h2 id=\"Using-NgClass-with-a-method\"><a href=\"#Using-NgClass-with-a-method\" class=\"headerlink\" title=\"Using NgClass with a method\"></a>Using NgClass with a method</h2><p>除了將表達式賦予給 [ngClass] 之外，也可以與 component 中的 method 一起使用，舉個例子吧，希望透過畫面中三個 check box 來更換畫面中的字體或顏色。</p>\n<ol>\n<li><p>在 app.component.html 中建立三個 chech box 與一個按鈕</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;currentClasses&quot;</span>&gt;</span></span><br><span class=\"line\">  This div element CSS class is initial color, size and bgcColor</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;colorChange&quot;</span>&gt;</span>Change color<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;colorChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;color&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span>&gt;</span>Font size change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;size&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;bgcChange&quot;</span>&gt;</span>Background color change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bgcChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;bgcColor&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSetCurrentClasses()&quot;</span>&gt;</span>Change div CSS class<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 在最上面添加一個 <code>&lt;div&gt;</code> 並將他使用 [ngClass]&#x3D;”currentClasses”，透過 currentClasses 的內容決定要將幾個 CSS class 綁定在上面</li>\n<li>(2): 新增三個 check box 並將他們綁定一個 method，當使用者點擊時改變他們各自的狀態</li>\n<li>(3): 當使用者選擇好 check box 後，點擊按鈕觸發重新設置 currentClasses</li>\n</ul>\n</li>\n<li><p>在 app.component.ts 中新增 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  color = <span class=\"literal\">false</span>;                                      <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  size = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  bgcColor = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  currentClasses = &#123; <span class=\"attr\">color</span>: <span class=\"literal\">false</span>, <span class=\"attr\">size</span>: <span class=\"literal\">false</span>, <span class=\"attr\">bgcColor</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onChange</span>(<span class=\"params\">checkboxId: <span class=\"built_in\">string</span></span>) &#123;                      <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (checkboxId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;color&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;size&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;bgcColor&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSetCurrentClasses</span>(<span class=\"params\"></span>) &#123;                             <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentClasses</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">color</span>,</span><br><span class=\"line\">      <span class=\"attr\">size</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">size</span>, </span><br><span class=\"line\">      <span class=\"attr\">bgcColor</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增每個 check box 所控制的 property，並新增 currentClasses 用於改變整體樣式</li>\n<li>(2): 新增當 check box 被點擊時觸發的 method</li>\n<li>(3): 新增當畫面中的 button 被點擊時觸發的 method</li>\n</ul>\n</li>\n<li><p>在 app.component.css 中新增三個 CSS class</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.color</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightskyblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.size</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bgcColor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/6gn4aw4.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們點選一個或多個 check box 時，會依照對應的名稱對 <code>&lt;div&gt;</code> 添加或刪除一個或多個 CSS class，當點擊其中一個 check box 先將他的對應的 property 變更狀態，等全部都變更好後，當使用者點擊了 change 的按鈕，會將 [ngClass] 所綁定的 object 進行更新從而更新 <code>&lt;div&gt;</code> 中的 CSS class。</p>\n<p>還記得為什麼綁定物件時可以更改 CSS class 的綁定嗎？在前幾篇的 class binding 中有提到，可以使用物件綁定，他的要求是 <code>key 為 class 名稱， value 為布林值（用於控制是否呈現）</code> 的這種型別的 object，忘記的可以回去複習一下喔！</p>\n<h2 id=\"Setting-inline-styles-with-NgStyle\"><a href=\"#Setting-inline-styles-with-NgStyle\" class=\"headerlink\" title=\"Setting inline styles with NgStyle\"></a>Setting inline styles with NgStyle</h2><p>講完了 NgClass 後接著來介紹 NgStyle 的用法，他與 NgClass 差不多，唯一不同的是他是可以添加或刪除一個或多個 style，既然他們的使用方法差不多，那我們就以上面的例子，將上面的例子從 NgClass 更改為 NgStyle 吧。</p>\n<ol>\n<li><p>首先先將 app.component.html 中顯示的 <code>&lt;div&gt;</code> 從 [ngClass] 更改為 [ngStyle] 並將綁定的名稱更改為 currentStyle，其他我們保持不變</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Change [ngClass] to [ngStyle] --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">&quot;currentStyle&quot;</span>&gt;</span></span><br><span class=\"line\">  This div element style is initial color, size and bgcColor</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;colorChange&quot;</span>&gt;</span>Change color<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;colorChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;color&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span>&gt;</span>Font size change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fontSizeChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;size&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;bgcChange&quot;</span>&gt;</span>Background color change<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bgcChange&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChange(&#x27;bgcColor&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Change method name --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSetCurrentStyle()&quot;</span>&gt;</span>Change div Style<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著我們改寫 app.component.ts 中的 property name 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  color = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  size = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  bgcColor = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"attr\">currentStyle</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; = &#123;&#125;;    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onChange</span>(<span class=\"params\">checkboxId: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (checkboxId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;color&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">color</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;size&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;bgcColor&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSetCurrentStyle</span>(<span class=\"params\"></span>) &#123;                        <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentStyle</span> = &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;color&#x27;</span>:  <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> ? <span class=\"string\">&#x27;lightskyblue&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;font-size&#x27;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> ? <span class=\"string\">&#x27;36px&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;background-color&#x27;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">bgcColor</span>? <span class=\"string\">&#x27;lightpink&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 將原本的 currentClasses 改名為 currentStyle （因為已經將 <code>&lt;div&gt;</code> 重新使用 [ngStyle] 綁定過了）</li>\n<li>(2): 更改使用者點擊按鈕時處發的 method</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/JNULNN0.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到雖然將 <code>&lt;div&gt;</code> 重新使用 [ngStyle] 綁定過但是結果與使用 [ngClass] 一樣，唯一不同的是在 onSetCurrentStyle 中的操作改了，如果是要綁定 style 的話需要使用<code>以樣式名稱為 key，以樣式值為 value 的物件</code> 一樣在前幾天的 style binding 裡面有提到喔！</p>\n<h1 id=\"Displaying-and-updating-properties-with-ngModel\"><a href=\"#Displaying-and-updating-properties-with-ngModel\" class=\"headerlink\" title=\"Displaying and updating properties with ngModel\"></a>Displaying and updating properties with ngModel</h1><p>介紹完如何透過 [ngClass] 與 [ngStyle] 改變 HTML element 的樣式後，接著介紹如何使用 ngModel</p>\n<p>ngModel directive 是用在顯示數據 property 與當用戶對被綁定的 HTML element 進行更改時同步更新 property， 一樣舉個例子吧</p>\n<ol>\n<li><p>首先要使用 ngModel 必須要在 app.module.ts 中引用 <code>FormsModule</code> 並將他放在 <code>import</code> 當中，可能很多新手會覺得為什麼要放在這邊，沒關係之後再講解 Module 時會專門為大家講解</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中新增一個 property 用於綁定畫面中的 <code>&lt;input&gt;</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  currentItem = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中新增一個 <code>&lt;input&gt;</code> 並將他綁定</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;example-ngModel&quot;</span>&gt;</span>[(ngModel)]: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;currentItem&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example-ngModel&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;currentItem&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/hIek2rn.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到當我們在 <code>&lt;input&gt;</code> 中輸入數值時，會同步的將 component 中的 property 更改。</p>\n<p>可能有人會問：阿這個跟 Two-way binding 有什麼不一樣？這個答案我可以很明確地告訴你，他們是一樣的，所以你也可以把它理解為在同一層中的 Two-way binidng，於是你也可以利用 property binding 與 event binding 達到相同的結果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> [<span class=\"attr\">currentItem</span>]=<span class=\"string\">&quot;currentItem&quot;</span> (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;onChnge($event)&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example-ngModel&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;currentItem&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有興趣的可以嘗試看看把他從 ngModel 改寫為 property binding 與 event binding 喔！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 attribute directive 與該怎使用，可以利用 ngClass 對 HTML 的 element 進行一個或多個的 CSS class 綁定，也可以使用 ngStyle 對 HTML 的 element 進行一個或多個的 Style 綁定，最後介紹的是 ngModel 的綁定，在使用他之前需要在 app.module.ts 的 imports 中引入 <code>FormsModule</code> 才可以使用，他的作用可以把它想像成是在同一層中的 Two-way binding，對於表單的控制非常好用，本章中使用了比較多例子，如果在嘗試的時候遇到問題也歡迎在底下留言。</p>\n<p>雖然本章的開頭提到 Angular 的預設有 attribute 與 structural directives 兩種，但礙於篇章長度的問題將它分為本篇的 attribute directive 與下一篇的 structural directive。</p>\n<p>structural directive 的概念其實我們在前面的例子中多多少少都有用到一點，比如 <code>*ngFor</code> 或 <code>*ngIf</code> 等等的，主要的目的是用來改變 DOM 的結構與佈局，詳細的內容會在明天介紹，那我們就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/built-in-directives\">Angular.io - build in directives</a></li>\n</ul>"},{"title":"Day14. Built-in directives - structural","date":"2021-09-14T01:55:45.000Z","_content":"\n在上一章中介紹了 attribute directive 的用法，接著要來介紹另一種 Angular 中內建的 directive 那就是 sturctural directive。\n\n它的用途主要是用來`改變 DOM 的結構`，他會塑造或重構 DOM 的結構，通常是添加、刪除和操作他所附加的 element，本章中將會介紹介紹最常見的三種 structural directive : \n\n1. **NgIf**: 有條件的從 tempate 裝創建或處置 sub-template，就跟 javascript 的 if 一樣，當滿足某個條件時顯示、隱藏或操作一個新的 sub-template。\n2. **NgFor**: 為列表中的每個項目重複一個節點，和 javascript 的 for loop 一樣，利用迭代的方式創建多個 DOM 的 node。\n3. **NgSwitch**: 一組在各個 view 中切換的指令，簡單來說和 javascript 的 switch case 一樣，接收到各種不同的 case 而顯示對應的 view\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png)\n\n<!-- more -->\n\n# Adding or removing an element with NgIf\n\n可以利用 NgIf directive 為宿主 element 添加或刪除 element，簡單來說當 NgIf 為 false 時從 DOM 中移除一個 element 與他的所有子層並且將它所使用到的所有 component 從內存中釋放，反之會新增一個的 element，來舉一個簡單的例子，當我們點擊畫面中的按鈕時會將 child component 顯示出來。\n\n1. 在 app.component.ts 中新增一個 boolean 的 property 用於決定是否顯示 child.component，與一個 method 用來改變這個 property 的狀態\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      isActive = false;\n\n      onClick() {\n        this.isActive = !this.isActive;\n      }\n    }\n    ```\n\n2. 在 app.component.html 中引用 child.component 的 selector 並使用 `*ngIf`來控制是否顯示他\n\n    ```html\n    <!-- app.component.html -->\n\n    <app-child *ngIf=\"isActive\"></app-child>\n\n    <button (click)=\"onClick()\">{{ isActive ? 'not display' : 'display' }}</button>\n    ```\n    \n![img](https://i.imgur.com/vj1CMnh.gif)\n\n在畫面中可以看到當我們點擊了畫面中的按鈕時，會更改 isActive 的狀態，如果 *ngIf 為 true 的話則會將 child.component 顯示出來，反之會在 DOM 中將他移除掉。\n\n而要注意如果要使用 structural directive 需要在前面都加上`米字號（*）`作為前綴字喔！\n\n## NgIf and NgIfElse\n\n既然提到了 if 不免俗的也要介紹 else 畢竟他們通常是一組出現的，他與 javascript 的規則一樣，當 不滿足 if 中的表達式時就會進到 else 中，舉個例子吧\n\n1.  保持上一個例子的 app.component.ts 內容\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      isActive = false;\n\n      onClick() {\n        this.isActive = !this.isActive;\n      }\n    }\n    ```\n\n2. 要把 app.component.ts 中的內容稍微改一下\n\n    ```html\n    <!-- app.component.html -->\n\n    <app-child-1 *ngIf=\"isActive; else otherTemplate\"></app-child-1>\n\n    <ng-template #otherTemplate>\n        <app-child-2></app-child-2>\n    </ng-template>\n\n    <button (click)=\"onClick()\">{{ isActive ? 'not display' : 'display' }}</button>\n    ```\n    \n![img](https://i.imgur.com/5rxtRL1.gif)\n\n在畫面中可以看到，當我們更改了 isActive 的狀態時，在畫面中所呈現的 component 也會不一樣，還記得在 template variable 中提到的 `哈希符號 #` 嗎，這邊可以把它看成當 *ngIf 為 true 時會顯示 `<app-child-1>` 這個 component，而當為 false 時就會顯示 `<ng-template>` 所包住的 `<app-child-2>`，記得當要使用 `NgIfElse` 時需要在綁定的 property 或表達式後面加上`分號（；）`喔！\n\n\n\n# Listing items with NgFor\n\n在前幾天我們介紹 Text interpolation 時就有使用到 NgFor 的技巧，他就是利用迭代的方式將 component 中 arr 型態的 property 的內容一一呈現在畫面中。\n\n```html\n<div *ngFor=\"let item of items\">{{item.name}}</div>\n```\n\n在 *ngFor 後面的字串表達式 `let item of items`， Angular 會對他做以下的處理：\n\n- 講 items 陣列中的每一個 item 儲存在`本地項目循環的變量(使用 let 宣告個變量)`中\n- 使每個 item 可用於每次迭代的 template\n- 將 `let item of items` 轉換成圍繞宿主 element 的 <ng-template>\n- 對 list 中的每一個 item 重複 <ng-template>\n\n## Local variables\n\n了解了 *ngFor 與用法後，這邊要介紹一些在使用 *ngFor 時特別好用的技巧，其實在使用 *ngFor 時他不只會將陣列中的值存在本地變量中，你還可以儲存別的東西到別的變量中：\n\n- **index**: number: 可迭代的 item 中當前的索引值，簡單來說就是 javascript 中 array 的 index\n- **count**: number: 可迭代的長度，等於 javascript 中的 array.length\n- **first**: boolean: 當 item 是整個 array 中第一個的時候為 true\n- **last**: boolean: 當 item 是整個 array 中最後一個的時候為 true\n- **even**: boolean: 當 item 的 index 是偶數時為 true\n- **odd**: boolean: 當 item 的 index 是基數時為 true\n\n可能你會想說，啊這些有什麼用？ 這可是非常好用的啊！\n\n當你在開發專案時，一個列表中可能會需要在他的最後一行加上一個 `+` 的符號用於新增內容，或對偶數的 item 顯示不同顏色等等，這邊來搭配著前幾天講的內容做一個小小的例子：\n\n1. 在 app.component.ts 中新增一個 Heros 裡面裝著所有英雄的名稱，與兩個 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      isShowAddHero!: boolean;                    // (1)\n\n      Heros = [                                   // (2)\n        { id: 11, name: 'Dr Nice' },\n        { id: 12, name: 'Narco' },\n        { id: 13, name: 'Bombasto' },\n        { id: 14, name: 'Celeritas' },\n        { id: 15, name: 'Magneta' },\n        { id: 16, name: 'RubberMan' },\n        { id: 17, name: 'Dynama' },\n        { id: 18, name: 'Dr IQ' },\n        { id: 19, name: 'Magma' },\n        { id: 20, name: 'Tornado' },\n      ];\n\n      onOpenAddHero() {                          // (3)\n        this.isShowAddHero = true;\n      }\n\n      onAddHero(heroName: string) {              // (4)\n        this.Heros.push({ id: Math.random(), name: heroName })\n        this.isShowAddHero = false;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於決定是否要開啟新增 hero 的介面\n    - (2): 新增英雄列表\n    - (3): 新增一個 method 當使用者點擊按鈕時變更 isShowAddHero 狀態，用於打開新增 hero 的介面\n    - (4): 新增一個 method 當使用者點擊新增 hero 介面的按鈕，將使用者新增的 hero 名稱 push 進英雄列表並將介面關閉。\n2. 在 app.component.html 中新增內容\n\n    ```html\n    <!-- app.component.html -->\n\n    <h2 class=\"title\">Hero List</h2>\n\n    <div class=\"heroList\" *ngFor=\"let hero of Heros; last as isLast; odd as isOdd\">\n        <div class=\"heroItem\" [ngClass]=\"isOdd ? 'oddClass' : ''\">\n            {{hero.name}}\n            <span *ngIf=\"isLast\">\n                <button (click)=\"onOpenAddHero()\" class=\"openBtn\">+</button>\n            </span>\n        </div>\n    </div>\n\n    <div *ngIf=\"isShowAddHero\" class=\"addContent\">\n        <input type=\"text\" #hero>\n        <button (click)=\"onAddHero(hero.value)\">Add hero</button>\n    </div>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png](https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png)    \n\n這邊我們詳細的介紹一下，你會看到很多以前都介紹過的內容：\n\n1. 使用 *ngFor 將 component 中的英雄列表顯示在畫面中\n2. 使用 `last as isLast` 來獲得最後一項\n3. 使用 `odd as isOdd` 來獲得偶數項\n4. 透過 [ngClass] 動態的利用 `isOdd` 決定是否要多綁定一個 CSS class\n5. 使用 Text interpolation 將 hero 名稱顯示在畫面中\n6. 使用 `*ngIf` 判斷是否為最後一項，用於決定是否顯示新增英雄的按鈕\n7. 在 `<button>+</button>` 中使用 event binding 綁定 component 中的 method\n8. 在下方的 `<div>` 利用 *ngIf 決定是否要顯示在畫面上\n9. 在 `<input>` 中設置為 template variable 讓其他地方的 element 獲得他的數據\n10. 在 `<button>Add hero</button>` 中使用 event binding 綁定 component 中的 method 並從 `<input>` 中透過 template variable 拿到數據做為參數\n\n![img](https://i.imgur.com/2T94FN3.gif)\n\n在畫面中可以看到，列表中的偶數部分因為符合 `[ngClass]=\"isOdd ? 'oddClass' : ''\"` 所以多添加了一個變成藍色的 CSS class，而最下面的 item 因為符合 `*ngIf=\"isLast\"` 所以只有他有 + 的按鈕，而當點擊了＋後符合 `*ngIf=\"isShowAddHero\"` 所以會打開新增 hero 的介面，當按下新增 hero 的介面的按鈕後將輸入在 `<input>` 的內容 push 近英雄表單中，而＋會一直保持出現在最後一個 item 的右邊。\n\n這個例子用了很多之前介紹的技巧，如果有看不懂的建議回去複習一下，真的有問題的話有歡迎在下方留言喔！\n\n\n# Hosting a directive without a DOM element\n\n在 Angular 中有一個特別的 HTML element，他就是 `<ng-container>`，之所以會說他特別是因為他是一個不會干擾樣式或佈局的分組元素，因為 Angular 不會將他放進 DOM 裏面，所以當沒有單個 element 可以乘載 directive 時，就可以使用這個特別的 `<ng-container>`，通常都會將它搭配 `structural directive` 使用，舉個例子吧\n\n```html\n<p>\n  I turned the corner\n  <ng-container *ngIf=\"hero\">\n    and saw {{hero.name}}. I waved\n  </ng-container>\n  and continued on my way.\n</p>\n```\n\n上面例子中可以看到，我們希望在 `<p>` 的段落中透過使用 `*ngIf` 決定是否要顯示英雄名稱，如果這時候我們使用其他的 HTML element 來乘載 `*ngIf` 的話，會造成畫面樣式跟佈局的錯誤，所以就可以使用 `<ng-container>`，因為他不會被放進 DOM 裏面，作為乘載 structural directive 再好不過。\n\n提到了 `<ng-container>` 不免俗的要來介紹一下他跟 `<ng-template>` 的差別：\n\n- `<ng-template>` : 是用於呈現 HTML 的 Angular element，他不會直接顯示在畫面上，需要透過 structural directive 控制它是否要顯示在畫面中，如果沒有被顯示在畫面中時會以`註釋`的形式呈現在 DOM 中，比較常會用在寫結構性變化的時候，比如\n\n    ```html\n    <div *ngIf=\"show; else notshow\">\n       當 show = true 時，顯示這些內容\n    </div>\n    <ng-template #notshow>\n       當 show = false 時，顯示這些內容\n    </ng-template>\n    ```\n\n- `<ng-container>` : 他是 Angular 解析器識別的語法 element，他不是 directive, component, class 或 interface，他更像是 javascript 的花括號，常被用在不想要多寫不必要的 HTML element 時但又想將一個區塊的 HTML 包起來處理，就會使用到 `<ng-container>` 常用來做 structural directive 的載體。\n\n    ```html\n    <p>\n      I turned the corner\n      <ng-container *ngIf=\"hero\">\n        and saw {{hero.name}}. I waved\n      </ng-container>\n      and continued on my way.\n    </p>\n    ```\n\n\n# Switching cases with NgSwitch\n\n最後要來介紹最後一種常見的 structural directive 那就是 `NgSwitch`，他其實與 Javascript 的 switch case 一樣，NgSwitch 會根據 switch 跳健從幾個可能的元素中顯示其中一個，Angular 只會將符合條件的元素放進 DOM 中，而 NgSwitch 是由三種 directive 組成的：\n\n- **NgSwitch** : 一個 attribute directive，\n- **NgSwitchCase**：structural directive，當他的綁定值等於 switch 的值時將其底下的 element 添加到 DOM 中，當他不等於綁定值時刪除他的綁定值。\n- **NgSwitchDefault**：structural directive，當沒有符合任何一個 NgSwitchCase 的值時會將其底下的 element 加入到 DOM 中\n\n一樣舉個例子\n\n1. 首先先在 app.component.ts 中新增一個 property 與 method，用於改變 property 狀態與接收 event\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      showArea = 0;\n\n      onClick(number: number) {\n        switch (number) {\n          case 1:\n            this.showArea = 1;\n            break;\n          case 2:\n            this.showArea = 2;\n            break;\n          case 3:\n            this.showArea = 3;\n            break;\n          default:\n            this.showArea = 0;\n            break;\n        }\n      }\n    }\n    ```\n\n2. 在 app.component.html 中新增三個 `<button>` 用來讓使用者點擊要顯示哪一個內容，並在下方使用 NgSwitch 來判斷使用者的選項\n\n    ```html\n    <!-- app.component.html -->\n\n    <ul>\n        <li>\n            <label>Display number-1 area: </label>\n            <button (click)=\"onClick(1)\">Area 1</button>\n        </li>\n        <li>\n            <label>Display number-2 area: </label>\n            <button (click)=\"onClick(2)\">Area 2</button>\n        </li>\n        <li>\n            <label>Display number-3 area: </label>\n            <button (click)=\"onClick(3)\">Area 3</button>\n        </li>\n        <li>\n            <label>Display default area: </label>\n            <button (click)=\"onClick(99)\">default</button>\n        </li>\n    </ul>\n\n    <div [ngSwitch]=\"showArea\">\n        <div *ngSwitchCase=\"1\">\n            <h2>This is area 1</h2>\n            <p>Hello world</p>\n        </div>\n        <div *ngSwitchCase=\"2\">\n            <h2>This is area 2</h2>\n            <p>Learning Angular</p>\n        </div>\n        <div *ngSwitchCase=\"3\">\n            <h2>This is area 3</h2>\n            <p>Know how to use ngSwitch</p>\n        </div>\n        <div *ngSwitchDefault>\n            <h2>This is default area</h2>\n            <p>Please select a checkbox</p>\n        </div>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/0HMIqXy.gif)\n\n在畫面中可以看到當我們點擊畫面中的不同按鈕時，會改變 showArea 的值，進而改變下方顯示的區域內容，我特意在 html 與 ts 檔中都有使用 switch case 的語法，可以互相比對一下他們的用法，基本上都是差不多的，所以等於說只要會 javascript 的 switch case 語法就同時也學會了 ngSwitch！\n\n# 結論\n\n本章中介紹了常見的 structural directive 與他們各自的用法，其實 structural directive 的使用方法基本上都跟 Javascript 類似，所以等於說之前知道 Javascript 的 `if else`, `for loop`, `switch case` 的用法的話這一章會學得非常快，不過要注意的是 `<ng-container>` 與 `<ng-template>` 的差別與使用場景，除此之外其他的應該都相對簡單。\n\n雖然本章介紹了常見的內建 structural directive，不過再開發專案時一定會遇到內建 structural directive 無法處理的問題，這時候就跟 pipe 一樣需要客製化了，下一章將會介紹如何客製化自己的 attribute directive 用於處理內建 attribute directive 無法處理的問題，那我們就明天見吧\n\n# Reference\n\n- [Angular.io - build uin directive](https://angular.io/guide/built-in-directives)\n- [Angular.io - NgIf](https://angular.io/api/common/NgIf)\n- [Angular.io - NgFor](https://angular.io/api/common/NgForOf#description)\n- [ngTemplate VS ngContainer](https://forum.angular.tw/t/topic/1788)","source":"_posts/Angular/angular-14.md","raw":"---\ntitle: Day14. Built-in directives - structural\ndate: 2021-09-14 09:55:45\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一章中介紹了 attribute directive 的用法，接著要來介紹另一種 Angular 中內建的 directive 那就是 sturctural directive。\n\n它的用途主要是用來`改變 DOM 的結構`，他會塑造或重構 DOM 的結構，通常是添加、刪除和操作他所附加的 element，本章中將會介紹介紹最常見的三種 structural directive : \n\n1. **NgIf**: 有條件的從 tempate 裝創建或處置 sub-template，就跟 javascript 的 if 一樣，當滿足某個條件時顯示、隱藏或操作一個新的 sub-template。\n2. **NgFor**: 為列表中的每個項目重複一個節點，和 javascript 的 for loop 一樣，利用迭代的方式創建多個 DOM 的 node。\n3. **NgSwitch**: 一組在各個 view 中切換的指令，簡單來說和 javascript 的 switch case 一樣，接收到各種不同的 case 而顯示對應的 view\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png)\n\n<!-- more -->\n\n# Adding or removing an element with NgIf\n\n可以利用 NgIf directive 為宿主 element 添加或刪除 element，簡單來說當 NgIf 為 false 時從 DOM 中移除一個 element 與他的所有子層並且將它所使用到的所有 component 從內存中釋放，反之會新增一個的 element，來舉一個簡單的例子，當我們點擊畫面中的按鈕時會將 child component 顯示出來。\n\n1. 在 app.component.ts 中新增一個 boolean 的 property 用於決定是否顯示 child.component，與一個 method 用來改變這個 property 的狀態\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      isActive = false;\n\n      onClick() {\n        this.isActive = !this.isActive;\n      }\n    }\n    ```\n\n2. 在 app.component.html 中引用 child.component 的 selector 並使用 `*ngIf`來控制是否顯示他\n\n    ```html\n    <!-- app.component.html -->\n\n    <app-child *ngIf=\"isActive\"></app-child>\n\n    <button (click)=\"onClick()\">{{ isActive ? 'not display' : 'display' }}</button>\n    ```\n    \n![img](https://i.imgur.com/vj1CMnh.gif)\n\n在畫面中可以看到當我們點擊了畫面中的按鈕時，會更改 isActive 的狀態，如果 *ngIf 為 true 的話則會將 child.component 顯示出來，反之會在 DOM 中將他移除掉。\n\n而要注意如果要使用 structural directive 需要在前面都加上`米字號（*）`作為前綴字喔！\n\n## NgIf and NgIfElse\n\n既然提到了 if 不免俗的也要介紹 else 畢竟他們通常是一組出現的，他與 javascript 的規則一樣，當 不滿足 if 中的表達式時就會進到 else 中，舉個例子吧\n\n1.  保持上一個例子的 app.component.ts 內容\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      isActive = false;\n\n      onClick() {\n        this.isActive = !this.isActive;\n      }\n    }\n    ```\n\n2. 要把 app.component.ts 中的內容稍微改一下\n\n    ```html\n    <!-- app.component.html -->\n\n    <app-child-1 *ngIf=\"isActive; else otherTemplate\"></app-child-1>\n\n    <ng-template #otherTemplate>\n        <app-child-2></app-child-2>\n    </ng-template>\n\n    <button (click)=\"onClick()\">{{ isActive ? 'not display' : 'display' }}</button>\n    ```\n    \n![img](https://i.imgur.com/5rxtRL1.gif)\n\n在畫面中可以看到，當我們更改了 isActive 的狀態時，在畫面中所呈現的 component 也會不一樣，還記得在 template variable 中提到的 `哈希符號 #` 嗎，這邊可以把它看成當 *ngIf 為 true 時會顯示 `<app-child-1>` 這個 component，而當為 false 時就會顯示 `<ng-template>` 所包住的 `<app-child-2>`，記得當要使用 `NgIfElse` 時需要在綁定的 property 或表達式後面加上`分號（；）`喔！\n\n\n\n# Listing items with NgFor\n\n在前幾天我們介紹 Text interpolation 時就有使用到 NgFor 的技巧，他就是利用迭代的方式將 component 中 arr 型態的 property 的內容一一呈現在畫面中。\n\n```html\n<div *ngFor=\"let item of items\">{{item.name}}</div>\n```\n\n在 *ngFor 後面的字串表達式 `let item of items`， Angular 會對他做以下的處理：\n\n- 講 items 陣列中的每一個 item 儲存在`本地項目循環的變量(使用 let 宣告個變量)`中\n- 使每個 item 可用於每次迭代的 template\n- 將 `let item of items` 轉換成圍繞宿主 element 的 <ng-template>\n- 對 list 中的每一個 item 重複 <ng-template>\n\n## Local variables\n\n了解了 *ngFor 與用法後，這邊要介紹一些在使用 *ngFor 時特別好用的技巧，其實在使用 *ngFor 時他不只會將陣列中的值存在本地變量中，你還可以儲存別的東西到別的變量中：\n\n- **index**: number: 可迭代的 item 中當前的索引值，簡單來說就是 javascript 中 array 的 index\n- **count**: number: 可迭代的長度，等於 javascript 中的 array.length\n- **first**: boolean: 當 item 是整個 array 中第一個的時候為 true\n- **last**: boolean: 當 item 是整個 array 中最後一個的時候為 true\n- **even**: boolean: 當 item 的 index 是偶數時為 true\n- **odd**: boolean: 當 item 的 index 是基數時為 true\n\n可能你會想說，啊這些有什麼用？ 這可是非常好用的啊！\n\n當你在開發專案時，一個列表中可能會需要在他的最後一行加上一個 `+` 的符號用於新增內容，或對偶數的 item 顯示不同顏色等等，這邊來搭配著前幾天講的內容做一個小小的例子：\n\n1. 在 app.component.ts 中新增一個 Heros 裡面裝著所有英雄的名稱，與兩個 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      isShowAddHero!: boolean;                    // (1)\n\n      Heros = [                                   // (2)\n        { id: 11, name: 'Dr Nice' },\n        { id: 12, name: 'Narco' },\n        { id: 13, name: 'Bombasto' },\n        { id: 14, name: 'Celeritas' },\n        { id: 15, name: 'Magneta' },\n        { id: 16, name: 'RubberMan' },\n        { id: 17, name: 'Dynama' },\n        { id: 18, name: 'Dr IQ' },\n        { id: 19, name: 'Magma' },\n        { id: 20, name: 'Tornado' },\n      ];\n\n      onOpenAddHero() {                          // (3)\n        this.isShowAddHero = true;\n      }\n\n      onAddHero(heroName: string) {              // (4)\n        this.Heros.push({ id: Math.random(), name: heroName })\n        this.isShowAddHero = false;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於決定是否要開啟新增 hero 的介面\n    - (2): 新增英雄列表\n    - (3): 新增一個 method 當使用者點擊按鈕時變更 isShowAddHero 狀態，用於打開新增 hero 的介面\n    - (4): 新增一個 method 當使用者點擊新增 hero 介面的按鈕，將使用者新增的 hero 名稱 push 進英雄列表並將介面關閉。\n2. 在 app.component.html 中新增內容\n\n    ```html\n    <!-- app.component.html -->\n\n    <h2 class=\"title\">Hero List</h2>\n\n    <div class=\"heroList\" *ngFor=\"let hero of Heros; last as isLast; odd as isOdd\">\n        <div class=\"heroItem\" [ngClass]=\"isOdd ? 'oddClass' : ''\">\n            {{hero.name}}\n            <span *ngIf=\"isLast\">\n                <button (click)=\"onOpenAddHero()\" class=\"openBtn\">+</button>\n            </span>\n        </div>\n    </div>\n\n    <div *ngIf=\"isShowAddHero\" class=\"addContent\">\n        <input type=\"text\" #hero>\n        <button (click)=\"onAddHero(hero.value)\">Add hero</button>\n    </div>\n    ```\n![https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png](https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png)    \n\n這邊我們詳細的介紹一下，你會看到很多以前都介紹過的內容：\n\n1. 使用 *ngFor 將 component 中的英雄列表顯示在畫面中\n2. 使用 `last as isLast` 來獲得最後一項\n3. 使用 `odd as isOdd` 來獲得偶數項\n4. 透過 [ngClass] 動態的利用 `isOdd` 決定是否要多綁定一個 CSS class\n5. 使用 Text interpolation 將 hero 名稱顯示在畫面中\n6. 使用 `*ngIf` 判斷是否為最後一項，用於決定是否顯示新增英雄的按鈕\n7. 在 `<button>+</button>` 中使用 event binding 綁定 component 中的 method\n8. 在下方的 `<div>` 利用 *ngIf 決定是否要顯示在畫面上\n9. 在 `<input>` 中設置為 template variable 讓其他地方的 element 獲得他的數據\n10. 在 `<button>Add hero</button>` 中使用 event binding 綁定 component 中的 method 並從 `<input>` 中透過 template variable 拿到數據做為參數\n\n![img](https://i.imgur.com/2T94FN3.gif)\n\n在畫面中可以看到，列表中的偶數部分因為符合 `[ngClass]=\"isOdd ? 'oddClass' : ''\"` 所以多添加了一個變成藍色的 CSS class，而最下面的 item 因為符合 `*ngIf=\"isLast\"` 所以只有他有 + 的按鈕，而當點擊了＋後符合 `*ngIf=\"isShowAddHero\"` 所以會打開新增 hero 的介面，當按下新增 hero 的介面的按鈕後將輸入在 `<input>` 的內容 push 近英雄表單中，而＋會一直保持出現在最後一個 item 的右邊。\n\n這個例子用了很多之前介紹的技巧，如果有看不懂的建議回去複習一下，真的有問題的話有歡迎在下方留言喔！\n\n\n# Hosting a directive without a DOM element\n\n在 Angular 中有一個特別的 HTML element，他就是 `<ng-container>`，之所以會說他特別是因為他是一個不會干擾樣式或佈局的分組元素，因為 Angular 不會將他放進 DOM 裏面，所以當沒有單個 element 可以乘載 directive 時，就可以使用這個特別的 `<ng-container>`，通常都會將它搭配 `structural directive` 使用，舉個例子吧\n\n```html\n<p>\n  I turned the corner\n  <ng-container *ngIf=\"hero\">\n    and saw {{hero.name}}. I waved\n  </ng-container>\n  and continued on my way.\n</p>\n```\n\n上面例子中可以看到，我們希望在 `<p>` 的段落中透過使用 `*ngIf` 決定是否要顯示英雄名稱，如果這時候我們使用其他的 HTML element 來乘載 `*ngIf` 的話，會造成畫面樣式跟佈局的錯誤，所以就可以使用 `<ng-container>`，因為他不會被放進 DOM 裏面，作為乘載 structural directive 再好不過。\n\n提到了 `<ng-container>` 不免俗的要來介紹一下他跟 `<ng-template>` 的差別：\n\n- `<ng-template>` : 是用於呈現 HTML 的 Angular element，他不會直接顯示在畫面上，需要透過 structural directive 控制它是否要顯示在畫面中，如果沒有被顯示在畫面中時會以`註釋`的形式呈現在 DOM 中，比較常會用在寫結構性變化的時候，比如\n\n    ```html\n    <div *ngIf=\"show; else notshow\">\n       當 show = true 時，顯示這些內容\n    </div>\n    <ng-template #notshow>\n       當 show = false 時，顯示這些內容\n    </ng-template>\n    ```\n\n- `<ng-container>` : 他是 Angular 解析器識別的語法 element，他不是 directive, component, class 或 interface，他更像是 javascript 的花括號，常被用在不想要多寫不必要的 HTML element 時但又想將一個區塊的 HTML 包起來處理，就會使用到 `<ng-container>` 常用來做 structural directive 的載體。\n\n    ```html\n    <p>\n      I turned the corner\n      <ng-container *ngIf=\"hero\">\n        and saw {{hero.name}}. I waved\n      </ng-container>\n      and continued on my way.\n    </p>\n    ```\n\n\n# Switching cases with NgSwitch\n\n最後要來介紹最後一種常見的 structural directive 那就是 `NgSwitch`，他其實與 Javascript 的 switch case 一樣，NgSwitch 會根據 switch 跳健從幾個可能的元素中顯示其中一個，Angular 只會將符合條件的元素放進 DOM 中，而 NgSwitch 是由三種 directive 組成的：\n\n- **NgSwitch** : 一個 attribute directive，\n- **NgSwitchCase**：structural directive，當他的綁定值等於 switch 的值時將其底下的 element 添加到 DOM 中，當他不等於綁定值時刪除他的綁定值。\n- **NgSwitchDefault**：structural directive，當沒有符合任何一個 NgSwitchCase 的值時會將其底下的 element 加入到 DOM 中\n\n一樣舉個例子\n\n1. 首先先在 app.component.ts 中新增一個 property 與 method，用於改變 property 狀態與接收 event\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      showArea = 0;\n\n      onClick(number: number) {\n        switch (number) {\n          case 1:\n            this.showArea = 1;\n            break;\n          case 2:\n            this.showArea = 2;\n            break;\n          case 3:\n            this.showArea = 3;\n            break;\n          default:\n            this.showArea = 0;\n            break;\n        }\n      }\n    }\n    ```\n\n2. 在 app.component.html 中新增三個 `<button>` 用來讓使用者點擊要顯示哪一個內容，並在下方使用 NgSwitch 來判斷使用者的選項\n\n    ```html\n    <!-- app.component.html -->\n\n    <ul>\n        <li>\n            <label>Display number-1 area: </label>\n            <button (click)=\"onClick(1)\">Area 1</button>\n        </li>\n        <li>\n            <label>Display number-2 area: </label>\n            <button (click)=\"onClick(2)\">Area 2</button>\n        </li>\n        <li>\n            <label>Display number-3 area: </label>\n            <button (click)=\"onClick(3)\">Area 3</button>\n        </li>\n        <li>\n            <label>Display default area: </label>\n            <button (click)=\"onClick(99)\">default</button>\n        </li>\n    </ul>\n\n    <div [ngSwitch]=\"showArea\">\n        <div *ngSwitchCase=\"1\">\n            <h2>This is area 1</h2>\n            <p>Hello world</p>\n        </div>\n        <div *ngSwitchCase=\"2\">\n            <h2>This is area 2</h2>\n            <p>Learning Angular</p>\n        </div>\n        <div *ngSwitchCase=\"3\">\n            <h2>This is area 3</h2>\n            <p>Know how to use ngSwitch</p>\n        </div>\n        <div *ngSwitchDefault>\n            <h2>This is default area</h2>\n            <p>Please select a checkbox</p>\n        </div>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/0HMIqXy.gif)\n\n在畫面中可以看到當我們點擊畫面中的不同按鈕時，會改變 showArea 的值，進而改變下方顯示的區域內容，我特意在 html 與 ts 檔中都有使用 switch case 的語法，可以互相比對一下他們的用法，基本上都是差不多的，所以等於說只要會 javascript 的 switch case 語法就同時也學會了 ngSwitch！\n\n# 結論\n\n本章中介紹了常見的 structural directive 與他們各自的用法，其實 structural directive 的使用方法基本上都跟 Javascript 類似，所以等於說之前知道 Javascript 的 `if else`, `for loop`, `switch case` 的用法的話這一章會學得非常快，不過要注意的是 `<ng-container>` 與 `<ng-template>` 的差別與使用場景，除此之外其他的應該都相對簡單。\n\n雖然本章介紹了常見的內建 structural directive，不過再開發專案時一定會遇到內建 structural directive 無法處理的問題，這時候就跟 pipe 一樣需要客製化了，下一章將會介紹如何客製化自己的 attribute directive 用於處理內建 attribute directive 無法處理的問題，那我們就明天見吧\n\n# Reference\n\n- [Angular.io - build uin directive](https://angular.io/guide/built-in-directives)\n- [Angular.io - NgIf](https://angular.io/api/common/NgIf)\n- [Angular.io - NgFor](https://angular.io/api/common/NgForOf#description)\n- [ngTemplate VS ngContainer](https://forum.angular.tw/t/topic/1788)","slug":"Angular/angular-14","published":1,"updated":"2022-02-16T01:31:23.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdr000195w3ct1b33zo","content":"<p>在上一章中介紹了 attribute directive 的用法，接著要來介紹另一種 Angular 中內建的 directive 那就是 sturctural directive。</p>\n<p>它的用途主要是用來<code>改變 DOM 的結構</code>，他會塑造或重構 DOM 的結構，通常是添加、刪除和操作他所附加的 element，本章中將會介紹介紹最常見的三種 structural directive : </p>\n<ol>\n<li><strong>NgIf</strong>: 有條件的從 tempate 裝創建或處置 sub-template，就跟 javascript 的 if 一樣，當滿足某個條件時顯示、隱藏或操作一個新的 sub-template。</li>\n<li><strong>NgFor</strong>: 為列表中的每個項目重複一個節點，和 javascript 的 for loop 一樣，利用迭代的方式創建多個 DOM 的 node。</li>\n<li><strong>NgSwitch</strong>: 一組在各個 view 中切換的指令，簡單來說和 javascript 的 switch case 一樣，接收到各種不同的 case 而顯示對應的 view</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Adding-or-removing-an-element-with-NgIf\"><a href=\"#Adding-or-removing-an-element-with-NgIf\" class=\"headerlink\" title=\"Adding or removing an element with NgIf\"></a>Adding or removing an element with NgIf</h1><p>可以利用 NgIf directive 為宿主 element 添加或刪除 element，簡單來說當 NgIf 為 false 時從 DOM 中移除一個 element 與他的所有子層並且將它所使用到的所有 component 從內存中釋放，反之會新增一個的 element，來舉一個簡單的例子，當我們點擊畫面中的按鈕時會將 child component 顯示出來。</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個 boolean 的 property 用於決定是否顯示 child.component，與一個 method 用來改變這個 property 的狀態</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中引用 child.component 的 selector 並使用 <code>*ngIf</code>來控制是否顯示他</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isActive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>&#123;&#123; isActive ? &#x27;not display&#x27; : &#x27;display&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/vj1CMnh.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到當我們點擊了畫面中的按鈕時，會更改 isActive 的狀態，如果 *ngIf 為 true 的話則會將 child.component 顯示出來，反之會在 DOM 中將他移除掉。</p>\n<p>而要注意如果要使用 structural directive 需要在前面都加上<code>米字號（*）</code>作為前綴字喔！</p>\n<h2 id=\"NgIf-and-NgIfElse\"><a href=\"#NgIf-and-NgIfElse\" class=\"headerlink\" title=\"NgIf and NgIfElse\"></a>NgIf and NgIfElse</h2><p>既然提到了 if 不免俗的也要介紹 else 畢竟他們通常是一組出現的，他與 javascript 的規則一樣，當 不滿足 if 中的表達式時就會進到 else 中，舉個例子吧</p>\n<ol>\n<li><p>保持上一個例子的 app.component.ts 內容</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要把 app.component.ts 中的內容稍微改一下</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-1</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isActive; else otherTemplate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">otherTemplate</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-child-2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>&#123;&#123; isActive ? &#x27;not display&#x27; : &#x27;display&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/5rxtRL1.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們更改了 isActive 的狀態時，在畫面中所呈現的 component 也會不一樣，還記得在 template variable 中提到的 <code>哈希符號 #</code> 嗎，這邊可以把它看成當 *ngIf 為 true 時會顯示 <code>&lt;app-child-1&gt;</code> 這個 component，而當為 false 時就會顯示 <code>&lt;ng-template&gt;</code> 所包住的 <code>&lt;app-child-2&gt;</code>，記得當要使用 <code>NgIfElse</code> 時需要在綁定的 property 或表達式後面加上<code>分號（；）</code>喔！</p>\n<h1 id=\"Listing-items-with-NgFor\"><a href=\"#Listing-items-with-NgFor\" class=\"headerlink\" title=\"Listing items with NgFor\"></a>Listing items with NgFor</h1><p>在前幾天我們介紹 Text interpolation 時就有使用到 NgFor 的技巧，他就是利用迭代的方式將 component 中 arr 型態的 property 的內容一一呈現在畫面中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let item of items&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 *ngFor 後面的字串表達式 <code>let item of items</code>， Angular 會對他做以下的處理：</p>\n<ul>\n<li>講 items 陣列中的每一個 item 儲存在<code>本地項目循環的變量(使用 let 宣告個變量)</code>中</li>\n<li>使每個 item 可用於每次迭代的 template</li>\n<li>將 <code>let item of items</code> 轉換成圍繞宿主 element 的 <ng-template></li>\n<li>對 list 中的每一個 item 重複 <ng-template></li>\n</ul>\n<h2 id=\"Local-variables\"><a href=\"#Local-variables\" class=\"headerlink\" title=\"Local variables\"></a>Local variables</h2><p>了解了 *ngFor 與用法後，這邊要介紹一些在使用 *ngFor 時特別好用的技巧，其實在使用 *ngFor 時他不只會將陣列中的值存在本地變量中，你還可以儲存別的東西到別的變量中：</p>\n<ul>\n<li><strong>index</strong>: number: 可迭代的 item 中當前的索引值，簡單來說就是 javascript 中 array 的 index</li>\n<li><strong>count</strong>: number: 可迭代的長度，等於 javascript 中的 array.length</li>\n<li><strong>first</strong>: boolean: 當 item 是整個 array 中第一個的時候為 true</li>\n<li><strong>last</strong>: boolean: 當 item 是整個 array 中最後一個的時候為 true</li>\n<li><strong>even</strong>: boolean: 當 item 的 index 是偶數時為 true</li>\n<li><strong>odd</strong>: boolean: 當 item 的 index 是基數時為 true</li>\n</ul>\n<p>可能你會想說，啊這些有什麼用？ 這可是非常好用的啊！</p>\n<p>當你在開發專案時，一個列表中可能會需要在他的最後一行加上一個 <code>+</code> 的符號用於新增內容，或對偶數的 item 顯示不同顏色等等，這邊來搭配著前幾天講的內容做一個小小的例子：</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個 Heros 裡面裝著所有英雄的名稱，與兩個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isShowAddHero!: <span class=\"built_in\">boolean</span>;                    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Heros</span> = [                                   <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr Nice&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Narco&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Celeritas&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">15</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magneta&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">16</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RubberMan&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">17</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dynama&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magma&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tornado&#x27;</span> &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onOpenAddHero</span>(<span class=\"params\"></span>) &#123;                          <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isShowAddHero</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onAddHero</span>(<span class=\"params\">heroName: <span class=\"built_in\">string</span></span>) &#123;              <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Heros</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">id</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>(), <span class=\"attr\">name</span>: heroName &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isShowAddHero</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於決定是否要開啟新增 hero 的介面</li>\n<li>(2): 新增英雄列表</li>\n<li>(3): 新增一個 method 當使用者點擊按鈕時變更 isShowAddHero 狀態，用於打開新增 hero 的介面</li>\n<li>(4): 新增一個 method 當使用者點擊新增 hero 介面的按鈕，將使用者新增的 hero 名稱 push 進英雄列表並將介面關閉。</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中新增內容</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>Hero List<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heroList&quot;</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let hero of Heros; last as isLast; odd as isOdd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heroItem&quot;</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;isOdd ? &#x27;oddClass&#x27; : &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isLast&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onOpenAddHero()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;openBtn&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isShowAddHero&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;addContent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> #<span class=\"attr\">hero</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onAddHero(hero.value)&quot;</span>&gt;</span>Add hero<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png\">    </p>\n<p>這邊我們詳細的介紹一下，你會看到很多以前都介紹過的內容：</p>\n<ol>\n<li>使用 *ngFor 將 component 中的英雄列表顯示在畫面中</li>\n<li>使用 <code>last as isLast</code> 來獲得最後一項</li>\n<li>使用 <code>odd as isOdd</code> 來獲得偶數項</li>\n<li>透過 [ngClass] 動態的利用 <code>isOdd</code> 決定是否要多綁定一個 CSS class</li>\n<li>使用 Text interpolation 將 hero 名稱顯示在畫面中</li>\n<li>使用 <code>*ngIf</code> 判斷是否為最後一項，用於決定是否顯示新增英雄的按鈕</li>\n<li>在 <code>&lt;button&gt;+&lt;/button&gt;</code> 中使用 event binding 綁定 component 中的 method</li>\n<li>在下方的 <code>&lt;div&gt;</code> 利用 *ngIf 決定是否要顯示在畫面上</li>\n<li>在 <code>&lt;input&gt;</code> 中設置為 template variable 讓其他地方的 element 獲得他的數據</li>\n<li>在 <code>&lt;button&gt;Add hero&lt;/button&gt;</code> 中使用 event binding 綁定 component 中的 method 並從 <code>&lt;input&gt;</code> 中透過 template variable 拿到數據做為參數</li>\n</ol>\n<p><img src=\"https://i.imgur.com/2T94FN3.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，列表中的偶數部分因為符合 <code>[ngClass]=&quot;isOdd ? &#39;oddClass&#39; : &#39;&#39;&quot;</code> 所以多添加了一個變成藍色的 CSS class，而最下面的 item 因為符合 <code>*ngIf=&quot;isLast&quot;</code> 所以只有他有 + 的按鈕，而當點擊了＋後符合 <code>*ngIf=&quot;isShowAddHero&quot;</code> 所以會打開新增 hero 的介面，當按下新增 hero 的介面的按鈕後將輸入在 <code>&lt;input&gt;</code> 的內容 push 近英雄表單中，而＋會一直保持出現在最後一個 item 的右邊。</p>\n<p>這個例子用了很多之前介紹的技巧，如果有看不懂的建議回去複習一下，真的有問題的話有歡迎在下方留言喔！</p>\n<h1 id=\"Hosting-a-directive-without-a-DOM-element\"><a href=\"#Hosting-a-directive-without-a-DOM-element\" class=\"headerlink\" title=\"Hosting a directive without a DOM element\"></a>Hosting a directive without a DOM element</h1><p>在 Angular 中有一個特別的 HTML element，他就是 <code>&lt;ng-container&gt;</code>，之所以會說他特別是因為他是一個不會干擾樣式或佈局的分組元素，因為 Angular 不會將他放進 DOM 裏面，所以當沒有單個 element 可以乘載 directive 時，就可以使用這個特別的 <code>&lt;ng-container&gt;</code>，通常都會將它搭配 <code>structural directive</code> 使用，舉個例子吧</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  I turned the corner</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">    and saw &#123;&#123;hero.name&#125;&#125;. I waved</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\">  and continued on my way.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中可以看到，我們希望在 <code>&lt;p&gt;</code> 的段落中透過使用 <code>*ngIf</code> 決定是否要顯示英雄名稱，如果這時候我們使用其他的 HTML element 來乘載 <code>*ngIf</code> 的話，會造成畫面樣式跟佈局的錯誤，所以就可以使用 <code>&lt;ng-container&gt;</code>，因為他不會被放進 DOM 裏面，作為乘載 structural directive 再好不過。</p>\n<p>提到了 <code>&lt;ng-container&gt;</code> 不免俗的要來介紹一下他跟 <code>&lt;ng-template&gt;</code> 的差別：</p>\n<ul>\n<li><p><code>&lt;ng-template&gt;</code> : 是用於呈現 HTML 的 Angular element，他不會直接顯示在畫面上，需要透過 structural directive 控制它是否要顯示在畫面中，如果沒有被顯示在畫面中時會以<code>註釋</code>的形式呈現在 DOM 中，比較常會用在寫結構性變化的時候，比如</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;show; else notshow&quot;</span>&gt;</span></span><br><span class=\"line\">   當 show = true 時，顯示這些內容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">notshow</span>&gt;</span></span><br><span class=\"line\">   當 show = false 時，顯示這些內容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;ng-container&gt;</code> : 他是 Angular 解析器識別的語法 element，他不是 directive, component, class 或 interface，他更像是 javascript 的花括號，常被用在不想要多寫不必要的 HTML element 時但又想將一個區塊的 HTML 包起來處理，就會使用到 <code>&lt;ng-container&gt;</code> 常用來做 structural directive 的載體。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  I turned the corner</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">    and saw &#123;&#123;hero.name&#125;&#125;. I waved</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\">  and continued on my way.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Switching-cases-with-NgSwitch\"><a href=\"#Switching-cases-with-NgSwitch\" class=\"headerlink\" title=\"Switching cases with NgSwitch\"></a>Switching cases with NgSwitch</h1><p>最後要來介紹最後一種常見的 structural directive 那就是 <code>NgSwitch</code>，他其實與 Javascript 的 switch case 一樣，NgSwitch 會根據 switch 跳健從幾個可能的元素中顯示其中一個，Angular 只會將符合條件的元素放進 DOM 中，而 NgSwitch 是由三種 directive 組成的：</p>\n<ul>\n<li><strong>NgSwitch</strong> : 一個 attribute directive，</li>\n<li><strong>NgSwitchCase</strong>：structural directive，當他的綁定值等於 switch 的值時將其底下的 element 添加到 DOM 中，當他不等於綁定值時刪除他的綁定值。</li>\n<li><strong>NgSwitchDefault</strong>：structural directive，當沒有符合任何一個 NgSwitchCase 的值時會將其底下的 element 加入到 DOM 中</li>\n</ul>\n<p>一樣舉個例子</p>\n<ol>\n<li><p>首先先在 app.component.ts 中新增一個 property 與 method，用於改變 property 狀態與接收 event</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  showArea = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"><span class=\"built_in\">number</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中新增三個 <code>&lt;button&gt;</code> 用來讓使用者點擊要顯示哪一個內容，並在下方使用 NgSwitch 來判斷使用者的選項</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display number-1 area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(1)&quot;</span>&gt;</span>Area 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display number-2 area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(2)&quot;</span>&gt;</span>Area 2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display number-3 area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(3)&quot;</span>&gt;</span>Area 3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display default area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(99)&quot;</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">&quot;showArea&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is area 1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is area 2<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Learning Angular<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is area 3<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Know how to use ngSwitch<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchDefault</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is default area<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Please select a checkbox<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/0HMIqXy.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到當我們點擊畫面中的不同按鈕時，會改變 showArea 的值，進而改變下方顯示的區域內容，我特意在 html 與 ts 檔中都有使用 switch case 的語法，可以互相比對一下他們的用法，基本上都是差不多的，所以等於說只要會 javascript 的 switch case 語法就同時也學會了 ngSwitch！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了常見的 structural directive 與他們各自的用法，其實 structural directive 的使用方法基本上都跟 Javascript 類似，所以等於說之前知道 Javascript 的 <code>if else</code>, <code>for loop</code>, <code>switch case</code> 的用法的話這一章會學得非常快，不過要注意的是 <code>&lt;ng-container&gt;</code> 與 <code>&lt;ng-template&gt;</code> 的差別與使用場景，除此之外其他的應該都相對簡單。</p>\n<p>雖然本章介紹了常見的內建 structural directive，不過再開發專案時一定會遇到內建 structural directive 無法處理的問題，這時候就跟 pipe 一樣需要客製化了，下一章將會介紹如何客製化自己的 attribute directive 用於處理內建 attribute directive 無法處理的問題，那我們就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/built-in-directives\">Angular.io - build uin directive</a></li>\n<li><a href=\"https://angular.io/api/common/NgIf\">Angular.io - NgIf</a></li>\n<li><a href=\"https://angular.io/api/common/NgForOf#description\">Angular.io - NgFor</a></li>\n<li><a href=\"https://forum.angular.tw/t/topic/1788\">ngTemplate VS ngContainer</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一章中介紹了 attribute directive 的用法，接著要來介紹另一種 Angular 中內建的 directive 那就是 sturctural directive。</p>\n<p>它的用途主要是用來<code>改變 DOM 的結構</code>，他會塑造或重構 DOM 的結構，通常是添加、刪除和操作他所附加的 element，本章中將會介紹介紹最常見的三種 structural directive : </p>\n<ol>\n<li><strong>NgIf</strong>: 有條件的從 tempate 裝創建或處置 sub-template，就跟 javascript 的 if 一樣，當滿足某個條件時顯示、隱藏或操作一個新的 sub-template。</li>\n<li><strong>NgFor</strong>: 為列表中的每個項目重複一個節點，和 javascript 的 for loop 一樣，利用迭代的方式創建多個 DOM 的 node。</li>\n<li><strong>NgSwitch</strong>: 一組在各個 view 中切換的指令，簡單來說和 javascript 的 switch case 一樣，接收到各種不同的 case 而顯示對應的 view</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767vgqzFOQpcc.png\"></p>","more":"<h1 id=\"Adding-or-removing-an-element-with-NgIf\"><a href=\"#Adding-or-removing-an-element-with-NgIf\" class=\"headerlink\" title=\"Adding or removing an element with NgIf\"></a>Adding or removing an element with NgIf</h1><p>可以利用 NgIf directive 為宿主 element 添加或刪除 element，簡單來說當 NgIf 為 false 時從 DOM 中移除一個 element 與他的所有子層並且將它所使用到的所有 component 從內存中釋放，反之會新增一個的 element，來舉一個簡單的例子，當我們點擊畫面中的按鈕時會將 child component 顯示出來。</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個 boolean 的 property 用於決定是否顯示 child.component，與一個 method 用來改變這個 property 的狀態</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中引用 child.component 的 selector 並使用 <code>*ngIf</code>來控制是否顯示他</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isActive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>&#123;&#123; isActive ? &#x27;not display&#x27; : &#x27;display&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/vj1CMnh.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到當我們點擊了畫面中的按鈕時，會更改 isActive 的狀態，如果 *ngIf 為 true 的話則會將 child.component 顯示出來，反之會在 DOM 中將他移除掉。</p>\n<p>而要注意如果要使用 structural directive 需要在前面都加上<code>米字號（*）</code>作為前綴字喔！</p>\n<h2 id=\"NgIf-and-NgIfElse\"><a href=\"#NgIf-and-NgIfElse\" class=\"headerlink\" title=\"NgIf and NgIfElse\"></a>NgIf and NgIfElse</h2><p>既然提到了 if 不免俗的也要介紹 else 畢竟他們通常是一組出現的，他與 javascript 的規則一樣，當 不滿足 if 中的表達式時就會進到 else 中，舉個例子吧</p>\n<ol>\n<li><p>保持上一個例子的 app.component.ts 內容</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isActive</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要把 app.component.ts 中的內容稍微改一下</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child-1</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isActive; else otherTemplate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">otherTemplate</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-child-2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child-2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>&#123;&#123; isActive ? &#x27;not display&#x27; : &#x27;display&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/5rxtRL1.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們更改了 isActive 的狀態時，在畫面中所呈現的 component 也會不一樣，還記得在 template variable 中提到的 <code>哈希符號 #</code> 嗎，這邊可以把它看成當 *ngIf 為 true 時會顯示 <code>&lt;app-child-1&gt;</code> 這個 component，而當為 false 時就會顯示 <code>&lt;ng-template&gt;</code> 所包住的 <code>&lt;app-child-2&gt;</code>，記得當要使用 <code>NgIfElse</code> 時需要在綁定的 property 或表達式後面加上<code>分號（；）</code>喔！</p>\n<h1 id=\"Listing-items-with-NgFor\"><a href=\"#Listing-items-with-NgFor\" class=\"headerlink\" title=\"Listing items with NgFor\"></a>Listing items with NgFor</h1><p>在前幾天我們介紹 Text interpolation 時就有使用到 NgFor 的技巧，他就是利用迭代的方式將 component 中 arr 型態的 property 的內容一一呈現在畫面中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let item of items&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 *ngFor 後面的字串表達式 <code>let item of items</code>， Angular 會對他做以下的處理：</p>\n<ul>\n<li>講 items 陣列中的每一個 item 儲存在<code>本地項目循環的變量(使用 let 宣告個變量)</code>中</li>\n<li>使每個 item 可用於每次迭代的 template</li>\n<li>將 <code>let item of items</code> 轉換成圍繞宿主 element 的 <ng-template></li>\n<li>對 list 中的每一個 item 重複 <ng-template></li>\n</ul>\n<h2 id=\"Local-variables\"><a href=\"#Local-variables\" class=\"headerlink\" title=\"Local variables\"></a>Local variables</h2><p>了解了 *ngFor 與用法後，這邊要介紹一些在使用 *ngFor 時特別好用的技巧，其實在使用 *ngFor 時他不只會將陣列中的值存在本地變量中，你還可以儲存別的東西到別的變量中：</p>\n<ul>\n<li><strong>index</strong>: number: 可迭代的 item 中當前的索引值，簡單來說就是 javascript 中 array 的 index</li>\n<li><strong>count</strong>: number: 可迭代的長度，等於 javascript 中的 array.length</li>\n<li><strong>first</strong>: boolean: 當 item 是整個 array 中第一個的時候為 true</li>\n<li><strong>last</strong>: boolean: 當 item 是整個 array 中最後一個的時候為 true</li>\n<li><strong>even</strong>: boolean: 當 item 的 index 是偶數時為 true</li>\n<li><strong>odd</strong>: boolean: 當 item 的 index 是基數時為 true</li>\n</ul>\n<p>可能你會想說，啊這些有什麼用？ 這可是非常好用的啊！</p>\n<p>當你在開發專案時，一個列表中可能會需要在他的最後一行加上一個 <code>+</code> 的符號用於新增內容，或對偶數的 item 顯示不同顏色等等，這邊來搭配著前幾天講的內容做一個小小的例子：</p>\n<ol>\n<li><p>在 app.component.ts 中新增一個 Heros 裡面裝著所有英雄的名稱，與兩個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  isShowAddHero!: <span class=\"built_in\">boolean</span>;                    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Heros</span> = [                                   <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">11</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr Nice&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Narco&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">13</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Celeritas&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">15</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magneta&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">16</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RubberMan&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">17</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dynama&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magma&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tornado&#x27;</span> &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onOpenAddHero</span>(<span class=\"params\"></span>) &#123;                          <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isShowAddHero</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onAddHero</span>(<span class=\"params\">heroName: <span class=\"built_in\">string</span></span>) &#123;              <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Heros</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">id</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>(), <span class=\"attr\">name</span>: heroName &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isShowAddHero</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於決定是否要開啟新增 hero 的介面</li>\n<li>(2): 新增英雄列表</li>\n<li>(3): 新增一個 method 當使用者點擊按鈕時變更 isShowAddHero 狀態，用於打開新增 hero 的介面</li>\n<li>(4): 新增一個 method 當使用者點擊新增 hero 介面的按鈕，將使用者新增的 hero 名稱 push 進英雄列表並將介面關閉。</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中新增內容</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>Hero List<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heroList&quot;</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let hero of Heros; last as isLast; odd as isOdd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heroItem&quot;</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;isOdd ? &#x27;oddClass&#x27; : &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isLast&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onOpenAddHero()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;openBtn&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isShowAddHero&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;addContent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> #<span class=\"attr\">hero</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onAddHero(hero.value)&quot;</span>&gt;</span>Add hero<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210808/201247671DRpxMz0Gn.png\">    </p>\n<p>這邊我們詳細的介紹一下，你會看到很多以前都介紹過的內容：</p>\n<ol>\n<li>使用 *ngFor 將 component 中的英雄列表顯示在畫面中</li>\n<li>使用 <code>last as isLast</code> 來獲得最後一項</li>\n<li>使用 <code>odd as isOdd</code> 來獲得偶數項</li>\n<li>透過 [ngClass] 動態的利用 <code>isOdd</code> 決定是否要多綁定一個 CSS class</li>\n<li>使用 Text interpolation 將 hero 名稱顯示在畫面中</li>\n<li>使用 <code>*ngIf</code> 判斷是否為最後一項，用於決定是否顯示新增英雄的按鈕</li>\n<li>在 <code>&lt;button&gt;+&lt;/button&gt;</code> 中使用 event binding 綁定 component 中的 method</li>\n<li>在下方的 <code>&lt;div&gt;</code> 利用 *ngIf 決定是否要顯示在畫面上</li>\n<li>在 <code>&lt;input&gt;</code> 中設置為 template variable 讓其他地方的 element 獲得他的數據</li>\n<li>在 <code>&lt;button&gt;Add hero&lt;/button&gt;</code> 中使用 event binding 綁定 component 中的 method 並從 <code>&lt;input&gt;</code> 中透過 template variable 拿到數據做為參數</li>\n</ol>\n<p><img src=\"https://i.imgur.com/2T94FN3.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，列表中的偶數部分因為符合 <code>[ngClass]=&quot;isOdd ? &#39;oddClass&#39; : &#39;&#39;&quot;</code> 所以多添加了一個變成藍色的 CSS class，而最下面的 item 因為符合 <code>*ngIf=&quot;isLast&quot;</code> 所以只有他有 + 的按鈕，而當點擊了＋後符合 <code>*ngIf=&quot;isShowAddHero&quot;</code> 所以會打開新增 hero 的介面，當按下新增 hero 的介面的按鈕後將輸入在 <code>&lt;input&gt;</code> 的內容 push 近英雄表單中，而＋會一直保持出現在最後一個 item 的右邊。</p>\n<p>這個例子用了很多之前介紹的技巧，如果有看不懂的建議回去複習一下，真的有問題的話有歡迎在下方留言喔！</p>\n<h1 id=\"Hosting-a-directive-without-a-DOM-element\"><a href=\"#Hosting-a-directive-without-a-DOM-element\" class=\"headerlink\" title=\"Hosting a directive without a DOM element\"></a>Hosting a directive without a DOM element</h1><p>在 Angular 中有一個特別的 HTML element，他就是 <code>&lt;ng-container&gt;</code>，之所以會說他特別是因為他是一個不會干擾樣式或佈局的分組元素，因為 Angular 不會將他放進 DOM 裏面，所以當沒有單個 element 可以乘載 directive 時，就可以使用這個特別的 <code>&lt;ng-container&gt;</code>，通常都會將它搭配 <code>structural directive</code> 使用，舉個例子吧</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  I turned the corner</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">    and saw &#123;&#123;hero.name&#125;&#125;. I waved</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\">  and continued on my way.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中可以看到，我們希望在 <code>&lt;p&gt;</code> 的段落中透過使用 <code>*ngIf</code> 決定是否要顯示英雄名稱，如果這時候我們使用其他的 HTML element 來乘載 <code>*ngIf</code> 的話，會造成畫面樣式跟佈局的錯誤，所以就可以使用 <code>&lt;ng-container&gt;</code>，因為他不會被放進 DOM 裏面，作為乘載 structural directive 再好不過。</p>\n<p>提到了 <code>&lt;ng-container&gt;</code> 不免俗的要來介紹一下他跟 <code>&lt;ng-template&gt;</code> 的差別：</p>\n<ul>\n<li><p><code>&lt;ng-template&gt;</code> : 是用於呈現 HTML 的 Angular element，他不會直接顯示在畫面上，需要透過 structural directive 控制它是否要顯示在畫面中，如果沒有被顯示在畫面中時會以<code>註釋</code>的形式呈現在 DOM 中，比較常會用在寫結構性變化的時候，比如</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;show; else notshow&quot;</span>&gt;</span></span><br><span class=\"line\">   當 show = true 時，顯示這些內容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">notshow</span>&gt;</span></span><br><span class=\"line\">   當 show = false 時，顯示這些內容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;ng-container&gt;</code> : 他是 Angular 解析器識別的語法 element，他不是 directive, component, class 或 interface，他更像是 javascript 的花括號，常被用在不想要多寫不必要的 HTML element 時但又想將一個區塊的 HTML 包起來處理，就會使用到 <code>&lt;ng-container&gt;</code> 常用來做 structural directive 的載體。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  I turned the corner</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">    and saw &#123;&#123;hero.name&#125;&#125;. I waved</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\">  and continued on my way.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Switching-cases-with-NgSwitch\"><a href=\"#Switching-cases-with-NgSwitch\" class=\"headerlink\" title=\"Switching cases with NgSwitch\"></a>Switching cases with NgSwitch</h1><p>最後要來介紹最後一種常見的 structural directive 那就是 <code>NgSwitch</code>，他其實與 Javascript 的 switch case 一樣，NgSwitch 會根據 switch 跳健從幾個可能的元素中顯示其中一個，Angular 只會將符合條件的元素放進 DOM 中，而 NgSwitch 是由三種 directive 組成的：</p>\n<ul>\n<li><strong>NgSwitch</strong> : 一個 attribute directive，</li>\n<li><strong>NgSwitchCase</strong>：structural directive，當他的綁定值等於 switch 的值時將其底下的 element 添加到 DOM 中，當他不等於綁定值時刪除他的綁定值。</li>\n<li><strong>NgSwitchDefault</strong>：structural directive，當沒有符合任何一個 NgSwitchCase 的值時會將其底下的 element 加入到 DOM 中</li>\n</ul>\n<p>一樣舉個例子</p>\n<ol>\n<li><p>首先先在 app.component.ts 中新增一個 property 與 method，用於改變 property 狀態與接收 event</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  showArea = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"><span class=\"built_in\">number</span>: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">showArea</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中新增三個 <code>&lt;button&gt;</code> 用來讓使用者點擊要顯示哪一個內容，並在下方使用 NgSwitch 來判斷使用者的選項</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display number-1 area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(1)&quot;</span>&gt;</span>Area 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display number-2 area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(2)&quot;</span>&gt;</span>Area 2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display number-3 area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(3)&quot;</span>&gt;</span>Area 3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Display default area: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(99)&quot;</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">&quot;showArea&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is area 1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is area 2<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Learning Angular<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is area 3<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Know how to use ngSwitch<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchDefault</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is default area<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Please select a checkbox<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/0HMIqXy.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到當我們點擊畫面中的不同按鈕時，會改變 showArea 的值，進而改變下方顯示的區域內容，我特意在 html 與 ts 檔中都有使用 switch case 的語法，可以互相比對一下他們的用法，基本上都是差不多的，所以等於說只要會 javascript 的 switch case 語法就同時也學會了 ngSwitch！</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了常見的 structural directive 與他們各自的用法，其實 structural directive 的使用方法基本上都跟 Javascript 類似，所以等於說之前知道 Javascript 的 <code>if else</code>, <code>for loop</code>, <code>switch case</code> 的用法的話這一章會學得非常快，不過要注意的是 <code>&lt;ng-container&gt;</code> 與 <code>&lt;ng-template&gt;</code> 的差別與使用場景，除此之外其他的應該都相對簡單。</p>\n<p>雖然本章介紹了常見的內建 structural directive，不過再開發專案時一定會遇到內建 structural directive 無法處理的問題，這時候就跟 pipe 一樣需要客製化了，下一章將會介紹如何客製化自己的 attribute directive 用於處理內建 attribute directive 無法處理的問題，那我們就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/built-in-directives\">Angular.io - build uin directive</a></li>\n<li><a href=\"https://angular.io/api/common/NgIf\">Angular.io - NgIf</a></li>\n<li><a href=\"https://angular.io/api/common/NgForOf#description\">Angular.io - NgFor</a></li>\n<li><a href=\"https://forum.angular.tw/t/topic/1788\">ngTemplate VS ngContainer</a></li>\n</ul>"},{"title":"Day15. Attribute directives","date":"2021-09-15T02:08:08.000Z","_content":"\n在前幾天中有介紹了 Angular 中內建的一些 attribute directive，但是在實際開發專案時可能會遇到內建 attribute directive 無法處理的問題，這時候就需要建立客製化 attribute directive，本章就會介紹如何建立屬於自己的 attribute directive。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg)\n\n<!-- more -->\n\n# Building an attribute directive\n\n來跟著 Angular 的官方文檔做一個練習，將會建立一個客製化的 attribute directive，將一個宿主 element 的背景顏色設置為黃色的 directive。\n\n1. 首先先使用 Angular CLI 建立一個 directive\n\n    ```bash\n    ng generate directive highlight\n    ng g d highlight\n    ```\n\n    使用這個 CLI 指令可以自動建立一個名為 highlight.directive.ts 和 highlight.directive.spec.ts 的檔案，並且會在被加入到 app.module.ts 的 `declares` ，所以如果不是用 CLI 建立 directive file 時，要記得手動將它加入到 declares 裡面喔！\n\n2. 在 highlight.directive.ts 中從 `@angular/core` 中導入 `ElementRef`\n\n    ```typescript\n    import { Directive, ElementRef } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n        constructor(el: ElementRef) {                           // (1)\n           el.nativeElement.style.backgroundColor = 'yellow';   // (2)\n        }\n    }\n    ```\n\n    - (1): 在 constructor 中將 ElementRef inject 到 HighlightDirective 中\n    - (2): 透過使用 ElementRef 的 `nativeElement` property 授與對宿主 DOM element 的直接訪問權限，並將他的 style 改變為黃色\n3. 在 app.component.html 中添加一個 element 並將剛剛客製化的 directive 加在上面\n\n    ```html\n    <!-- app.component.html -->\n\n    <p appHighlight>Highlight me!</p>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png](https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png)\n\nAngular 會將 HighlightDirective 給實例化並將對 `<p>` element 的 reference injects 到  highlight.directive.ts 的 constructor 中，讓他可以對這個元素的 style 進行更改。\n\n\n\n# Handling user events\n\n除了改變 element 之外也可以在客製化的 directive 中檢測用戶在畫面中的事件（鼠標移入或移出）並對事件進行不同的響應。\n\n舉個例子，保持上面的例子只是將畫面上的 `<p>` element 綁定一個 hover 事件，當鼠標移到上面時將他背景顏色改為黃色\n\n1. 從 `@angular/core`中導入 HostListener\n\n    ```typescript\n    import { Directive, ElementRef, HostListener } from '@angular/core';\n    ```\n\n2. 更改 highlight.directive.ts 中的 method 用於響應事件\n\n    ```typescript\n    import { Directive, ElementRef, HostListener } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n      constructor(private el: ElementRef) {}\n\n      @HostListener('mouseenter') onMouseEnter() {               // (1)\n        this.highlight('yellow');\n      }\n      \n      @HostListener('mouseleave') onMouseLeave() {               // (2)\n        this.highlight('');\n      }\n      \n      private highlight(color: string) {                         // (3)\n        this.el.nativeElement.style.backgroundColor = color;\n      }\n    }\n    ```\n\n    - (1): 當鼠標移動到元素上時觸發此 method 對行為作出響應\n    - (2): 當鼠標從元素上離開時觸發此 method 對行為作出響應\n    - (3): 對綁定元素的 style 進行更改\n\n![img](https://i.imgur.com/l47DGum.gif)\n\n在畫面中可以看，當我們的鼠標移動到 `<p>`  element 上面時會觸發 highlight.directive.ts 中的 method 將他的背景顏色改為黃色。\n\n\n\n# Passing values into an attribute directive\n\n除了將你要更改的內容寫死在 directive 之外（上面例子是寫死 hover 時背景變黃色），你也可以透過傳遞參數的方式，動態的傳遞你所期望改變的內容，一樣拿上面的例子來延伸吧\n\n1. 首先先改變 highlight.directive.ts 的內容\n\n    ```typescript\n    import { Directive, ElementRef, HostListener, Input } from '@angular/core';  // (1)\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n      @Input() appHighlight = '';                              // (2)\n      constructor(private el: ElementRef) {}\n\n      @HostListener('mouseenter') onMouseEnter() {\n        this.highlight(this.appHighlight);                     // (3)\n      }\n      \n      @HostListener('mouseleave') onMouseLeave() {\n        this.highlight('');\n      }\n      \n      private highlight(color: string) {\n        this.el.nativeElement.style.backgroundColor = color;\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 Input\n    - (2): 新增一個 property 並使用 @Input() 將他裝飾為從父層傳遞的數據\n    - (3): 當鼠標移動到 element 時更改的顏色從寫死的狀態變更為綁定 @Input() 的內容\n2. 更改 app.component.html 的內容，將顏色傳遞給 HighlightDirective\n\n    ```html\n    <!-- app.component.html -->\n\n    <p [appHighlight]=\"'red'\">Highlight me!</p>\n    ```\n    \n![img](https://i.imgur.com/Fh0oaOI.gif)\n\n可以看到畫面中，當鼠標移動到 element 時從黃色變為我們傳遞給 directive 的紅色了。\n\n\n\n# Binding to a second property\n\n除了可以傳遞參數給 directive 之外還可以對他設定一個預設值，以上面例子來說，我們可以設定一個預設值，直到使用者改變顏色後才變為指定的顏色\n\n1. 更改 highlight.directive.ts 中的內容\n\n    ```typescript\n    import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n      @Input() appHighlight = '';\n      @Input() defaultColor = '';                              // (1)\n      constructor(private el: ElementRef) {}\n\n      @HostListener('mouseenter') onMouseEnter() {\n        this.highlight(this.appHighlight || this.defaultColor || 'red');\n      }\n      \n      @HostListener('mouseleave') onMouseLeave() {\n        this.highlight('');\n      }\n      \n      private highlight(color: string) {\n        this.el.nativeElement.style.backgroundColor = color;\n      }\n    }\n    ```\n\n2. 在 app.component.ts 中添加一個 property 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      color = '';                            // (1) \n      \n      onClick (color: string) {              // (2)\n        this.color = color;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於傳給 directive\n    - (2): 新增一個 method 當畫面中的按鈕被點擊時觸發\n3. 在 app.component.html 中新增三個 `<button>` 並將 directive 加上預設值\n\n    ```html\n    <!-- app.component.html -->\n\n    <button (click)=\"onClick('green')\">Green</button>\n    <button (click)=\"onClick('yellow')\">Yellow</button>\n    <button (click)=\"onClick('cyan')\">Cyan</button>\n\n    <p [appHighlight]=\"color\" defaultColor=\"violet\">Highlight me too!</p>\n    ```\n    \n![img](https://i.imgur.com/b0ZYw8X.gif)\n\n在畫面中可以看到，當我們沒有點擊畫面中的 `<button>` 時我們的鼠標移動到 element 時顯示的顏色是預設的顏色，而當點擊了其中一個按鈕後就換更新為指定的顏色。\n\n\n\n# 結論\n\n本章介紹了如何建立與使用客製化的 directive，可以透過使用 ElementRef 的 `nativeElement` property 授與對宿主 DOM element 的直接訪問權限，可以使用 HostListener 用來處理畫面中使用者的行為，也可以使用之前提到的 @Input() 用於傳遞參數進到 directive 中，這個客製化的 directive 對於要處理特別的情況時非常好用。\n\n下一章將介紹如何創建客製化的 structural directive並介紹 directive 使如何工作的、 Angular 如解釋速記以及如何添加 template 的保護 property 用於捕獲 template 的錯誤，那我們就明天見囉！\n\n\n\n# Reference\n\n- [Angular.io - attribute directive](https://angular.io/guide/attribute-directives)","source":"_posts/Angular/angular-15.md","raw":"---\ntitle: Day15. Attribute directives\ndate: 2021-09-15 10:08:08\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在前幾天中有介紹了 Angular 中內建的一些 attribute directive，但是在實際開發專案時可能會遇到內建 attribute directive 無法處理的問題，這時候就需要建立客製化 attribute directive，本章就會介紹如何建立屬於自己的 attribute directive。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg)\n\n<!-- more -->\n\n# Building an attribute directive\n\n來跟著 Angular 的官方文檔做一個練習，將會建立一個客製化的 attribute directive，將一個宿主 element 的背景顏色設置為黃色的 directive。\n\n1. 首先先使用 Angular CLI 建立一個 directive\n\n    ```bash\n    ng generate directive highlight\n    ng g d highlight\n    ```\n\n    使用這個 CLI 指令可以自動建立一個名為 highlight.directive.ts 和 highlight.directive.spec.ts 的檔案，並且會在被加入到 app.module.ts 的 `declares` ，所以如果不是用 CLI 建立 directive file 時，要記得手動將它加入到 declares 裡面喔！\n\n2. 在 highlight.directive.ts 中從 `@angular/core` 中導入 `ElementRef`\n\n    ```typescript\n    import { Directive, ElementRef } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n        constructor(el: ElementRef) {                           // (1)\n           el.nativeElement.style.backgroundColor = 'yellow';   // (2)\n        }\n    }\n    ```\n\n    - (1): 在 constructor 中將 ElementRef inject 到 HighlightDirective 中\n    - (2): 透過使用 ElementRef 的 `nativeElement` property 授與對宿主 DOM element 的直接訪問權限，並將他的 style 改變為黃色\n3. 在 app.component.html 中添加一個 element 並將剛剛客製化的 directive 加在上面\n\n    ```html\n    <!-- app.component.html -->\n\n    <p appHighlight>Highlight me!</p>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png](https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png)\n\nAngular 會將 HighlightDirective 給實例化並將對 `<p>` element 的 reference injects 到  highlight.directive.ts 的 constructor 中，讓他可以對這個元素的 style 進行更改。\n\n\n\n# Handling user events\n\n除了改變 element 之外也可以在客製化的 directive 中檢測用戶在畫面中的事件（鼠標移入或移出）並對事件進行不同的響應。\n\n舉個例子，保持上面的例子只是將畫面上的 `<p>` element 綁定一個 hover 事件，當鼠標移到上面時將他背景顏色改為黃色\n\n1. 從 `@angular/core`中導入 HostListener\n\n    ```typescript\n    import { Directive, ElementRef, HostListener } from '@angular/core';\n    ```\n\n2. 更改 highlight.directive.ts 中的 method 用於響應事件\n\n    ```typescript\n    import { Directive, ElementRef, HostListener } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n      constructor(private el: ElementRef) {}\n\n      @HostListener('mouseenter') onMouseEnter() {               // (1)\n        this.highlight('yellow');\n      }\n      \n      @HostListener('mouseleave') onMouseLeave() {               // (2)\n        this.highlight('');\n      }\n      \n      private highlight(color: string) {                         // (3)\n        this.el.nativeElement.style.backgroundColor = color;\n      }\n    }\n    ```\n\n    - (1): 當鼠標移動到元素上時觸發此 method 對行為作出響應\n    - (2): 當鼠標從元素上離開時觸發此 method 對行為作出響應\n    - (3): 對綁定元素的 style 進行更改\n\n![img](https://i.imgur.com/l47DGum.gif)\n\n在畫面中可以看，當我們的鼠標移動到 `<p>`  element 上面時會觸發 highlight.directive.ts 中的 method 將他的背景顏色改為黃色。\n\n\n\n# Passing values into an attribute directive\n\n除了將你要更改的內容寫死在 directive 之外（上面例子是寫死 hover 時背景變黃色），你也可以透過傳遞參數的方式，動態的傳遞你所期望改變的內容，一樣拿上面的例子來延伸吧\n\n1. 首先先改變 highlight.directive.ts 的內容\n\n    ```typescript\n    import { Directive, ElementRef, HostListener, Input } from '@angular/core';  // (1)\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n      @Input() appHighlight = '';                              // (2)\n      constructor(private el: ElementRef) {}\n\n      @HostListener('mouseenter') onMouseEnter() {\n        this.highlight(this.appHighlight);                     // (3)\n      }\n      \n      @HostListener('mouseleave') onMouseLeave() {\n        this.highlight('');\n      }\n      \n      private highlight(color: string) {\n        this.el.nativeElement.style.backgroundColor = color;\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 Input\n    - (2): 新增一個 property 並使用 @Input() 將他裝飾為從父層傳遞的數據\n    - (3): 當鼠標移動到 element 時更改的顏色從寫死的狀態變更為綁定 @Input() 的內容\n2. 更改 app.component.html 的內容，將顏色傳遞給 HighlightDirective\n\n    ```html\n    <!-- app.component.html -->\n\n    <p [appHighlight]=\"'red'\">Highlight me!</p>\n    ```\n    \n![img](https://i.imgur.com/Fh0oaOI.gif)\n\n可以看到畫面中，當鼠標移動到 element 時從黃色變為我們傳遞給 directive 的紅色了。\n\n\n\n# Binding to a second property\n\n除了可以傳遞參數給 directive 之外還可以對他設定一個預設值，以上面例子來說，我們可以設定一個預設值，直到使用者改變顏色後才變為指定的顏色\n\n1. 更改 highlight.directive.ts 中的內容\n\n    ```typescript\n    import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n      @Input() appHighlight = '';\n      @Input() defaultColor = '';                              // (1)\n      constructor(private el: ElementRef) {}\n\n      @HostListener('mouseenter') onMouseEnter() {\n        this.highlight(this.appHighlight || this.defaultColor || 'red');\n      }\n      \n      @HostListener('mouseleave') onMouseLeave() {\n        this.highlight('');\n      }\n      \n      private highlight(color: string) {\n        this.el.nativeElement.style.backgroundColor = color;\n      }\n    }\n    ```\n\n2. 在 app.component.ts 中添加一個 property 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      color = '';                            // (1) \n      \n      onClick (color: string) {              // (2)\n        this.color = color;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於傳給 directive\n    - (2): 新增一個 method 當畫面中的按鈕被點擊時觸發\n3. 在 app.component.html 中新增三個 `<button>` 並將 directive 加上預設值\n\n    ```html\n    <!-- app.component.html -->\n\n    <button (click)=\"onClick('green')\">Green</button>\n    <button (click)=\"onClick('yellow')\">Yellow</button>\n    <button (click)=\"onClick('cyan')\">Cyan</button>\n\n    <p [appHighlight]=\"color\" defaultColor=\"violet\">Highlight me too!</p>\n    ```\n    \n![img](https://i.imgur.com/b0ZYw8X.gif)\n\n在畫面中可以看到，當我們沒有點擊畫面中的 `<button>` 時我們的鼠標移動到 element 時顯示的顏色是預設的顏色，而當點擊了其中一個按鈕後就換更新為指定的顏色。\n\n\n\n# 結論\n\n本章介紹了如何建立與使用客製化的 directive，可以透過使用 ElementRef 的 `nativeElement` property 授與對宿主 DOM element 的直接訪問權限，可以使用 HostListener 用來處理畫面中使用者的行為，也可以使用之前提到的 @Input() 用於傳遞參數進到 directive 中，這個客製化的 directive 對於要處理特別的情況時非常好用。\n\n下一章將介紹如何創建客製化的 structural directive並介紹 directive 使如何工作的、 Angular 如解釋速記以及如何添加 template 的保護 property 用於捕獲 template 的錯誤，那我們就明天見囉！\n\n\n\n# Reference\n\n- [Angular.io - attribute directive](https://angular.io/guide/attribute-directives)","slug":"Angular/angular-15","published":1,"updated":"2022-02-16T01:33:44.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdr000395w314f1hstb","content":"<p>在前幾天中有介紹了 Angular 中內建的一些 attribute directive，但是在實際開發專案時可能會遇到內建 attribute directive 無法處理的問題，這時候就需要建立客製化 attribute directive，本章就會介紹如何建立屬於自己的 attribute directive。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Building-an-attribute-directive\"><a href=\"#Building-an-attribute-directive\" class=\"headerlink\" title=\"Building an attribute directive\"></a>Building an attribute directive</h1><p>來跟著 Angular 的官方文檔做一個練習，將會建立一個客製化的 attribute directive，將一個宿主 element 的背景顏色設置為黃色的 directive。</p>\n<ol>\n<li><p>首先先使用 Angular CLI 建立一個 directive</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive highlight</span><br><span class=\"line\">ng g d highlight</span><br></pre></td></tr></table></figure>\n\n<p> 使用這個 CLI 指令可以自動建立一個名為 highlight.directive.ts 和 highlight.directive.spec.ts 的檔案，並且會在被加入到 app.module.ts 的 <code>declares</code> ，所以如果不是用 CLI 建立 directive file 時，要記得手動將它加入到 declares 裡面喔！</p>\n</li>\n<li><p>在 highlight.directive.ts 中從 <code>@angular/core</code> 中導入 <code>ElementRef</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">el: ElementRef</span>) &#123;                           <span class=\"comment\">// (1)</span></span><br><span class=\"line\">       el.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&#x27;yellow&#x27;</span>;   <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 在 constructor 中將 ElementRef inject 到 HighlightDirective 中</li>\n<li>(2): 透過使用 ElementRef 的 <code>nativeElement</code> property 授與對宿主 DOM element 的直接訪問權限，並將他的 style 改變為黃色</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中添加一個 element 並將剛剛客製化的 directive 加在上面</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">appHighlight</span>&gt;</span>Highlight me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png\"></p>\n<p>Angular 會將 HighlightDirective 給實例化並將對 <code>&lt;p&gt;</code> element 的 reference injects 到  highlight.directive.ts 的 constructor 中，讓他可以對這個元素的 style 進行更改。</p>\n<h1 id=\"Handling-user-events\"><a href=\"#Handling-user-events\" class=\"headerlink\" title=\"Handling user events\"></a>Handling user events</h1><p>除了改變 element 之外也可以在客製化的 directive 中檢測用戶在畫面中的事件（鼠標移入或移出）並對事件進行不同的響應。</p>\n<p>舉個例子，保持上面的例子只是將畫面上的 <code>&lt;p&gt;</code> element 綁定一個 hover 事件，當鼠標移到上面時將他背景顏色改為黃色</p>\n<ol>\n<li><p>從 <code>@angular/core</code>中導入 HostListener</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 highlight.directive.ts 中的 method 用於響應事件</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>) <span class=\"title function_\">onMouseEnter</span>(<span class=\"params\"></span>) &#123;               <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;yellow&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseleave&#x27;</span>) <span class=\"title function_\">onMouseLeave</span>(<span class=\"params\"></span>) &#123;               <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">highlight</span>(<span class=\"params\">color: <span class=\"built_in\">string</span></span>) &#123;                         <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 當鼠標移動到元素上時觸發此 method 對行為作出響應</li>\n<li>(2): 當鼠標從元素上離開時觸發此 method 對行為作出響應</li>\n<li>(3): 對綁定元素的 style 進行更改</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/l47DGum.gif\" alt=\"img\"></p>\n<p>在畫面中可以看，當我們的鼠標移動到 <code>&lt;p&gt;</code>  element 上面時會觸發 highlight.directive.ts 中的 method 將他的背景顏色改為黃色。</p>\n<h1 id=\"Passing-values-into-an-attribute-directive\"><a href=\"#Passing-values-into-an-attribute-directive\" class=\"headerlink\" title=\"Passing values into an attribute directive\"></a>Passing values into an attribute directive</h1><p>除了將你要更改的內容寫死在 directive 之外（上面例子是寫死 hover 時背景變黃色），你也可以透過傳遞參數的方式，動態的傳遞你所期望改變的內容，一樣拿上面的例子來延伸吧</p>\n<ol>\n<li><p>首先先改變 highlight.directive.ts 的內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() appHighlight = <span class=\"string\">&#x27;&#x27;</span>;                              <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>) <span class=\"title function_\">onMouseEnter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">appHighlight</span>);                     <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseleave&#x27;</span>) <span class=\"title function_\">onMouseLeave</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">highlight</span>(<span class=\"params\">color: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 Input</li>\n<li>(2): 新增一個 property 並使用 @Input() 將他裝飾為從父層傳遞的數據</li>\n<li>(3): 當鼠標移動到 element 時更改的顏色從寫死的狀態變更為綁定 @Input() 的內容</li>\n</ul>\n</li>\n<li><p>更改 app.component.html 的內容，將顏色傳遞給 HighlightDirective</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">appHighlight</span>]=<span class=\"string\">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>Highlight me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/Fh0oaOI.gif\" alt=\"img\"></p>\n<p>可以看到畫面中，當鼠標移動到 element 時從黃色變為我們傳遞給 directive 的紅色了。</p>\n<h1 id=\"Binding-to-a-second-property\"><a href=\"#Binding-to-a-second-property\" class=\"headerlink\" title=\"Binding to a second property\"></a>Binding to a second property</h1><p>除了可以傳遞參數給 directive 之外還可以對他設定一個預設值，以上面例子來說，我們可以設定一個預設值，直到使用者改變顏色後才變為指定的顏色</p>\n<ol>\n<li><p>更改 highlight.directive.ts 中的內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() appHighlight = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() defaultColor = <span class=\"string\">&#x27;&#x27;</span>;                              <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>) <span class=\"title function_\">onMouseEnter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">appHighlight</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">defaultColor</span> || <span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseleave&#x27;</span>) <span class=\"title function_\">onMouseLeave</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">highlight</span>(<span class=\"params\">color: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中添加一個 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  color = <span class=\"string\">&#x27;&#x27;</span>;                            <span class=\"comment\">// (1) </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  onClick (<span class=\"attr\">color</span>: <span class=\"built_in\">string</span>) &#123;              <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於傳給 directive</li>\n<li>(2): 新增一個 method 當畫面中的按鈕被點擊時觸發</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中新增三個 <code>&lt;button&gt;</code> 並將 directive 加上預設值</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(&#x27;green&#x27;)&quot;</span>&gt;</span>Green<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(&#x27;yellow&#x27;)&quot;</span>&gt;</span>Yellow<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(&#x27;cyan&#x27;)&quot;</span>&gt;</span>Cyan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">appHighlight</span>]=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">defaultColor</span>=<span class=\"string\">&quot;violet&quot;</span>&gt;</span>Highlight me too!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/b0ZYw8X.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們沒有點擊畫面中的 <code>&lt;button&gt;</code> 時我們的鼠標移動到 element 時顯示的顏色是預設的顏色，而當點擊了其中一個按鈕後就換更新為指定的顏色。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何建立與使用客製化的 directive，可以透過使用 ElementRef 的 <code>nativeElement</code> property 授與對宿主 DOM element 的直接訪問權限，可以使用 HostListener 用來處理畫面中使用者的行為，也可以使用之前提到的 @Input() 用於傳遞參數進到 directive 中，這個客製化的 directive 對於要處理特別的情況時非常好用。</p>\n<p>下一章將介紹如何創建客製化的 structural directive並介紹 directive 使如何工作的、 Angular 如解釋速記以及如何添加 template 的保護 property 用於捕獲 template 的錯誤，那我們就明天見囉！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/attribute-directives\">Angular.io - attribute directive</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在前幾天中有介紹了 Angular 中內建的一些 attribute directive，但是在實際開發專案時可能會遇到內建 attribute directive 無法處理的問題，這時候就需要建立客製化 attribute directive，本章就會介紹如何建立屬於自己的 attribute directive。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/201247672vA3mJw784.jpg\"></p>","more":"<h1 id=\"Building-an-attribute-directive\"><a href=\"#Building-an-attribute-directive\" class=\"headerlink\" title=\"Building an attribute directive\"></a>Building an attribute directive</h1><p>來跟著 Angular 的官方文檔做一個練習，將會建立一個客製化的 attribute directive，將一個宿主 element 的背景顏色設置為黃色的 directive。</p>\n<ol>\n<li><p>首先先使用 Angular CLI 建立一個 directive</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive highlight</span><br><span class=\"line\">ng g d highlight</span><br></pre></td></tr></table></figure>\n\n<p> 使用這個 CLI 指令可以自動建立一個名為 highlight.directive.ts 和 highlight.directive.spec.ts 的檔案，並且會在被加入到 app.module.ts 的 <code>declares</code> ，所以如果不是用 CLI 建立 directive file 時，要記得手動將它加入到 declares 裡面喔！</p>\n</li>\n<li><p>在 highlight.directive.ts 中從 <code>@angular/core</code> 中導入 <code>ElementRef</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">el: ElementRef</span>) &#123;                           <span class=\"comment\">// (1)</span></span><br><span class=\"line\">       el.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&#x27;yellow&#x27;</span>;   <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 在 constructor 中將 ElementRef inject 到 HighlightDirective 中</li>\n<li>(2): 透過使用 ElementRef 的 <code>nativeElement</code> property 授與對宿主 DOM element 的直接訪問權限，並將他的 style 改變為黃色</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中添加一個 element 並將剛剛客製化的 directive 加在上面</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">appHighlight</span>&gt;</span>Highlight me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210809/20124767f71HrHwdCO.png\"></p>\n<p>Angular 會將 HighlightDirective 給實例化並將對 <code>&lt;p&gt;</code> element 的 reference injects 到  highlight.directive.ts 的 constructor 中，讓他可以對這個元素的 style 進行更改。</p>\n<h1 id=\"Handling-user-events\"><a href=\"#Handling-user-events\" class=\"headerlink\" title=\"Handling user events\"></a>Handling user events</h1><p>除了改變 element 之外也可以在客製化的 directive 中檢測用戶在畫面中的事件（鼠標移入或移出）並對事件進行不同的響應。</p>\n<p>舉個例子，保持上面的例子只是將畫面上的 <code>&lt;p&gt;</code> element 綁定一個 hover 事件，當鼠標移到上面時將他背景顏色改為黃色</p>\n<ol>\n<li><p>從 <code>@angular/core</code>中導入 HostListener</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 highlight.directive.ts 中的 method 用於響應事件</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>) <span class=\"title function_\">onMouseEnter</span>(<span class=\"params\"></span>) &#123;               <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;yellow&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseleave&#x27;</span>) <span class=\"title function_\">onMouseLeave</span>(<span class=\"params\"></span>) &#123;               <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">highlight</span>(<span class=\"params\">color: <span class=\"built_in\">string</span></span>) &#123;                         <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 當鼠標移動到元素上時觸發此 method 對行為作出響應</li>\n<li>(2): 當鼠標從元素上離開時觸發此 method 對行為作出響應</li>\n<li>(3): 對綁定元素的 style 進行更改</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/l47DGum.gif\" alt=\"img\"></p>\n<p>在畫面中可以看，當我們的鼠標移動到 <code>&lt;p&gt;</code>  element 上面時會觸發 highlight.directive.ts 中的 method 將他的背景顏色改為黃色。</p>\n<h1 id=\"Passing-values-into-an-attribute-directive\"><a href=\"#Passing-values-into-an-attribute-directive\" class=\"headerlink\" title=\"Passing values into an attribute directive\"></a>Passing values into an attribute directive</h1><p>除了將你要更改的內容寫死在 directive 之外（上面例子是寫死 hover 時背景變黃色），你也可以透過傳遞參數的方式，動態的傳遞你所期望改變的內容，一樣拿上面的例子來延伸吧</p>\n<ol>\n<li><p>首先先改變 highlight.directive.ts 的內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() appHighlight = <span class=\"string\">&#x27;&#x27;</span>;                              <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>) <span class=\"title function_\">onMouseEnter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">appHighlight</span>);                     <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseleave&#x27;</span>) <span class=\"title function_\">onMouseLeave</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">highlight</span>(<span class=\"params\">color: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 Input</li>\n<li>(2): 新增一個 property 並使用 @Input() 將他裝飾為從父層傳遞的數據</li>\n<li>(3): 當鼠標移動到 element 時更改的顏色從寫死的狀態變更為綁定 @Input() 的內容</li>\n</ul>\n</li>\n<li><p>更改 app.component.html 的內容，將顏色傳遞給 HighlightDirective</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">appHighlight</span>]=<span class=\"string\">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>Highlight me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/Fh0oaOI.gif\" alt=\"img\"></p>\n<p>可以看到畫面中，當鼠標移動到 element 時從黃色變為我們傳遞給 directive 的紅色了。</p>\n<h1 id=\"Binding-to-a-second-property\"><a href=\"#Binding-to-a-second-property\" class=\"headerlink\" title=\"Binding to a second property\"></a>Binding to a second property</h1><p>除了可以傳遞參數給 directive 之外還可以對他設定一個預設值，以上面例子來說，我們可以設定一個預設值，直到使用者改變顏色後才變為指定的顏色</p>\n<ol>\n<li><p>更改 highlight.directive.ts 中的內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ElementRef</span>, <span class=\"title class_\">HostListener</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appHighlight]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HighlightDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() appHighlight = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() defaultColor = <span class=\"string\">&#x27;&#x27;</span>;                              <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>) <span class=\"title function_\">onMouseEnter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">appHighlight</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">defaultColor</span> || <span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@HostListener</span>(<span class=\"string\">&#x27;mouseleave&#x27;</span>) <span class=\"title function_\">onMouseLeave</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">highlight</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">highlight</span>(<span class=\"params\">color: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中添加一個 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  color = <span class=\"string\">&#x27;&#x27;</span>;                            <span class=\"comment\">// (1) </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  onClick (<span class=\"attr\">color</span>: <span class=\"built_in\">string</span>) &#123;              <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於傳給 directive</li>\n<li>(2): 新增一個 method 當畫面中的按鈕被點擊時觸發</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中新增三個 <code>&lt;button&gt;</code> 並將 directive 加上預設值</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(&#x27;green&#x27;)&quot;</span>&gt;</span>Green<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(&#x27;yellow&#x27;)&quot;</span>&gt;</span>Yellow<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(&#x27;cyan&#x27;)&quot;</span>&gt;</span>Cyan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">appHighlight</span>]=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">defaultColor</span>=<span class=\"string\">&quot;violet&quot;</span>&gt;</span>Highlight me too!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/b0ZYw8X.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當我們沒有點擊畫面中的 <code>&lt;button&gt;</code> 時我們的鼠標移動到 element 時顯示的顏色是預設的顏色，而當點擊了其中一個按鈕後就換更新為指定的顏色。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何建立與使用客製化的 directive，可以透過使用 ElementRef 的 <code>nativeElement</code> property 授與對宿主 DOM element 的直接訪問權限，可以使用 HostListener 用來處理畫面中使用者的行為，也可以使用之前提到的 @Input() 用於傳遞參數進到 directive 中，這個客製化的 directive 對於要處理特別的情況時非常好用。</p>\n<p>下一章將介紹如何創建客製化的 structural directive並介紹 directive 使如何工作的、 Angular 如解釋速記以及如何添加 template 的保護 property 用於捕獲 template 的錯誤，那我們就明天見囉！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/attribute-directives\">Angular.io - attribute directive</a></li>\n</ul>"},{"title":"Day16. Writing structural directives","date":"2021-09-16T02:05:45.000Z","_content":"\n在上一章中介紹了如何建立客製化的 attribute directive 與使用，而本章將會介紹如何建立 structural directives，那就接著往下看吧！\n\n![img](https://www.theagilityeffect.com/app/uploads/2019/03/00_VINCI-ICONOGRAPHIE-GettyImages-890132412_1280x680.jpg)\n\n<!-- more -->\n\n# Creating a structural directive\n\n本章一樣會利用 Angular 官方文檔的例子建立一個範例，範例內容是會建立一個 `UnlessDirective` 以及該如何設置他的條件值，這個 `UnlessDirective` 與 *ngIf 相法，當為 true 時會顯示 NgIf 的內容反之則顯示 `UnlessDirective` 的\n\n1. 首先利用 Angular CLI 建立一個 directive\n\n    ```bash\n    ng generate directive unless\n    ng g d unless\n    ```\n\n2. 在 `@angular/core` 中引入 `Input`, `TemplateRef`, `ViewContainerRef`\n\n    ```typescript\n    import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n    @Directive({ selector: '[appUnless]'})\n    export class UnlessDirective {\n    }\n    ```\n\n3. 在 unless.directive.ts 的 constructor 中 inject TemplateRef 與 ViewContainerRef 成為他的私有變量\n\n    ```typescript\n    import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n    @Directive({ selector: '[appUnless]' })\n    export class UnlessDirective {\n      constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef\n      ) {}\n    }\n    ```\n\n    UnlessDirective 會從 Angular 生成的 `<ng-template>` 中創建一個 embedded view 並將他插入到宿主 element 相鄰的地方，而 `TemplateRef` 可以讓你訪問到 `<ng-template>` 的內容，而 ViewContainerRef 可以讓你訪問 view container。\n\n    **Note**: embedded view 是為 ng-template 中指定的 view node 所創建的 view，簡單來說他類似 component 中的 template 所創建出來的 view，但是他`沒有 component 的元素或數據`，不過他還是屬於一個有效的 view，會在檢測過程中與其他 view  一樣被檢測到。\n\n4. 在 unless.directive.ts 中添加一個 property 用來表示是否顯示畫面，與使用 setter 添加一個 appUnless property。\n\n    ```typescript\n    import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n    @Directive({ selector: '[appUnless]' })\n    export class UnlessDirective {\n      private hasView = false;                                    // (1)\n      constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef\n      ) {}\n\n      @Input() set appUnless(condition: boolean) {                // (2)\n        if (!condition && !this.hasView) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n          this.hasView = true;\n        } else {\n          this.viewContainer.clear();\n          this.hasView = false;\n        }\n      }\n    }\n    ```\n\n    - (1): 添加一個 property 用於表示是否顯示畫面\n    - (2): 用 setter 添加一個 property，當 condition 為 true 時透過 viewContainer 創造一個 embedded view 並將 templateRef 放入，如果為 false 的話則清除\n5. 在 app.component.ts 中新增一個 property 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      condition = false;                        // (1)\n\n      onClick() {                               // (2)\n        this.condition = !this.condition;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於綁定 structural directive\n    - (2): 新增一個 method 用於點擊畫面中按鈕時觸發變更 condition 的狀態\n6. 在 app.component.html 中使用我們建立的 directive\n\n    ```html\n    <!-- app.component.html -->\n\n    <div *appUnless=\"condition\">unless display area</div>\n    <div *ngIf=\"condition\">ngIf display area</div>\n\n    <button (click)=\"onClick()\">Click</button>\n    ```\n    \n![img](https://i.imgur.com/hTN54zr.gif)\n\n在畫面中可以看到，我們一開始設計的邏輯就是希望要跟 ngIf 相反，所以當 condition = false 時會顯示我們剛建立的 directive 滿足的區域 `unless display area`，反之當點擊按鈕將 condition 變為 true 時，則會顯示 ngIf 的內容 `ngIf display area`。\n\n\n\n# Structural directive shorthand\n\n看完上面的例子後應該會了解該怎麼建立自己的 structural directive，但是可能有人會疑問，連自己建立的 structural directive 也要使用`星號 ( * )` 嗎？這個星號是什麼？接著就要來講解一下這個星號是什麼。\n\nstructural directive 上面的星號( * )語法是 Angular 將其解釋為更常形式的速記，他會將星號轉換成一個 `<ng-template>` 並將它圍繞著宿主元素與他的所有子層，舉例來說\n\n```html\n<div *ngIf=\"hero\" class=\"name\">{{hero.name}}</div>\n```\n\n當 hero 為 true 時才會顯示英雄的名字，而其實 Angular 看到上面的程式後會將它轉變為\n\n```html\n<ng-template [ngIf]=\"hero\">\n  <div class=\"name\">{{hero.name}}</div>\n</ng-template>\n```\n\n可以看到 Angular 將星號變為一個 `<ng-template>` ，而 ngIf 變成了他的 property binding，而其他的內容會移動到 `<ng-template>` 之中，因為 Angular 不會真正的創建 `<ng-template>` 元素而是指將內部的 `<div>` 和 `comment node placeholder` 放到 DOM 中。\n\n![https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png](https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png)\n\n而如果 ngIf 為 false 的話則會連 `<div>` 的內容都不會放在 DOM 中。\n\n![https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png](https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png)\n\n看完了 ngIf 的速記用法後，接著來看看 ngFor 會長什麼樣子，一樣先舉個例子\n\n```html\n<div *ngFor=\"let hero of heroes; let i=index; let odd=odd; [class.odd]=\"odd\">\n  ({{i}}) {{hero.name}}\n</div>\n```\n\n使用了 ngFor 將 heroes 中的內容迭代的顯示在畫面上，並使用了之前提到的 ngFor 的一些參數，而這個例子在經過 Angular 轉換後會變成\n\n```html\n<ng-template ngFor let-hero [ngForOf]=\"heroes\" let-i=\"index\" let-odd=\"odd\">\n  <div [class.odd]=\"odd\">({{i}}) {{hero.name}}</div>\n</ng-template>\n```\n\n可以看到他跟 ngIf 一樣會將星號變為一個 `<ng-template>` 並且將 ngFor 變為 property binding，比較不同的是在這個 `<ng-template>` 中使用了 `let` 宣告了一個模板輸入變量，讓他可以被 template 中被引用，在上面的例子中的輸入變量是 `hero`, `i`, 'odd'，解析器會將 let hero、let i 和 let odd 轉換為 `let-hero`、 `let-i` 和 `let-odd` ，Angular 會將當前的值在適當的時間點賦予給宣告的輸入變量。\n\n## Creating template fragments with `<ng-template>`\n\nAngular 的 `<ng-template>` 定義了一個默認不渲染任何東西的 template，可以透過 structural directive 來控制是否要顯示 `<ng-template>` 中定義的內容\n\n```html\n<p>Hip!</p>\n<ng-template>\n  <p>Hip!</p>\n</ng-template>\n<p>Hooray!</p>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png](https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png)\n\n可以看到，當我們使用 `<ng-template>` 將 `<p>Hip!</p>` 包住，但是沒有使用 structural directive 決定他是否要被顯示出來，所以在 DOM 中會看到 `comment node placeholder` 而不是希望呈現的數據。\n\n\n# 結論\n\n本章中介紹了如何建立客製化的 structural directive，他相較於建立客製化的 attribute directive 男的多，所以需要瞭解更多的觀念，比如說 Angular 的 view 觀念其實非常複雜，這邊只有稍微提到而已，如果之後有專案上的需求再回來鑽研就好，這邊只是大概介紹該如何使用與客製化。\n\n本篇是 directive 的最後一篇，明天將會回頭介紹 component 的最後一個例子，動態載入 component，他使用了之前講到的滿多技巧，範例的難度也比較大，那麼就明天來好好的講解一下吧，那我們就明天見吧。\n\n\n\n# Reference\n\n- [Angular.io - structuarl directives](https://angular.io/guide/structural-directives)","source":"_posts/Angular/angular-16.md","raw":"---\ntitle: Day16. Writing structural directives\ndate: 2021-09-16 10:05:45\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一章中介紹了如何建立客製化的 attribute directive 與使用，而本章將會介紹如何建立 structural directives，那就接著往下看吧！\n\n![img](https://www.theagilityeffect.com/app/uploads/2019/03/00_VINCI-ICONOGRAPHIE-GettyImages-890132412_1280x680.jpg)\n\n<!-- more -->\n\n# Creating a structural directive\n\n本章一樣會利用 Angular 官方文檔的例子建立一個範例，範例內容是會建立一個 `UnlessDirective` 以及該如何設置他的條件值，這個 `UnlessDirective` 與 *ngIf 相法，當為 true 時會顯示 NgIf 的內容反之則顯示 `UnlessDirective` 的\n\n1. 首先利用 Angular CLI 建立一個 directive\n\n    ```bash\n    ng generate directive unless\n    ng g d unless\n    ```\n\n2. 在 `@angular/core` 中引入 `Input`, `TemplateRef`, `ViewContainerRef`\n\n    ```typescript\n    import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n    @Directive({ selector: '[appUnless]'})\n    export class UnlessDirective {\n    }\n    ```\n\n3. 在 unless.directive.ts 的 constructor 中 inject TemplateRef 與 ViewContainerRef 成為他的私有變量\n\n    ```typescript\n    import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n    @Directive({ selector: '[appUnless]' })\n    export class UnlessDirective {\n      constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef\n      ) {}\n    }\n    ```\n\n    UnlessDirective 會從 Angular 生成的 `<ng-template>` 中創建一個 embedded view 並將他插入到宿主 element 相鄰的地方，而 `TemplateRef` 可以讓你訪問到 `<ng-template>` 的內容，而 ViewContainerRef 可以讓你訪問 view container。\n\n    **Note**: embedded view 是為 ng-template 中指定的 view node 所創建的 view，簡單來說他類似 component 中的 template 所創建出來的 view，但是他`沒有 component 的元素或數據`，不過他還是屬於一個有效的 view，會在檢測過程中與其他 view  一樣被檢測到。\n\n4. 在 unless.directive.ts 中添加一個 property 用來表示是否顯示畫面，與使用 setter 添加一個 appUnless property。\n\n    ```typescript\n    import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n    @Directive({ selector: '[appUnless]' })\n    export class UnlessDirective {\n      private hasView = false;                                    // (1)\n      constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef\n      ) {}\n\n      @Input() set appUnless(condition: boolean) {                // (2)\n        if (!condition && !this.hasView) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n          this.hasView = true;\n        } else {\n          this.viewContainer.clear();\n          this.hasView = false;\n        }\n      }\n    }\n    ```\n\n    - (1): 添加一個 property 用於表示是否顯示畫面\n    - (2): 用 setter 添加一個 property，當 condition 為 true 時透過 viewContainer 創造一個 embedded view 並將 templateRef 放入，如果為 false 的話則清除\n5. 在 app.component.ts 中新增一個 property 與 method\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n      condition = false;                        // (1)\n\n      onClick() {                               // (2)\n        this.condition = !this.condition;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於綁定 structural directive\n    - (2): 新增一個 method 用於點擊畫面中按鈕時觸發變更 condition 的狀態\n6. 在 app.component.html 中使用我們建立的 directive\n\n    ```html\n    <!-- app.component.html -->\n\n    <div *appUnless=\"condition\">unless display area</div>\n    <div *ngIf=\"condition\">ngIf display area</div>\n\n    <button (click)=\"onClick()\">Click</button>\n    ```\n    \n![img](https://i.imgur.com/hTN54zr.gif)\n\n在畫面中可以看到，我們一開始設計的邏輯就是希望要跟 ngIf 相反，所以當 condition = false 時會顯示我們剛建立的 directive 滿足的區域 `unless display area`，反之當點擊按鈕將 condition 變為 true 時，則會顯示 ngIf 的內容 `ngIf display area`。\n\n\n\n# Structural directive shorthand\n\n看完上面的例子後應該會了解該怎麼建立自己的 structural directive，但是可能有人會疑問，連自己建立的 structural directive 也要使用`星號 ( * )` 嗎？這個星號是什麼？接著就要來講解一下這個星號是什麼。\n\nstructural directive 上面的星號( * )語法是 Angular 將其解釋為更常形式的速記，他會將星號轉換成一個 `<ng-template>` 並將它圍繞著宿主元素與他的所有子層，舉例來說\n\n```html\n<div *ngIf=\"hero\" class=\"name\">{{hero.name}}</div>\n```\n\n當 hero 為 true 時才會顯示英雄的名字，而其實 Angular 看到上面的程式後會將它轉變為\n\n```html\n<ng-template [ngIf]=\"hero\">\n  <div class=\"name\">{{hero.name}}</div>\n</ng-template>\n```\n\n可以看到 Angular 將星號變為一個 `<ng-template>` ，而 ngIf 變成了他的 property binding，而其他的內容會移動到 `<ng-template>` 之中，因為 Angular 不會真正的創建 `<ng-template>` 元素而是指將內部的 `<div>` 和 `comment node placeholder` 放到 DOM 中。\n\n![https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png](https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png)\n\n而如果 ngIf 為 false 的話則會連 `<div>` 的內容都不會放在 DOM 中。\n\n![https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png](https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png)\n\n看完了 ngIf 的速記用法後，接著來看看 ngFor 會長什麼樣子，一樣先舉個例子\n\n```html\n<div *ngFor=\"let hero of heroes; let i=index; let odd=odd; [class.odd]=\"odd\">\n  ({{i}}) {{hero.name}}\n</div>\n```\n\n使用了 ngFor 將 heroes 中的內容迭代的顯示在畫面上，並使用了之前提到的 ngFor 的一些參數，而這個例子在經過 Angular 轉換後會變成\n\n```html\n<ng-template ngFor let-hero [ngForOf]=\"heroes\" let-i=\"index\" let-odd=\"odd\">\n  <div [class.odd]=\"odd\">({{i}}) {{hero.name}}</div>\n</ng-template>\n```\n\n可以看到他跟 ngIf 一樣會將星號變為一個 `<ng-template>` 並且將 ngFor 變為 property binding，比較不同的是在這個 `<ng-template>` 中使用了 `let` 宣告了一個模板輸入變量，讓他可以被 template 中被引用，在上面的例子中的輸入變量是 `hero`, `i`, 'odd'，解析器會將 let hero、let i 和 let odd 轉換為 `let-hero`、 `let-i` 和 `let-odd` ，Angular 會將當前的值在適當的時間點賦予給宣告的輸入變量。\n\n## Creating template fragments with `<ng-template>`\n\nAngular 的 `<ng-template>` 定義了一個默認不渲染任何東西的 template，可以透過 structural directive 來控制是否要顯示 `<ng-template>` 中定義的內容\n\n```html\n<p>Hip!</p>\n<ng-template>\n  <p>Hip!</p>\n</ng-template>\n<p>Hooray!</p>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png](https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png)\n\n可以看到，當我們使用 `<ng-template>` 將 `<p>Hip!</p>` 包住，但是沒有使用 structural directive 決定他是否要被顯示出來，所以在 DOM 中會看到 `comment node placeholder` 而不是希望呈現的數據。\n\n\n# 結論\n\n本章中介紹了如何建立客製化的 structural directive，他相較於建立客製化的 attribute directive 男的多，所以需要瞭解更多的觀念，比如說 Angular 的 view 觀念其實非常複雜，這邊只有稍微提到而已，如果之後有專案上的需求再回來鑽研就好，這邊只是大概介紹該如何使用與客製化。\n\n本篇是 directive 的最後一篇，明天將會回頭介紹 component 的最後一個例子，動態載入 component，他使用了之前講到的滿多技巧，範例的難度也比較大，那麼就明天來好好的講解一下吧，那我們就明天見吧。\n\n\n\n# Reference\n\n- [Angular.io - structuarl directives](https://angular.io/guide/structural-directives)","slug":"Angular/angular-16","published":1,"updated":"2022-02-16T01:37:45.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bds000595w30b1b65cc","content":"<p>在上一章中介紹了如何建立客製化的 attribute directive 與使用，而本章將會介紹如何建立 structural directives，那就接著往下看吧！</p>\n<p><img src=\"https://www.theagilityeffect.com/app/uploads/2019/03/00_VINCI-ICONOGRAPHIE-GettyImages-890132412_1280x680.jpg\" alt=\"img\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Creating-a-structural-directive\"><a href=\"#Creating-a-structural-directive\" class=\"headerlink\" title=\"Creating a structural directive\"></a>Creating a structural directive</h1><p>本章一樣會利用 Angular 官方文檔的例子建立一個範例，範例內容是會建立一個 <code>UnlessDirective</code> 以及該如何設置他的條件值，這個 <code>UnlessDirective</code> 與 *ngIf 相法，當為 true 時會顯示 NgIf 的內容反之則顯示 <code>UnlessDirective</code> 的</p>\n<ol>\n<li><p>首先利用 Angular CLI 建立一個 directive</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive unless</span><br><span class=\"line\">ng g d unless</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>@angular/core</code> 中引入 <code>Input</code>, <code>TemplateRef</code>, <code>ViewContainerRef</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">TemplateRef</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appUnless]&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnlessDirective</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 unless.directive.ts 的 constructor 中 inject TemplateRef 與 ViewContainerRef 成為他的私有變量</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">TemplateRef</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appUnless]&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnlessDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> templateRef: TemplateRef&lt;<span class=\"built_in\">any</span>&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> viewContainer: ViewContainerRef</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> UnlessDirective 會從 Angular 生成的 <code>&lt;ng-template&gt;</code> 中創建一個 embedded view 並將他插入到宿主 element 相鄰的地方，而 <code>TemplateRef</code> 可以讓你訪問到 <code>&lt;ng-template&gt;</code> 的內容，而 ViewContainerRef 可以讓你訪問 view container。</p>\n<p> <strong>Note</strong>: embedded view 是為 ng-template 中指定的 view node 所創建的 view，簡單來說他類似 component 中的 template 所創建出來的 view，但是他<code>沒有 component 的元素或數據</code>，不過他還是屬於一個有效的 view，會在檢測過程中與其他 view  一樣被檢測到。</p>\n</li>\n<li><p>在 unless.directive.ts 中添加一個 property 用來表示是否顯示畫面，與使用 setter 添加一個 appUnless property。</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">TemplateRef</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appUnless]&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnlessDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> hasView = <span class=\"literal\">false</span>;                                    <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> templateRef: TemplateRef&lt;<span class=\"built_in\">any</span>&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> viewContainer: ViewContainerRef</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">set</span> <span class=\"title function_\">appUnless</span>(<span class=\"params\">condition: <span class=\"built_in\">boolean</span></span>) &#123;                <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!condition &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">hasView</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">viewContainer</span>.<span class=\"title function_\">createEmbeddedView</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">templateRef</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hasView</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">viewContainer</span>.<span class=\"title function_\">clear</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hasView</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 添加一個 property 用於表示是否顯示畫面</li>\n<li>(2): 用 setter 添加一個 property，當 condition 為 true 時透過 viewContainer 創造一個 embedded view 並將 templateRef 放入，如果為 false 的話則清除</li>\n</ul>\n</li>\n<li><p>在 app.component.ts 中新增一個 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  condition = <span class=\"literal\">false</span>;                        <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;                               <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">condition</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">condition</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於綁定 structural directive</li>\n<li>(2): 新增一個 method 用於點擊畫面中按鈕時觸發變更 condition 的狀態</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中使用我們建立的 directive</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">appUnless</span>=<span class=\"string\">&quot;condition&quot;</span>&gt;</span>unless display area<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;condition&quot;</span>&gt;</span>ngIf display area<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/hTN54zr.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，我們一開始設計的邏輯就是希望要跟 ngIf 相反，所以當 condition &#x3D; false 時會顯示我們剛建立的 directive 滿足的區域 <code>unless display area</code>，反之當點擊按鈕將 condition 變為 true 時，則會顯示 ngIf 的內容 <code>ngIf display area</code>。</p>\n<h1 id=\"Structural-directive-shorthand\"><a href=\"#Structural-directive-shorthand\" class=\"headerlink\" title=\"Structural directive shorthand\"></a>Structural directive shorthand</h1><p>看完上面的例子後應該會了解該怎麼建立自己的 structural directive，但是可能有人會疑問，連自己建立的 structural directive 也要使用<code>星號 ( * )</code> 嗎？這個星號是什麼？接著就要來講解一下這個星號是什麼。</p>\n<p>structural directive 上面的星號( * )語法是 Angular 將其解釋為更常形式的速記，他會將星號轉換成一個 <code>&lt;ng-template&gt;</code> 並將它圍繞著宿主元素與他的所有子層，舉例來說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;hero&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>當 hero 為 true 時才會顯示英雄的名字，而其實 Angular 看到上面的程式後會將它轉變為</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> [<span class=\"attr\">ngIf</span>]=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到 Angular 將星號變為一個 <code>&lt;ng-template&gt;</code> ，而 ngIf 變成了他的 property binding，而其他的內容會移動到 <code>&lt;ng-template&gt;</code> 之中，因為 Angular 不會真正的創建 <code>&lt;ng-template&gt;</code> 元素而是指將內部的 <code>&lt;div&gt;</code> 和 <code>comment node placeholder</code> 放到 DOM 中。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png\"></p>\n<p>而如果 ngIf 為 false 的話則會連 <code>&lt;div&gt;</code> 的內容都不會放在 DOM 中。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png\"></p>\n<p>看完了 ngIf 的速記用法後，接著來看看 ngFor 會長什麼樣子，一樣先舉個例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let hero of heroes; let i=index; let odd=odd; [class.odd]=&quot;</span><span class=\"attr\">odd</span>&quot;&gt;</span></span><br><span class=\"line\">  (&#123;&#123;i&#125;&#125;) &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用了 ngFor 將 heroes 中的內容迭代的顯示在畫面上，並使用了之前提到的 ngFor 的一些參數，而這個例子在經過 Angular 轉換後會變成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> <span class=\"attr\">ngFor</span> <span class=\"attr\">let-hero</span> [<span class=\"attr\">ngForOf</span>]=<span class=\"string\">&quot;heroes&quot;</span> <span class=\"attr\">let-i</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">let-odd</span>=<span class=\"string\">&quot;odd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">class.odd</span>]=<span class=\"string\">&quot;odd&quot;</span>&gt;</span>(&#123;&#123;i&#125;&#125;) &#123;&#123;hero.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到他跟 ngIf 一樣會將星號變為一個 <code>&lt;ng-template&gt;</code> 並且將 ngFor 變為 property binding，比較不同的是在這個 <code>&lt;ng-template&gt;</code> 中使用了 <code>let</code> 宣告了一個模板輸入變量，讓他可以被 template 中被引用，在上面的例子中的輸入變量是 <code>hero</code>, <code>i</code>, ‘odd’，解析器會將 let hero、let i 和 let odd 轉換為 <code>let-hero</code>、 <code>let-i</code> 和 <code>let-odd</code> ，Angular 會將當前的值在適當的時間點賦予給宣告的輸入變量。</p>\n<h2 id=\"Creating-template-fragments-with-lt-ng-template-gt\"><a href=\"#Creating-template-fragments-with-lt-ng-template-gt\" class=\"headerlink\" title=\"Creating template fragments with &lt;ng-template&gt;\"></a>Creating template fragments with <code>&lt;ng-template&gt;</code></h2><p>Angular 的 <code>&lt;ng-template&gt;</code> 定義了一個默認不渲染任何東西的 template，可以透過 structural directive 來控制是否要顯示 <code>&lt;ng-template&gt;</code> 中定義的內容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hip!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hip!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hooray!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png\"></p>\n<p>可以看到，當我們使用 <code>&lt;ng-template&gt;</code> 將 <code>&lt;p&gt;Hip!&lt;/p&gt;</code> 包住，但是沒有使用 structural directive 決定他是否要被顯示出來，所以在 DOM 中會看到 <code>comment node placeholder</code> 而不是希望呈現的數據。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立客製化的 structural directive，他相較於建立客製化的 attribute directive 男的多，所以需要瞭解更多的觀念，比如說 Angular 的 view 觀念其實非常複雜，這邊只有稍微提到而已，如果之後有專案上的需求再回來鑽研就好，這邊只是大概介紹該如何使用與客製化。</p>\n<p>本篇是 directive 的最後一篇，明天將會回頭介紹 component 的最後一個例子，動態載入 component，他使用了之前講到的滿多技巧，範例的難度也比較大，那麼就明天來好好的講解一下吧，那我們就明天見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/structural-directives\">Angular.io - structuarl directives</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一章中介紹了如何建立客製化的 attribute directive 與使用，而本章將會介紹如何建立 structural directives，那就接著往下看吧！</p>\n<p><img src=\"https://www.theagilityeffect.com/app/uploads/2019/03/00_VINCI-ICONOGRAPHIE-GettyImages-890132412_1280x680.jpg\" alt=\"img\"></p>","more":"<h1 id=\"Creating-a-structural-directive\"><a href=\"#Creating-a-structural-directive\" class=\"headerlink\" title=\"Creating a structural directive\"></a>Creating a structural directive</h1><p>本章一樣會利用 Angular 官方文檔的例子建立一個範例，範例內容是會建立一個 <code>UnlessDirective</code> 以及該如何設置他的條件值，這個 <code>UnlessDirective</code> 與 *ngIf 相法，當為 true 時會顯示 NgIf 的內容反之則顯示 <code>UnlessDirective</code> 的</p>\n<ol>\n<li><p>首先利用 Angular CLI 建立一個 directive</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive unless</span><br><span class=\"line\">ng g d unless</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>@angular/core</code> 中引入 <code>Input</code>, <code>TemplateRef</code>, <code>ViewContainerRef</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">TemplateRef</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appUnless]&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnlessDirective</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 unless.directive.ts 的 constructor 中 inject TemplateRef 與 ViewContainerRef 成為他的私有變量</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">TemplateRef</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appUnless]&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnlessDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> templateRef: TemplateRef&lt;<span class=\"built_in\">any</span>&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> viewContainer: ViewContainerRef</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> UnlessDirective 會從 Angular 生成的 <code>&lt;ng-template&gt;</code> 中創建一個 embedded view 並將他插入到宿主 element 相鄰的地方，而 <code>TemplateRef</code> 可以讓你訪問到 <code>&lt;ng-template&gt;</code> 的內容，而 ViewContainerRef 可以讓你訪問 view container。</p>\n<p> <strong>Note</strong>: embedded view 是為 ng-template 中指定的 view node 所創建的 view，簡單來說他類似 component 中的 template 所創建出來的 view，但是他<code>沒有 component 的元素或數據</code>，不過他還是屬於一個有效的 view，會在檢測過程中與其他 view  一樣被檢測到。</p>\n</li>\n<li><p>在 unless.directive.ts 中添加一個 property 用來表示是否顯示畫面，與使用 setter 添加一個 appUnless property。</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">TemplateRef</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appUnless]&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnlessDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> hasView = <span class=\"literal\">false</span>;                                    <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> templateRef: TemplateRef&lt;<span class=\"built_in\">any</span>&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> viewContainer: ViewContainerRef</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">set</span> <span class=\"title function_\">appUnless</span>(<span class=\"params\">condition: <span class=\"built_in\">boolean</span></span>) &#123;                <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!condition &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">hasView</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">viewContainer</span>.<span class=\"title function_\">createEmbeddedView</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">templateRef</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hasView</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">viewContainer</span>.<span class=\"title function_\">clear</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hasView</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 添加一個 property 用於表示是否顯示畫面</li>\n<li>(2): 用 setter 添加一個 property，當 condition 為 true 時透過 viewContainer 創造一個 embedded view 並將 templateRef 放入，如果為 false 的話則清除</li>\n</ul>\n</li>\n<li><p>在 app.component.ts 中新增一個 property 與 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  condition = <span class=\"literal\">false</span>;                        <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;                               <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">condition</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">condition</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於綁定 structural directive</li>\n<li>(2): 新增一個 method 用於點擊畫面中按鈕時觸發變更 condition 的狀態</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中使用我們建立的 directive</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">appUnless</span>=<span class=\"string\">&quot;condition&quot;</span>&gt;</span>unless display area<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;condition&quot;</span>&gt;</span>ngIf display area<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/hTN54zr.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，我們一開始設計的邏輯就是希望要跟 ngIf 相反，所以當 condition &#x3D; false 時會顯示我們剛建立的 directive 滿足的區域 <code>unless display area</code>，反之當點擊按鈕將 condition 變為 true 時，則會顯示 ngIf 的內容 <code>ngIf display area</code>。</p>\n<h1 id=\"Structural-directive-shorthand\"><a href=\"#Structural-directive-shorthand\" class=\"headerlink\" title=\"Structural directive shorthand\"></a>Structural directive shorthand</h1><p>看完上面的例子後應該會了解該怎麼建立自己的 structural directive，但是可能有人會疑問，連自己建立的 structural directive 也要使用<code>星號 ( * )</code> 嗎？這個星號是什麼？接著就要來講解一下這個星號是什麼。</p>\n<p>structural directive 上面的星號( * )語法是 Angular 將其解釋為更常形式的速記，他會將星號轉換成一個 <code>&lt;ng-template&gt;</code> 並將它圍繞著宿主元素與他的所有子層，舉例來說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;hero&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>當 hero 為 true 時才會顯示英雄的名字，而其實 Angular 看到上面的程式後會將它轉變為</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> [<span class=\"attr\">ngIf</span>]=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到 Angular 將星號變為一個 <code>&lt;ng-template&gt;</code> ，而 ngIf 變成了他的 property binding，而其他的內容會移動到 <code>&lt;ng-template&gt;</code> 之中，因為 Angular 不會真正的創建 <code>&lt;ng-template&gt;</code> 元素而是指將內部的 <code>&lt;div&gt;</code> 和 <code>comment node placeholder</code> 放到 DOM 中。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767YcWEc4HmyA.png\"></p>\n<p>而如果 ngIf 為 false 的話則會連 <code>&lt;div&gt;</code> 的內容都不會放在 DOM 中。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210811/20124767mkg1tsQNMi.png\"></p>\n<p>看完了 ngIf 的速記用法後，接著來看看 ngFor 會長什麼樣子，一樣先舉個例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let hero of heroes; let i=index; let odd=odd; [class.odd]=&quot;</span><span class=\"attr\">odd</span>&quot;&gt;</span></span><br><span class=\"line\">  (&#123;&#123;i&#125;&#125;) &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用了 ngFor 將 heroes 中的內容迭代的顯示在畫面上，並使用了之前提到的 ngFor 的一些參數，而這個例子在經過 Angular 轉換後會變成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> <span class=\"attr\">ngFor</span> <span class=\"attr\">let-hero</span> [<span class=\"attr\">ngForOf</span>]=<span class=\"string\">&quot;heroes&quot;</span> <span class=\"attr\">let-i</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">let-odd</span>=<span class=\"string\">&quot;odd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">class.odd</span>]=<span class=\"string\">&quot;odd&quot;</span>&gt;</span>(&#123;&#123;i&#125;&#125;) &#123;&#123;hero.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到他跟 ngIf 一樣會將星號變為一個 <code>&lt;ng-template&gt;</code> 並且將 ngFor 變為 property binding，比較不同的是在這個 <code>&lt;ng-template&gt;</code> 中使用了 <code>let</code> 宣告了一個模板輸入變量，讓他可以被 template 中被引用，在上面的例子中的輸入變量是 <code>hero</code>, <code>i</code>, ‘odd’，解析器會將 let hero、let i 和 let odd 轉換為 <code>let-hero</code>、 <code>let-i</code> 和 <code>let-odd</code> ，Angular 會將當前的值在適當的時間點賦予給宣告的輸入變量。</p>\n<h2 id=\"Creating-template-fragments-with-lt-ng-template-gt\"><a href=\"#Creating-template-fragments-with-lt-ng-template-gt\" class=\"headerlink\" title=\"Creating template fragments with &lt;ng-template&gt;\"></a>Creating template fragments with <code>&lt;ng-template&gt;</code></h2><p>Angular 的 <code>&lt;ng-template&gt;</code> 定義了一個默認不渲染任何東西的 template，可以透過 structural directive 來控制是否要顯示 <code>&lt;ng-template&gt;</code> 中定義的內容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hip!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hip!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hooray!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210811/201247672JMq8WtBWV.png\"></p>\n<p>可以看到，當我們使用 <code>&lt;ng-template&gt;</code> 將 <code>&lt;p&gt;Hip!&lt;/p&gt;</code> 包住，但是沒有使用 structural directive 決定他是否要被顯示出來，所以在 DOM 中會看到 <code>comment node placeholder</code> 而不是希望呈現的數據。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立客製化的 structural directive，他相較於建立客製化的 attribute directive 男的多，所以需要瞭解更多的觀念，比如說 Angular 的 view 觀念其實非常複雜，這邊只有稍微提到而已，如果之後有專案上的需求再回來鑽研就好，這邊只是大概介紹該如何使用與客製化。</p>\n<p>本篇是 directive 的最後一篇，明天將會回頭介紹 component 的最後一個例子，動態載入 component，他使用了之前講到的滿多技巧，範例的難度也比較大，那麼就明天來好好的講解一下吧，那我們就明天見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/structural-directives\">Angular.io - structuarl directives</a></li>\n</ul>"},{"title":"Day17. Dynamic component loader","date":"2021-09-17T02:31:54.000Z","_content":"\n介紹完什麼是 template 與 structuarl directive 後，接著回來介紹 component 中被跳過的章節，那就是動態仔入 component，再開發專案時可能會遇到 component template 需要被動態載入的情況，比如說常見的網頁廣告或是當捲軸轉到某個地方時才會顯示出只定 component 的 template，那麼就繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png](https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png)\n\n<!-- more -->\n\n# Dynamic component loading\n\n以 Angular 官方文檔的例子來介紹一下如何使用 Dynamic component loading，這個例子將會製作一個畫面中的廣告，會隨著時間而顯示不同的廣告內容，要滿足這個條件使用過去靜態 component 載入就顯得不切實際，讓我們一起看看這個例子吧\n\n\n\n# The anchor directive\n\n在添加動態 component 之前，需要先使用 directive 來讓 Angular 知道你要將這的動態 component 插入在哪邊，使用 Angular CLI 建立一個 directive\n\n```bash\nng generate directive Ad\n```\n\n接著在 ad.directive.ts 中從 `@angular/core` 中引入 `ViewContainerRef` 並將它注入到 class 中\n\n```typescript\nimport { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[appAd]'\n})\nexport class AdDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n```\n\nViewContainerRef 讓你可以訪問動態 component 的 view container。\n\n\n\n# Loading components\n\n接著我們將要動態顯示廣告的邏輯定義在 ad-banner 中，所以使用 Angular CLI 建立一個 component\n\n```bash\nng generate component ad-banner\n```\n\n接著在 ad.banner.html 中添加 `<ng-template>` 與使用 `directive` 綁定這個元素\n\n```html\n<div class=\"ad-banner-example\">\n  <h3>Advertisements</h3>\n  <ng-template adHost></ng-template>\n</div>\n```\n\n在 template 中使用 `<ng-template>` 對於要動態載入 component 的 view 而言非常適合，因為在尚未滿足條件的情況下 Angular 並不會將 `<ng-template>` 的內容放入 DOM 中。\n\n\n\n# Create view component\n\n在完成 ad-banner 後，接著要建立負責顯示廣告畫面的 component，一樣先用 Angular CLI 建立 component\n\n```html\nng generate component hero-job-ad\nng generate component hero-profile\n```\n\n這邊的設計比較特別，不像一般傳統的 component 設計，他要將這兩個 component 做為參數傳遞給某個 method，藉由這個 method 將 component 實例話而不是像之前的使用他的 `selector`\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  template: `\n    <div class=\"job-ad\">\n      <h4>{{ data.headline }}</h4>\n\n      {{ data.body }}\n    </div>\n  `,\n})\nexport class HeroJobAdComponent {\n  @Input() data: any;\n}\n```\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  template: `\n    <div class=\"hero-profile\">\n      <h3>Featured Hero Profile</h3>\n      <h4>{{data.name}}</h4>\n\n      <p>{{data.bio}}</p>\n\n      <strong>Hire this hero today!</strong>\n    </div>\n  `\n})\nexport class HeroProfileComponent {\n  @Input() data: any;\n}\n```\n\n由於不需要使用 `selector` 所以將不需要的 property 從 meatdata 中移除只留下 template 設定畫面。\n\n\n\n# Create service\n\n在建立完顯示畫面的 component 後，剛剛提到的要將這兩個 component 傳給某個 method 將它實例化，那麼就要建立一個 class 用於將他們實例化，這邊手動新增一個檔案就好\n\n```typescript\n// ad-item.ts\n\nimport { Type } from '@angular/core';\n\nexport class AdItem {\n  constructor(public component: Type<any>, public data: any) {}\n}\n```\n\n這邊使用了 `@angular/core` 中的 `Type` 代表定義的參數的型態是 component 或是其實例，這樣才滿足我們要將 component 傳進這個 class 後實例化的目的。\n\n接著建立一個 service 用於利用剛剛建立出的兩個 component 建立畫面，首先一樣使用 Angular CLI 建立一個 service\n\n```bash\nng generate service ad\n```\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HeroJobAdComponent } from './view/hero-job-ad/hero-job-ad.component';\nimport { HeroProfileComponent } from './view/hero-profile/hero-profile.component';\n\nimport { AdItem } from './ad-item';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdService {\n  constructor() {}\n\n  getAds() {\n    return [\n      new AdItem(HeroProfileComponent, {\n        name: 'Bombasto',\n        bio: 'Brave as they come',\n      }),\n      new AdItem(HeroProfileComponent, {\n        name: 'Dr IQ',\n        bio: 'Smart as they come',\n      }),\n      new AdItem(HeroJobAdComponent, {\n        headline: 'Hiring for several positions',\n        body: 'Submit your resume today!',\n      }),\n      new AdItem(HeroJobAdComponent, {\n        headline: 'Openings in all departments',\n        body: 'Apply today',\n      }),\n    ];\n  }\n}\n```\n\n在 service 中新增一個獲取廣告的 method，將剛剛建立的 component 作為參數傳遞給 `AdItem` 並將 component 需要的 Input 參數也傳遞進去。\n\n\n# Finish this project\n\n建立完這些工具後，最後要將它們組合起來讓畫面顯示動態的 component 畫面，首先先在 app.component.ts 中注入剛剛寫的 adService 並調用 method 獲得英雄廣告的列表\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { AdService } from './ad.service';\nimport { AdItem } from './ad-item';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n  ads: AdItem[] = [];\n  constructor(private adService: AdService) {}\n\n  ngOnInit() {\n    this.ads = this.adService.getAds();\n  }\n}\n```\n\n接著在 app.component.html 中使用 ad.banner 的 selector 並將 ads 綁定為他的 input binding\n\n```html\n<!-- app.component.html -->\n\n<app-ad-banner [ads]=\"ads\"></app-ad-banner>\n```\n\n再來要進到 ad-banner.component.ts 中增加動態 component 的邏輯\n```typescript\nimport { Component, OnInit, Input, ComponentFactoryResolver, ViewChild, OnDestroy } from '@angular/core';\nimport { AdItem } from '../ad-item';\nimport { AdDirective } from '../ad.directive';\n\n@Component({\n  selector: 'app-ad-banner',\n  templateUrl: './ad-banner.component.html',\n})\nexport class AdBannerComponent implements OnInit, OnDestroy {\n  @Input() ads: AdItem[] = [];                                                // (1)\n  @ViewChild(AdDirective, {static: true}) adHost!: AdDirective;               // (2)\n  interval: any;                                                              // (3)\n  currentAdIndex = -1;                                                        // (4)\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) { } // (5)\n\n  ngOnInit(): void {\n    this.loadComponent();\n    this.getAds();\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.interval);                                             // (8)\n  }\n\n  loadComponent() {                                                           // (6)\n    this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;\n    const adItem = this.ads[this.currentAdIndex];\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.component);\n\n    const viewContainerRef = this.adHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent<{ data: any }>(componentFactory);\n    componentRef.instance.data = adItem.data;\n  }\n\n  getAds() {                                                                  // (7)\n    this.interval = setInterval(() => {\n      this.loadComponent();\n    }, 3000);\n  }\n}\n```\n\n這邊的邏輯比較複雜一點，來一一說明一下：\n\n- (1): 利用 `@Input()` 將 ads 裝飾為是父層傳遞的數據，並使用 `AdItem` 指定型別。\n- (2): 利用  `@ViewChild` 將 adHost 裝飾為可以訪問到 view element 的 property，可以直接在 ad-banner.component 中直接使用 adDirective 中的 method，而將 `static` 設定為 true 代表在更改檢測運行之前會先解析查詢的結果。\n- (3): 建立一個 property 用來接收 setInterval 回傳的值，主要用於取消計時器。\n- (4): 建立一個 property 用來計算目前要顯示第幾個英雄廣告。\n- (5): 將 `ComponentFactoryResolver` 注入到 component 中，主要用來將選擇的 ad-component 解析為一個 `componentFactory`。\n- (6): 建立一個 method 用於計算要顯示第幾個英雄廣告並將被選中的英雄廣告 component 透過 `ComponentFactoryResolver` 解析為 `componentFactory` 並將它利用 `createComponent` 實例化。\n- (7): 建立一個 method 用於建立一個計時器，每過 3 秒就取得一次英雄廣告\n- (8): 在 ngObDestory() 中取消計時器\n\n![img](https://i.imgur.com/EvEFuPO.gif)\n\n在畫面中看到每過三秒就會更換一次畫面，打開網頁中的 conosle 檢查一下\n\n![img](https://i.imgur.com/1atiuaj.gif)\n\n可以看到每過三秒就會更換一次 component，這就是動態載入 component。\n\n\n# 結論\n\n本篇中使用了滿多之前提到的技巧來完成這個動態載入 component 的功能，可以一邊看 Angular 提供的 [stackbitz](https://stackblitz.com/angular/kklkvybnydr?file=src%2Findex.html) 一邊看我的解釋應該會比較好看懂。\n\n明天開始會進入到 Angualr 中非常重要的一個觀念，`Dependency injection`，可能在前面幾篇中多多少少都有提到一點關於他的內容，不過沒關係之後會詳細的講解他到底是什麼，那我們就明天見吧！\n\n\n# Reference\n\n- [Angular.io - Dynamic component loader](https://angular.io/guide/dynamic-component-loader)\n","source":"_posts/Angular/angular-17.md","raw":"---\ntitle: Day17. Dynamic component loader\ndate: 2021-09-17 10:31:54\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n介紹完什麼是 template 與 structuarl directive 後，接著回來介紹 component 中被跳過的章節，那就是動態仔入 component，再開發專案時可能會遇到 component template 需要被動態載入的情況，比如說常見的網頁廣告或是當捲軸轉到某個地方時才會顯示出只定 component 的 template，那麼就繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png](https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png)\n\n<!-- more -->\n\n# Dynamic component loading\n\n以 Angular 官方文檔的例子來介紹一下如何使用 Dynamic component loading，這個例子將會製作一個畫面中的廣告，會隨著時間而顯示不同的廣告內容，要滿足這個條件使用過去靜態 component 載入就顯得不切實際，讓我們一起看看這個例子吧\n\n\n\n# The anchor directive\n\n在添加動態 component 之前，需要先使用 directive 來讓 Angular 知道你要將這的動態 component 插入在哪邊，使用 Angular CLI 建立一個 directive\n\n```bash\nng generate directive Ad\n```\n\n接著在 ad.directive.ts 中從 `@angular/core` 中引入 `ViewContainerRef` 並將它注入到 class 中\n\n```typescript\nimport { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[appAd]'\n})\nexport class AdDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n```\n\nViewContainerRef 讓你可以訪問動態 component 的 view container。\n\n\n\n# Loading components\n\n接著我們將要動態顯示廣告的邏輯定義在 ad-banner 中，所以使用 Angular CLI 建立一個 component\n\n```bash\nng generate component ad-banner\n```\n\n接著在 ad.banner.html 中添加 `<ng-template>` 與使用 `directive` 綁定這個元素\n\n```html\n<div class=\"ad-banner-example\">\n  <h3>Advertisements</h3>\n  <ng-template adHost></ng-template>\n</div>\n```\n\n在 template 中使用 `<ng-template>` 對於要動態載入 component 的 view 而言非常適合，因為在尚未滿足條件的情況下 Angular 並不會將 `<ng-template>` 的內容放入 DOM 中。\n\n\n\n# Create view component\n\n在完成 ad-banner 後，接著要建立負責顯示廣告畫面的 component，一樣先用 Angular CLI 建立 component\n\n```html\nng generate component hero-job-ad\nng generate component hero-profile\n```\n\n這邊的設計比較特別，不像一般傳統的 component 設計，他要將這兩個 component 做為參數傳遞給某個 method，藉由這個 method 將 component 實例話而不是像之前的使用他的 `selector`\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  template: `\n    <div class=\"job-ad\">\n      <h4>{{ data.headline }}</h4>\n\n      {{ data.body }}\n    </div>\n  `,\n})\nexport class HeroJobAdComponent {\n  @Input() data: any;\n}\n```\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  template: `\n    <div class=\"hero-profile\">\n      <h3>Featured Hero Profile</h3>\n      <h4>{{data.name}}</h4>\n\n      <p>{{data.bio}}</p>\n\n      <strong>Hire this hero today!</strong>\n    </div>\n  `\n})\nexport class HeroProfileComponent {\n  @Input() data: any;\n}\n```\n\n由於不需要使用 `selector` 所以將不需要的 property 從 meatdata 中移除只留下 template 設定畫面。\n\n\n\n# Create service\n\n在建立完顯示畫面的 component 後，剛剛提到的要將這兩個 component 傳給某個 method 將它實例化，那麼就要建立一個 class 用於將他們實例化，這邊手動新增一個檔案就好\n\n```typescript\n// ad-item.ts\n\nimport { Type } from '@angular/core';\n\nexport class AdItem {\n  constructor(public component: Type<any>, public data: any) {}\n}\n```\n\n這邊使用了 `@angular/core` 中的 `Type` 代表定義的參數的型態是 component 或是其實例，這樣才滿足我們要將 component 傳進這個 class 後實例化的目的。\n\n接著建立一個 service 用於利用剛剛建立出的兩個 component 建立畫面，首先一樣使用 Angular CLI 建立一個 service\n\n```bash\nng generate service ad\n```\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HeroJobAdComponent } from './view/hero-job-ad/hero-job-ad.component';\nimport { HeroProfileComponent } from './view/hero-profile/hero-profile.component';\n\nimport { AdItem } from './ad-item';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdService {\n  constructor() {}\n\n  getAds() {\n    return [\n      new AdItem(HeroProfileComponent, {\n        name: 'Bombasto',\n        bio: 'Brave as they come',\n      }),\n      new AdItem(HeroProfileComponent, {\n        name: 'Dr IQ',\n        bio: 'Smart as they come',\n      }),\n      new AdItem(HeroJobAdComponent, {\n        headline: 'Hiring for several positions',\n        body: 'Submit your resume today!',\n      }),\n      new AdItem(HeroJobAdComponent, {\n        headline: 'Openings in all departments',\n        body: 'Apply today',\n      }),\n    ];\n  }\n}\n```\n\n在 service 中新增一個獲取廣告的 method，將剛剛建立的 component 作為參數傳遞給 `AdItem` 並將 component 需要的 Input 參數也傳遞進去。\n\n\n# Finish this project\n\n建立完這些工具後，最後要將它們組合起來讓畫面顯示動態的 component 畫面，首先先在 app.component.ts 中注入剛剛寫的 adService 並調用 method 獲得英雄廣告的列表\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { AdService } from './ad.service';\nimport { AdItem } from './ad-item';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n  ads: AdItem[] = [];\n  constructor(private adService: AdService) {}\n\n  ngOnInit() {\n    this.ads = this.adService.getAds();\n  }\n}\n```\n\n接著在 app.component.html 中使用 ad.banner 的 selector 並將 ads 綁定為他的 input binding\n\n```html\n<!-- app.component.html -->\n\n<app-ad-banner [ads]=\"ads\"></app-ad-banner>\n```\n\n再來要進到 ad-banner.component.ts 中增加動態 component 的邏輯\n```typescript\nimport { Component, OnInit, Input, ComponentFactoryResolver, ViewChild, OnDestroy } from '@angular/core';\nimport { AdItem } from '../ad-item';\nimport { AdDirective } from '../ad.directive';\n\n@Component({\n  selector: 'app-ad-banner',\n  templateUrl: './ad-banner.component.html',\n})\nexport class AdBannerComponent implements OnInit, OnDestroy {\n  @Input() ads: AdItem[] = [];                                                // (1)\n  @ViewChild(AdDirective, {static: true}) adHost!: AdDirective;               // (2)\n  interval: any;                                                              // (3)\n  currentAdIndex = -1;                                                        // (4)\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) { } // (5)\n\n  ngOnInit(): void {\n    this.loadComponent();\n    this.getAds();\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.interval);                                             // (8)\n  }\n\n  loadComponent() {                                                           // (6)\n    this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;\n    const adItem = this.ads[this.currentAdIndex];\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.component);\n\n    const viewContainerRef = this.adHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent<{ data: any }>(componentFactory);\n    componentRef.instance.data = adItem.data;\n  }\n\n  getAds() {                                                                  // (7)\n    this.interval = setInterval(() => {\n      this.loadComponent();\n    }, 3000);\n  }\n}\n```\n\n這邊的邏輯比較複雜一點，來一一說明一下：\n\n- (1): 利用 `@Input()` 將 ads 裝飾為是父層傳遞的數據，並使用 `AdItem` 指定型別。\n- (2): 利用  `@ViewChild` 將 adHost 裝飾為可以訪問到 view element 的 property，可以直接在 ad-banner.component 中直接使用 adDirective 中的 method，而將 `static` 設定為 true 代表在更改檢測運行之前會先解析查詢的結果。\n- (3): 建立一個 property 用來接收 setInterval 回傳的值，主要用於取消計時器。\n- (4): 建立一個 property 用來計算目前要顯示第幾個英雄廣告。\n- (5): 將 `ComponentFactoryResolver` 注入到 component 中，主要用來將選擇的 ad-component 解析為一個 `componentFactory`。\n- (6): 建立一個 method 用於計算要顯示第幾個英雄廣告並將被選中的英雄廣告 component 透過 `ComponentFactoryResolver` 解析為 `componentFactory` 並將它利用 `createComponent` 實例化。\n- (7): 建立一個 method 用於建立一個計時器，每過 3 秒就取得一次英雄廣告\n- (8): 在 ngObDestory() 中取消計時器\n\n![img](https://i.imgur.com/EvEFuPO.gif)\n\n在畫面中看到每過三秒就會更換一次畫面，打開網頁中的 conosle 檢查一下\n\n![img](https://i.imgur.com/1atiuaj.gif)\n\n可以看到每過三秒就會更換一次 component，這就是動態載入 component。\n\n\n# 結論\n\n本篇中使用了滿多之前提到的技巧來完成這個動態載入 component 的功能，可以一邊看 Angular 提供的 [stackbitz](https://stackblitz.com/angular/kklkvybnydr?file=src%2Findex.html) 一邊看我的解釋應該會比較好看懂。\n\n明天開始會進入到 Angualr 中非常重要的一個觀念，`Dependency injection`，可能在前面幾篇中多多少少都有提到一點關於他的內容，不過沒關係之後會詳細的講解他到底是什麼，那我們就明天見吧！\n\n\n# Reference\n\n- [Angular.io - Dynamic component loader](https://angular.io/guide/dynamic-component-loader)\n","slug":"Angular/angular-17","published":1,"updated":"2022-02-16T01:38:51.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bds000895w3dlvbd04j","content":"<p>介紹完什麼是 template 與 structuarl directive 後，接著回來介紹 component 中被跳過的章節，那就是動態仔入 component，再開發專案時可能會遇到 component template 需要被動態載入的情況，比如說常見的網頁廣告或是當捲軸轉到某個地方時才會顯示出只定 component 的 template，那麼就繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Dynamic-component-loading\"><a href=\"#Dynamic-component-loading\" class=\"headerlink\" title=\"Dynamic component loading\"></a>Dynamic component loading</h1><p>以 Angular 官方文檔的例子來介紹一下如何使用 Dynamic component loading，這個例子將會製作一個畫面中的廣告，會隨著時間而顯示不同的廣告內容，要滿足這個條件使用過去靜態 component 載入就顯得不切實際，讓我們一起看看這個例子吧</p>\n<h1 id=\"The-anchor-directive\"><a href=\"#The-anchor-directive\" class=\"headerlink\" title=\"The anchor directive\"></a>The anchor directive</h1><p>在添加動態 component 之前，需要先使用 directive 來讓 Angular 知道你要將這的動態 component 插入在哪邊，使用 Angular CLI 建立一個 directive</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive Ad</span><br></pre></td></tr></table></figure>\n\n<p>接著在 ad.directive.ts 中從 <code>@angular/core</code> 中引入 <code>ViewContainerRef</code> 並將它注入到 class 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appAd]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> viewContainerRef: ViewContainerRef</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ViewContainerRef 讓你可以訪問動態 component 的 view container。</p>\n<h1 id=\"Loading-components\"><a href=\"#Loading-components\" class=\"headerlink\" title=\"Loading components\"></a>Loading components</h1><p>接著我們將要動態顯示廣告的邏輯定義在 ad-banner 中，所以使用 Angular CLI 建立一個 component</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component ad-banner</span><br></pre></td></tr></table></figure>\n\n<p>接著在 ad.banner.html 中添加 <code>&lt;ng-template&gt;</code> 與使用 <code>directive</code> 綁定這個元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ad-banner-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Advertisements<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-template</span> <span class=\"attr\">adHost</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 template 中使用 <code>&lt;ng-template&gt;</code> 對於要動態載入 component 的 view 而言非常適合，因為在尚未滿足條件的情況下 Angular 並不會將 <code>&lt;ng-template&gt;</code> 的內容放入 DOM 中。</p>\n<h1 id=\"Create-view-component\"><a href=\"#Create-view-component\" class=\"headerlink\" title=\"Create view component\"></a>Create view component</h1><p>在完成 ad-banner 後，接著要建立負責顯示廣告畫面的 component，一樣先用 Angular CLI 建立 component</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component hero-job-ad</span><br><span class=\"line\">ng generate component hero-profile</span><br></pre></td></tr></table></figure>\n\n<p>這邊的設計比較特別，不像一般傳統的 component 設計，他要將這兩個 component 做為參數傳遞給某個 method，藉由這個 method 將 component 實例話而不是像之前的使用他的 <code>selector</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;job-ad&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h4&gt;&#123;&#123; data.headline &#125;&#125;&lt;/h4&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; data.body &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroJobAdComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">data</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;hero-profile&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;Featured Hero Profile&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h4&gt;&#123;&#123;data.name&#125;&#125;&lt;/h4&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;&#123;&#123;data.bio&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;strong&gt;Hire this hero today!&lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroProfileComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">data</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由於不需要使用 <code>selector</code> 所以將不需要的 property 從 meatdata 中移除只留下 template 設定畫面。</p>\n<h1 id=\"Create-service\"><a href=\"#Create-service\" class=\"headerlink\" title=\"Create service\"></a>Create service</h1><p>在建立完顯示畫面的 component 後，剛剛提到的要將這兩個 component 傳給某個 method 將它實例化，那麼就要建立一個 class 用於將他們實例化，這邊手動新增一個檔案就好</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ad-item.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Type</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdItem</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> component: Type&lt;<span class=\"built_in\">any</span>&gt;, <span class=\"keyword\">public</span> data: <span class=\"built_in\">any</span></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊使用了 <code>@angular/core</code> 中的 <code>Type</code> 代表定義的參數的型態是 component 或是其實例，這樣才滿足我們要將 component 傳進這個 class 後實例化的目的。</p>\n<p>接著建立一個 service 用於利用剛剛建立出的兩個 component 建立畫面，首先一樣使用 Angular CLI 建立一個 service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service ad</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HeroJobAdComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./view/hero-job-ad/hero-job-ad.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HeroProfileComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./view/hero-profile/hero-profile.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdItem</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ad-item&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getAds</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroProfileComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">bio</span>: <span class=\"string\">&#x27;Brave as they come&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroProfileComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">bio</span>: <span class=\"string\">&#x27;Smart as they come&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroJobAdComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">headline</span>: <span class=\"string\">&#x27;Hiring for several positions&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Submit your resume today!&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroJobAdComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">headline</span>: <span class=\"string\">&#x27;Openings in all departments&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Apply today&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 service 中新增一個獲取廣告的 method，將剛剛建立的 component 作為參數傳遞給 <code>AdItem</code> 並將 component 需要的 Input 參數也傳遞進去。</p>\n<h1 id=\"Finish-this-project\"><a href=\"#Finish-this-project\" class=\"headerlink\" title=\"Finish this project\"></a>Finish this project</h1><p>建立完這些工具後，最後要將它們組合起來讓畫面顯示動態的 component 畫面，首先先在 app.component.ts 中注入剛剛寫的 adService 並調用 method 獲得英雄廣告的列表</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ad.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdItem</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ad-item&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">ads</span>: <span class=\"title class_\">AdItem</span>[] = [];</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> adService: AdService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ads</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">adService</span>.<span class=\"title function_\">getAds</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著在 app.component.html 中使用 ad.banner 的 selector 並將 ads 綁定為他的 input binding</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ad-banner</span> [<span class=\"attr\">ads</span>]=<span class=\"string\">&quot;ads&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ad-banner</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>再來要進到 ad-banner.component.ts 中增加動態 component 的邏輯</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">ComponentFactoryResolver</span>, <span class=\"title class_\">ViewChild</span>, <span class=\"title class_\">OnDestroy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdItem</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../ad-item&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdDirective</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../ad.directive&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-ad-banner&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./ad-banner.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdBannerComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">OnDestroy</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">ads</span>: <span class=\"title class_\">AdItem</span>[] = [];                                                <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"title class_\">AdDirective</span>, &#123;<span class=\"attr\">static</span>: <span class=\"literal\">true</span>&#125;) adHost!: <span class=\"title class_\">AdDirective</span>;               <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"attr\">interval</span>: <span class=\"built_in\">any</span>;                                                              <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  currentAdIndex = -<span class=\"number\">1</span>;                                                        <span class=\"comment\">// (4)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> componentFactoryResolver: ComponentFactoryResolver</span>) &#123; &#125; <span class=\"comment\">// (5)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">loadComponent</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAds</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnDestroy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">interval</span>);                                             <span class=\"comment\">// (8)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">loadComponent</span>(<span class=\"params\"></span>) &#123;                                                           <span class=\"comment\">// (6)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentAdIndex</span> = (<span class=\"variable language_\">this</span>.<span class=\"property\">currentAdIndex</span> + <span class=\"number\">1</span>) % <span class=\"variable language_\">this</span>.<span class=\"property\">ads</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> adItem = <span class=\"variable language_\">this</span>.<span class=\"property\">ads</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">currentAdIndex</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentFactory = <span class=\"variable language_\">this</span>.<span class=\"property\">componentFactoryResolver</span>.<span class=\"title function_\">resolveComponentFactory</span>(adItem.<span class=\"property\">component</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> viewContainerRef = <span class=\"variable language_\">this</span>.<span class=\"property\">adHost</span>.<span class=\"property\">viewContainerRef</span>;</span><br><span class=\"line\">    viewContainerRef.<span class=\"title function_\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentRef = viewContainerRef.<span class=\"property\">createComponent</span>&lt;&#123; <span class=\"attr\">data</span>: <span class=\"built_in\">any</span> &#125;&gt;(componentFactory);</span><br><span class=\"line\">    componentRef.<span class=\"property\">instance</span>.<span class=\"property\">data</span> = adItem.<span class=\"property\">data</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getAds</span>(<span class=\"params\"></span>) &#123;                                                                  <span class=\"comment\">// (7)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">interval</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">loadComponent</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊的邏輯比較複雜一點，來一一說明一下：</p>\n<ul>\n<li>(1): 利用 <code>@Input()</code> 將 ads 裝飾為是父層傳遞的數據，並使用 <code>AdItem</code> 指定型別。</li>\n<li>(2): 利用  <code>@ViewChild</code> 將 adHost 裝飾為可以訪問到 view element 的 property，可以直接在 ad-banner.component 中直接使用 adDirective 中的 method，而將 <code>static</code> 設定為 true 代表在更改檢測運行之前會先解析查詢的結果。</li>\n<li>(3): 建立一個 property 用來接收 setInterval 回傳的值，主要用於取消計時器。</li>\n<li>(4): 建立一個 property 用來計算目前要顯示第幾個英雄廣告。</li>\n<li>(5): 將 <code>ComponentFactoryResolver</code> 注入到 component 中，主要用來將選擇的 ad-component 解析為一個 <code>componentFactory</code>。</li>\n<li>(6): 建立一個 method 用於計算要顯示第幾個英雄廣告並將被選中的英雄廣告 component 透過 <code>ComponentFactoryResolver</code> 解析為 <code>componentFactory</code> 並將它利用 <code>createComponent</code> 實例化。</li>\n<li>(7): 建立一個 method 用於建立一個計時器，每過 3 秒就取得一次英雄廣告</li>\n<li>(8): 在 ngObDestory() 中取消計時器</li>\n</ul>\n<p><img src=\"https://i.imgur.com/EvEFuPO.gif\" alt=\"img\"></p>\n<p>在畫面中看到每過三秒就會更換一次畫面，打開網頁中的 conosle 檢查一下</p>\n<p><img src=\"https://i.imgur.com/1atiuaj.gif\" alt=\"img\"></p>\n<p>可以看到每過三秒就會更換一次 component，這就是動態載入 component。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中使用了滿多之前提到的技巧來完成這個動態載入 component 的功能，可以一邊看 Angular 提供的 <a href=\"https://stackblitz.com/angular/kklkvybnydr?file=src/index.html\">stackbitz</a> 一邊看我的解釋應該會比較好看懂。</p>\n<p>明天開始會進入到 Angualr 中非常重要的一個觀念，<code>Dependency injection</code>，可能在前面幾篇中多多少少都有提到一點關於他的內容，不過沒關係之後會詳細的講解他到底是什麼，那我們就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/dynamic-component-loader\">Angular.io - Dynamic component loader</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>介紹完什麼是 template 與 structuarl directive 後，接著回來介紹 component 中被跳過的章節，那就是動態仔入 component，再開發專案時可能會遇到 component template 需要被動態載入的情況，比如說常見的網頁廣告或是當捲軸轉到某個地方時才會顯示出只定 component 的 template，那麼就繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210818/20124767jPdUbmDQQh.png\"></p>","more":"<h1 id=\"Dynamic-component-loading\"><a href=\"#Dynamic-component-loading\" class=\"headerlink\" title=\"Dynamic component loading\"></a>Dynamic component loading</h1><p>以 Angular 官方文檔的例子來介紹一下如何使用 Dynamic component loading，這個例子將會製作一個畫面中的廣告，會隨著時間而顯示不同的廣告內容，要滿足這個條件使用過去靜態 component 載入就顯得不切實際，讓我們一起看看這個例子吧</p>\n<h1 id=\"The-anchor-directive\"><a href=\"#The-anchor-directive\" class=\"headerlink\" title=\"The anchor directive\"></a>The anchor directive</h1><p>在添加動態 component 之前，需要先使用 directive 來讓 Angular 知道你要將這的動態 component 插入在哪邊，使用 Angular CLI 建立一個 directive</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive Ad</span><br></pre></td></tr></table></figure>\n\n<p>接著在 ad.directive.ts 中從 <code>@angular/core</code> 中引入 <code>ViewContainerRef</code> 並將它注入到 class 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">ViewContainerRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appAd]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> viewContainerRef: ViewContainerRef</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ViewContainerRef 讓你可以訪問動態 component 的 view container。</p>\n<h1 id=\"Loading-components\"><a href=\"#Loading-components\" class=\"headerlink\" title=\"Loading components\"></a>Loading components</h1><p>接著我們將要動態顯示廣告的邏輯定義在 ad-banner 中，所以使用 Angular CLI 建立一個 component</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component ad-banner</span><br></pre></td></tr></table></figure>\n\n<p>接著在 ad.banner.html 中添加 <code>&lt;ng-template&gt;</code> 與使用 <code>directive</code> 綁定這個元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ad-banner-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Advertisements<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-template</span> <span class=\"attr\">adHost</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 template 中使用 <code>&lt;ng-template&gt;</code> 對於要動態載入 component 的 view 而言非常適合，因為在尚未滿足條件的情況下 Angular 並不會將 <code>&lt;ng-template&gt;</code> 的內容放入 DOM 中。</p>\n<h1 id=\"Create-view-component\"><a href=\"#Create-view-component\" class=\"headerlink\" title=\"Create view component\"></a>Create view component</h1><p>在完成 ad-banner 後，接著要建立負責顯示廣告畫面的 component，一樣先用 Angular CLI 建立 component</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component hero-job-ad</span><br><span class=\"line\">ng generate component hero-profile</span><br></pre></td></tr></table></figure>\n\n<p>這邊的設計比較特別，不像一般傳統的 component 設計，他要將這兩個 component 做為參數傳遞給某個 method，藉由這個 method 將 component 實例話而不是像之前的使用他的 <code>selector</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;job-ad&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h4&gt;&#123;&#123; data.headline &#125;&#125;&lt;/h4&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; data.body &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroJobAdComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">data</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;hero-profile&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h3&gt;Featured Hero Profile&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h4&gt;&#123;&#123;data.name&#125;&#125;&lt;/h4&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;&#123;&#123;data.bio&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;strong&gt;Hire this hero today!&lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroProfileComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">data</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由於不需要使用 <code>selector</code> 所以將不需要的 property 從 meatdata 中移除只留下 template 設定畫面。</p>\n<h1 id=\"Create-service\"><a href=\"#Create-service\" class=\"headerlink\" title=\"Create service\"></a>Create service</h1><p>在建立完顯示畫面的 component 後，剛剛提到的要將這兩個 component 傳給某個 method 將它實例化，那麼就要建立一個 class 用於將他們實例化，這邊手動新增一個檔案就好</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ad-item.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Type</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdItem</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> component: Type&lt;<span class=\"built_in\">any</span>&gt;, <span class=\"keyword\">public</span> data: <span class=\"built_in\">any</span></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊使用了 <code>@angular/core</code> 中的 <code>Type</code> 代表定義的參數的型態是 component 或是其實例，這樣才滿足我們要將 component 傳進這個 class 後實例化的目的。</p>\n<p>接著建立一個 service 用於利用剛剛建立出的兩個 component 建立畫面，首先一樣使用 Angular CLI 建立一個 service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service ad</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HeroJobAdComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./view/hero-job-ad/hero-job-ad.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HeroProfileComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./view/hero-profile/hero-profile.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdItem</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ad-item&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getAds</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroProfileComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bombasto&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">bio</span>: <span class=\"string\">&#x27;Brave as they come&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroProfileComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dr IQ&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">bio</span>: <span class=\"string\">&#x27;Smart as they come&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroJobAdComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">headline</span>: <span class=\"string\">&#x27;Hiring for several positions&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Submit your resume today!&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">AdItem</span>(<span class=\"title class_\">HeroJobAdComponent</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">headline</span>: <span class=\"string\">&#x27;Openings in all departments&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Apply today&#x27;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 service 中新增一個獲取廣告的 method，將剛剛建立的 component 作為參數傳遞給 <code>AdItem</code> 並將 component 需要的 Input 參數也傳遞進去。</p>\n<h1 id=\"Finish-this-project\"><a href=\"#Finish-this-project\" class=\"headerlink\" title=\"Finish this project\"></a>Finish this project</h1><p>建立完這些工具後，最後要將它們組合起來讓畫面顯示動態的 component 畫面，首先先在 app.component.ts 中注入剛剛寫的 adService 並調用 method 獲得英雄廣告的列表</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ad.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdItem</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ad-item&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">ads</span>: <span class=\"title class_\">AdItem</span>[] = [];</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> adService: AdService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ads</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">adService</span>.<span class=\"title function_\">getAds</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著在 app.component.html 中使用 ad.banner 的 selector 並將 ads 綁定為他的 input binding</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ad-banner</span> [<span class=\"attr\">ads</span>]=<span class=\"string\">&quot;ads&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ad-banner</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>再來要進到 ad-banner.component.ts 中增加動態 component 的邏輯</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">ComponentFactoryResolver</span>, <span class=\"title class_\">ViewChild</span>, <span class=\"title class_\">OnDestroy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdItem</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../ad-item&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AdDirective</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../ad.directive&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-ad-banner&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./ad-banner.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdBannerComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">OnDestroy</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">ads</span>: <span class=\"title class_\">AdItem</span>[] = [];                                                <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"title class_\">AdDirective</span>, &#123;<span class=\"attr\">static</span>: <span class=\"literal\">true</span>&#125;) adHost!: <span class=\"title class_\">AdDirective</span>;               <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"attr\">interval</span>: <span class=\"built_in\">any</span>;                                                              <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  currentAdIndex = -<span class=\"number\">1</span>;                                                        <span class=\"comment\">// (4)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> componentFactoryResolver: ComponentFactoryResolver</span>) &#123; &#125; <span class=\"comment\">// (5)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">loadComponent</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAds</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnDestroy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">interval</span>);                                             <span class=\"comment\">// (8)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">loadComponent</span>(<span class=\"params\"></span>) &#123;                                                           <span class=\"comment\">// (6)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentAdIndex</span> = (<span class=\"variable language_\">this</span>.<span class=\"property\">currentAdIndex</span> + <span class=\"number\">1</span>) % <span class=\"variable language_\">this</span>.<span class=\"property\">ads</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> adItem = <span class=\"variable language_\">this</span>.<span class=\"property\">ads</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">currentAdIndex</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentFactory = <span class=\"variable language_\">this</span>.<span class=\"property\">componentFactoryResolver</span>.<span class=\"title function_\">resolveComponentFactory</span>(adItem.<span class=\"property\">component</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> viewContainerRef = <span class=\"variable language_\">this</span>.<span class=\"property\">adHost</span>.<span class=\"property\">viewContainerRef</span>;</span><br><span class=\"line\">    viewContainerRef.<span class=\"title function_\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> componentRef = viewContainerRef.<span class=\"property\">createComponent</span>&lt;&#123; <span class=\"attr\">data</span>: <span class=\"built_in\">any</span> &#125;&gt;(componentFactory);</span><br><span class=\"line\">    componentRef.<span class=\"property\">instance</span>.<span class=\"property\">data</span> = adItem.<span class=\"property\">data</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getAds</span>(<span class=\"params\"></span>) &#123;                                                                  <span class=\"comment\">// (7)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">interval</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">loadComponent</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊的邏輯比較複雜一點，來一一說明一下：</p>\n<ul>\n<li>(1): 利用 <code>@Input()</code> 將 ads 裝飾為是父層傳遞的數據，並使用 <code>AdItem</code> 指定型別。</li>\n<li>(2): 利用  <code>@ViewChild</code> 將 adHost 裝飾為可以訪問到 view element 的 property，可以直接在 ad-banner.component 中直接使用 adDirective 中的 method，而將 <code>static</code> 設定為 true 代表在更改檢測運行之前會先解析查詢的結果。</li>\n<li>(3): 建立一個 property 用來接收 setInterval 回傳的值，主要用於取消計時器。</li>\n<li>(4): 建立一個 property 用來計算目前要顯示第幾個英雄廣告。</li>\n<li>(5): 將 <code>ComponentFactoryResolver</code> 注入到 component 中，主要用來將選擇的 ad-component 解析為一個 <code>componentFactory</code>。</li>\n<li>(6): 建立一個 method 用於計算要顯示第幾個英雄廣告並將被選中的英雄廣告 component 透過 <code>ComponentFactoryResolver</code> 解析為 <code>componentFactory</code> 並將它利用 <code>createComponent</code> 實例化。</li>\n<li>(7): 建立一個 method 用於建立一個計時器，每過 3 秒就取得一次英雄廣告</li>\n<li>(8): 在 ngObDestory() 中取消計時器</li>\n</ul>\n<p><img src=\"https://i.imgur.com/EvEFuPO.gif\" alt=\"img\"></p>\n<p>在畫面中看到每過三秒就會更換一次畫面，打開網頁中的 conosle 檢查一下</p>\n<p><img src=\"https://i.imgur.com/1atiuaj.gif\" alt=\"img\"></p>\n<p>可以看到每過三秒就會更換一次 component，這就是動態載入 component。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中使用了滿多之前提到的技巧來完成這個動態載入 component 的功能，可以一邊看 Angular 提供的 <a href=\"https://stackblitz.com/angular/kklkvybnydr?file=src/index.html\">stackbitz</a> 一邊看我的解釋應該會比較好看懂。</p>\n<p>明天開始會進入到 Angualr 中非常重要的一個觀念，<code>Dependency injection</code>，可能在前面幾篇中多多少少都有提到一點關於他的內容，不過沒關係之後會詳細的講解他到底是什麼，那我們就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/dynamic-component-loader\">Angular.io - Dynamic component loader</a></li>\n</ul>"},{"title":"Day18. Introduction to services and dependency injection","date":"2021-09-19T06:53:32.000Z","_content":"\n在開發專案時你一定會使用到 `Service` 的技巧，Service 是一個廣泛的類別，包括 app 所需要的任何功能、數據或特性，而通常一個 service 是一個具有狹窄且明確定義目的的 class，簡單來説可以想像成一個 service 只會對一個明確的目的提供所以有服務。\n\nAngular 將 component 與 service 拆分開以增加模塊化與可重用性，將處理 component view 的功能與其他類型的功能拆發開來可以讓你在開發 component 時更精簡高效，所以理想的情況下 component 中的邏輯只用來處理使用者的操作，component 應該提供 property binding 的 property 與 event binding 的 method 僅此而已。\n\n而較為複雜的邏輯任務就應該委託給 service，比如`從 server 中獲取數據`、`驗證用戶輸入`或`直接登陸到控制台`等等複雜的邏輯處理都應該在 service 中處理掉，將這些複雜的邏輯寫在 service 中就可以讓他們被任何 component 使用。\n\n不過說了這麼多，其實 Angular 是不強制你做這些動作的，不過建議再開發大型專案時還是將複雜的邏輯從 component 中移到 service 中，保持你的 component 單純乾淨也讓 service 可以透過 inject 提供給其他 component 使用。\n\n![https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png](https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png)\n\n<!-- more -->\n\n\n# What is dependency injection?\n\ndependency injection 可以簡單地稱為 DI ，它是一種`設計模式` 當你要使用一個 class 時，可以直接從外部來源請求而不是像傳統的做法將它實例化，它存在於整個 Angualr 中，他可以讓你的程式保持靈活、可測試與彈性，component 可以在不知道如何創建 service class 的情況下使用到它的內容，簡單來說 DI 讓使用者可以不用去了解提供者的一些不重要的信息。\n\n\n\n# Service examples\n\n介紹完什麼是 DI 後，接著來做一個小小的例子，這是再開發專案時基本上都會遇到的\n\n1. 首先利用 Angular CLI 建立一個 service\n\n    ```bash\n    ng generate service project\n    ng g s project\n    ```\n\n2. 打開 project.service.ts\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class ProjectService {\n\n      constructor() { }\n    }\n    ```\n\n    首先看到的是這個檔案使用了 `@Injectable()` 將這個 class 裝飾成 Angualr 可以在 DI 系統中使用的，接著可以看到在他的 matedata 中定義了 `provideIn: 'root'` 這代表這個 service 在整個 app 都是可以被使用的，如果不指定 provideIn 的話在 component 中將無法直接注入到 component 中，舉個例子\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable()\n    export class ProjectService {\n\n      constructor() { }\n    }\n    ```\n\n    上面的 service 沒有在 metadata 中設定 providedIn，這個情況下如果跟平常一樣在 component 中注入這個 service 就會出錯\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ProductService } from '../../second/product.service';\n\n    @Component({\n      selector: 'app-third',\n      templateUrl: './third.component.html',\n    })\n    export class ThirdComponent implements OnInit {\n\n      constructor(private productService: ProductService) {}    // (1)\n\n      ngOnInit(): void {\n        console.log(this.productService.getName());             // (2)\n      }\n\n    }\n    ```\n\n    - (1): 在 component 的 constructor 中注入 service\n    - (2): 在 component init 後調用 service 中的 method\n\n    ![https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png](https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png)\n\n    在 console 中就會看到這個錯誤，代表他找不到 ProductService 這個 provider 可以注入到 component 中，要解決這個問題需要在 component 的 metadata 中添加 providers 這個 property 並將要注入的 service 放進去這樣就可以正常使用了\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ProductService } from '../../second/product.service';\n\n    @Component({\n      selector: 'app-third',\n      templateUrl: './third.component.html',\n      providers: [ProductService]\n    })\n    export class ThirdComponent implements OnInit {\n\n      constructor(private productService: ProductService) { }\n\n      ngOnInit(): void {\n        console.log(this.productService.getName());\n      }\n\n    }\n    ```\n\n3. 最後要將 service 注入到 component 中，雖然上面已經用了不過還是講一下，要注入 service 到 component 中，要在 component 的 constructor 中將它注入，這要就可以在這個 component 中使用這個 service 提供的服務\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ProductService } from '../../second/product.service';\n\n    @Component({\n      selector: 'app-third',\n      templateUrl: './third.component.html',\n      providers: [ProductService]\n    })\n    export class ThirdComponent implements OnInit {\n\n      constructor(private productService: ProductService) { }    // (1)\n\n      ngOnInit(): void {\n        console.log(this.productService.getName());\n      }\n\n    }\n    ```\n\n    - (1):  在 component 的 constructor 中注入 service\n\n\n\n# 結論\n\n本章中介紹了如何建立一個 service 並使用 dependency injection 將它注入到 component 中，雖然也介紹了什麼是 dependency injection，不過 DI 的觀念比上面介紹的在複雜更多，比如說 @Injestable() 中的 metadata providedIn 就可以填入 `root`、`module name` 或 `any` 填入每個值都有對應不同的使用場景，其中的關係有點複雜就不在本篇章中介紹，一方面是我也不是非常了解不敢隨便分享怕分享了錯誤的資訊，等之後我在摸熟一點會再開一個系列講解這方面的資訊，所以這邊就大概介紹基本的觀念而已。\n\n下一篇將會介紹上面有提到的內容，當 @Injestable 沒有設定 `providedIn` 時需要在 component 的 metadata 中添加 `providers` 這個其實是個縮寫，詳細內容就明天再仔細講解吧，那就明天見！\n\n\n\n# Reference\n\n- [Angular.io - Dependency injection in Angular](https://angular.io/guide/dependency-injection)\n- [Angular.io - Introduction to services and dependency injection](https://angular.io/guide/architecture-services)\n- [Angular Dependency Injection Explained with Examples](https://www.freecodecamp.org/news/angular-dependency-injection/)\n- [How dependency injection works in Angular](https://blog.logrocket.com/how-dependency-injection-works-in-angular/)","source":"_posts/Angular/angular-18.md","raw":"---\ntitle: Day18. Introduction to services and dependency injection\ndate: 2021-09-19 14:53:32\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在開發專案時你一定會使用到 `Service` 的技巧，Service 是一個廣泛的類別，包括 app 所需要的任何功能、數據或特性，而通常一個 service 是一個具有狹窄且明確定義目的的 class，簡單來説可以想像成一個 service 只會對一個明確的目的提供所以有服務。\n\nAngular 將 component 與 service 拆分開以增加模塊化與可重用性，將處理 component view 的功能與其他類型的功能拆發開來可以讓你在開發 component 時更精簡高效，所以理想的情況下 component 中的邏輯只用來處理使用者的操作，component 應該提供 property binding 的 property 與 event binding 的 method 僅此而已。\n\n而較為複雜的邏輯任務就應該委託給 service，比如`從 server 中獲取數據`、`驗證用戶輸入`或`直接登陸到控制台`等等複雜的邏輯處理都應該在 service 中處理掉，將這些複雜的邏輯寫在 service 中就可以讓他們被任何 component 使用。\n\n不過說了這麼多，其實 Angular 是不強制你做這些動作的，不過建議再開發大型專案時還是將複雜的邏輯從 component 中移到 service 中，保持你的 component 單純乾淨也讓 service 可以透過 inject 提供給其他 component 使用。\n\n![https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png](https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png)\n\n<!-- more -->\n\n\n# What is dependency injection?\n\ndependency injection 可以簡單地稱為 DI ，它是一種`設計模式` 當你要使用一個 class 時，可以直接從外部來源請求而不是像傳統的做法將它實例化，它存在於整個 Angualr 中，他可以讓你的程式保持靈活、可測試與彈性，component 可以在不知道如何創建 service class 的情況下使用到它的內容，簡單來說 DI 讓使用者可以不用去了解提供者的一些不重要的信息。\n\n\n\n# Service examples\n\n介紹完什麼是 DI 後，接著來做一個小小的例子，這是再開發專案時基本上都會遇到的\n\n1. 首先利用 Angular CLI 建立一個 service\n\n    ```bash\n    ng generate service project\n    ng g s project\n    ```\n\n2. 打開 project.service.ts\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class ProjectService {\n\n      constructor() { }\n    }\n    ```\n\n    首先看到的是這個檔案使用了 `@Injectable()` 將這個 class 裝飾成 Angualr 可以在 DI 系統中使用的，接著可以看到在他的 matedata 中定義了 `provideIn: 'root'` 這代表這個 service 在整個 app 都是可以被使用的，如果不指定 provideIn 的話在 component 中將無法直接注入到 component 中，舉個例子\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable()\n    export class ProjectService {\n\n      constructor() { }\n    }\n    ```\n\n    上面的 service 沒有在 metadata 中設定 providedIn，這個情況下如果跟平常一樣在 component 中注入這個 service 就會出錯\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ProductService } from '../../second/product.service';\n\n    @Component({\n      selector: 'app-third',\n      templateUrl: './third.component.html',\n    })\n    export class ThirdComponent implements OnInit {\n\n      constructor(private productService: ProductService) {}    // (1)\n\n      ngOnInit(): void {\n        console.log(this.productService.getName());             // (2)\n      }\n\n    }\n    ```\n\n    - (1): 在 component 的 constructor 中注入 service\n    - (2): 在 component init 後調用 service 中的 method\n\n    ![https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png](https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png)\n\n    在 console 中就會看到這個錯誤，代表他找不到 ProductService 這個 provider 可以注入到 component 中，要解決這個問題需要在 component 的 metadata 中添加 providers 這個 property 並將要注入的 service 放進去這樣就可以正常使用了\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ProductService } from '../../second/product.service';\n\n    @Component({\n      selector: 'app-third',\n      templateUrl: './third.component.html',\n      providers: [ProductService]\n    })\n    export class ThirdComponent implements OnInit {\n\n      constructor(private productService: ProductService) { }\n\n      ngOnInit(): void {\n        console.log(this.productService.getName());\n      }\n\n    }\n    ```\n\n3. 最後要將 service 注入到 component 中，雖然上面已經用了不過還是講一下，要注入 service 到 component 中，要在 component 的 constructor 中將它注入，這要就可以在這個 component 中使用這個 service 提供的服務\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ProductService } from '../../second/product.service';\n\n    @Component({\n      selector: 'app-third',\n      templateUrl: './third.component.html',\n      providers: [ProductService]\n    })\n    export class ThirdComponent implements OnInit {\n\n      constructor(private productService: ProductService) { }    // (1)\n\n      ngOnInit(): void {\n        console.log(this.productService.getName());\n      }\n\n    }\n    ```\n\n    - (1):  在 component 的 constructor 中注入 service\n\n\n\n# 結論\n\n本章中介紹了如何建立一個 service 並使用 dependency injection 將它注入到 component 中，雖然也介紹了什麼是 dependency injection，不過 DI 的觀念比上面介紹的在複雜更多，比如說 @Injestable() 中的 metadata providedIn 就可以填入 `root`、`module name` 或 `any` 填入每個值都有對應不同的使用場景，其中的關係有點複雜就不在本篇章中介紹，一方面是我也不是非常了解不敢隨便分享怕分享了錯誤的資訊，等之後我在摸熟一點會再開一個系列講解這方面的資訊，所以這邊就大概介紹基本的觀念而已。\n\n下一篇將會介紹上面有提到的內容，當 @Injestable 沒有設定 `providedIn` 時需要在 component 的 metadata 中添加 `providers` 這個其實是個縮寫，詳細內容就明天再仔細講解吧，那就明天見！\n\n\n\n# Reference\n\n- [Angular.io - Dependency injection in Angular](https://angular.io/guide/dependency-injection)\n- [Angular.io - Introduction to services and dependency injection](https://angular.io/guide/architecture-services)\n- [Angular Dependency Injection Explained with Examples](https://www.freecodecamp.org/news/angular-dependency-injection/)\n- [How dependency injection works in Angular](https://blog.logrocket.com/how-dependency-injection-works-in-angular/)","slug":"Angular/angular-18","published":1,"updated":"2022-02-16T02:01:06.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdt000b95w381p39wxv","content":"<p>在開發專案時你一定會使用到 <code>Service</code> 的技巧，Service 是一個廣泛的類別，包括 app 所需要的任何功能、數據或特性，而通常一個 service 是一個具有狹窄且明確定義目的的 class，簡單來説可以想像成一個 service 只會對一個明確的目的提供所以有服務。</p>\n<p>Angular 將 component 與 service 拆分開以增加模塊化與可重用性，將處理 component view 的功能與其他類型的功能拆發開來可以讓你在開發 component 時更精簡高效，所以理想的情況下 component 中的邏輯只用來處理使用者的操作，component 應該提供 property binding 的 property 與 event binding 的 method 僅此而已。</p>\n<p>而較為複雜的邏輯任務就應該委託給 service，比如<code>從 server 中獲取數據</code>、<code>驗證用戶輸入</code>或<code>直接登陸到控制台</code>等等複雜的邏輯處理都應該在 service 中處理掉，將這些複雜的邏輯寫在 service 中就可以讓他們被任何 component 使用。</p>\n<p>不過說了這麼多，其實 Angular 是不強制你做這些動作的，不過建議再開發大型專案時還是將複雜的邏輯從 component 中移到 service 中，保持你的 component 單純乾淨也讓 service 可以透過 inject 提供給其他 component 使用。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png\"></p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"What-is-dependency-injection\"><a href=\"#What-is-dependency-injection\" class=\"headerlink\" title=\"What is dependency injection?\"></a>What is dependency injection?</h1><p>dependency injection 可以簡單地稱為 DI ，它是一種<code>設計模式</code> 當你要使用一個 class 時，可以直接從外部來源請求而不是像傳統的做法將它實例化，它存在於整個 Angualr 中，他可以讓你的程式保持靈活、可測試與彈性，component 可以在不知道如何創建 service class 的情況下使用到它的內容，簡單來說 DI 讓使用者可以不用去了解提供者的一些不重要的信息。</p>\n<h1 id=\"Service-examples\"><a href=\"#Service-examples\" class=\"headerlink\" title=\"Service examples\"></a>Service examples</h1><p>介紹完什麼是 DI 後，接著來做一個小小的例子，這是再開發專案時基本上都會遇到的</p>\n<ol>\n<li><p>首先利用 Angular CLI 建立一個 service</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service project</span><br><span class=\"line\">ng g s project</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打開 project.service.ts</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 首先看到的是這個檔案使用了 <code>@Injectable()</code> 將這個 class 裝飾成 Angualr 可以在 DI 系統中使用的，接著可以看到在他的 matedata 中定義了 <code>provideIn: &#39;root&#39;</code> 這代表這個 service 在整個 app 都是可以被使用的，如果不指定 provideIn 的話在 component 中將無法直接注入到 component 中，舉個例子</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 上面的 service 沒有在 metadata 中設定 providedIn，這個情況下如果跟平常一樣在 component 中注入這個 service 就會出錯</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProductService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../second/product.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-third&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./third.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThirdComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> productService: ProductService</span>) &#123;&#125;    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">productService</span>.<span class=\"title function_\">getName</span>());             <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 在 component 的 constructor 中注入 service</li>\n<li>(2): 在 component init 後調用 service 中的 method</li>\n</ul>\n<p> <img src=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png\"></p>\n<p> 在 console 中就會看到這個錯誤，代表他找不到 ProductService 這個 provider 可以注入到 component 中，要解決這個問題需要在 component 的 metadata 中添加 providers 這個 property 並將要注入的 service 放進去這樣就可以正常使用了</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProductService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../second/product.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-third&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./third.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">ProductService</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThirdComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> productService: ProductService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">productService</span>.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最後要將 service 注入到 component 中，雖然上面已經用了不過還是講一下，要注入 service 到 component 中，要在 component 的 constructor 中將它注入，這要就可以在這個 component 中使用這個 service 提供的服務</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProductService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../second/product.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-third&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./third.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">ProductService</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThirdComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> productService: ProductService</span>) &#123; &#125;    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">productService</span>.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1):  在 component 的 constructor 中注入 service</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立一個 service 並使用 dependency injection 將它注入到 component 中，雖然也介紹了什麼是 dependency injection，不過 DI 的觀念比上面介紹的在複雜更多，比如說 @Injestable() 中的 metadata providedIn 就可以填入 <code>root</code>、<code>module name</code> 或 <code>any</code> 填入每個值都有對應不同的使用場景，其中的關係有點複雜就不在本篇章中介紹，一方面是我也不是非常了解不敢隨便分享怕分享了錯誤的資訊，等之後我在摸熟一點會再開一個系列講解這方面的資訊，所以這邊就大概介紹基本的觀念而已。</p>\n<p>下一篇將會介紹上面有提到的內容，當 @Injestable 沒有設定 <code>providedIn</code> 時需要在 component 的 metadata 中添加 <code>providers</code> 這個其實是個縮寫，詳細內容就明天再仔細講解吧，那就明天見！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/dependency-injection\">Angular.io - Dependency injection in Angular</a></li>\n<li><a href=\"https://angular.io/guide/architecture-services\">Angular.io - Introduction to services and dependency injection</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/angular-dependency-injection/\">Angular Dependency Injection Explained with Examples</a></li>\n<li><a href=\"https://blog.logrocket.com/how-dependency-injection-works-in-angular/\">How dependency injection works in Angular</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在開發專案時你一定會使用到 <code>Service</code> 的技巧，Service 是一個廣泛的類別，包括 app 所需要的任何功能、數據或特性，而通常一個 service 是一個具有狹窄且明確定義目的的 class，簡單來説可以想像成一個 service 只會對一個明確的目的提供所以有服務。</p>\n<p>Angular 將 component 與 service 拆分開以增加模塊化與可重用性，將處理 component view 的功能與其他類型的功能拆發開來可以讓你在開發 component 時更精簡高效，所以理想的情況下 component 中的邏輯只用來處理使用者的操作，component 應該提供 property binding 的 property 與 event binding 的 method 僅此而已。</p>\n<p>而較為複雜的邏輯任務就應該委託給 service，比如<code>從 server 中獲取數據</code>、<code>驗證用戶輸入</code>或<code>直接登陸到控制台</code>等等複雜的邏輯處理都應該在 service 中處理掉，將這些複雜的邏輯寫在 service 中就可以讓他們被任何 component 使用。</p>\n<p>不過說了這麼多，其實 Angular 是不強制你做這些動作的，不過建議再開發大型專案時還是將複雜的邏輯從 component 中移到 service 中，保持你的 component 單純乾淨也讓 service 可以透過 inject 提供給其他 component 使用。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767bKqlcXTE3g.png\"></p>","more":"<h1 id=\"What-is-dependency-injection\"><a href=\"#What-is-dependency-injection\" class=\"headerlink\" title=\"What is dependency injection?\"></a>What is dependency injection?</h1><p>dependency injection 可以簡單地稱為 DI ，它是一種<code>設計模式</code> 當你要使用一個 class 時，可以直接從外部來源請求而不是像傳統的做法將它實例化，它存在於整個 Angualr 中，他可以讓你的程式保持靈活、可測試與彈性，component 可以在不知道如何創建 service class 的情況下使用到它的內容，簡單來說 DI 讓使用者可以不用去了解提供者的一些不重要的信息。</p>\n<h1 id=\"Service-examples\"><a href=\"#Service-examples\" class=\"headerlink\" title=\"Service examples\"></a>Service examples</h1><p>介紹完什麼是 DI 後，接著來做一個小小的例子，這是再開發專案時基本上都會遇到的</p>\n<ol>\n<li><p>首先利用 Angular CLI 建立一個 service</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service project</span><br><span class=\"line\">ng g s project</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打開 project.service.ts</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 首先看到的是這個檔案使用了 <code>@Injectable()</code> 將這個 class 裝飾成 Angualr 可以在 DI 系統中使用的，接著可以看到在他的 matedata 中定義了 <code>provideIn: &#39;root&#39;</code> 這代表這個 service 在整個 app 都是可以被使用的，如果不指定 provideIn 的話在 component 中將無法直接注入到 component 中，舉個例子</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProjectService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 上面的 service 沒有在 metadata 中設定 providedIn，這個情況下如果跟平常一樣在 component 中注入這個 service 就會出錯</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProductService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../second/product.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-third&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./third.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThirdComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> productService: ProductService</span>) &#123;&#125;    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">productService</span>.<span class=\"title function_\">getName</span>());             <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 在 component 的 constructor 中注入 service</li>\n<li>(2): 在 component init 後調用 service 中的 method</li>\n</ul>\n<p> <img src=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210813/20124767b8wiRUhh2R.png\"></p>\n<p> 在 console 中就會看到這個錯誤，代表他找不到 ProductService 這個 provider 可以注入到 component 中，要解決這個問題需要在 component 的 metadata 中添加 providers 這個 property 並將要注入的 service 放進去這樣就可以正常使用了</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProductService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../second/product.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-third&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./third.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">ProductService</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThirdComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> productService: ProductService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">productService</span>.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最後要將 service 注入到 component 中，雖然上面已經用了不過還是講一下，要注入 service 到 component 中，要在 component 的 constructor 中將它注入，這要就可以在這個 component 中使用這個 service 提供的服務</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProductService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../second/product.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-third&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./third.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">ProductService</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThirdComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> productService: ProductService</span>) &#123; &#125;    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">productService</span>.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1):  在 component 的 constructor 中注入 service</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立一個 service 並使用 dependency injection 將它注入到 component 中，雖然也介紹了什麼是 dependency injection，不過 DI 的觀念比上面介紹的在複雜更多，比如說 @Injestable() 中的 metadata providedIn 就可以填入 <code>root</code>、<code>module name</code> 或 <code>any</code> 填入每個值都有對應不同的使用場景，其中的關係有點複雜就不在本篇章中介紹，一方面是我也不是非常了解不敢隨便分享怕分享了錯誤的資訊，等之後我在摸熟一點會再開一個系列講解這方面的資訊，所以這邊就大概介紹基本的觀念而已。</p>\n<p>下一篇將會介紹上面有提到的內容，當 @Injestable 沒有設定 <code>providedIn</code> 時需要在 component 的 metadata 中添加 <code>providers</code> 這個其實是個縮寫，詳細內容就明天再仔細講解吧，那就明天見！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/dependency-injection\">Angular.io - Dependency injection in Angular</a></li>\n<li><a href=\"https://angular.io/guide/architecture-services\">Angular.io - Introduction to services and dependency injection</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/angular-dependency-injection/\">Angular Dependency Injection Explained with Examples</a></li>\n<li><a href=\"https://blog.logrocket.com/how-dependency-injection-works-in-angular/\">How dependency injection works in Angular</a></li>\n</ul>"},{"title":"Day19. Dependency providers","date":"2021-09-19T13:30:55.000Z","_content":"\n在上一篇中提到了如何建立與使用一個 Service，也大概介紹了什麼是 Dependency Injection，在介紹使用 @Injectable() 裝飾 service 的 class 的時候提到了要在他的 metadata 中設定 `providedIn`，如果將它設定為 `root` 的話代表這個 service 在整個專案中都是可被使用的，但如果沒有設定這個 property，則要在 component 中注入這個 service 時需要在 @Component() 的 metadata 中設定 providers ，將要注入的 service 放進去，在上一章中的用法是 `providers: [ProductService]`，這其實是一個縮寫，本篇就是要來詳細的介紹他，那我們就繼續往下看吧！\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg)\n\n<!-- more -->\n\n# Dependency injection tokens\n在上一章中提到了什麼是 Dependency injection 不過這邊再來複習一下，這有利於我們接下來要講的內容，簡單來說 Dependency injection 又稱 DI 它是一種設計模式和機制，他用於將某些部分與依賴相分離，以 Angular 的例子來說，他就是用於將複雜的邏輯與 Component 中負責處理畫面或事件的邏輯分離，而這些被分離出來的部分也可以給其他 Component 使用，使它變成可重複使用且可測試的一個部分。\n\n當整個應用程式啟動時，會創建一個名為 `injector` 的東西，可以將它看成會檢查客戶訂單且滿足客戶要求的服務生，舉例來說他可以製作一些咖啡（實例化 CoffeeService）將它提供給客戶，而如果有其他的客戶想要喝茶，那麼這個聰明的服務生就會實例化 MintTeaService 和 CamomileTeaService 用於滿足不同客戶的需求。\n\n然而要讓我們的服務生（injector）知道該出什麼餐點則需要客戶點單（component），他可以在 component 中的 constructor 中要求他要吃什麼（dependency）\n\n```typescript\nconstructor(private coffee: CoffeeService){};\n```\n\n`coffee: CoffeeService` 就是一個 `Dependency injection tokens` 它是一種 inject class 的快捷方式，現在我們的服務生從客戶那邊收集了所有的訂單（ injector 向 component 收集需求 ），接著 服務生（injector） 會使用 CoffeeService 來找咖啡的標記，將客戶點的咖啡記在他的筆記本上。\n\n記錄完客戶的點單後，接著就需要知道如何製作指定的咖啡，這時就需要配方（provider）了，這個配方是一個 object 他會定義如何獲取與 Dependency injection tokens 有關連的可注入依賴項，簡單來說他會告訴服務生（injector）該如何製作這杯咖啡（ 將 service 實例化成一個 object 並將它注入給 component ）\n\n```typescript\nproviders: [CoffeeService, BurgerService, PizzaService]\n```\n\n上面的例子來說服務生將知道如何做出咖啡、漢堡、Pizza 並提供給客戶，以程式的角度來看可以看成 injector 知道 CoffeeService 要使用 CoffeeService 作為模板將它實例化成一個 object 並注入給 component 讓他使用，這邊可能看不出來可以換另一種更詳細的表達方式\n\n```typescript\nproviders: [\n\t{ provide: CoffeeService, useClass: CoffeeService },\n    { provide: BurgerService, useClass: BurgerService },\n\t{ provide: PizzaService, useClass: PizzaService }\n]\n```\n\n這樣應該更可以了解，provide property 作爲 locating a dependency value 和 configuring the injector 的 Token，可以把它理解為他是一個 ID，以服務生的例子來說他就等於是客戶點的餐點名稱，以程式的觀點來看就等於他是 component 需要使用的 service name。\n\n而第二個 property 是一個提供 provider 定義的一個 object，他會告訴 injector 該如何建立 dependency 的值，以上面的服務生例子來說他就是菜單，他會告訴服務生該怎麼製作客戶點的咖啡，而這個定義 provider 的 key 可以是 `useClass` 就像上面使用的，也可以是 `useExisting`、`useValue` 或 `useFactory` 他們每一個都提供了不同類型的 dependency，下面將仔細介紹他們的區別。\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png)\n\n\n\n# Specifying an alternative class provider\n\n首先介紹的是 `useClass` ，不同的 class 可以提供給相同的 service，比如說\n\n```typescript\n[{ provide: Logger, useClass: BetterLogger }]\n```\n\n上面的例子中代表 component 向 injector 説他需要使用 Logger，而 provider 向他提供了 `BetterLogger` 這個 class 讓 injector 將它實例化後注入給 component 使用。\n\n### Configuring class providers with dependencies\n\n如果使用 useClass 的這個 class 有自己的 dependencies，則要在父層 module 或 component 的 metadata 中的 providers 提供他自己於他的 dependencies，舉個例子\n\n```typescript\n@Injectable()\nexport class EvenBetterLogger extends Logger {\n  constructor(private userService: UserService) { super(); }\n\n  log(message: string) {\n    const name = this.userService.user.name;\n    super.log(`Message to ${name}: ${message}`);\n  }\n}\n```\n\n```typescript\n@Component({\n\tproviders: [UserService, { provide: Logger, useClass: EvenBetterLogger }]]\n})\n```\n\n在 component 中使用 useClass 的 class 有自己的  dependencies （UserService），所以在 component 的 metadata 中也需要提供 UserService。\n\n\n\n# Aliasing class providers\n\n在我們使用 useClass 注入指定 class 內容時可能會遇到一個情況，一開始我們建立了兩個 service 分別是 `oldService` 與 `newService`，這兩個 service 一開始負責不同的服務但是到後來的增加跟刪除下，發現只要使用 newService 就好，當遇到這種情況可能有些人會到每個有使用到 oldService 的 component 或 module 去把它改掉，但其實 Angular 他提供了另一個方法那就是別名。\n\n在提到這個方法之前先來釐清一下 useClass 的用法\n\n```typescript\nproviders: [{provide: Class1, useClass: Class1}]\n```\n\n當使用上面這個方法可以等價為將 Class1 注入到 component 或 module 中\n\n```typescript\nproviders: [{provide: Class1, useClass: Class3}]\n```\n\n而上面這個方法可以看成在 Component 或 module 中有一個名叫 Class1 的 Token 要用 Class3 創建並注入，那麼問題來了下面這樣該怎麼解釋？\n\n```typescript\nproviders: [\n\tClass3,\n\t{provide: Class1, useClass: Class3}\n]\n```\n\n其實很簡單，你可以想像在這個 component 或 module 中有一個 Class3 的 Token 利用 Class3 創建並注入，還有第二個 Token 名叫 Class1 但是也是用 Class3 創建並注入，等於說這個 component 或 module 有`兩個 class3 的實例`。\n\n有上面的概念後就可以來看 `useExisting` ，在一開始提到的我們希望 `oldService` 都替換成 `newService` 這時有人會下意識的覺得\n\n```typescript\nproviders: [\n\tnewService,\n\t{provide: oldService, useClass: newService}\n]\n```\n\n上面的這種改法可以看成在這個 component 或 module 中注入一個 newService 的實例並且在將一個名為 oldService 的 Token 也使用 newService 創建，等於說會有兩個 newService 這是我們不希望看見的，這時就可以用 `useExisting` 改寫\n\n```typescript\nproviders: [\n\tnewService,\n\t{provide: oldService, useExisting: newService}\n]\n```\n\n上面的寫法改成使用 `useExisting` 就可以避免建立兩個 newService 的情況了，可以想像是 `newService` 這個實例但是用了 `oldService` 這個別名。\n\n\n\n# Injecting an object\n\n除了使用 useClass 直接提供一個 class 之外，也可以使用 `useValue` 將一個 object 提供給 injector，舉例來說\n\n```typescript\nexport const silentLogger = {\n\tlogs: ['Silent logger says \"Shhhhh!\". Provided via \"useValue\"'],\n\tlog: () => {\n\t\tconsole.log('You are log in');\n\t}\n}\n```\n\n```typescript\n@Component({\n\tproviders: [{ provide: Logger, useValue: silentLogger }]\n})\n```\n\n上面的例子中可以看到，在別的地方建立一個 Object 並將它提供給 injector 讓他注入給 component 中讓 component 中可以使用到這個 Object 中的 property 與 method。\n\n## Using an InjectionToken object\n\n在上面可以看到我們在填入 property provide 的時候都是預定他是一個 service，那們可不可以填入某個 object 或一個 function 呢？答案是可以的，不過你得使用 `InjectionToken` 強制將你想填入的內容產生一個 token，舉個例子吧\n\n```typescript\nimport { Component, Inject, OnInit, InjectionToken } from '@angular/core';\n\nexport const APP_CONFIG = new InjectionToken<{                          // (1)\n  apiEndpoint: string;\n  title: string;\n}>('app.config');\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  providers: [                                                            // (2)\n    {\n      provide: APP_CONFIG,\n      useValue: {\n        apiEndpoint: 'api.heroes.com',\n        title: 'Dependency Injection',\n      },\n    },\n  ],\n})\nexport class AppComponent implements OnInit {\n  title!: string;\n  apiEndpoint!: string;\n  constructor(\n    @Inject(APP_CONFIG) config: { apiEndpoint: string; title: string }    // (3)\n  ) {\n    this.title = config.title;\n    this.apiEndpoint = config.apiEndpoint;\n  }\n\n  ngOnInit() {\n    console.log(this.title);\n    console.log(this.apiEndpoint);\n  }\n}\n```\n\n- (1): 替 APP_CONFIG 產生一個 token，參數的字串（'app.config'）只是對他的描述\n- (2): 將 APP_CONFIG 使用 useValue 提供模板給 injector\n- (3): 使用 `@Inject()` 裝飾器告知使用哪一個 token 注入\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png)\n\n\n\n# Using factory providers\n\n在介紹完 `useValue` 後可以看到就算是普通的 object 也可以使用 InjectionToken 強制產生一個 token，不過要這樣做的前提是要事先建立好要替代的 token 實體，但這種事先建立的情況在實際中不太常發生，比較多都是需要動態產生的，這時就可以使用 `useFactory` 把複雜的動態計算放在 factory 裏面，動態的建立需要的 token 實體，舉個例子\n1. 建立 service1 與 service2\n\n    ```bash\n    ng generate service service1\n    ng generate service service1\n    ```\n\n2. 在兩個 service 中添加一個 getName() method 但是回傳不同的字串\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({ providedIn: 'root' })\n    export class Service1Service {\n      constructor() { }\n      getName() {\n        return 'This is Service-1 method'\n      }\n    }\n    ```\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({ providedIn: 'root' })\n    export class Service2Service {\n      constructor() { }\n      getName() {\n        return 'This is Service-2 method'\n      }\n    }\n    ```\n    \n3. 在 app.component.ts 中使用 useFactory\n    ```typescript\n    import { Component, InjectionToken, OnInit  } from '@angular/core';\n    import { Service1Service } from './service1.service';\n    import { Service2Service } from './service2.service';\n    import { AppService } from './app.service';\n\n    export enum ServiceList {                                                 // (1)\n      SERVICE_1 = 0,\n      SERVICE_2 = 1\n    }\n\n    export const SelectService = new InjectionToken<number>('selectService'); // (2)\n\n    export const serviceFactory = (selectService: number) => {                // (3)\n      if (selectService === ServiceList.SERVICE_1) {\n        return new Service1Service();\n      } else {\n        return new Service2Service();\n      }\n    }\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      providers: [\n        {\n          provide: SelectService,                                             // (4)\n          useValue: ServiceList.SERVICE_1\n        },\n        {\n          provide: AppService,                                                // (5)\n          useFactory: serviceFactory,\n          deps: [SelectService]\n        }\n      ],\n    })\n    export class AppComponent implements OnInit {\n\n      constructor(private appService: AppService) {}                          // (6)\n\n      ngOnInit() {\n        console.log('Useing Service: ', this.appService.getName());\n      }\n    }\n    ```\n    - (1): 定義一個選擇使用哪一個 service 的 enum\n    - (2): 使用剛剛介紹的 `Using an InjectionToken object` 為 SelectService 這個 number 產生一個 Token\n    - (3): 建立一個 Factory function，傳入 select number 用來決定要使用哪一個 service\n    - (4): 使用剛剛介紹的 `useValue` 將 SelectService Token 賦予 ServiceList.SERVICE_1 的值並將他創建出來注入給 app.component\n    - (5): 使用 `useFactory` 將 Factory function 的結果提供給 AppService Token 並將他創建出來注入到 app.component 中\n    - (6): 在 component 的 constructor 中注入 service\n\n這邊特別介紹一下 `deps` 這個 property，他是 injector 要解析的 Token list，然後他列表中的值會作為 useFactory 的參數傳入 factory function 中，這就是為什麼上面的例子中要先用 `InjectionToken` 產生一個 Token，這樣 injector 才能將 SelectService 解析並將其中的值，也就是使用 `useValue` 賦予的值傳遞近 factory function 裏面。\n\n如果使用 useValue 設定值為 `ServiceList.SERVICE_1` 那們在 console 中會看到\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png)\napp.component 中注入的 service 是 service1 的內容，而 useValue 設定值為 `ServiceList.SERVICE_2` 時\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png)\napp.component 中注入的 service 變為 service2 的內容，這就是 `useFactory` 的概念，不過實際上 useFactory 用法會遠比上面的例子還要複雜得多，不過這邊介紹的是一個概念。\n\n\n# 結論\n\n本章中介紹了什麼是 injector 與 provider 和他們之間的關係，用了一個客戶與服務生的例子，不過一樣實際上背後的原理比這個複雜得多，不過這邊就是介紹他的概念不會太過鑽研他背後的原理。\n\n也介紹了 provider 可以透過使用 `useClass`、`useValue`、`useFactory` 或 `useExisting` 將 component 或 module 需要的 Token 利用不同的來源建立出來並注入回去，基本上大多都使用場景都是使用 useClass 跟 useValue，不過在面對比較複雜的專案時也會需要用到另外兩個，這樣才能使你的專案更加的靈活。\n\n下一篇將會介紹 Angular 的 Router，他在 Angular 中也是佔有非常重要的地位，現代的網頁中沒有人只做一頁的，所以就需要 Router 來控制不同的 url 會進到那一個頁面，詳細的內容就留到明天再講解吧，那們一樣明天見囉！\n\n\n# Reference\n\n- [Angular.io - Dependency providers](https://angular.io/guide/dependency-injection-providers)\n- [Angular.io - FactorySansProvider](https://angular.io/api/core/FactorySansProvider#deps)\n- [Angular.io - FactoryProvider](https://angular.io/api/core/FactoryProvider)\n- [[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (1)](https://ithelp.ithome.com.tw/articles/10207990)\n- [[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (2)](https://ithelp.ithome.com.tw/articles/10208240)\n- [Angular里useExisting和useClass的使用场景](https://cloud.tencent.com/developer/article/1739373)\n- [This Won’t Hurt a Bit — Dependency Injection Tokens in Angular](https://medium.com/ngconf/this-wont-hurt-a-bit-dependency-injection-tokens-in-angular-2fa5f6e6293)\n- [Angular Injector, @Injectable & @Inject](https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/)\n- [Dependency Injection in Angular](https://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html)\n","source":"_posts/Angular/angular-19.md","raw":"---\ntitle: Day19. Dependency providers\ndate: 2021-09-19 21:30:55\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一篇中提到了如何建立與使用一個 Service，也大概介紹了什麼是 Dependency Injection，在介紹使用 @Injectable() 裝飾 service 的 class 的時候提到了要在他的 metadata 中設定 `providedIn`，如果將它設定為 `root` 的話代表這個 service 在整個專案中都是可被使用的，但如果沒有設定這個 property，則要在 component 中注入這個 service 時需要在 @Component() 的 metadata 中設定 providers ，將要注入的 service 放進去，在上一章中的用法是 `providers: [ProductService]`，這其實是一個縮寫，本篇就是要來詳細的介紹他，那我們就繼續往下看吧！\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg)\n\n<!-- more -->\n\n# Dependency injection tokens\n在上一章中提到了什麼是 Dependency injection 不過這邊再來複習一下，這有利於我們接下來要講的內容，簡單來說 Dependency injection 又稱 DI 它是一種設計模式和機制，他用於將某些部分與依賴相分離，以 Angular 的例子來說，他就是用於將複雜的邏輯與 Component 中負責處理畫面或事件的邏輯分離，而這些被分離出來的部分也可以給其他 Component 使用，使它變成可重複使用且可測試的一個部分。\n\n當整個應用程式啟動時，會創建一個名為 `injector` 的東西，可以將它看成會檢查客戶訂單且滿足客戶要求的服務生，舉例來說他可以製作一些咖啡（實例化 CoffeeService）將它提供給客戶，而如果有其他的客戶想要喝茶，那麼這個聰明的服務生就會實例化 MintTeaService 和 CamomileTeaService 用於滿足不同客戶的需求。\n\n然而要讓我們的服務生（injector）知道該出什麼餐點則需要客戶點單（component），他可以在 component 中的 constructor 中要求他要吃什麼（dependency）\n\n```typescript\nconstructor(private coffee: CoffeeService){};\n```\n\n`coffee: CoffeeService` 就是一個 `Dependency injection tokens` 它是一種 inject class 的快捷方式，現在我們的服務生從客戶那邊收集了所有的訂單（ injector 向 component 收集需求 ），接著 服務生（injector） 會使用 CoffeeService 來找咖啡的標記，將客戶點的咖啡記在他的筆記本上。\n\n記錄完客戶的點單後，接著就需要知道如何製作指定的咖啡，這時就需要配方（provider）了，這個配方是一個 object 他會定義如何獲取與 Dependency injection tokens 有關連的可注入依賴項，簡單來說他會告訴服務生（injector）該如何製作這杯咖啡（ 將 service 實例化成一個 object 並將它注入給 component ）\n\n```typescript\nproviders: [CoffeeService, BurgerService, PizzaService]\n```\n\n上面的例子來說服務生將知道如何做出咖啡、漢堡、Pizza 並提供給客戶，以程式的角度來看可以看成 injector 知道 CoffeeService 要使用 CoffeeService 作為模板將它實例化成一個 object 並注入給 component 讓他使用，這邊可能看不出來可以換另一種更詳細的表達方式\n\n```typescript\nproviders: [\n\t{ provide: CoffeeService, useClass: CoffeeService },\n    { provide: BurgerService, useClass: BurgerService },\n\t{ provide: PizzaService, useClass: PizzaService }\n]\n```\n\n這樣應該更可以了解，provide property 作爲 locating a dependency value 和 configuring the injector 的 Token，可以把它理解為他是一個 ID，以服務生的例子來說他就等於是客戶點的餐點名稱，以程式的觀點來看就等於他是 component 需要使用的 service name。\n\n而第二個 property 是一個提供 provider 定義的一個 object，他會告訴 injector 該如何建立 dependency 的值，以上面的服務生例子來說他就是菜單，他會告訴服務生該怎麼製作客戶點的咖啡，而這個定義 provider 的 key 可以是 `useClass` 就像上面使用的，也可以是 `useExisting`、`useValue` 或 `useFactory` 他們每一個都提供了不同類型的 dependency，下面將仔細介紹他們的區別。\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png)\n\n\n\n# Specifying an alternative class provider\n\n首先介紹的是 `useClass` ，不同的 class 可以提供給相同的 service，比如說\n\n```typescript\n[{ provide: Logger, useClass: BetterLogger }]\n```\n\n上面的例子中代表 component 向 injector 説他需要使用 Logger，而 provider 向他提供了 `BetterLogger` 這個 class 讓 injector 將它實例化後注入給 component 使用。\n\n### Configuring class providers with dependencies\n\n如果使用 useClass 的這個 class 有自己的 dependencies，則要在父層 module 或 component 的 metadata 中的 providers 提供他自己於他的 dependencies，舉個例子\n\n```typescript\n@Injectable()\nexport class EvenBetterLogger extends Logger {\n  constructor(private userService: UserService) { super(); }\n\n  log(message: string) {\n    const name = this.userService.user.name;\n    super.log(`Message to ${name}: ${message}`);\n  }\n}\n```\n\n```typescript\n@Component({\n\tproviders: [UserService, { provide: Logger, useClass: EvenBetterLogger }]]\n})\n```\n\n在 component 中使用 useClass 的 class 有自己的  dependencies （UserService），所以在 component 的 metadata 中也需要提供 UserService。\n\n\n\n# Aliasing class providers\n\n在我們使用 useClass 注入指定 class 內容時可能會遇到一個情況，一開始我們建立了兩個 service 分別是 `oldService` 與 `newService`，這兩個 service 一開始負責不同的服務但是到後來的增加跟刪除下，發現只要使用 newService 就好，當遇到這種情況可能有些人會到每個有使用到 oldService 的 component 或 module 去把它改掉，但其實 Angular 他提供了另一個方法那就是別名。\n\n在提到這個方法之前先來釐清一下 useClass 的用法\n\n```typescript\nproviders: [{provide: Class1, useClass: Class1}]\n```\n\n當使用上面這個方法可以等價為將 Class1 注入到 component 或 module 中\n\n```typescript\nproviders: [{provide: Class1, useClass: Class3}]\n```\n\n而上面這個方法可以看成在 Component 或 module 中有一個名叫 Class1 的 Token 要用 Class3 創建並注入，那麼問題來了下面這樣該怎麼解釋？\n\n```typescript\nproviders: [\n\tClass3,\n\t{provide: Class1, useClass: Class3}\n]\n```\n\n其實很簡單，你可以想像在這個 component 或 module 中有一個 Class3 的 Token 利用 Class3 創建並注入，還有第二個 Token 名叫 Class1 但是也是用 Class3 創建並注入，等於說這個 component 或 module 有`兩個 class3 的實例`。\n\n有上面的概念後就可以來看 `useExisting` ，在一開始提到的我們希望 `oldService` 都替換成 `newService` 這時有人會下意識的覺得\n\n```typescript\nproviders: [\n\tnewService,\n\t{provide: oldService, useClass: newService}\n]\n```\n\n上面的這種改法可以看成在這個 component 或 module 中注入一個 newService 的實例並且在將一個名為 oldService 的 Token 也使用 newService 創建，等於說會有兩個 newService 這是我們不希望看見的，這時就可以用 `useExisting` 改寫\n\n```typescript\nproviders: [\n\tnewService,\n\t{provide: oldService, useExisting: newService}\n]\n```\n\n上面的寫法改成使用 `useExisting` 就可以避免建立兩個 newService 的情況了，可以想像是 `newService` 這個實例但是用了 `oldService` 這個別名。\n\n\n\n# Injecting an object\n\n除了使用 useClass 直接提供一個 class 之外，也可以使用 `useValue` 將一個 object 提供給 injector，舉例來說\n\n```typescript\nexport const silentLogger = {\n\tlogs: ['Silent logger says \"Shhhhh!\". Provided via \"useValue\"'],\n\tlog: () => {\n\t\tconsole.log('You are log in');\n\t}\n}\n```\n\n```typescript\n@Component({\n\tproviders: [{ provide: Logger, useValue: silentLogger }]\n})\n```\n\n上面的例子中可以看到，在別的地方建立一個 Object 並將它提供給 injector 讓他注入給 component 中讓 component 中可以使用到這個 Object 中的 property 與 method。\n\n## Using an InjectionToken object\n\n在上面可以看到我們在填入 property provide 的時候都是預定他是一個 service，那們可不可以填入某個 object 或一個 function 呢？答案是可以的，不過你得使用 `InjectionToken` 強制將你想填入的內容產生一個 token，舉個例子吧\n\n```typescript\nimport { Component, Inject, OnInit, InjectionToken } from '@angular/core';\n\nexport const APP_CONFIG = new InjectionToken<{                          // (1)\n  apiEndpoint: string;\n  title: string;\n}>('app.config');\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  providers: [                                                            // (2)\n    {\n      provide: APP_CONFIG,\n      useValue: {\n        apiEndpoint: 'api.heroes.com',\n        title: 'Dependency Injection',\n      },\n    },\n  ],\n})\nexport class AppComponent implements OnInit {\n  title!: string;\n  apiEndpoint!: string;\n  constructor(\n    @Inject(APP_CONFIG) config: { apiEndpoint: string; title: string }    // (3)\n  ) {\n    this.title = config.title;\n    this.apiEndpoint = config.apiEndpoint;\n  }\n\n  ngOnInit() {\n    console.log(this.title);\n    console.log(this.apiEndpoint);\n  }\n}\n```\n\n- (1): 替 APP_CONFIG 產生一個 token，參數的字串（'app.config'）只是對他的描述\n- (2): 將 APP_CONFIG 使用 useValue 提供模板給 injector\n- (3): 使用 `@Inject()` 裝飾器告知使用哪一個 token 注入\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png)\n\n\n\n# Using factory providers\n\n在介紹完 `useValue` 後可以看到就算是普通的 object 也可以使用 InjectionToken 強制產生一個 token，不過要這樣做的前提是要事先建立好要替代的 token 實體，但這種事先建立的情況在實際中不太常發生，比較多都是需要動態產生的，這時就可以使用 `useFactory` 把複雜的動態計算放在 factory 裏面，動態的建立需要的 token 實體，舉個例子\n1. 建立 service1 與 service2\n\n    ```bash\n    ng generate service service1\n    ng generate service service1\n    ```\n\n2. 在兩個 service 中添加一個 getName() method 但是回傳不同的字串\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({ providedIn: 'root' })\n    export class Service1Service {\n      constructor() { }\n      getName() {\n        return 'This is Service-1 method'\n      }\n    }\n    ```\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({ providedIn: 'root' })\n    export class Service2Service {\n      constructor() { }\n      getName() {\n        return 'This is Service-2 method'\n      }\n    }\n    ```\n    \n3. 在 app.component.ts 中使用 useFactory\n    ```typescript\n    import { Component, InjectionToken, OnInit  } from '@angular/core';\n    import { Service1Service } from './service1.service';\n    import { Service2Service } from './service2.service';\n    import { AppService } from './app.service';\n\n    export enum ServiceList {                                                 // (1)\n      SERVICE_1 = 0,\n      SERVICE_2 = 1\n    }\n\n    export const SelectService = new InjectionToken<number>('selectService'); // (2)\n\n    export const serviceFactory = (selectService: number) => {                // (3)\n      if (selectService === ServiceList.SERVICE_1) {\n        return new Service1Service();\n      } else {\n        return new Service2Service();\n      }\n    }\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      providers: [\n        {\n          provide: SelectService,                                             // (4)\n          useValue: ServiceList.SERVICE_1\n        },\n        {\n          provide: AppService,                                                // (5)\n          useFactory: serviceFactory,\n          deps: [SelectService]\n        }\n      ],\n    })\n    export class AppComponent implements OnInit {\n\n      constructor(private appService: AppService) {}                          // (6)\n\n      ngOnInit() {\n        console.log('Useing Service: ', this.appService.getName());\n      }\n    }\n    ```\n    - (1): 定義一個選擇使用哪一個 service 的 enum\n    - (2): 使用剛剛介紹的 `Using an InjectionToken object` 為 SelectService 這個 number 產生一個 Token\n    - (3): 建立一個 Factory function，傳入 select number 用來決定要使用哪一個 service\n    - (4): 使用剛剛介紹的 `useValue` 將 SelectService Token 賦予 ServiceList.SERVICE_1 的值並將他創建出來注入給 app.component\n    - (5): 使用 `useFactory` 將 Factory function 的結果提供給 AppService Token 並將他創建出來注入到 app.component 中\n    - (6): 在 component 的 constructor 中注入 service\n\n這邊特別介紹一下 `deps` 這個 property，他是 injector 要解析的 Token list，然後他列表中的值會作為 useFactory 的參數傳入 factory function 中，這就是為什麼上面的例子中要先用 `InjectionToken` 產生一個 Token，這樣 injector 才能將 SelectService 解析並將其中的值，也就是使用 `useValue` 賦予的值傳遞近 factory function 裏面。\n\n如果使用 useValue 設定值為 `ServiceList.SERVICE_1` 那們在 console 中會看到\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png)\napp.component 中注入的 service 是 service1 的內容，而 useValue 設定值為 `ServiceList.SERVICE_2` 時\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png)\napp.component 中注入的 service 變為 service2 的內容，這就是 `useFactory` 的概念，不過實際上 useFactory 用法會遠比上面的例子還要複雜得多，不過這邊介紹的是一個概念。\n\n\n# 結論\n\n本章中介紹了什麼是 injector 與 provider 和他們之間的關係，用了一個客戶與服務生的例子，不過一樣實際上背後的原理比這個複雜得多，不過這邊就是介紹他的概念不會太過鑽研他背後的原理。\n\n也介紹了 provider 可以透過使用 `useClass`、`useValue`、`useFactory` 或 `useExisting` 將 component 或 module 需要的 Token 利用不同的來源建立出來並注入回去，基本上大多都使用場景都是使用 useClass 跟 useValue，不過在面對比較複雜的專案時也會需要用到另外兩個，這樣才能使你的專案更加的靈活。\n\n下一篇將會介紹 Angular 的 Router，他在 Angular 中也是佔有非常重要的地位，現代的網頁中沒有人只做一頁的，所以就需要 Router 來控制不同的 url 會進到那一個頁面，詳細的內容就留到明天再講解吧，那們一樣明天見囉！\n\n\n# Reference\n\n- [Angular.io - Dependency providers](https://angular.io/guide/dependency-injection-providers)\n- [Angular.io - FactorySansProvider](https://angular.io/api/core/FactorySansProvider#deps)\n- [Angular.io - FactoryProvider](https://angular.io/api/core/FactoryProvider)\n- [[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (1)](https://ithelp.ithome.com.tw/articles/10207990)\n- [[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (2)](https://ithelp.ithome.com.tw/articles/10208240)\n- [Angular里useExisting和useClass的使用场景](https://cloud.tencent.com/developer/article/1739373)\n- [This Won’t Hurt a Bit — Dependency Injection Tokens in Angular](https://medium.com/ngconf/this-wont-hurt-a-bit-dependency-injection-tokens-in-angular-2fa5f6e6293)\n- [Angular Injector, @Injectable & @Inject](https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/)\n- [Dependency Injection in Angular](https://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html)\n","slug":"Angular/angular-19","published":1,"updated":"2022-02-16T06:31:00.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdt000e95w3fjyc6rzf","content":"<p>在上一篇中提到了如何建立與使用一個 Service，也大概介紹了什麼是 Dependency Injection，在介紹使用 @Injectable() 裝飾 service 的 class 的時候提到了要在他的 metadata 中設定 <code>providedIn</code>，如果將它設定為 <code>root</code> 的話代表這個 service 在整個專案中都是可被使用的，但如果沒有設定這個 property，則要在 component 中注入這個 service 時需要在 @Component() 的 metadata 中設定 providers ，將要注入的 service 放進去，在上一章中的用法是 <code>providers: [ProductService]</code>，這其實是一個縮寫，本篇就是要來詳細的介紹他，那我們就繼續往下看吧！</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Dependency-injection-tokens\"><a href=\"#Dependency-injection-tokens\" class=\"headerlink\" title=\"Dependency injection tokens\"></a>Dependency injection tokens</h1><p>在上一章中提到了什麼是 Dependency injection 不過這邊再來複習一下，這有利於我們接下來要講的內容，簡單來說 Dependency injection 又稱 DI 它是一種設計模式和機制，他用於將某些部分與依賴相分離，以 Angular 的例子來說，他就是用於將複雜的邏輯與 Component 中負責處理畫面或事件的邏輯分離，而這些被分離出來的部分也可以給其他 Component 使用，使它變成可重複使用且可測試的一個部分。</p>\n<p>當整個應用程式啟動時，會創建一個名為 <code>injector</code> 的東西，可以將它看成會檢查客戶訂單且滿足客戶要求的服務生，舉例來說他可以製作一些咖啡（實例化 CoffeeService）將它提供給客戶，而如果有其他的客戶想要喝茶，那麼這個聰明的服務生就會實例化 MintTeaService 和 CamomileTeaService 用於滿足不同客戶的需求。</p>\n<p>然而要讓我們的服務生（injector）知道該出什麼餐點則需要客戶點單（component），他可以在 component 中的 constructor 中要求他要吃什麼（dependency）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> coffee: CoffeeService</span>)&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>coffee: CoffeeService</code> 就是一個 <code>Dependency injection tokens</code> 它是一種 inject class 的快捷方式，現在我們的服務生從客戶那邊收集了所有的訂單（ injector 向 component 收集需求 ），接著 服務生（injector） 會使用 CoffeeService 來找咖啡的標記，將客戶點的咖啡記在他的筆記本上。</p>\n<p>記錄完客戶的點單後，接著就需要知道如何製作指定的咖啡，這時就需要配方（provider）了，這個配方是一個 object 他會定義如何獲取與 Dependency injection tokens 有關連的可注入依賴項，簡單來說他會告訴服務生（injector）該如何製作這杯咖啡（ 將 service 實例化成一個 object 並將它注入給 component ）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [<span class=\"title class_\">CoffeeService</span>, <span class=\"title class_\">BurgerService</span>, <span class=\"title class_\">PizzaService</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子來說服務生將知道如何做出咖啡、漢堡、Pizza 並提供給客戶，以程式的角度來看可以看成 injector 知道 CoffeeService 要使用 CoffeeService 作為模板將它實例化成一個 object 並注入給 component 讓他使用，這邊可能看不出來可以換另一種更詳細的表達方式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">CoffeeService</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">CoffeeService</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">BurgerService</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">BurgerService</span> &#125;,</span><br><span class=\"line\">\t&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">PizzaService</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">PizzaService</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>這樣應該更可以了解，provide property 作爲 locating a dependency value 和 configuring the injector 的 Token，可以把它理解為他是一個 ID，以服務生的例子來說他就等於是客戶點的餐點名稱，以程式的觀點來看就等於他是 component 需要使用的 service name。</p>\n<p>而第二個 property 是一個提供 provider 定義的一個 object，他會告訴 injector 該如何建立 dependency 的值，以上面的服務生例子來說他就是菜單，他會告訴服務生該怎麼製作客戶點的咖啡，而這個定義 provider 的 key 可以是 <code>useClass</code> 就像上面使用的，也可以是 <code>useExisting</code>、<code>useValue</code> 或 <code>useFactory</code> 他們每一個都提供了不同類型的 dependency，下面將仔細介紹他們的區別。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png\"></p>\n<h1 id=\"Specifying-an-alternative-class-provider\"><a href=\"#Specifying-an-alternative-class-provider\" class=\"headerlink\" title=\"Specifying an alternative class provider\"></a>Specifying an alternative class provider</h1><p>首先介紹的是 <code>useClass</code> ，不同的 class 可以提供給相同的 service，比如說</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">Logger</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">BetterLogger</span> &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中代表 component 向 injector 説他需要使用 Logger，而 provider 向他提供了 <code>BetterLogger</code> 這個 class 讓 injector 將它實例化後注入給 component 使用。</p>\n<h3 id=\"Configuring-class-providers-with-dependencies\"><a href=\"#Configuring-class-providers-with-dependencies\" class=\"headerlink\" title=\"Configuring class providers with dependencies\"></a>Configuring class providers with dependencies</h3><p>如果使用 useClass 的這個 class 有自己的 dependencies，則要在父層 module 或 component 的 metadata 中的 providers 提供他自己於他的 dependencies，舉個例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EvenBetterLogger</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Logger</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> userService: UserService</span>) &#123; <span class=\"variable language_\">super</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">log</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"property\">user</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Message to <span class=\"subst\">$&#123;name&#125;</span>: <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [<span class=\"title class_\">UserService</span>, &#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">Logger</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">EvenBetterLogger</span> &#125;]]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 component 中使用 useClass 的 class 有自己的  dependencies （UserService），所以在 component 的 metadata 中也需要提供 UserService。</p>\n<h1 id=\"Aliasing-class-providers\"><a href=\"#Aliasing-class-providers\" class=\"headerlink\" title=\"Aliasing class providers\"></a>Aliasing class providers</h1><p>在我們使用 useClass 注入指定 class 內容時可能會遇到一個情況，一開始我們建立了兩個 service 分別是 <code>oldService</code> 與 <code>newService</code>，這兩個 service 一開始負責不同的服務但是到後來的增加跟刪除下，發現只要使用 newService 就好，當遇到這種情況可能有些人會到每個有使用到 oldService 的 component 或 module 去把它改掉，但其實 Angular 他提供了另一個方法那就是別名。</p>\n<p>在提到這個方法之前先來釐清一下 useClass 的用法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [&#123;<span class=\"attr\">provide</span>: <span class=\"title class_\">Class1</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">Class1</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>當使用上面這個方法可以等價為將 Class1 注入到 component 或 module 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [&#123;<span class=\"attr\">provide</span>: <span class=\"title class_\">Class1</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">Class3</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>而上面這個方法可以看成在 Component 或 module 中有一個名叫 Class1 的 Token 要用 Class3 創建並注入，那麼問題來了下面這樣該怎麼解釋？</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\t<span class=\"title class_\">Class3</span>,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">provide</span>: <span class=\"title class_\">Class1</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">Class3</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>其實很簡單，你可以想像在這個 component 或 module 中有一個 Class3 的 Token 利用 Class3 創建並注入，還有第二個 Token 名叫 Class1 但是也是用 Class3 創建並注入，等於說這個 component 或 module 有<code>兩個 class3 的實例</code>。</p>\n<p>有上面的概念後就可以來看 <code>useExisting</code> ，在一開始提到的我們希望 <code>oldService</code> 都替換成 <code>newService</code> 這時有人會下意識的覺得</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\tnewService,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">provide</span>: oldService, <span class=\"attr\">useClass</span>: newService&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>上面的這種改法可以看成在這個 component 或 module 中注入一個 newService 的實例並且在將一個名為 oldService 的 Token 也使用 newService 創建，等於說會有兩個 newService 這是我們不希望看見的，這時就可以用 <code>useExisting</code> 改寫</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\tnewService,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">provide</span>: oldService, <span class=\"attr\">useExisting</span>: newService&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>上面的寫法改成使用 <code>useExisting</code> 就可以避免建立兩個 newService 的情況了，可以想像是 <code>newService</code> 這個實例但是用了 <code>oldService</code> 這個別名。</p>\n<h1 id=\"Injecting-an-object\"><a href=\"#Injecting-an-object\" class=\"headerlink\" title=\"Injecting an object\"></a>Injecting an object</h1><p>除了使用 useClass 直接提供一個 class 之外，也可以使用 <code>useValue</code> 將一個 object 提供給 injector，舉例來說</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> silentLogger = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">logs</span>: [<span class=\"string\">&#x27;Silent logger says &quot;Shhhhh!&quot;. Provided via &quot;useValue&quot;&#x27;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">log</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;You are log in&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">Logger</span>, <span class=\"attr\">useValue</span>: silentLogger &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中可以看到，在別的地方建立一個 Object 並將它提供給 injector 讓他注入給 component 中讓 component 中可以使用到這個 Object 中的 property 與 method。</p>\n<h2 id=\"Using-an-InjectionToken-object\"><a href=\"#Using-an-InjectionToken-object\" class=\"headerlink\" title=\"Using an InjectionToken object\"></a>Using an InjectionToken object</h2><p>在上面可以看到我們在填入 property provide 的時候都是預定他是一個 service，那們可不可以填入某個 object 或一個 function 呢？答案是可以的，不過你得使用 <code>InjectionToken</code> 強制將你想填入的內容產生一個 token，舉個例子吧</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Inject</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">InjectionToken</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">APP_CONFIG</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">InjectionToken</span>&lt;&#123;                          <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"attr\">apiEndpoint</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;&gt;(<span class=\"string\">&#x27;app.config&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [                                                            <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_CONFIG</span>,</span><br><span class=\"line\">      <span class=\"attr\">useValue</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">apiEndpoint</span>: <span class=\"string\">&#x27;api.heroes.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Dependency Injection&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  title!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  apiEndpoint!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@Inject</span>(APP_CONFIG) config: &#123; apiEndpoint: <span class=\"built_in\">string</span>; title: <span class=\"built_in\">string</span> &#125;    <span class=\"comment\">// (3)</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">title</span> = config.<span class=\"property\">title</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">apiEndpoint</span> = config.<span class=\"property\">apiEndpoint</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">title</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">apiEndpoint</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 替 APP_CONFIG 產生一個 token，參數的字串（’app.config’）只是對他的描述</li>\n<li>(2): 將 APP_CONFIG 使用 useValue 提供模板給 injector</li>\n<li>(3): 使用 <code>@Inject()</code> 裝飾器告知使用哪一個 token 注入</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png\"></p>\n<h1 id=\"Using-factory-providers\"><a href=\"#Using-factory-providers\" class=\"headerlink\" title=\"Using factory providers\"></a>Using factory providers</h1><p>在介紹完 <code>useValue</code> 後可以看到就算是普通的 object 也可以使用 InjectionToken 強制產生一個 token，不過要這樣做的前提是要事先建立好要替代的 token 實體，但這種事先建立的情況在實際中不太常發生，比較多都是需要動態產生的，這時就可以使用 <code>useFactory</code> 把複雜的動態計算放在 factory 裏面，動態的建立需要的 token 實體，舉個例子</p>\n<ol>\n<li><p>建立 service1 與 service2</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service service1</span><br><span class=\"line\">ng generate service service1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在兩個 service 中添加一個 getName() method 但是回傳不同的字串</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Service1Service</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is Service-1 method&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Service2Service</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is Service-2 method&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中使用 useFactory</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">InjectionToken</span>, <span class=\"title class_\">OnInit</span>  &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Service1Service</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./service1.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Service2Service</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./service2.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"built_in\">enum</span> <span class=\"title class_\">ServiceList</span> &#123;                                                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"variable constant_\">SERVICE_1</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">SERVICE_2</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">SelectService</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">InjectionToken</span>&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"string\">&#x27;selectService&#x27;</span>); <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">serviceFactory</span> = (<span class=\"params\">selectService: <span class=\"built_in\">number</span></span>) =&gt; &#123;                <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selectService === <span class=\"title class_\">ServiceList</span>.<span class=\"property\">SERVICE_1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Service1Service</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Service2Service</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">SelectService</span>,                                             <span class=\"comment\">// (4)</span></span><br><span class=\"line\">      <span class=\"attr\">useValue</span>: <span class=\"title class_\">ServiceList</span>.<span class=\"property\">SERVICE_1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">AppService</span>,                                                <span class=\"comment\">// (5)</span></span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: serviceFactory,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">SelectService</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> appService: AppService</span>) &#123;&#125;                          <span class=\"comment\">// (6)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Useing Service: &#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 定義一個選擇使用哪一個 service 的 enum</li>\n<li>(2): 使用剛剛介紹的 <code>Using an InjectionToken object</code> 為 SelectService 這個 number 產生一個 Token</li>\n<li>(3): 建立一個 Factory function，傳入 select number 用來決定要使用哪一個 service</li>\n<li>(4): 使用剛剛介紹的 <code>useValue</code> 將 SelectService Token 賦予 ServiceList.SERVICE_1 的值並將他創建出來注入給 app.component</li>\n<li>(5): 使用 <code>useFactory</code> 將 Factory function 的結果提供給 AppService Token 並將他創建出來注入到 app.component 中</li>\n<li>(6): 在 component 的 constructor 中注入 service</li>\n</ul>\n</li>\n</ol>\n<p>這邊特別介紹一下 <code>deps</code> 這個 property，他是 injector 要解析的 Token list，然後他列表中的值會作為 useFactory 的參數傳入 factory function 中，這就是為什麼上面的例子中要先用 <code>InjectionToken</code> 產生一個 Token，這樣 injector 才能將 SelectService 解析並將其中的值，也就是使用 <code>useValue</code> 賦予的值傳遞近 factory function 裏面。</p>\n<p>如果使用 useValue 設定值為 <code>ServiceList.SERVICE_1</code> 那們在 console 中會看到<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png\"><br>app.component 中注入的 service 是 service1 的內容，而 useValue 設定值為 <code>ServiceList.SERVICE_2</code> 時<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png\"><br>app.component 中注入的 service 變為 service2 的內容，這就是 <code>useFactory</code> 的概念，不過實際上 useFactory 用法會遠比上面的例子還要複雜得多，不過這邊介紹的是一個概念。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 injector 與 provider 和他們之間的關係，用了一個客戶與服務生的例子，不過一樣實際上背後的原理比這個複雜得多，不過這邊就是介紹他的概念不會太過鑽研他背後的原理。</p>\n<p>也介紹了 provider 可以透過使用 <code>useClass</code>、<code>useValue</code>、<code>useFactory</code> 或 <code>useExisting</code> 將 component 或 module 需要的 Token 利用不同的來源建立出來並注入回去，基本上大多都使用場景都是使用 useClass 跟 useValue，不過在面對比較複雜的專案時也會需要用到另外兩個，這樣才能使你的專案更加的靈活。</p>\n<p>下一篇將會介紹 Angular 的 Router，他在 Angular 中也是佔有非常重要的地位，現代的網頁中沒有人只做一頁的，所以就需要 Router 來控制不同的 url 會進到那一個頁面，詳細的內容就留到明天再講解吧，那們一樣明天見囉！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/dependency-injection-providers\">Angular.io - Dependency providers</a></li>\n<li><a href=\"https://angular.io/api/core/FactorySansProvider#deps\">Angular.io - FactorySansProvider</a></li>\n<li><a href=\"https://angular.io/api/core/FactoryProvider\">Angular.io - FactoryProvider</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10207990\">[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (1)</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208240\">[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (2)</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1739373\">Angular里useExisting和useClass的使用场景</a></li>\n<li><a href=\"https://medium.com/ngconf/this-wont-hurt-a-bit-dependency-injection-tokens-in-angular-2fa5f6e6293\">This Won’t Hurt a Bit — Dependency Injection Tokens in Angular</a></li>\n<li><a href=\"https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/\">Angular Injector, @Injectable &amp; @Inject</a></li>\n<li><a href=\"https://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html\">Dependency Injection in Angular</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一篇中提到了如何建立與使用一個 Service，也大概介紹了什麼是 Dependency Injection，在介紹使用 @Injectable() 裝飾 service 的 class 的時候提到了要在他的 metadata 中設定 <code>providedIn</code>，如果將它設定為 <code>root</code> 的話代表這個 service 在整個專案中都是可被使用的，但如果沒有設定這個 property，則要在 component 中注入這個 service 時需要在 @Component() 的 metadata 中設定 providers ，將要注入的 service 放進去，在上一章中的用法是 <code>providers: [ProductService]</code>，這其實是一個縮寫，本篇就是要來詳細的介紹他，那我們就繼續往下看吧！</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZpsjOVE7SU.jpg\"></p>","more":"<h1 id=\"Dependency-injection-tokens\"><a href=\"#Dependency-injection-tokens\" class=\"headerlink\" title=\"Dependency injection tokens\"></a>Dependency injection tokens</h1><p>在上一章中提到了什麼是 Dependency injection 不過這邊再來複習一下，這有利於我們接下來要講的內容，簡單來說 Dependency injection 又稱 DI 它是一種設計模式和機制，他用於將某些部分與依賴相分離，以 Angular 的例子來說，他就是用於將複雜的邏輯與 Component 中負責處理畫面或事件的邏輯分離，而這些被分離出來的部分也可以給其他 Component 使用，使它變成可重複使用且可測試的一個部分。</p>\n<p>當整個應用程式啟動時，會創建一個名為 <code>injector</code> 的東西，可以將它看成會檢查客戶訂單且滿足客戶要求的服務生，舉例來說他可以製作一些咖啡（實例化 CoffeeService）將它提供給客戶，而如果有其他的客戶想要喝茶，那麼這個聰明的服務生就會實例化 MintTeaService 和 CamomileTeaService 用於滿足不同客戶的需求。</p>\n<p>然而要讓我們的服務生（injector）知道該出什麼餐點則需要客戶點單（component），他可以在 component 中的 constructor 中要求他要吃什麼（dependency）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> coffee: CoffeeService</span>)&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>coffee: CoffeeService</code> 就是一個 <code>Dependency injection tokens</code> 它是一種 inject class 的快捷方式，現在我們的服務生從客戶那邊收集了所有的訂單（ injector 向 component 收集需求 ），接著 服務生（injector） 會使用 CoffeeService 來找咖啡的標記，將客戶點的咖啡記在他的筆記本上。</p>\n<p>記錄完客戶的點單後，接著就需要知道如何製作指定的咖啡，這時就需要配方（provider）了，這個配方是一個 object 他會定義如何獲取與 Dependency injection tokens 有關連的可注入依賴項，簡單來說他會告訴服務生（injector）該如何製作這杯咖啡（ 將 service 實例化成一個 object 並將它注入給 component ）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [<span class=\"title class_\">CoffeeService</span>, <span class=\"title class_\">BurgerService</span>, <span class=\"title class_\">PizzaService</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子來說服務生將知道如何做出咖啡、漢堡、Pizza 並提供給客戶，以程式的角度來看可以看成 injector 知道 CoffeeService 要使用 CoffeeService 作為模板將它實例化成一個 object 並注入給 component 讓他使用，這邊可能看不出來可以換另一種更詳細的表達方式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">CoffeeService</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">CoffeeService</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">BurgerService</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">BurgerService</span> &#125;,</span><br><span class=\"line\">\t&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">PizzaService</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">PizzaService</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>這樣應該更可以了解，provide property 作爲 locating a dependency value 和 configuring the injector 的 Token，可以把它理解為他是一個 ID，以服務生的例子來說他就等於是客戶點的餐點名稱，以程式的觀點來看就等於他是 component 需要使用的 service name。</p>\n<p>而第二個 property 是一個提供 provider 定義的一個 object，他會告訴 injector 該如何建立 dependency 的值，以上面的服務生例子來說他就是菜單，他會告訴服務生該怎麼製作客戶點的咖啡，而這個定義 provider 的 key 可以是 <code>useClass</code> 就像上面使用的，也可以是 <code>useExisting</code>、<code>useValue</code> 或 <code>useFactory</code> 他們每一個都提供了不同類型的 dependency，下面將仔細介紹他們的區別。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767PRR6NqC8Uy.png\"></p>\n<h1 id=\"Specifying-an-alternative-class-provider\"><a href=\"#Specifying-an-alternative-class-provider\" class=\"headerlink\" title=\"Specifying an alternative class provider\"></a>Specifying an alternative class provider</h1><p>首先介紹的是 <code>useClass</code> ，不同的 class 可以提供給相同的 service，比如說</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">Logger</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">BetterLogger</span> &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中代表 component 向 injector 説他需要使用 Logger，而 provider 向他提供了 <code>BetterLogger</code> 這個 class 讓 injector 將它實例化後注入給 component 使用。</p>\n<h3 id=\"Configuring-class-providers-with-dependencies\"><a href=\"#Configuring-class-providers-with-dependencies\" class=\"headerlink\" title=\"Configuring class providers with dependencies\"></a>Configuring class providers with dependencies</h3><p>如果使用 useClass 的這個 class 有自己的 dependencies，則要在父層 module 或 component 的 metadata 中的 providers 提供他自己於他的 dependencies，舉個例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EvenBetterLogger</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Logger</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> userService: UserService</span>) &#123; <span class=\"variable language_\">super</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">log</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"property\">user</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Message to <span class=\"subst\">$&#123;name&#125;</span>: <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [<span class=\"title class_\">UserService</span>, &#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">Logger</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">EvenBetterLogger</span> &#125;]]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 component 中使用 useClass 的 class 有自己的  dependencies （UserService），所以在 component 的 metadata 中也需要提供 UserService。</p>\n<h1 id=\"Aliasing-class-providers\"><a href=\"#Aliasing-class-providers\" class=\"headerlink\" title=\"Aliasing class providers\"></a>Aliasing class providers</h1><p>在我們使用 useClass 注入指定 class 內容時可能會遇到一個情況，一開始我們建立了兩個 service 分別是 <code>oldService</code> 與 <code>newService</code>，這兩個 service 一開始負責不同的服務但是到後來的增加跟刪除下，發現只要使用 newService 就好，當遇到這種情況可能有些人會到每個有使用到 oldService 的 component 或 module 去把它改掉，但其實 Angular 他提供了另一個方法那就是別名。</p>\n<p>在提到這個方法之前先來釐清一下 useClass 的用法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [&#123;<span class=\"attr\">provide</span>: <span class=\"title class_\">Class1</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">Class1</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>當使用上面這個方法可以等價為將 Class1 注入到 component 或 module 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [&#123;<span class=\"attr\">provide</span>: <span class=\"title class_\">Class1</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">Class3</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>而上面這個方法可以看成在 Component 或 module 中有一個名叫 Class1 的 Token 要用 Class3 創建並注入，那麼問題來了下面這樣該怎麼解釋？</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\t<span class=\"title class_\">Class3</span>,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">provide</span>: <span class=\"title class_\">Class1</span>, <span class=\"attr\">useClass</span>: <span class=\"title class_\">Class3</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>其實很簡單，你可以想像在這個 component 或 module 中有一個 Class3 的 Token 利用 Class3 創建並注入，還有第二個 Token 名叫 Class1 但是也是用 Class3 創建並注入，等於說這個 component 或 module 有<code>兩個 class3 的實例</code>。</p>\n<p>有上面的概念後就可以來看 <code>useExisting</code> ，在一開始提到的我們希望 <code>oldService</code> 都替換成 <code>newService</code> 這時有人會下意識的覺得</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\tnewService,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">provide</span>: oldService, <span class=\"attr\">useClass</span>: newService&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>上面的這種改法可以看成在這個 component 或 module 中注入一個 newService 的實例並且在將一個名為 oldService 的 Token 也使用 newService 創建，等於說會有兩個 newService 這是我們不希望看見的，這時就可以用 <code>useExisting</code> 改寫</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">providers</span>: [</span><br><span class=\"line\">\tnewService,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">provide</span>: oldService, <span class=\"attr\">useExisting</span>: newService&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>上面的寫法改成使用 <code>useExisting</code> 就可以避免建立兩個 newService 的情況了，可以想像是 <code>newService</code> 這個實例但是用了 <code>oldService</code> 這個別名。</p>\n<h1 id=\"Injecting-an-object\"><a href=\"#Injecting-an-object\" class=\"headerlink\" title=\"Injecting an object\"></a>Injecting an object</h1><p>除了使用 useClass 直接提供一個 class 之外，也可以使用 <code>useValue</code> 將一個 object 提供給 injector，舉例來說</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> silentLogger = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">logs</span>: [<span class=\"string\">&#x27;Silent logger says &quot;Shhhhh!&quot;. Provided via &quot;useValue&quot;&#x27;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">log</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;You are log in&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [&#123; <span class=\"attr\">provide</span>: <span class=\"title class_\">Logger</span>, <span class=\"attr\">useValue</span>: silentLogger &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中可以看到，在別的地方建立一個 Object 並將它提供給 injector 讓他注入給 component 中讓 component 中可以使用到這個 Object 中的 property 與 method。</p>\n<h2 id=\"Using-an-InjectionToken-object\"><a href=\"#Using-an-InjectionToken-object\" class=\"headerlink\" title=\"Using an InjectionToken object\"></a>Using an InjectionToken object</h2><p>在上面可以看到我們在填入 property provide 的時候都是預定他是一個 service，那們可不可以填入某個 object 或一個 function 呢？答案是可以的，不過你得使用 <code>InjectionToken</code> 強制將你想填入的內容產生一個 token，舉個例子吧</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Inject</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">InjectionToken</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">APP_CONFIG</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">InjectionToken</span>&lt;&#123;                          <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"attr\">apiEndpoint</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;&gt;(<span class=\"string\">&#x27;app.config&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [                                                            <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_CONFIG</span>,</span><br><span class=\"line\">      <span class=\"attr\">useValue</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">apiEndpoint</span>: <span class=\"string\">&#x27;api.heroes.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Dependency Injection&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  title!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  apiEndpoint!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@Inject</span>(APP_CONFIG) config: &#123; apiEndpoint: <span class=\"built_in\">string</span>; title: <span class=\"built_in\">string</span> &#125;    <span class=\"comment\">// (3)</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">title</span> = config.<span class=\"property\">title</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">apiEndpoint</span> = config.<span class=\"property\">apiEndpoint</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">title</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">apiEndpoint</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 替 APP_CONFIG 產生一個 token，參數的字串（’app.config’）只是對他的描述</li>\n<li>(2): 將 APP_CONFIG 使用 useValue 提供模板給 injector</li>\n<li>(3): 使用 <code>@Inject()</code> 裝飾器告知使用哪一個 token 注入</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767fXP00j0QCs.png\"></p>\n<h1 id=\"Using-factory-providers\"><a href=\"#Using-factory-providers\" class=\"headerlink\" title=\"Using factory providers\"></a>Using factory providers</h1><p>在介紹完 <code>useValue</code> 後可以看到就算是普通的 object 也可以使用 InjectionToken 強制產生一個 token，不過要這樣做的前提是要事先建立好要替代的 token 實體，但這種事先建立的情況在實際中不太常發生，比較多都是需要動態產生的，這時就可以使用 <code>useFactory</code> 把複雜的動態計算放在 factory 裏面，動態的建立需要的 token 實體，舉個例子</p>\n<ol>\n<li><p>建立 service1 與 service2</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service service1</span><br><span class=\"line\">ng generate service service1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在兩個 service 中添加一個 getName() method 但是回傳不同的字串</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Service1Service</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is Service-1 method&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Service2Service</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;This is Service-2 method&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中使用 useFactory</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">InjectionToken</span>, <span class=\"title class_\">OnInit</span>  &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Service1Service</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./service1.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Service2Service</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./service2.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"built_in\">enum</span> <span class=\"title class_\">ServiceList</span> &#123;                                                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  <span class=\"variable constant_\">SERVICE_1</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">SERVICE_2</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">SelectService</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">InjectionToken</span>&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"string\">&#x27;selectService&#x27;</span>); <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">serviceFactory</span> = (<span class=\"params\">selectService: <span class=\"built_in\">number</span></span>) =&gt; &#123;                <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selectService === <span class=\"title class_\">ServiceList</span>.<span class=\"property\">SERVICE_1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Service1Service</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Service2Service</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">SelectService</span>,                                             <span class=\"comment\">// (4)</span></span><br><span class=\"line\">      <span class=\"attr\">useValue</span>: <span class=\"title class_\">ServiceList</span>.<span class=\"property\">SERVICE_1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">AppService</span>,                                                <span class=\"comment\">// (5)</span></span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: serviceFactory,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">SelectService</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> appService: AppService</span>) &#123;&#125;                          <span class=\"comment\">// (6)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Useing Service: &#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 定義一個選擇使用哪一個 service 的 enum</li>\n<li>(2): 使用剛剛介紹的 <code>Using an InjectionToken object</code> 為 SelectService 這個 number 產生一個 Token</li>\n<li>(3): 建立一個 Factory function，傳入 select number 用來決定要使用哪一個 service</li>\n<li>(4): 使用剛剛介紹的 <code>useValue</code> 將 SelectService Token 賦予 ServiceList.SERVICE_1 的值並將他創建出來注入給 app.component</li>\n<li>(5): 使用 <code>useFactory</code> 將 Factory function 的結果提供給 AppService Token 並將他創建出來注入到 app.component 中</li>\n<li>(6): 在 component 的 constructor 中注入 service</li>\n</ul>\n</li>\n</ol>\n<p>這邊特別介紹一下 <code>deps</code> 這個 property，他是 injector 要解析的 Token list，然後他列表中的值會作為 useFactory 的參數傳入 factory function 中，這就是為什麼上面的例子中要先用 <code>InjectionToken</code> 產生一個 Token，這樣 injector 才能將 SelectService 解析並將其中的值，也就是使用 <code>useValue</code> 賦予的值傳遞近 factory function 裏面。</p>\n<p>如果使用 useValue 設定值為 <code>ServiceList.SERVICE_1</code> 那們在 console 中會看到<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767nVTPjutgPn.png\"><br>app.component 中注入的 service 是 service1 的內容，而 useValue 設定值為 <code>ServiceList.SERVICE_2</code> 時<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767AUS3HBvDqV.png\"><br>app.component 中注入的 service 變為 service2 的內容，這就是 <code>useFactory</code> 的概念，不過實際上 useFactory 用法會遠比上面的例子還要複雜得多，不過這邊介紹的是一個概念。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 injector 與 provider 和他們之間的關係，用了一個客戶與服務生的例子，不過一樣實際上背後的原理比這個複雜得多，不過這邊就是介紹他的概念不會太過鑽研他背後的原理。</p>\n<p>也介紹了 provider 可以透過使用 <code>useClass</code>、<code>useValue</code>、<code>useFactory</code> 或 <code>useExisting</code> 將 component 或 module 需要的 Token 利用不同的來源建立出來並注入回去，基本上大多都使用場景都是使用 useClass 跟 useValue，不過在面對比較複雜的專案時也會需要用到另外兩個，這樣才能使你的專案更加的靈活。</p>\n<p>下一篇將會介紹 Angular 的 Router，他在 Angular 中也是佔有非常重要的地位，現代的網頁中沒有人只做一頁的，所以就需要 Router 來控制不同的 url 會進到那一個頁面，詳細的內容就留到明天再講解吧，那們一樣明天見囉！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/dependency-injection-providers\">Angular.io - Dependency providers</a></li>\n<li><a href=\"https://angular.io/api/core/FactorySansProvider#deps\">Angular.io - FactorySansProvider</a></li>\n<li><a href=\"https://angular.io/api/core/FactoryProvider\">Angular.io - FactoryProvider</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10207990\">[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (1)</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208240\">[Angular 大師之路] Day 21 - 在 @NgModule 的 providers: [] 自由更換注入內容 (2)</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1739373\">Angular里useExisting和useClass的使用场景</a></li>\n<li><a href=\"https://medium.com/ngconf/this-wont-hurt-a-bit-dependency-injection-tokens-in-angular-2fa5f6e6293\">This Won’t Hurt a Bit — Dependency Injection Tokens in Angular</a></li>\n<li><a href=\"https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/\">Angular Injector, @Injectable &amp; @Inject</a></li>\n<li><a href=\"https://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html\">Dependency Injection in Angular</a></li>\n</ul>"},{"title":"Day20. Angular Routing","date":"2021-09-20T05:20:46.000Z","_content":"\n在現代網頁中常會使用一種稱為 `single page application（SPA）`的技術，可以通過顯示或隱藏特定的 component 來更改用戶看到的畫面，而不是像伺服器重新請求整個頁面的數據對其重新加載，可以使用 `Angular router` 來處理當你需要處理從一個畫面到另一個畫面的任務，Router 通過將瀏覽器的 URL 解析為更改畫面的指令，將使用者導航到指定的畫面。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg)\n\n<!-- more -->\n\n# What is single page application (SPA) ?\n\nsingle page application (SPA) 中文翻譯為`單頁面應用程序`，就如同他的名字他是一個只有一個頁面的應用程序，在網頁中可以看成使用者對網頁的任何操作都不會讓網頁整個重新載入，簡單來說他會讓大部分的信息跟畫面保持不變只更新少部分需要變動的資訊或畫面，舉例來說你在使用 gmail 的時候無論你是在收件夾還是在寄件夾，畫面的標題跟左邊的側欄基本上都不會更改，更改的只有中間的那一部分，這就是 SPA 的概念。\n\nSPA 最大的好處在於，他不像過去的網頁當使用者點擊某個任務時需要將整個畫面重新載入，會造成使用者每次的點擊都會花費大量的時間等待畫面重新載入，這嚴重引響了使用者體驗，而 SPA 則不一樣，他通過動態重寫當前頁面的方式做到快速的更換畫面，大大提升使用者的使用體驗，這邊只是簡單介紹一下他的觀念，有需要詳細了解 SPA 與 MPA 的差別與各自的好處，可以看[這一篇](https://asperbrothers.com/blog/spa-vs-mpa/)文章。\n\n\n# What is router?\n\n在開發一個大型的專案時一定不可能只有一個畫面，隨著功能越來越多越來越複雜，就會需要更多的頁面專門處理他們各自的任務，比如說登錄頁面專門用來處理登陸的任務，購物車頁面專門用來處理購物車的存放與增刪，諸如此類有非常非常多的任務與畫面存在於我們的專案中。\n\n而當在主頁面中點擊了購物車的功能按鈕就會進到購物車的頁面中，就好比主頁面連接著購物車頁面\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png)\n\n而使用者又可以點擊購物車頁面的商品內容按鈕，他又回連接到商品內容頁面，商品內容頁面又可以連接回主頁面或去到登陸頁面，諸如此類的互相關聯著就如同\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png)\n\n光看到就頭皮發麻， 隨著專案越來越大越來越複雜，上面這個圖只會越來越密集越來越大，為了應對這種麻煩的情況 Router 出現了。\n\nrouter 只有一個工作就是`接收使用者傳來要去到哪一個頁面的任務並把畫面導向對的地方`，當使用者點擊購物車按鈕，他會發送一個`使用者需要到購物車頁面`的任務給 Router，而 Router 正確地把畫面引導向購物車頁面，而在購物車頁面中使用者又點擊了商品內容按鈕，他又會發送一個`使用者要到商品內容頁面`的任務給 Router，當它收到任務後會再次精準地把畫面導向商品內容頁面\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png)\n\n這樣是不是乾淨整潔多了呢？雖然在開發的過程中沒有一定需要使用 Router 來達到 SPA 的效果，但是可以看到整個程式會變得非常非常複雜，所以當要建立比較大型的網頁時 Router 就是非常重要的功能，當然他不只是接受任務導向畫面這麼簡單，還可以傳遞參數、紀錄資訊等等，詳細的內容就繼續望下看吧。\n\n\n# Generate an application with routing enabled\n了解了什麼是 SPA 與 Router 後接著來看看在 Angular 中該如何實現吧，一樣舉個簡單的例子，當要創建 Angular 專案時可以使用 Angular CLI 自動化建立專案，在建立時有一個選項\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png)\n\n可以選擇在創建專案時直接選擇要加入 Angular routing，那麼專案生成時就會附加一個 `app-routing.module.ts` 檔案，用於建立專案的 router 設定，而如果沒有在一開始生成也沒關係，一樣可以使用 Angular CLI 建立出來\n\n```bash\nng generate module project --routing\n```\n\n這邊要提醒一下當你是手動建立 routing module 的話，需要將你建立出來的 RoutingModule 放入 app.module.ts 中 @NgModule 的 metadata 的 `imports` 裏面，這樣才可以正常使用喔\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,        // remember to settings routing module in here\n  ],\n  providers: [],\n  bootstrap: [AppComponent]   \n})\nexport class AppModule { }\n```\n\n## Adding components for routing\n\n1. 建立完 routing.module 後接著來建立兩個 component 讓畫面可以切換這兩個 component 的 view\n\n    ```bash\n    ng generate component first\n    ng generate component second\n    ```\n\n2. 接著將這兩個 component 引入到 app-routing.module.ts 中\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { RouterModule, Routes } from '@angular/router';\n\n    import { FirstComponent } from './sub-component/first/first.component';\n    import { SecondComponent } from './sub-component/second/second.component'\n\n    const routes: Routes = [];\n\n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```\n\n3. 在 routes 陣列中設定要導向的路線\n\n    ```typescript\n    const routes: Routes = [\n      { path: 'first-component', component: FirstComponent },\n      { path: 'second-component', component: SecondComponent },\n    ];\n    ```\n\n    在 routes 陣列中每個 route 都是一組包含兩個 property 的 javascript object，第一個 property 定義了 route 的 `url 路徑`，第二個 property 定義了 Angular 看到這個 url 後應該`顯示哪一個 component`。\n\n4. 將 route 加到專案中\n\n    ```html\n    <!-- app.component.html -->\n\n    <h1>Angular Router App</h1>\n\n    <nav>\n      <ul>\n        <li>\n          <a routerLink=\"/first-component\" routerLinkActive=\"active\">First Component</a>\n        </li>\n        <li>\n          <a routerLink=\"/second-component\" routerLinkActive=\"active\">Second Component</a>\n        </li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n    1. 首先建立兩個 `<a>` 元件，代表在畫面中可以點擊兩個連結分別切換兩個 component 的 view\n    2. 在 `<a>` 的 attribute 中使用 `routerLink` 指定 url 的路徑\n    3. 在 `<a>` 的 attrubute 中加上 `routerLinkActive`，他是用來處理當現在的網址與所設定的連結一致時要加上去的Class名稱，簡單來說當 router 為當下那個 link 時，就會將在該link 加上對應的 css class\n    4. 最後在下方加上 `<router-outlet>` 用來顯示切換的 component，等於說要被切換的 component 會出現在這邊\n\n![img](https://i.imgur.com/Nh7xpWU.gif)\n\n在畫面中可以看到，當點擊不同的連接的時候會先更改瀏覽器的 url ，接著會隨著 url 的切換也改變畫面顯示的 component，這就是 router 的功用。\n\n\n\n# 結論\n\n本章中介紹了什麼是 SPA 以及他的優點，而在開發 SPA 時會隨著頁面越來越多而形成越來越複雜的互相連接的關係，所以就需要 `Router` 的出現，他可以讓我們開發專案時減少複雜的頁面連接，專心開發 component 與畫面就好，導向的工作就由 Router 來完成。\n\n講解了最基本的 Router 的用法，下一篇中將會介紹 Router 在 Angular 中的更多用法，那我們就明天見吧！\n\n\n\n# Reference\n\n- [Single Page Application (SPA) vs Multi Page Application (MPA) – Two Development Approaches](https://asperbrothers.com/blog/spa-vs-mpa/)\n- [How does the Internet work?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work)\n- [Angular.io - Angular Routing](https://angular.io/guide/routing-overview)\n- [Angular.io - Common Routing Tasks](https://angular.io/guide/router)","source":"_posts/Angular/angular-20.md","raw":"---\ntitle: Day20. Angular Routing\ndate: 2021-09-20 13:20:46\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在現代網頁中常會使用一種稱為 `single page application（SPA）`的技術，可以通過顯示或隱藏特定的 component 來更改用戶看到的畫面，而不是像伺服器重新請求整個頁面的數據對其重新加載，可以使用 `Angular router` 來處理當你需要處理從一個畫面到另一個畫面的任務，Router 通過將瀏覽器的 URL 解析為更改畫面的指令，將使用者導航到指定的畫面。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg](https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg)\n\n<!-- more -->\n\n# What is single page application (SPA) ?\n\nsingle page application (SPA) 中文翻譯為`單頁面應用程序`，就如同他的名字他是一個只有一個頁面的應用程序，在網頁中可以看成使用者對網頁的任何操作都不會讓網頁整個重新載入，簡單來說他會讓大部分的信息跟畫面保持不變只更新少部分需要變動的資訊或畫面，舉例來說你在使用 gmail 的時候無論你是在收件夾還是在寄件夾，畫面的標題跟左邊的側欄基本上都不會更改，更改的只有中間的那一部分，這就是 SPA 的概念。\n\nSPA 最大的好處在於，他不像過去的網頁當使用者點擊某個任務時需要將整個畫面重新載入，會造成使用者每次的點擊都會花費大量的時間等待畫面重新載入，這嚴重引響了使用者體驗，而 SPA 則不一樣，他通過動態重寫當前頁面的方式做到快速的更換畫面，大大提升使用者的使用體驗，這邊只是簡單介紹一下他的觀念，有需要詳細了解 SPA 與 MPA 的差別與各自的好處，可以看[這一篇](https://asperbrothers.com/blog/spa-vs-mpa/)文章。\n\n\n# What is router?\n\n在開發一個大型的專案時一定不可能只有一個畫面，隨著功能越來越多越來越複雜，就會需要更多的頁面專門處理他們各自的任務，比如說登錄頁面專門用來處理登陸的任務，購物車頁面專門用來處理購物車的存放與增刪，諸如此類有非常非常多的任務與畫面存在於我們的專案中。\n\n而當在主頁面中點擊了購物車的功能按鈕就會進到購物車的頁面中，就好比主頁面連接著購物車頁面\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png)\n\n而使用者又可以點擊購物車頁面的商品內容按鈕，他又回連接到商品內容頁面，商品內容頁面又可以連接回主頁面或去到登陸頁面，諸如此類的互相關聯著就如同\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png)\n\n光看到就頭皮發麻， 隨著專案越來越大越來越複雜，上面這個圖只會越來越密集越來越大，為了應對這種麻煩的情況 Router 出現了。\n\nrouter 只有一個工作就是`接收使用者傳來要去到哪一個頁面的任務並把畫面導向對的地方`，當使用者點擊購物車按鈕，他會發送一個`使用者需要到購物車頁面`的任務給 Router，而 Router 正確地把畫面引導向購物車頁面，而在購物車頁面中使用者又點擊了商品內容按鈕，他又會發送一個`使用者要到商品內容頁面`的任務給 Router，當它收到任務後會再次精準地把畫面導向商品內容頁面\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png)\n\n這樣是不是乾淨整潔多了呢？雖然在開發的過程中沒有一定需要使用 Router 來達到 SPA 的效果，但是可以看到整個程式會變得非常非常複雜，所以當要建立比較大型的網頁時 Router 就是非常重要的功能，當然他不只是接受任務導向畫面這麼簡單，還可以傳遞參數、紀錄資訊等等，詳細的內容就繼續望下看吧。\n\n\n# Generate an application with routing enabled\n了解了什麼是 SPA 與 Router 後接著來看看在 Angular 中該如何實現吧，一樣舉個簡單的例子，當要創建 Angular 專案時可以使用 Angular CLI 自動化建立專案，在建立時有一個選項\n\n![https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png](https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png)\n\n可以選擇在創建專案時直接選擇要加入 Angular routing，那麼專案生成時就會附加一個 `app-routing.module.ts` 檔案，用於建立專案的 router 設定，而如果沒有在一開始生成也沒關係，一樣可以使用 Angular CLI 建立出來\n\n```bash\nng generate module project --routing\n```\n\n這邊要提醒一下當你是手動建立 routing module 的話，需要將你建立出來的 RoutingModule 放入 app.module.ts 中 @NgModule 的 metadata 的 `imports` 裏面，這樣才可以正常使用喔\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,        // remember to settings routing module in here\n  ],\n  providers: [],\n  bootstrap: [AppComponent]   \n})\nexport class AppModule { }\n```\n\n## Adding components for routing\n\n1. 建立完 routing.module 後接著來建立兩個 component 讓畫面可以切換這兩個 component 的 view\n\n    ```bash\n    ng generate component first\n    ng generate component second\n    ```\n\n2. 接著將這兩個 component 引入到 app-routing.module.ts 中\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { RouterModule, Routes } from '@angular/router';\n\n    import { FirstComponent } from './sub-component/first/first.component';\n    import { SecondComponent } from './sub-component/second/second.component'\n\n    const routes: Routes = [];\n\n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```\n\n3. 在 routes 陣列中設定要導向的路線\n\n    ```typescript\n    const routes: Routes = [\n      { path: 'first-component', component: FirstComponent },\n      { path: 'second-component', component: SecondComponent },\n    ];\n    ```\n\n    在 routes 陣列中每個 route 都是一組包含兩個 property 的 javascript object，第一個 property 定義了 route 的 `url 路徑`，第二個 property 定義了 Angular 看到這個 url 後應該`顯示哪一個 component`。\n\n4. 將 route 加到專案中\n\n    ```html\n    <!-- app.component.html -->\n\n    <h1>Angular Router App</h1>\n\n    <nav>\n      <ul>\n        <li>\n          <a routerLink=\"/first-component\" routerLinkActive=\"active\">First Component</a>\n        </li>\n        <li>\n          <a routerLink=\"/second-component\" routerLinkActive=\"active\">Second Component</a>\n        </li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n    1. 首先建立兩個 `<a>` 元件，代表在畫面中可以點擊兩個連結分別切換兩個 component 的 view\n    2. 在 `<a>` 的 attribute 中使用 `routerLink` 指定 url 的路徑\n    3. 在 `<a>` 的 attrubute 中加上 `routerLinkActive`，他是用來處理當現在的網址與所設定的連結一致時要加上去的Class名稱，簡單來說當 router 為當下那個 link 時，就會將在該link 加上對應的 css class\n    4. 最後在下方加上 `<router-outlet>` 用來顯示切換的 component，等於說要被切換的 component 會出現在這邊\n\n![img](https://i.imgur.com/Nh7xpWU.gif)\n\n在畫面中可以看到，當點擊不同的連接的時候會先更改瀏覽器的 url ，接著會隨著 url 的切換也改變畫面顯示的 component，這就是 router 的功用。\n\n\n\n# 結論\n\n本章中介紹了什麼是 SPA 以及他的優點，而在開發 SPA 時會隨著頁面越來越多而形成越來越複雜的互相連接的關係，所以就需要 `Router` 的出現，他可以讓我們開發專案時減少複雜的頁面連接，專心開發 component 與畫面就好，導向的工作就由 Router 來完成。\n\n講解了最基本的 Router 的用法，下一篇中將會介紹 Router 在 Angular 中的更多用法，那我們就明天見吧！\n\n\n\n# Reference\n\n- [Single Page Application (SPA) vs Multi Page Application (MPA) – Two Development Approaches](https://asperbrothers.com/blog/spa-vs-mpa/)\n- [How does the Internet work?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work)\n- [Angular.io - Angular Routing](https://angular.io/guide/routing-overview)\n- [Angular.io - Common Routing Tasks](https://angular.io/guide/router)","slug":"Angular/angular-20","published":1,"updated":"2022-02-16T06:32:33.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdu000h95w38jst1lpz","content":"<p>在現代網頁中常會使用一種稱為 <code>single page application（SPA）</code>的技術，可以通過顯示或隱藏特定的 component 來更改用戶看到的畫面，而不是像伺服器重新請求整個頁面的數據對其重新加載，可以使用 <code>Angular router</code> 來處理當你需要處理從一個畫面到另一個畫面的任務，Router 通過將瀏覽器的 URL 解析為更改畫面的指令，將使用者導航到指定的畫面。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"What-is-single-page-application-SPA\"><a href=\"#What-is-single-page-application-SPA\" class=\"headerlink\" title=\"What is single page application (SPA) ?\"></a>What is single page application (SPA) ?</h1><p>single page application (SPA) 中文翻譯為<code>單頁面應用程序</code>，就如同他的名字他是一個只有一個頁面的應用程序，在網頁中可以看成使用者對網頁的任何操作都不會讓網頁整個重新載入，簡單來說他會讓大部分的信息跟畫面保持不變只更新少部分需要變動的資訊或畫面，舉例來說你在使用 gmail 的時候無論你是在收件夾還是在寄件夾，畫面的標題跟左邊的側欄基本上都不會更改，更改的只有中間的那一部分，這就是 SPA 的概念。</p>\n<p>SPA 最大的好處在於，他不像過去的網頁當使用者點擊某個任務時需要將整個畫面重新載入，會造成使用者每次的點擊都會花費大量的時間等待畫面重新載入，這嚴重引響了使用者體驗，而 SPA 則不一樣，他通過動態重寫當前頁面的方式做到快速的更換畫面，大大提升使用者的使用體驗，這邊只是簡單介紹一下他的觀念，有需要詳細了解 SPA 與 MPA 的差別與各自的好處，可以看<a href=\"https://asperbrothers.com/blog/spa-vs-mpa/\">這一篇</a>文章。</p>\n<h1 id=\"What-is-router\"><a href=\"#What-is-router\" class=\"headerlink\" title=\"What is router?\"></a>What is router?</h1><p>在開發一個大型的專案時一定不可能只有一個畫面，隨著功能越來越多越來越複雜，就會需要更多的頁面專門處理他們各自的任務，比如說登錄頁面專門用來處理登陸的任務，購物車頁面專門用來處理購物車的存放與增刪，諸如此類有非常非常多的任務與畫面存在於我們的專案中。</p>\n<p>而當在主頁面中點擊了購物車的功能按鈕就會進到購物車的頁面中，就好比主頁面連接著購物車頁面<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png\"></p>\n<p>而使用者又可以點擊購物車頁面的商品內容按鈕，他又回連接到商品內容頁面，商品內容頁面又可以連接回主頁面或去到登陸頁面，諸如此類的互相關聯著就如同</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png\"></p>\n<p>光看到就頭皮發麻， 隨著專案越來越大越來越複雜，上面這個圖只會越來越密集越來越大，為了應對這種麻煩的情況 Router 出現了。</p>\n<p>router 只有一個工作就是<code>接收使用者傳來要去到哪一個頁面的任務並把畫面導向對的地方</code>，當使用者點擊購物車按鈕，他會發送一個<code>使用者需要到購物車頁面</code>的任務給 Router，而 Router 正確地把畫面引導向購物車頁面，而在購物車頁面中使用者又點擊了商品內容按鈕，他又會發送一個<code>使用者要到商品內容頁面</code>的任務給 Router，當它收到任務後會再次精準地把畫面導向商品內容頁面</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png\"></p>\n<p>這樣是不是乾淨整潔多了呢？雖然在開發的過程中沒有一定需要使用 Router 來達到 SPA 的效果，但是可以看到整個程式會變得非常非常複雜，所以當要建立比較大型的網頁時 Router 就是非常重要的功能，當然他不只是接受任務導向畫面這麼簡單，還可以傳遞參數、紀錄資訊等等，詳細的內容就繼續望下看吧。</p>\n<h1 id=\"Generate-an-application-with-routing-enabled\"><a href=\"#Generate-an-application-with-routing-enabled\" class=\"headerlink\" title=\"Generate an application with routing enabled\"></a>Generate an application with routing enabled</h1><p>了解了什麼是 SPA 與 Router 後接著來看看在 Angular 中該如何實現吧，一樣舉個簡單的例子，當要創建 Angular 專案時可以使用 Angular CLI 自動化建立專案，在建立時有一個選項</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png\"></p>\n<p>可以選擇在創建專案時直接選擇要加入 Angular routing，那麼專案生成時就會附加一個 <code>app-routing.module.ts</code> 檔案，用於建立專案的 router 設定，而如果沒有在一開始生成也沒關係，一樣可以使用 Angular CLI 建立出來</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module project --routing</span><br></pre></td></tr></table></figure>\n\n<p>這邊要提醒一下當你是手動建立 routing module 的話，需要將你建立出來的 RoutingModule 放入 app.module.ts 中 @NgModule 的 metadata 的 <code>imports</code> 裏面，這樣才可以正常使用喔</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,        <span class=\"comment\">// remember to settings routing module in here</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]   </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Adding-components-for-routing\"><a href=\"#Adding-components-for-routing\" class=\"headerlink\" title=\"Adding components for routing\"></a>Adding components for routing</h2><ol>\n<li><p>建立完 routing.module 後接著來建立兩個 component 讓畫面可以切換這兩個 component 的 view</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component first</span><br><span class=\"line\">ng generate component second</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著將這兩個 component 引入到 app-routing.module.ts 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FirstComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./sub-component/first/first.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SecondComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./sub-component/second/second.component&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 routes 陣列中設定要導向的路線</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p> 在 routes 陣列中每個 route 都是一組包含兩個 property 的 javascript object，第一個 property 定義了 route 的 <code>url 路徑</code>，第二個 property 定義了 Angular 看到這個 url 後應該<code>顯示哪一個 component</code>。</p>\n</li>\n<li><p>將 route 加到專案中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Angular Router App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/first-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>First Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/second-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>Second Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先建立兩個 <code>&lt;a&gt;</code> 元件，代表在畫面中可以點擊兩個連結分別切換兩個 component 的 view</li>\n<li>在 <code>&lt;a&gt;</code> 的 attribute 中使用 <code>routerLink</code> 指定 url 的路徑</li>\n<li>在 <code>&lt;a&gt;</code> 的 attrubute 中加上 <code>routerLinkActive</code>，他是用來處理當現在的網址與所設定的連結一致時要加上去的Class名稱，簡單來說當 router 為當下那個 link 時，就會將在該link 加上對應的 css class</li>\n<li>最後在下方加上 <code>&lt;router-outlet&gt;</code> 用來顯示切換的 component，等於說要被切換的 component 會出現在這邊</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Nh7xpWU.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當點擊不同的連接的時候會先更改瀏覽器的 url ，接著會隨著 url 的切換也改變畫面顯示的 component，這就是 router 的功用。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 SPA 以及他的優點，而在開發 SPA 時會隨著頁面越來越多而形成越來越複雜的互相連接的關係，所以就需要 <code>Router</code> 的出現，他可以讓我們開發專案時減少複雜的頁面連接，專心開發 component 與畫面就好，導向的工作就由 Router 來完成。</p>\n<p>講解了最基本的 Router 的用法，下一篇中將會介紹 Router 在 Angular 中的更多用法，那我們就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://asperbrothers.com/blog/spa-vs-mpa/\">Single Page Application (SPA) vs Multi Page Application (MPA) – Two Development Approaches</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work\">How does the Internet work?</a></li>\n<li><a href=\"https://angular.io/guide/routing-overview\">Angular.io - Angular Routing</a></li>\n<li><a href=\"https://angular.io/guide/router\">Angular.io - Common Routing Tasks</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在現代網頁中常會使用一種稱為 <code>single page application（SPA）</code>的技術，可以通過顯示或隱藏特定的 component 來更改用戶看到的畫面，而不是像伺服器重新請求整個頁面的數據對其重新加載，可以使用 <code>Angular router</code> 來處理當你需要處理從一個畫面到另一個畫面的任務，Router 通過將瀏覽器的 URL 解析為更改畫面的指令，將使用者導航到指定的畫面。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767VAxO4x8GEi.jpg\"></p>","more":"<h1 id=\"What-is-single-page-application-SPA\"><a href=\"#What-is-single-page-application-SPA\" class=\"headerlink\" title=\"What is single page application (SPA) ?\"></a>What is single page application (SPA) ?</h1><p>single page application (SPA) 中文翻譯為<code>單頁面應用程序</code>，就如同他的名字他是一個只有一個頁面的應用程序，在網頁中可以看成使用者對網頁的任何操作都不會讓網頁整個重新載入，簡單來說他會讓大部分的信息跟畫面保持不變只更新少部分需要變動的資訊或畫面，舉例來說你在使用 gmail 的時候無論你是在收件夾還是在寄件夾，畫面的標題跟左邊的側欄基本上都不會更改，更改的只有中間的那一部分，這就是 SPA 的概念。</p>\n<p>SPA 最大的好處在於，他不像過去的網頁當使用者點擊某個任務時需要將整個畫面重新載入，會造成使用者每次的點擊都會花費大量的時間等待畫面重新載入，這嚴重引響了使用者體驗，而 SPA 則不一樣，他通過動態重寫當前頁面的方式做到快速的更換畫面，大大提升使用者的使用體驗，這邊只是簡單介紹一下他的觀念，有需要詳細了解 SPA 與 MPA 的差別與各自的好處，可以看<a href=\"https://asperbrothers.com/blog/spa-vs-mpa/\">這一篇</a>文章。</p>\n<h1 id=\"What-is-router\"><a href=\"#What-is-router\" class=\"headerlink\" title=\"What is router?\"></a>What is router?</h1><p>在開發一個大型的專案時一定不可能只有一個畫面，隨著功能越來越多越來越複雜，就會需要更多的頁面專門處理他們各自的任務，比如說登錄頁面專門用來處理登陸的任務，購物車頁面專門用來處理購物車的存放與增刪，諸如此類有非常非常多的任務與畫面存在於我們的專案中。</p>\n<p>而當在主頁面中點擊了購物車的功能按鈕就會進到購物車的頁面中，就好比主頁面連接著購物車頁面<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767IICbH9PtB5.png\"></p>\n<p>而使用者又可以點擊購物車頁面的商品內容按鈕，他又回連接到商品內容頁面，商品內容頁面又可以連接回主頁面或去到登陸頁面，諸如此類的互相關聯著就如同</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767qNfTFTuqDd.png\"></p>\n<p>光看到就頭皮發麻， 隨著專案越來越大越來越複雜，上面這個圖只會越來越密集越來越大，為了應對這種麻煩的情況 Router 出現了。</p>\n<p>router 只有一個工作就是<code>接收使用者傳來要去到哪一個頁面的任務並把畫面導向對的地方</code>，當使用者點擊購物車按鈕，他會發送一個<code>使用者需要到購物車頁面</code>的任務給 Router，而 Router 正確地把畫面引導向購物車頁面，而在購物車頁面中使用者又點擊了商品內容按鈕，他又會發送一個<code>使用者要到商品內容頁面</code>的任務給 Router，當它收到任務後會再次精準地把畫面導向商品內容頁面</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767iHe8uy4GSV.png\"></p>\n<p>這樣是不是乾淨整潔多了呢？雖然在開發的過程中沒有一定需要使用 Router 來達到 SPA 的效果，但是可以看到整個程式會變得非常非常複雜，所以當要建立比較大型的網頁時 Router 就是非常重要的功能，當然他不只是接受任務導向畫面這麼簡單，還可以傳遞參數、紀錄資訊等等，詳細的內容就繼續望下看吧。</p>\n<h1 id=\"Generate-an-application-with-routing-enabled\"><a href=\"#Generate-an-application-with-routing-enabled\" class=\"headerlink\" title=\"Generate an application with routing enabled\"></a>Generate an application with routing enabled</h1><p>了解了什麼是 SPA 與 Router 後接著來看看在 Angular 中該如何實現吧，一樣舉個簡單的例子，當要創建 Angular 專案時可以使用 Angular CLI 自動化建立專案，在建立時有一個選項</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210815/20124767uEueB4YNCA.png\"></p>\n<p>可以選擇在創建專案時直接選擇要加入 Angular routing，那麼專案生成時就會附加一個 <code>app-routing.module.ts</code> 檔案，用於建立專案的 router 設定，而如果沒有在一開始生成也沒關係，一樣可以使用 Angular CLI 建立出來</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module project --routing</span><br></pre></td></tr></table></figure>\n\n<p>這邊要提醒一下當你是手動建立 routing module 的話，需要將你建立出來的 RoutingModule 放入 app.module.ts 中 @NgModule 的 metadata 的 <code>imports</code> 裏面，這樣才可以正常使用喔</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,        <span class=\"comment\">// remember to settings routing module in here</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]   </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Adding-components-for-routing\"><a href=\"#Adding-components-for-routing\" class=\"headerlink\" title=\"Adding components for routing\"></a>Adding components for routing</h2><ol>\n<li><p>建立完 routing.module 後接著來建立兩個 component 讓畫面可以切換這兩個 component 的 view</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component first</span><br><span class=\"line\">ng generate component second</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著將這兩個 component 引入到 app-routing.module.ts 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FirstComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./sub-component/first/first.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SecondComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./sub-component/second/second.component&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 routes 陣列中設定要導向的路線</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p> 在 routes 陣列中每個 route 都是一組包含兩個 property 的 javascript object，第一個 property 定義了 route 的 <code>url 路徑</code>，第二個 property 定義了 Angular 看到這個 url 後應該<code>顯示哪一個 component</code>。</p>\n</li>\n<li><p>將 route 加到專案中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Angular Router App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/first-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>First Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/second-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>Second Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先建立兩個 <code>&lt;a&gt;</code> 元件，代表在畫面中可以點擊兩個連結分別切換兩個 component 的 view</li>\n<li>在 <code>&lt;a&gt;</code> 的 attribute 中使用 <code>routerLink</code> 指定 url 的路徑</li>\n<li>在 <code>&lt;a&gt;</code> 的 attrubute 中加上 <code>routerLinkActive</code>，他是用來處理當現在的網址與所設定的連結一致時要加上去的Class名稱，簡單來說當 router 為當下那個 link 時，就會將在該link 加上對應的 css class</li>\n<li>最後在下方加上 <code>&lt;router-outlet&gt;</code> 用來顯示切換的 component，等於說要被切換的 component 會出現在這邊</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Nh7xpWU.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當點擊不同的連接的時候會先更改瀏覽器的 url ，接著會隨著 url 的切換也改變畫面顯示的 component，這就是 router 的功用。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 SPA 以及他的優點，而在開發 SPA 時會隨著頁面越來越多而形成越來越複雜的互相連接的關係，所以就需要 <code>Router</code> 的出現，他可以讓我們開發專案時減少複雜的頁面連接，專心開發 component 與畫面就好，導向的工作就由 Router 來完成。</p>\n<p>講解了最基本的 Router 的用法，下一篇中將會介紹 Router 在 Angular 中的更多用法，那我們就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://asperbrothers.com/blog/spa-vs-mpa/\">Single Page Application (SPA) vs Multi Page Application (MPA) – Two Development Approaches</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work\">How does the Internet work?</a></li>\n<li><a href=\"https://angular.io/guide/routing-overview\">Angular.io - Angular Routing</a></li>\n<li><a href=\"https://angular.io/guide/router\">Angular.io - Common Routing Tasks</a></li>\n</ul>"},{"title":"Day21. Common Routing Tasks (一)","date":"2021-09-21T13:43:10.000Z","_content":"\n上一張介紹完什麼是 router 與他的基本用法之後，接著要來繼續介紹 Angular router 的其他一些比較詳細的細節與用法，那就接著看下去吧！\n\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png)\n\n<!-- more -->\n\n# What is URL?\n\nURL 是瀏覽器用來檢索網路上任何已發布資源的機制，他的全名叫做 `Uniform Resource Locator`，理論每個有效的 URL 都會指向一個`唯一`的資源，URL 是由不同部分所組成的，一部分是一定要有而另一部分則是可選的，他的組成為下圖\n\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png)\n\n## Scheme\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png)\n\nURL 的第一部分是 scheme 他表示瀏覽器請求資源時所使用的通訊協議，對於網站而言通常是使用 `http` 或 `https`，除了網站常用的這兩個之外他也知道該如何處理其他方案，比如說填入 mailto 就打開郵件功能等等。\n\n## Authority\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png)\n\n接下來是 Authority 他通過字串 `://` 與 Scheme 分開，Authority 部份包括 `Domain Name` 與 `Port` 兩個部分組成，兩者由`冒號（：）`分隔\n\n- domain 表示正在請求的 web 伺服器，通常會是一個 domain name 也可以使用 IP Adress\n- Port 代表訪問 Web 伺服器上資源的 `gate`，使用 HTTP 為 80 而 HTTPS 為 443，不過如果是使用 HTTP 協議的標準來授與對其資源的訪問權限時通常會省略他\n\n## Path to resource\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png)\n\n上面例子中的 path to resource 是 Web 伺服器上資源的路徑，在早期這樣的路徑代表 Web 伺服器上的物理文件路徑。\n\n## Parameters\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png)\n\nparameters 是用來提供 Web 伺服器的額外參數，這些參數是由 & 與 / 分隔，Web 伺服器可以透過這些參數再回傳資源前做額外的處理。\n\n## Anchor\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png)\n\nAnchor 代表資源內的一種`書籤`，為瀏覽器提供顯示位置於該書籤的位置，例如在 HTML 中新增帶有 id 的標題，當點擊某個標題時可以將瀏覽器瞬間移動到那個標籤那邊，要注意的是 # 後面的部分`永遠不會`隨 request 一起發送到伺服器中。\n\n\n# Getting route information\n\n雖然了解了如何使用基本的 router 但似乎對於開發專案來說還是不太夠，可能會遇到再開發專案時需要將信息從一個 component 傳遞到另一個 component ( 這邊不是向父子層傳遞參數，是 component 的平行傳遞 )，比如說一個顯示購物清單的應用程序，每個商品項目都有一個唯一的 `id`，要編輯某個商品的內容時使用者要點及編輯按鈕，打開 EditGroceryItem component，希望將 component 的商品 id 傳入以便向使用者顯示整卻的信息。\n\n遇到這個情況就可以使用 router 將信息傳遞給你需要的 component，為此可以使用 `ActivatedRoute interface` 該怎麼使用就來舉個例子吧，一樣拿上一篇的 router 例子來改寫就好\n\n1. 首先先更改 app-routing.module.ts 中的設定\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { RouterModule, Routes, ActivatedRoute, ParamMap } from '@angular/router';\n    import { FirstComponent } from './first/first.component';\n    import { SecondComponent } from './second/second.component';\n\n    const routes: Routes = [\n      { path: 'first-component/:name', component: FirstComponent },\n      { path: 'second-component/:name', component: SecondComponent }\n    ];\n\n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```\n\n    在 routes 的陣列中設定每個 component 對應到的路徑，這邊將路經更改為 `componentName/:name` ，經過上面對 URL 的介紹就會知道我們希望在 path 中添加 parameters。\n\n2. 在 app.component.html 中調整點擊按鈕後送出的 url path\n\n    ```html\n    <!-- app.component.html -->\n\n    <h1>Angular Router App</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"/first-component/first-one-component\" routerLinkActive=\"active\">First Component</a></li>\n        <li><a routerLink=\"/second-component/second-one-component\" routerLinkActive=\"active\">Second Component</a></li>\n      </ul>\n    </nav>\n    <router-outlet></router-outlet>\n    ```\n\n3. 接著在這兩個 component 中新增方法來獲得 url 傳遞的參數\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ActivatedRoute } from '@angular/router';                 // (1)\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      name!: string | null;                                           // (2)\n      constructor( private route: ActivatedRoute,) { }                // (3)\n\n      ngOnInit(): void {\n        this.name = this.route.snapshot.paramMap.get('name')          // (4)\n      }\n    }\n    ```\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ActivatedRoute } from '@angular/router';\n\n    @Component({\n      selector: 'app-second',\n      templateUrl: './second.component.html',\n    })\n    export class SecondComponent implements OnInit {\n      name!: string | null;\n      constructor( private route: ActivatedRoute,) { }\n\n      ngOnInit(): void {\n        this.name = this.route.snapshot.paramMap.get('name')\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/router` 中引入 `ActivatedRoute`\n    - (2): 建立一個 property 用於接收 url 的參數並顯示在畫面中\n    - (3): 將 ActivatedRoute 注入到 component 中\n    - (4): 獲得 url 的參數\n4. 接著在兩個 component 的 template 中顯示獲得的 name\n\n    ```html\n    <h1>Component Name is: {{name}}</h1>\n    ```\n    \n![img](https://i.imgur.com/zzGkGs3.gif)\n\n在畫面中可以看到隨著我們點擊不同的超連結會進到不同的 component 中，而畫面中的內容會隨著 url 的參數改變，就代表 component 確實有獲得 url 的參數並將它顯示在各自的 view 中。\n\n\n# Setting up wildcard routes\n\n再開發這種有使用 router 的專案時，需要注意要能夠正常的處理當使用者輸入了專案中不存在路徑時會發生什麼事，要處理這種情況需要將 `wildcard route` 添加到你的設定中，每當請求的 url 與任何一個路徑不匹配時 Angular 就會選擇這個路徑\n\n```typescript\n{ path: '**', component:  }\n```\n\n兩個星號（**） 向 Angular 表明這個 route 是 `wildcard route`，對於 component property 則可以使用任一 component 不過通常會多做一個 component 用來處理這種狀況，比較常見的是建立一個 `PageNotFoundComponent` 來向使用者顯示 `404` 或重新導向首頁之類的，記得要將 `wildcard route` 放在最後一條，因為他會匹配任何一個 url。\n\n來用上面的例子新增一個 PageNotFoundComponent 吧\n\n```typescript\nconst routes: Routes = [\n  { path: 'first-component/:name', component: FirstComponent },\n  { path: 'second-component/:name', component: SecondComponent },\n  { path: '**', component: PageNotFoundComponent  }\n];\n```\n\n接著在 pageNotFound.component.html 中新增顯示沒有此頁面\n\n```html\n<h1>Page Not Found</h1>\n```\n\n![img](https://i.imgur.com/GqY1qDl.gif)\n可以看到當輸入了一個不符合任何 route 的路徑時會導向 pageNotFoundComponent。\n\n\n# Nesting routes\n\n隨著專案變大單純的一層 route 已經不夠應付複雜的專案架構，這時就需要 nesting routes 的出現，他可以讓你 `<router-outlet>` 中顯示的 component 中也有自己的 `<router-outlet>`，因為他是對 AppComponent 中的 `<router-outlet>` 的補充，以上面的例子來說除了 app.component 中有 `<router-outlet>` 用來顯示 firstComponent 或 secondComponent 之外，還可以在 firstComponent 在添加自己的 `<router-outlet>`。\n\n1. 先在 firstComponent 中添加自己的 `<router-outlet>`\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: {{name}}</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n2. 接著在 app-routing.module.ts 中添加 nesting routes\n\n    ```typescript\n    const routes: Routes = [\n      {\n        path: 'first-component/:name',\n        component: FirstComponent,\n        children: [\n          { path: 'child-a', component: ChildAComponent },\n          { path: 'child-b', component: ChildBComponent },\n        ],\n      },\n      { path: 'second-component/:name', component: SecondComponent },\n      { path: '**', component: PageNotFoundComponent },\n    ];\n    ```\n    \n![img](https://i.imgur.com/QPdsp1J.gif)\n\n畫面中可以看到只有選擇 First Component 後才會出現 Child-a 與 Child-b 兩個導覽列，各自點選  Child-a 或 Child-b 後就會顯示對應的 component view。\n\n\n# 結論\n\n本章中介紹了什麼是 url 以及他的結構，對於現代網頁而言 url 是非常重要的觀念，需要充分的了解他的結構與該怎麼使用它。\n\n介紹了如何透過 url 傳遞參數讓符合路徑的 component 可以獲得參數，介紹了如何利用 wildcard route 建立 pageNotFoundComponent，用於處理當使用者輸入了不屬於本專案的 route 路徑時該怎麼處理，記得要將它放在所有 route 的最後面，因為他會匹配所有的路徑，至於路徑匹配的優先權會在明天講解，最後介紹了如何做嵌套 route，在符合 route 路徑的 component 中也能有屬於他自己的 `<router-outlet>`。\n\n由於 route 的章節比較多，所以無法一次在本篇中全部介紹所以將它分為兩篇，這樣會對每個例子或用法可以比較深入了介紹他的用法與功能，明天也會是介紹 Angular route 的下半部，會介紹如何使用相對路徑、Lazy loading 和其他好用的功能，那就明天見吧\n\n\n# Reference\n\n- [What is a URL?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#scheme)\n- [Angular.io - Common Routing Tasks](https://angular.io/guide/router)\n","source":"_posts/Angular/angular-21.md","raw":"---\ntitle: Day21. Common Routing Tasks (一)\ndate: 2021-09-21 21:43:10\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n上一張介紹完什麼是 router 與他的基本用法之後，接著要來繼續介紹 Angular router 的其他一些比較詳細的細節與用法，那就接著看下去吧！\n\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png)\n\n<!-- more -->\n\n# What is URL?\n\nURL 是瀏覽器用來檢索網路上任何已發布資源的機制，他的全名叫做 `Uniform Resource Locator`，理論每個有效的 URL 都會指向一個`唯一`的資源，URL 是由不同部分所組成的，一部分是一定要有而另一部分則是可選的，他的組成為下圖\n\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png)\n\n## Scheme\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png)\n\nURL 的第一部分是 scheme 他表示瀏覽器請求資源時所使用的通訊協議，對於網站而言通常是使用 `http` 或 `https`，除了網站常用的這兩個之外他也知道該如何處理其他方案，比如說填入 mailto 就打開郵件功能等等。\n\n## Authority\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png)\n\n接下來是 Authority 他通過字串 `://` 與 Scheme 分開，Authority 部份包括 `Domain Name` 與 `Port` 兩個部分組成，兩者由`冒號（：）`分隔\n\n- domain 表示正在請求的 web 伺服器，通常會是一個 domain name 也可以使用 IP Adress\n- Port 代表訪問 Web 伺服器上資源的 `gate`，使用 HTTP 為 80 而 HTTPS 為 443，不過如果是使用 HTTP 協議的標準來授與對其資源的訪問權限時通常會省略他\n\n## Path to resource\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png)\n\n上面例子中的 path to resource 是 Web 伺服器上資源的路徑，在早期這樣的路徑代表 Web 伺服器上的物理文件路徑。\n\n## Parameters\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png)\n\nparameters 是用來提供 Web 伺服器的額外參數，這些參數是由 & 與 / 分隔，Web 伺服器可以透過這些參數再回傳資源前做額外的處理。\n\n## Anchor\n![https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png](https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png)\n\nAnchor 代表資源內的一種`書籤`，為瀏覽器提供顯示位置於該書籤的位置，例如在 HTML 中新增帶有 id 的標題，當點擊某個標題時可以將瀏覽器瞬間移動到那個標籤那邊，要注意的是 # 後面的部分`永遠不會`隨 request 一起發送到伺服器中。\n\n\n# Getting route information\n\n雖然了解了如何使用基本的 router 但似乎對於開發專案來說還是不太夠，可能會遇到再開發專案時需要將信息從一個 component 傳遞到另一個 component ( 這邊不是向父子層傳遞參數，是 component 的平行傳遞 )，比如說一個顯示購物清單的應用程序，每個商品項目都有一個唯一的 `id`，要編輯某個商品的內容時使用者要點及編輯按鈕，打開 EditGroceryItem component，希望將 component 的商品 id 傳入以便向使用者顯示整卻的信息。\n\n遇到這個情況就可以使用 router 將信息傳遞給你需要的 component，為此可以使用 `ActivatedRoute interface` 該怎麼使用就來舉個例子吧，一樣拿上一篇的 router 例子來改寫就好\n\n1. 首先先更改 app-routing.module.ts 中的設定\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { RouterModule, Routes, ActivatedRoute, ParamMap } from '@angular/router';\n    import { FirstComponent } from './first/first.component';\n    import { SecondComponent } from './second/second.component';\n\n    const routes: Routes = [\n      { path: 'first-component/:name', component: FirstComponent },\n      { path: 'second-component/:name', component: SecondComponent }\n    ];\n\n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```\n\n    在 routes 的陣列中設定每個 component 對應到的路徑，這邊將路經更改為 `componentName/:name` ，經過上面對 URL 的介紹就會知道我們希望在 path 中添加 parameters。\n\n2. 在 app.component.html 中調整點擊按鈕後送出的 url path\n\n    ```html\n    <!-- app.component.html -->\n\n    <h1>Angular Router App</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"/first-component/first-one-component\" routerLinkActive=\"active\">First Component</a></li>\n        <li><a routerLink=\"/second-component/second-one-component\" routerLinkActive=\"active\">Second Component</a></li>\n      </ul>\n    </nav>\n    <router-outlet></router-outlet>\n    ```\n\n3. 接著在這兩個 component 中新增方法來獲得 url 傳遞的參數\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ActivatedRoute } from '@angular/router';                 // (1)\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      name!: string | null;                                           // (2)\n      constructor( private route: ActivatedRoute,) { }                // (3)\n\n      ngOnInit(): void {\n        this.name = this.route.snapshot.paramMap.get('name')          // (4)\n      }\n    }\n    ```\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ActivatedRoute } from '@angular/router';\n\n    @Component({\n      selector: 'app-second',\n      templateUrl: './second.component.html',\n    })\n    export class SecondComponent implements OnInit {\n      name!: string | null;\n      constructor( private route: ActivatedRoute,) { }\n\n      ngOnInit(): void {\n        this.name = this.route.snapshot.paramMap.get('name')\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/router` 中引入 `ActivatedRoute`\n    - (2): 建立一個 property 用於接收 url 的參數並顯示在畫面中\n    - (3): 將 ActivatedRoute 注入到 component 中\n    - (4): 獲得 url 的參數\n4. 接著在兩個 component 的 template 中顯示獲得的 name\n\n    ```html\n    <h1>Component Name is: {{name}}</h1>\n    ```\n    \n![img](https://i.imgur.com/zzGkGs3.gif)\n\n在畫面中可以看到隨著我們點擊不同的超連結會進到不同的 component 中，而畫面中的內容會隨著 url 的參數改變，就代表 component 確實有獲得 url 的參數並將它顯示在各自的 view 中。\n\n\n# Setting up wildcard routes\n\n再開發這種有使用 router 的專案時，需要注意要能夠正常的處理當使用者輸入了專案中不存在路徑時會發生什麼事，要處理這種情況需要將 `wildcard route` 添加到你的設定中，每當請求的 url 與任何一個路徑不匹配時 Angular 就會選擇這個路徑\n\n```typescript\n{ path: '**', component:  }\n```\n\n兩個星號（**） 向 Angular 表明這個 route 是 `wildcard route`，對於 component property 則可以使用任一 component 不過通常會多做一個 component 用來處理這種狀況，比較常見的是建立一個 `PageNotFoundComponent` 來向使用者顯示 `404` 或重新導向首頁之類的，記得要將 `wildcard route` 放在最後一條，因為他會匹配任何一個 url。\n\n來用上面的例子新增一個 PageNotFoundComponent 吧\n\n```typescript\nconst routes: Routes = [\n  { path: 'first-component/:name', component: FirstComponent },\n  { path: 'second-component/:name', component: SecondComponent },\n  { path: '**', component: PageNotFoundComponent  }\n];\n```\n\n接著在 pageNotFound.component.html 中新增顯示沒有此頁面\n\n```html\n<h1>Page Not Found</h1>\n```\n\n![img](https://i.imgur.com/GqY1qDl.gif)\n可以看到當輸入了一個不符合任何 route 的路徑時會導向 pageNotFoundComponent。\n\n\n# Nesting routes\n\n隨著專案變大單純的一層 route 已經不夠應付複雜的專案架構，這時就需要 nesting routes 的出現，他可以讓你 `<router-outlet>` 中顯示的 component 中也有自己的 `<router-outlet>`，因為他是對 AppComponent 中的 `<router-outlet>` 的補充，以上面的例子來說除了 app.component 中有 `<router-outlet>` 用來顯示 firstComponent 或 secondComponent 之外，還可以在 firstComponent 在添加自己的 `<router-outlet>`。\n\n1. 先在 firstComponent 中添加自己的 `<router-outlet>`\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: {{name}}</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n2. 接著在 app-routing.module.ts 中添加 nesting routes\n\n    ```typescript\n    const routes: Routes = [\n      {\n        path: 'first-component/:name',\n        component: FirstComponent,\n        children: [\n          { path: 'child-a', component: ChildAComponent },\n          { path: 'child-b', component: ChildBComponent },\n        ],\n      },\n      { path: 'second-component/:name', component: SecondComponent },\n      { path: '**', component: PageNotFoundComponent },\n    ];\n    ```\n    \n![img](https://i.imgur.com/QPdsp1J.gif)\n\n畫面中可以看到只有選擇 First Component 後才會出現 Child-a 與 Child-b 兩個導覽列，各自點選  Child-a 或 Child-b 後就會顯示對應的 component view。\n\n\n# 結論\n\n本章中介紹了什麼是 url 以及他的結構，對於現代網頁而言 url 是非常重要的觀念，需要充分的了解他的結構與該怎麼使用它。\n\n介紹了如何透過 url 傳遞參數讓符合路徑的 component 可以獲得參數，介紹了如何利用 wildcard route 建立 pageNotFoundComponent，用於處理當使用者輸入了不屬於本專案的 route 路徑時該怎麼處理，記得要將它放在所有 route 的最後面，因為他會匹配所有的路徑，至於路徑匹配的優先權會在明天講解，最後介紹了如何做嵌套 route，在符合 route 路徑的 component 中也能有屬於他自己的 `<router-outlet>`。\n\n由於 route 的章節比較多，所以無法一次在本篇中全部介紹所以將它分為兩篇，這樣會對每個例子或用法可以比較深入了介紹他的用法與功能，明天也會是介紹 Angular route 的下半部，會介紹如何使用相對路徑、Lazy loading 和其他好用的功能，那就明天見吧\n\n\n# Reference\n\n- [What is a URL?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#scheme)\n- [Angular.io - Common Routing Tasks](https://angular.io/guide/router)\n","slug":"Angular/angular-21","published":1,"updated":"2022-02-16T06:34:05.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdv000k95w39aasbedh","content":"<p>上一張介紹完什麼是 router 與他的基本用法之後，接著要來繼續介紹 Angular router 的其他一些比較詳細的細節與用法，那就接著看下去吧！</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"What-is-URL\"><a href=\"#What-is-URL\" class=\"headerlink\" title=\"What is URL?\"></a>What is URL?</h1><p>URL 是瀏覽器用來檢索網路上任何已發布資源的機制，他的全名叫做 <code>Uniform Resource Locator</code>，理論每個有效的 URL 都會指向一個<code>唯一</code>的資源，URL 是由不同部分所組成的，一部分是一定要有而另一部分則是可選的，他的組成為下圖</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png\"></p>\n<h2 id=\"Scheme\"><a href=\"#Scheme\" class=\"headerlink\" title=\"Scheme\"></a>Scheme</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png\"></p>\n<p>URL 的第一部分是 scheme 他表示瀏覽器請求資源時所使用的通訊協議，對於網站而言通常是使用 <code>http</code> 或 <code>https</code>，除了網站常用的這兩個之外他也知道該如何處理其他方案，比如說填入 mailto 就打開郵件功能等等。</p>\n<h2 id=\"Authority\"><a href=\"#Authority\" class=\"headerlink\" title=\"Authority\"></a>Authority</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png\"></p>\n<p>接下來是 Authority 他通過字串 <code>://</code> 與 Scheme 分開，Authority 部份包括 <code>Domain Name</code> 與 <code>Port</code> 兩個部分組成，兩者由<code>冒號（：）</code>分隔</p>\n<ul>\n<li>domain 表示正在請求的 web 伺服器，通常會是一個 domain name 也可以使用 IP Adress</li>\n<li>Port 代表訪問 Web 伺服器上資源的 <code>gate</code>，使用 HTTP 為 80 而 HTTPS 為 443，不過如果是使用 HTTP 協議的標準來授與對其資源的訪問權限時通常會省略他</li>\n</ul>\n<h2 id=\"Path-to-resource\"><a href=\"#Path-to-resource\" class=\"headerlink\" title=\"Path to resource\"></a>Path to resource</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png\"></p>\n<p>上面例子中的 path to resource 是 Web 伺服器上資源的路徑，在早期這樣的路徑代表 Web 伺服器上的物理文件路徑。</p>\n<h2 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png\"></p>\n<p>parameters 是用來提供 Web 伺服器的額外參數，這些參數是由 &amp; 與 &#x2F; 分隔，Web 伺服器可以透過這些參數再回傳資源前做額外的處理。</p>\n<h2 id=\"Anchor\"><a href=\"#Anchor\" class=\"headerlink\" title=\"Anchor\"></a>Anchor</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png\"></p>\n<p>Anchor 代表資源內的一種<code>書籤</code>，為瀏覽器提供顯示位置於該書籤的位置，例如在 HTML 中新增帶有 id 的標題，當點擊某個標題時可以將瀏覽器瞬間移動到那個標籤那邊，要注意的是 # 後面的部分<code>永遠不會</code>隨 request 一起發送到伺服器中。</p>\n<h1 id=\"Getting-route-information\"><a href=\"#Getting-route-information\" class=\"headerlink\" title=\"Getting route information\"></a>Getting route information</h1><p>雖然了解了如何使用基本的 router 但似乎對於開發專案來說還是不太夠，可能會遇到再開發專案時需要將信息從一個 component 傳遞到另一個 component ( 這邊不是向父子層傳遞參數，是 component 的平行傳遞 )，比如說一個顯示購物清單的應用程序，每個商品項目都有一個唯一的 <code>id</code>，要編輯某個商品的內容時使用者要點及編輯按鈕，打開 EditGroceryItem component，希望將 component 的商品 id 傳入以便向使用者顯示整卻的信息。</p>\n<p>遇到這個情況就可以使用 router 將信息傳遞給你需要的 component，為此可以使用 <code>ActivatedRoute interface</code> 該怎麼使用就來舉個例子吧，一樣拿上一篇的 router 例子來改寫就好</p>\n<ol>\n<li><p>首先先更改 app-routing.module.ts 中的設定</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span>, <span class=\"title class_\">ActivatedRoute</span>, <span class=\"title class_\">ParamMap</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FirstComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./first/first.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SecondComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./second/second.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 在 routes 的陣列中設定每個 component 對應到的路徑，這邊將路經更改為 <code>componentName/:name</code> ，經過上面對 URL 的介紹就會知道我們希望在 path 中添加 parameters。</p>\n</li>\n<li><p>在 app.component.html 中調整點擊按鈕後送出的 url path</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Angular Router App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/first-component/first-one-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>First Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/second-component/second-one-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>Second Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在這兩個 component 中新增方法來獲得 url 傳遞的參數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;                                           <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: ActivatedRoute,</span>) &#123; &#125;                <span class=\"comment\">// (3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">paramMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>)          <span class=\"comment\">// (4)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-second&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./second.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecondComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: ActivatedRoute,</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">paramMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/router</code> 中引入 <code>ActivatedRoute</code></li>\n<li>(2): 建立一個 property 用於接收 url 的參數並顯示在畫面中</li>\n<li>(3): 將 ActivatedRoute 注入到 component 中</li>\n<li>(4): 獲得 url 的參數</li>\n</ul>\n</li>\n<li><p>接著在兩個 component 的 template 中顯示獲得的 name</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/zzGkGs3.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到隨著我們點擊不同的超連結會進到不同的 component 中，而畫面中的內容會隨著 url 的參數改變，就代表 component 確實有獲得 url 的參數並將它顯示在各自的 view 中。</p>\n<h1 id=\"Setting-up-wildcard-routes\"><a href=\"#Setting-up-wildcard-routes\" class=\"headerlink\" title=\"Setting up wildcard routes\"></a>Setting up wildcard routes</h1><p>再開發這種有使用 router 的專案時，需要注意要能夠正常的處理當使用者輸入了專案中不存在路徑時會發生什麼事，要處理這種情況需要將 <code>wildcard route</code> 添加到你的設定中，每當請求的 url 與任何一個路徑不匹配時 Angular 就會選擇這個路徑</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>:  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>兩個星號（**） 向 Angular 表明這個 route 是 <code>wildcard route</code>，對於 component property 則可以使用任一 component 不過通常會多做一個 component 用來處理這種狀況，比較常見的是建立一個 <code>PageNotFoundComponent</code> 來向使用者顯示 <code>404</code> 或重新導向首頁之類的，記得要將 <code>wildcard route</code> 放在最後一條，因為他會匹配任何一個 url。</p>\n<p>來用上面的例子新增一個 PageNotFoundComponent 吧</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span>  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>接著在 pageNotFound.component.html 中新增顯示沒有此頁面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Page Not Found<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/GqY1qDl.gif\" alt=\"img\"><br>可以看到當輸入了一個不符合任何 route 的路徑時會導向 pageNotFoundComponent。</p>\n<h1 id=\"Nesting-routes\"><a href=\"#Nesting-routes\" class=\"headerlink\" title=\"Nesting routes\"></a>Nesting routes</h1><p>隨著專案變大單純的一層 route 已經不夠應付複雜的專案架構，這時就需要 nesting routes 的出現，他可以讓你 <code>&lt;router-outlet&gt;</code> 中顯示的 component 中也有自己的 <code>&lt;router-outlet&gt;</code>，因為他是對 AppComponent 中的 <code>&lt;router-outlet&gt;</code> 的補充，以上面的例子來說除了 app.component 中有 <code>&lt;router-outlet&gt;</code> 用來顯示 firstComponent 或 secondComponent 之外，還可以在 firstComponent 在添加自己的 <code>&lt;router-outlet&gt;</code>。</p>\n<ol>\n<li><p>先在 firstComponent 中添加自己的 <code>&lt;router-outlet&gt;</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 app-routing.module.ts 中添加 nesting routes</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component/:name&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-a&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildAComponent</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-b&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildBComponent</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/QPdsp1J.gif\" alt=\"img\"></p>\n<p>畫面中可以看到只有選擇 First Component 後才會出現 Child-a 與 Child-b 兩個導覽列，各自點選  Child-a 或 Child-b 後就會顯示對應的 component view。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 url 以及他的結構，對於現代網頁而言 url 是非常重要的觀念，需要充分的了解他的結構與該怎麼使用它。</p>\n<p>介紹了如何透過 url 傳遞參數讓符合路徑的 component 可以獲得參數，介紹了如何利用 wildcard route 建立 pageNotFoundComponent，用於處理當使用者輸入了不屬於本專案的 route 路徑時該怎麼處理，記得要將它放在所有 route 的最後面，因為他會匹配所有的路徑，至於路徑匹配的優先權會在明天講解，最後介紹了如何做嵌套 route，在符合 route 路徑的 component 中也能有屬於他自己的 <code>&lt;router-outlet&gt;</code>。</p>\n<p>由於 route 的章節比較多，所以無法一次在本篇中全部介紹所以將它分為兩篇，這樣會對每個例子或用法可以比較深入了介紹他的用法與功能，明天也會是介紹 Angular route 的下半部，會介紹如何使用相對路徑、Lazy loading 和其他好用的功能，那就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#scheme\">What is a URL?</a></li>\n<li><a href=\"https://angular.io/guide/router\">Angular.io - Common Routing Tasks</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上一張介紹完什麼是 router 與他的基本用法之後，接著要來繼續介紹 Angular router 的其他一些比較詳細的細節與用法，那就接著看下去吧！</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767pIY0V2tSzX.png\"></p>","more":"<h1 id=\"What-is-URL\"><a href=\"#What-is-URL\" class=\"headerlink\" title=\"What is URL?\"></a>What is URL?</h1><p>URL 是瀏覽器用來檢索網路上任何已發布資源的機制，他的全名叫做 <code>Uniform Resource Locator</code>，理論每個有效的 URL 都會指向一個<code>唯一</code>的資源，URL 是由不同部分所組成的，一部分是一定要有而另一部分則是可選的，他的組成為下圖</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767g2R4tJ6Uli.png\"></p>\n<h2 id=\"Scheme\"><a href=\"#Scheme\" class=\"headerlink\" title=\"Scheme\"></a>Scheme</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767bxYRnYkWD2.png\"></p>\n<p>URL 的第一部分是 scheme 他表示瀏覽器請求資源時所使用的通訊協議，對於網站而言通常是使用 <code>http</code> 或 <code>https</code>，除了網站常用的這兩個之外他也知道該如何處理其他方案，比如說填入 mailto 就打開郵件功能等等。</p>\n<h2 id=\"Authority\"><a href=\"#Authority\" class=\"headerlink\" title=\"Authority\"></a>Authority</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767a13Y5g4IxU.png\"></p>\n<p>接下來是 Authority 他通過字串 <code>://</code> 與 Scheme 分開，Authority 部份包括 <code>Domain Name</code> 與 <code>Port</code> 兩個部分組成，兩者由<code>冒號（：）</code>分隔</p>\n<ul>\n<li>domain 表示正在請求的 web 伺服器，通常會是一個 domain name 也可以使用 IP Adress</li>\n<li>Port 代表訪問 Web 伺服器上資源的 <code>gate</code>，使用 HTTP 為 80 而 HTTPS 為 443，不過如果是使用 HTTP 協議的標準來授與對其資源的訪問權限時通常會省略他</li>\n</ul>\n<h2 id=\"Path-to-resource\"><a href=\"#Path-to-resource\" class=\"headerlink\" title=\"Path to resource\"></a>Path to resource</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767rr4ZuNbS50.png\"></p>\n<p>上面例子中的 path to resource 是 Web 伺服器上資源的路徑，在早期這樣的路徑代表 Web 伺服器上的物理文件路徑。</p>\n<h2 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767c0mygWppvq.png\"></p>\n<p>parameters 是用來提供 Web 伺服器的額外參數，這些參數是由 &amp; 與 &#x2F; 分隔，Web 伺服器可以透過這些參數再回傳資源前做額外的處理。</p>\n<h2 id=\"Anchor\"><a href=\"#Anchor\" class=\"headerlink\" title=\"Anchor\"></a>Anchor</h2><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210819/20124767YuHmZFJj9n.png\"></p>\n<p>Anchor 代表資源內的一種<code>書籤</code>，為瀏覽器提供顯示位置於該書籤的位置，例如在 HTML 中新增帶有 id 的標題，當點擊某個標題時可以將瀏覽器瞬間移動到那個標籤那邊，要注意的是 # 後面的部分<code>永遠不會</code>隨 request 一起發送到伺服器中。</p>\n<h1 id=\"Getting-route-information\"><a href=\"#Getting-route-information\" class=\"headerlink\" title=\"Getting route information\"></a>Getting route information</h1><p>雖然了解了如何使用基本的 router 但似乎對於開發專案來說還是不太夠，可能會遇到再開發專案時需要將信息從一個 component 傳遞到另一個 component ( 這邊不是向父子層傳遞參數，是 component 的平行傳遞 )，比如說一個顯示購物清單的應用程序，每個商品項目都有一個唯一的 <code>id</code>，要編輯某個商品的內容時使用者要點及編輯按鈕，打開 EditGroceryItem component，希望將 component 的商品 id 傳入以便向使用者顯示整卻的信息。</p>\n<p>遇到這個情況就可以使用 router 將信息傳遞給你需要的 component，為此可以使用 <code>ActivatedRoute interface</code> 該怎麼使用就來舉個例子吧，一樣拿上一篇的 router 例子來改寫就好</p>\n<ol>\n<li><p>首先先更改 app-routing.module.ts 中的設定</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span>, <span class=\"title class_\">ActivatedRoute</span>, <span class=\"title class_\">ParamMap</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FirstComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./first/first.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SecondComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./second/second.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 在 routes 的陣列中設定每個 component 對應到的路徑，這邊將路經更改為 <code>componentName/:name</code> ，經過上面對 URL 的介紹就會知道我們希望在 path 中添加 parameters。</p>\n</li>\n<li><p>在 app.component.html 中調整點擊按鈕後送出的 url path</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Angular Router App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/first-component/first-one-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>First Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/second-component/second-one-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>Second Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在這兩個 component 中新增方法來獲得 url 傳遞的參數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;                                           <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: ActivatedRoute,</span>) &#123; &#125;                <span class=\"comment\">// (3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">paramMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>)          <span class=\"comment\">// (4)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-second&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./second.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecondComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: ActivatedRoute,</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">paramMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/router</code> 中引入 <code>ActivatedRoute</code></li>\n<li>(2): 建立一個 property 用於接收 url 的參數並顯示在畫面中</li>\n<li>(3): 將 ActivatedRoute 注入到 component 中</li>\n<li>(4): 獲得 url 的參數</li>\n</ul>\n</li>\n<li><p>接著在兩個 component 的 template 中顯示獲得的 name</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/zzGkGs3.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到隨著我們點擊不同的超連結會進到不同的 component 中，而畫面中的內容會隨著 url 的參數改變，就代表 component 確實有獲得 url 的參數並將它顯示在各自的 view 中。</p>\n<h1 id=\"Setting-up-wildcard-routes\"><a href=\"#Setting-up-wildcard-routes\" class=\"headerlink\" title=\"Setting up wildcard routes\"></a>Setting up wildcard routes</h1><p>再開發這種有使用 router 的專案時，需要注意要能夠正常的處理當使用者輸入了專案中不存在路徑時會發生什麼事，要處理這種情況需要將 <code>wildcard route</code> 添加到你的設定中，每當請求的 url 與任何一個路徑不匹配時 Angular 就會選擇這個路徑</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>:  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>兩個星號（**） 向 Angular 表明這個 route 是 <code>wildcard route</code>，對於 component property 則可以使用任一 component 不過通常會多做一個 component 用來處理這種狀況，比較常見的是建立一個 <code>PageNotFoundComponent</code> 來向使用者顯示 <code>404</code> 或重新導向首頁之類的，記得要將 <code>wildcard route</code> 放在最後一條，因為他會匹配任何一個 url。</p>\n<p>來用上面的例子新增一個 PageNotFoundComponent 吧</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span>  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>接著在 pageNotFound.component.html 中新增顯示沒有此頁面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Page Not Found<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/GqY1qDl.gif\" alt=\"img\"><br>可以看到當輸入了一個不符合任何 route 的路徑時會導向 pageNotFoundComponent。</p>\n<h1 id=\"Nesting-routes\"><a href=\"#Nesting-routes\" class=\"headerlink\" title=\"Nesting routes\"></a>Nesting routes</h1><p>隨著專案變大單純的一層 route 已經不夠應付複雜的專案架構，這時就需要 nesting routes 的出現，他可以讓你 <code>&lt;router-outlet&gt;</code> 中顯示的 component 中也有自己的 <code>&lt;router-outlet&gt;</code>，因為他是對 AppComponent 中的 <code>&lt;router-outlet&gt;</code> 的補充，以上面的例子來說除了 app.component 中有 <code>&lt;router-outlet&gt;</code> 用來顯示 firstComponent 或 secondComponent 之外，還可以在 firstComponent 在添加自己的 <code>&lt;router-outlet&gt;</code>。</p>\n<ol>\n<li><p>先在 firstComponent 中添加自己的 <code>&lt;router-outlet&gt;</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 app-routing.module.ts 中添加 nesting routes</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component/:name&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-a&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildAComponent</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-b&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildBComponent</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/QPdsp1J.gif\" alt=\"img\"></p>\n<p>畫面中可以看到只有選擇 First Component 後才會出現 Child-a 與 Child-b 兩個導覽列，各自點選  Child-a 或 Child-b 後就會顯示對應的 component view。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了什麼是 url 以及他的結構，對於現代網頁而言 url 是非常重要的觀念，需要充分的了解他的結構與該怎麼使用它。</p>\n<p>介紹了如何透過 url 傳遞參數讓符合路徑的 component 可以獲得參數，介紹了如何利用 wildcard route 建立 pageNotFoundComponent，用於處理當使用者輸入了不屬於本專案的 route 路徑時該怎麼處理，記得要將它放在所有 route 的最後面，因為他會匹配所有的路徑，至於路徑匹配的優先權會在明天講解，最後介紹了如何做嵌套 route，在符合 route 路徑的 component 中也能有屬於他自己的 <code>&lt;router-outlet&gt;</code>。</p>\n<p>由於 route 的章節比較多，所以無法一次在本篇中全部介紹所以將它分為兩篇，這樣會對每個例子或用法可以比較深入了介紹他的用法與功能，明天也會是介紹 Angular route 的下半部，會介紹如何使用相對路徑、Lazy loading 和其他好用的功能，那就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#scheme\">What is a URL?</a></li>\n<li><a href=\"https://angular.io/guide/router\">Angular.io - Common Routing Tasks</a></li>\n</ul>"},{"title":"Day22. Common Routing Tasks（二）","date":"2021-09-22T06:19:17.000Z","_content":"\n在上一篇中介紹了如何透過 router 傳遞參數，也介紹了怎麼建立嵌套的 route 等等，在本篇中要繼續介紹 Angular route 的其他好用的用法與功能。\n\n![https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png](https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png)\n\n<!-- more -->\n\n# Route order\n\n昨天提到了如何透過使用 `wildcard routes` 建立 pageNotFoundComponent，用來處理當使用者輸入了專案沒有訂一個 url 時該如何處理，當時提到說要將`雙星號(**)` 路徑定義在整個 route 的最下面，原因就是因為 Angular route 在偵測路徑匹配時會使用優先匹配的策略，簡單來說就是當第一個 route 路徑被匹配到就不會繼續往下找更匹配的路徑。\n\n所以在開發 route 時需要將更具體的 route 放在不太具的上面，首先先列出具有`靜態路徑`的 route 然後是`默認 route 匹配的空路徑` route，最後才是 `wildcard routes` 因為他會匹配所有的 route 路徑，等於說如果將它放在前面，那麼他後面的所有 route 路徑都不會被匹配到，放在最後等於說前面所有路徑都不匹配時才會選到他，這點要非常注意。\n\n\n# Using relative paths\n\n絕對路徑指的是這個檔案在本機端或是網路上的`絕對位置`，比如說一般常看到的網站 url 就是描述這個網站在網路上的絕對位置; 而相對路徑指的是相對於這個檔案的位置，比如在 A 網頁中插入了一張照片，照片的路徑是 `images/aaa.jpg` 就說明這張照片相對於 A 網頁是在圖一個層級且一個名為 `images` 的資料夾中，又比如插入了另一張照片路徑是 `../images/bbb.jpg` 就代表這張圖片是在 A 網站的上一層路徑的一個叫 images 的資料夾中。\n\n了解了相對路徑後，Angular route 允許使用相對路徑的方式定義當前的 URL 路徑，拿昨天的例子來舉個例子\n\n1. 首先先將 app-routing.module.ts 中的 route 選項改一下，將後面的參數先移除\n\n    ```typescript\n    const routes: Routes = [\n      {\n        path: 'first-component',\n        component: FirstComponent,\n        children: [ \n          { path: 'child-a', component: ChildAComponent },\n          { path: 'child-b', component: ChildBComponent },\n        ],\n      },\n      { path: 'second-component', component: SecondComponent },\n      { path: '**', component: PageNotFoundComponent },\n    ];\n    ```\n\n2. 更改 app.component.html 中的內容，將路徑的參數與連結到 second-component 的元素移除\n\n    ```html\n    <!-- app.component.html -->\n\n    <h1>Angular Router App</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"/first-component\" routerLinkActive=\"active\">First Component</a></li>\n      </ul>\n    </nav>\n    <router-outlet></router-outlet>\n    ```\n\n3. 更改 first.component.html 的內容，新增一個超連結用於導向 second-component\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"../second-component\">Relative Route to second component</a></li>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n    這邊注意連接到 second-component 的路徑是 `../second-component` 這代表 second-component 的位置相對於 first-component 是在他的上一層的資料夾中，這就是利用相對路徑指定導向的 url。\n\n![img](https://i.imgur.com/SfZx5ih.gif)\n\n\n# Specifying a relative route\n\n知道了如何透過相對路徑指定 route 路徑後，接著來介紹另一個用法，可以使用 `navigate` 做到導航到某個相對路徑的 route，舉個例子\n\n1. 先在 first.component.ts 中新增一個 method\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { Router } from '@angular/router';                        // (1)\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      constructor( private route: Router,) { }                       // (2)\n\n      ngOnInit(): void { }\n\n      onGoSecondComponent() {                                        // (3)\n        this.route.navigate(['../second-component']);\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `Router`\n    - (2): 將 Router 注入到 component 中\n    - (3): 新增一個 method 當畫面中的按鈕點擊後觸發，將畫面導引向指定路徑（這邊使用相對路徑）\n2. 更改 first.component.html 結構，將原本的 second-component 超連結改為 `<button>`\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <button (click)=\"onGoSecondComponent()\">Relative Route to second component</button>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n![img](https://i.imgur.com/srOQt4z.gif)\n\n在畫面中可以看到，雖然將 second-component 的超連結更改為 `<button>` 但依然可以完成導航到 second-component 的目的，這就是使用 `navigate` 的方法。\n\n## Pass parameters\n\n在昨天的文章中有介紹到如何透過 url 傳遞參數給另一個 component，這邊其實也可以使用 `navigate` 的第二個參數傳遞要給 component 的參數，舉個例子\n\n1. 在 first.component.ts 中新增要傳遞的參數\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { NavigationExtras, Router } from '@angular/router';\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      constructor( private route: Router,) { }\n\n      ngOnInit(): void { }\n\n      onGoSecondComponent() {\n        const option: NavigationExtras = {                          // (1)\n          queryParams: {\n            name: 'Second component',\n            id: 1\n          }\n        }\n\n        this.route.navigate(['../second-component'], option);\n      }\n    }\n    ```\n\n    - (1): 新增一個型別為 `NavigationExtras`的 object，並將要傳遞的內容寫在裡面\n2. 在 second.component.ts 中接收傳遞的參數\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ActivatedRoute } from '@angular/router';                   // (1)\n\n    @Component({\n      selector: 'app-second',\n      templateUrl: './second.component.html',\n    })\n    export class SecondComponent implements OnInit {\n      name!: string | null;                                            // (2)\n      id!: string | null;\n      constructor( private route: ActivatedRoute,) { }                 // (3)\n\n      ngOnInit(): void {\n        this.name = this.route.snapshot.queryParamMap.get('name');     // (4)\n        this.id = this.route.snapshot.queryParamMap.get('id');\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `ActivatedRoute`\n    - (2): 建立兩個 property 用於接收傳遞的參數並且顯示在畫面中\n    - (3): 將 ActivatedRoute 注入到 component 中\n    - (4): 獲取 route 傳遞的參數\n3. 更改 second.component.html 的結構，將接收到的 name 與 id 顯示出來\n\n    ```html\n    <!-- Second.component.html -->\n\n    <h1>Component Name is: {{name}}</h1>\n    <h2>ID is {{id}}</h2>\n    ```\n    \n![img](https://i.imgur.com/LNQ0dPi.gif)\n\n在畫面中可以看到，當點擊 `Relative Route to second component` 的按鈕時，url 會攜帶著 first.component.ts 中我們希望他填入的參數，接著會傳遞給 second.component 將參數顯示在畫面中。\n\n這邊注意一下，由於是使用 `queryParamMap` 所以回傳的值是一組 object 裡面是\n\n```typescript\nParamsAsMap {\n\tparamas: {\n\t\tname: 'Second Component',\n\t\tid: \"1\"\n\t}\n}\n```\n\n所以需要用 `get` 取得我們要的 property，而如果是使用 `queryParams` 則回傳的是一個 object 就不需要使用 get 了，這點要注意喔！\n\n```typescript\n{\n\tname: 'Second Component',\n\tid: '1'\n}\n```\n\n\n# Accessing query parameters and fragments\n\n介紹完如何使用 `navigate` 傳遞參數後，接著介紹另一種可以傳遞參數的方式，就是使用在超連結的元素上添加 `queryParams` attribute，一樣舉個例子吧\n\n1. 將 first.component.ts 中的 `onGoSecondComponent` 移除並新增一個 property\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      option = {\n        name: 'Second Component use queryParams',\n        id: '1'\n      }\n\n      constructor() { }\n\n      ngOnInit(): void { }\n    }\n    ```\n\n2. 接著更改 first.component.html 的結構，將連接到 second-component 的超連結改回來，並將 `queryParams` attribute 綁定剛剛建立的 property\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <li>\n          <a [routerLink]=\"['../second-component']\" [queryParams]=\"option\"\n            >Relative Route to second component</a\n          >\n        </li>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n    \n![img](https://i.imgur.com/yQSY9gv.gif)\n\n在 second.component.ts 接收參數的方式一樣就不再寫一次了，可以看到有通過了這個方式傳遞了參數給 second-component。\n\n\n# Link parameters array\n\n在上面的例子中應該可以發現我把 `<a>` 的 `routerLink` 加上了括號，這個用法可以讓你傳入一個陣列的路徑資料給他，陣列資料包含：\n\n- 到目標 component 的 route 路徑\n- 進入 router 的 url 的必須和可選的 route 參數\n\n一樣舉個例子，將原本的範例改寫一下\n\n1. 更改 app-routing.module.ts 的 routes 設定，將 second-component 的 route 路徑加上 `/:name/:id`\n\n    ```typescript\n    const routes: Routes = [\n      {\n        path: 'first-component',\n        component: FirstComponent,\n        children: [ \n          { path: 'child-a', component: ChildAComponent },\n          { path: 'child-b', component: ChildBComponent },\n        ],\n      },\n      { path: 'second-component/:name/:id', component: SecondComponent },\n      { path: '**', component: PageNotFoundComponent },\n    ];\n    ```\n\n2. 更改 first.component.html 的 second-component 路徑\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <li><a [routerLink]=\"['../second-component', 'second-component', '1']\" >Relative Route to second component</a></li>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n    \n![img](https://i.imgur.com/slz0tO7.gif)\n\n由於 second.component.ts 中獲得參數的方法不變，所以不特別顯示，畫面中可以看到當點選 second-component 的 route 後， url 會隨著在 first.component.html 中的參數改變，而 second-component 中也可以透過 url 拿到參數並顯示。\n\n\n# Lazy loading\n\n再開發 Angular 中會使用到一個非常重要的觀念 `module`，而 Angular route 也提供了非常好用的延遲加載的技術，簡單來說就是只有在進到某一個頁面時才會加載屬於他的 module 而不是一開始就載入所有 module，這樣可以有效的節省資源與提高載入速度，詳細的內容留到後面講解 module 的時候會詳細說明。\n\n\n# 結論\n\n本章是介紹 Angular router 的最後一篇，講解了如何使用`相對路徑`指定 route 路徑，講解了如何使用 `navigate` 導向指定的 route 路徑，也介紹了許多個攜帶參數的方式，要建立 SPA 學會如何靈活的使用 Route 是非常重要的。\n\n明天開始會進到下一個系列 `Form`，他也是一個重要的概念，無論是哪一種網頁都需要有與使用者交互的表單，對於表單的設定與驗證都是必要的，那麼明天開始來介紹如何在 Angular 中使用 Form 吧。\n\n\n# Reference\n\n- [Angular.io - Common Routing Tasks](https://angular.io/guide/router#accessing-query-parameters-and-fragments)","source":"_posts/Angular/angular-22.md","raw":"---\ntitle: Day22. Common Routing Tasks（二）\ndate: 2021-09-22 14:19:17\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一篇中介紹了如何透過 router 傳遞參數，也介紹了怎麼建立嵌套的 route 等等，在本篇中要繼續介紹 Angular route 的其他好用的用法與功能。\n\n![https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png](https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png)\n\n<!-- more -->\n\n# Route order\n\n昨天提到了如何透過使用 `wildcard routes` 建立 pageNotFoundComponent，用來處理當使用者輸入了專案沒有訂一個 url 時該如何處理，當時提到說要將`雙星號(**)` 路徑定義在整個 route 的最下面，原因就是因為 Angular route 在偵測路徑匹配時會使用優先匹配的策略，簡單來說就是當第一個 route 路徑被匹配到就不會繼續往下找更匹配的路徑。\n\n所以在開發 route 時需要將更具體的 route 放在不太具的上面，首先先列出具有`靜態路徑`的 route 然後是`默認 route 匹配的空路徑` route，最後才是 `wildcard routes` 因為他會匹配所有的 route 路徑，等於說如果將它放在前面，那麼他後面的所有 route 路徑都不會被匹配到，放在最後等於說前面所有路徑都不匹配時才會選到他，這點要非常注意。\n\n\n# Using relative paths\n\n絕對路徑指的是這個檔案在本機端或是網路上的`絕對位置`，比如說一般常看到的網站 url 就是描述這個網站在網路上的絕對位置; 而相對路徑指的是相對於這個檔案的位置，比如在 A 網頁中插入了一張照片，照片的路徑是 `images/aaa.jpg` 就說明這張照片相對於 A 網頁是在圖一個層級且一個名為 `images` 的資料夾中，又比如插入了另一張照片路徑是 `../images/bbb.jpg` 就代表這張圖片是在 A 網站的上一層路徑的一個叫 images 的資料夾中。\n\n了解了相對路徑後，Angular route 允許使用相對路徑的方式定義當前的 URL 路徑，拿昨天的例子來舉個例子\n\n1. 首先先將 app-routing.module.ts 中的 route 選項改一下，將後面的參數先移除\n\n    ```typescript\n    const routes: Routes = [\n      {\n        path: 'first-component',\n        component: FirstComponent,\n        children: [ \n          { path: 'child-a', component: ChildAComponent },\n          { path: 'child-b', component: ChildBComponent },\n        ],\n      },\n      { path: 'second-component', component: SecondComponent },\n      { path: '**', component: PageNotFoundComponent },\n    ];\n    ```\n\n2. 更改 app.component.html 中的內容，將路徑的參數與連結到 second-component 的元素移除\n\n    ```html\n    <!-- app.component.html -->\n\n    <h1>Angular Router App</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"/first-component\" routerLinkActive=\"active\">First Component</a></li>\n      </ul>\n    </nav>\n    <router-outlet></router-outlet>\n    ```\n\n3. 更改 first.component.html 的內容，新增一個超連結用於導向 second-component\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <li><a routerLink=\"../second-component\">Relative Route to second component</a></li>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n    這邊注意連接到 second-component 的路徑是 `../second-component` 這代表 second-component 的位置相對於 first-component 是在他的上一層的資料夾中，這就是利用相對路徑指定導向的 url。\n\n![img](https://i.imgur.com/SfZx5ih.gif)\n\n\n# Specifying a relative route\n\n知道了如何透過相對路徑指定 route 路徑後，接著來介紹另一個用法，可以使用 `navigate` 做到導航到某個相對路徑的 route，舉個例子\n\n1. 先在 first.component.ts 中新增一個 method\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { Router } from '@angular/router';                        // (1)\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      constructor( private route: Router,) { }                       // (2)\n\n      ngOnInit(): void { }\n\n      onGoSecondComponent() {                                        // (3)\n        this.route.navigate(['../second-component']);\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `Router`\n    - (2): 將 Router 注入到 component 中\n    - (3): 新增一個 method 當畫面中的按鈕點擊後觸發，將畫面導引向指定路徑（這邊使用相對路徑）\n2. 更改 first.component.html 結構，將原本的 second-component 超連結改為 `<button>`\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <button (click)=\"onGoSecondComponent()\">Relative Route to second component</button>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n\n![img](https://i.imgur.com/srOQt4z.gif)\n\n在畫面中可以看到，雖然將 second-component 的超連結更改為 `<button>` 但依然可以完成導航到 second-component 的目的，這就是使用 `navigate` 的方法。\n\n## Pass parameters\n\n在昨天的文章中有介紹到如何透過 url 傳遞參數給另一個 component，這邊其實也可以使用 `navigate` 的第二個參數傳遞要給 component 的參數，舉個例子\n\n1. 在 first.component.ts 中新增要傳遞的參數\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { NavigationExtras, Router } from '@angular/router';\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      constructor( private route: Router,) { }\n\n      ngOnInit(): void { }\n\n      onGoSecondComponent() {\n        const option: NavigationExtras = {                          // (1)\n          queryParams: {\n            name: 'Second component',\n            id: 1\n          }\n        }\n\n        this.route.navigate(['../second-component'], option);\n      }\n    }\n    ```\n\n    - (1): 新增一個型別為 `NavigationExtras`的 object，並將要傳遞的內容寫在裡面\n2. 在 second.component.ts 中接收傳遞的參數\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { ActivatedRoute } from '@angular/router';                   // (1)\n\n    @Component({\n      selector: 'app-second',\n      templateUrl: './second.component.html',\n    })\n    export class SecondComponent implements OnInit {\n      name!: string | null;                                            // (2)\n      id!: string | null;\n      constructor( private route: ActivatedRoute,) { }                 // (3)\n\n      ngOnInit(): void {\n        this.name = this.route.snapshot.queryParamMap.get('name');     // (4)\n        this.id = this.route.snapshot.queryParamMap.get('id');\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `ActivatedRoute`\n    - (2): 建立兩個 property 用於接收傳遞的參數並且顯示在畫面中\n    - (3): 將 ActivatedRoute 注入到 component 中\n    - (4): 獲取 route 傳遞的參數\n3. 更改 second.component.html 的結構，將接收到的 name 與 id 顯示出來\n\n    ```html\n    <!-- Second.component.html -->\n\n    <h1>Component Name is: {{name}}</h1>\n    <h2>ID is {{id}}</h2>\n    ```\n    \n![img](https://i.imgur.com/LNQ0dPi.gif)\n\n在畫面中可以看到，當點擊 `Relative Route to second component` 的按鈕時，url 會攜帶著 first.component.ts 中我們希望他填入的參數，接著會傳遞給 second.component 將參數顯示在畫面中。\n\n這邊注意一下，由於是使用 `queryParamMap` 所以回傳的值是一組 object 裡面是\n\n```typescript\nParamsAsMap {\n\tparamas: {\n\t\tname: 'Second Component',\n\t\tid: \"1\"\n\t}\n}\n```\n\n所以需要用 `get` 取得我們要的 property，而如果是使用 `queryParams` 則回傳的是一個 object 就不需要使用 get 了，這點要注意喔！\n\n```typescript\n{\n\tname: 'Second Component',\n\tid: '1'\n}\n```\n\n\n# Accessing query parameters and fragments\n\n介紹完如何使用 `navigate` 傳遞參數後，接著介紹另一種可以傳遞參數的方式，就是使用在超連結的元素上添加 `queryParams` attribute，一樣舉個例子吧\n\n1. 將 first.component.ts 中的 `onGoSecondComponent` 移除並新增一個 property\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n\n    @Component({\n      selector: 'app-first',\n      templateUrl: './first.component.html',\n    })\n    export class FirstComponent implements OnInit {\n      option = {\n        name: 'Second Component use queryParams',\n        id: '1'\n      }\n\n      constructor() { }\n\n      ngOnInit(): void { }\n    }\n    ```\n\n2. 接著更改 first.component.html 的結構，將連接到 second-component 的超連結改回來，並將 `queryParams` attribute 綁定剛剛建立的 property\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <li>\n          <a [routerLink]=\"['../second-component']\" [queryParams]=\"option\"\n            >Relative Route to second component</a\n          >\n        </li>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n    \n![img](https://i.imgur.com/yQSY9gv.gif)\n\n在 second.component.ts 接收參數的方式一樣就不再寫一次了，可以看到有通過了這個方式傳遞了參數給 second-component。\n\n\n# Link parameters array\n\n在上面的例子中應該可以發現我把 `<a>` 的 `routerLink` 加上了括號，這個用法可以讓你傳入一個陣列的路徑資料給他，陣列資料包含：\n\n- 到目標 component 的 route 路徑\n- 進入 router 的 url 的必須和可選的 route 參數\n\n一樣舉個例子，將原本的範例改寫一下\n\n1. 更改 app-routing.module.ts 的 routes 設定，將 second-component 的 route 路徑加上 `/:name/:id`\n\n    ```typescript\n    const routes: Routes = [\n      {\n        path: 'first-component',\n        component: FirstComponent,\n        children: [ \n          { path: 'child-a', component: ChildAComponent },\n          { path: 'child-b', component: ChildBComponent },\n        ],\n      },\n      { path: 'second-component/:name/:id', component: SecondComponent },\n      { path: '**', component: PageNotFoundComponent },\n    ];\n    ```\n\n2. 更改 first.component.html 的 second-component 路徑\n\n    ```html\n    <!-- first.component.html -->\n\n    <h1>Component Name is: First component</h1>\n    <nav>\n      <ul>\n        <li><a [routerLink]=\"['../second-component', 'second-component', '1']\" >Relative Route to second component</a></li>\n        <li><a routerLink=\"child-a\">Child A</a></li>\n        <li><a routerLink=\"child-b\">Child B</a></li>\n      </ul>\n    </nav>\n\n    <router-outlet></router-outlet>\n    ```\n    \n![img](https://i.imgur.com/slz0tO7.gif)\n\n由於 second.component.ts 中獲得參數的方法不變，所以不特別顯示，畫面中可以看到當點選 second-component 的 route 後， url 會隨著在 first.component.html 中的參數改變，而 second-component 中也可以透過 url 拿到參數並顯示。\n\n\n# Lazy loading\n\n再開發 Angular 中會使用到一個非常重要的觀念 `module`，而 Angular route 也提供了非常好用的延遲加載的技術，簡單來說就是只有在進到某一個頁面時才會加載屬於他的 module 而不是一開始就載入所有 module，這樣可以有效的節省資源與提高載入速度，詳細的內容留到後面講解 module 的時候會詳細說明。\n\n\n# 結論\n\n本章是介紹 Angular router 的最後一篇，講解了如何使用`相對路徑`指定 route 路徑，講解了如何使用 `navigate` 導向指定的 route 路徑，也介紹了許多個攜帶參數的方式，要建立 SPA 學會如何靈活的使用 Route 是非常重要的。\n\n明天開始會進到下一個系列 `Form`，他也是一個重要的概念，無論是哪一種網頁都需要有與使用者交互的表單，對於表單的設定與驗證都是必要的，那麼明天開始來介紹如何在 Angular 中使用 Form 吧。\n\n\n# Reference\n\n- [Angular.io - Common Routing Tasks](https://angular.io/guide/router#accessing-query-parameters-and-fragments)","slug":"Angular/angular-22","published":1,"updated":"2022-02-16T06:35:41.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdv000n95w37ukz3euv","content":"<p>在上一篇中介紹了如何透過 router 傳遞參數，也介紹了怎麼建立嵌套的 route 等等，在本篇中要繼續介紹 Angular route 的其他好用的用法與功能。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Route-order\"><a href=\"#Route-order\" class=\"headerlink\" title=\"Route order\"></a>Route order</h1><p>昨天提到了如何透過使用 <code>wildcard routes</code> 建立 pageNotFoundComponent，用來處理當使用者輸入了專案沒有訂一個 url 時該如何處理，當時提到說要將<code>雙星號(**)</code> 路徑定義在整個 route 的最下面，原因就是因為 Angular route 在偵測路徑匹配時會使用優先匹配的策略，簡單來說就是當第一個 route 路徑被匹配到就不會繼續往下找更匹配的路徑。</p>\n<p>所以在開發 route 時需要將更具體的 route 放在不太具的上面，首先先列出具有<code>靜態路徑</code>的 route 然後是<code>默認 route 匹配的空路徑</code> route，最後才是 <code>wildcard routes</code> 因為他會匹配所有的 route 路徑，等於說如果將它放在前面，那麼他後面的所有 route 路徑都不會被匹配到，放在最後等於說前面所有路徑都不匹配時才會選到他，這點要非常注意。</p>\n<h1 id=\"Using-relative-paths\"><a href=\"#Using-relative-paths\" class=\"headerlink\" title=\"Using relative paths\"></a>Using relative paths</h1><p>絕對路徑指的是這個檔案在本機端或是網路上的<code>絕對位置</code>，比如說一般常看到的網站 url 就是描述這個網站在網路上的絕對位置; 而相對路徑指的是相對於這個檔案的位置，比如在 A 網頁中插入了一張照片，照片的路徑是 <code>images/aaa.jpg</code> 就說明這張照片相對於 A 網頁是在圖一個層級且一個名為 <code>images</code> 的資料夾中，又比如插入了另一張照片路徑是 <code>../images/bbb.jpg</code> 就代表這張圖片是在 A 網站的上一層路徑的一個叫 images 的資料夾中。</p>\n<p>了解了相對路徑後，Angular route 允許使用相對路徑的方式定義當前的 URL 路徑，拿昨天的例子來舉個例子</p>\n<ol>\n<li><p>首先先將 app-routing.module.ts 中的 route 選項改一下，將後面的參數先移除</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [ </span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-a&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildAComponent</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-b&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildBComponent</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 app.component.html 中的內容，將路徑的參數與連結到 second-component 的元素移除</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Angular Router App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/first-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>First Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 first.component.html 的內容，新增一個超連結用於導向 second-component</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;../second-component&quot;</span>&gt;</span>Relative Route to second component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊注意連接到 second-component 的路徑是 <code>../second-component</code> 這代表 second-component 的位置相對於 first-component 是在他的上一層的資料夾中，這就是利用相對路徑指定導向的 url。</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/SfZx5ih.gif\" alt=\"img\"></p>\n<h1 id=\"Specifying-a-relative-route\"><a href=\"#Specifying-a-relative-route\" class=\"headerlink\" title=\"Specifying a relative route\"></a>Specifying a relative route</h1><p>知道了如何透過相對路徑指定 route 路徑後，接著來介紹另一個用法，可以使用 <code>navigate</code> 做到導航到某個相對路徑的 route，舉個例子</p>\n<ol>\n<li><p>先在 first.component.ts 中新增一個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Router</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;                        <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: Router,</span>) &#123; &#125;                       <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onGoSecondComponent</span>(<span class=\"params\"></span>) &#123;                                        <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"title function_\">navigate</span>([<span class=\"string\">&#x27;../second-component&#x27;</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>Router</code></li>\n<li>(2): 將 Router 注入到 component 中</li>\n<li>(3): 新增一個 method 當畫面中的按鈕點擊後觸發，將畫面導引向指定路徑（這邊使用相對路徑）</li>\n</ul>\n</li>\n<li><p>更改 first.component.html 結構，將原本的 second-component 超連結改為 <code>&lt;button&gt;</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onGoSecondComponent()&quot;</span>&gt;</span>Relative Route to second component<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/srOQt4z.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，雖然將 second-component 的超連結更改為 <code>&lt;button&gt;</code> 但依然可以完成導航到 second-component 的目的，這就是使用 <code>navigate</code> 的方法。</p>\n<h2 id=\"Pass-parameters\"><a href=\"#Pass-parameters\" class=\"headerlink\" title=\"Pass parameters\"></a>Pass parameters</h2><p>在昨天的文章中有介紹到如何透過 url 傳遞參數給另一個 component，這邊其實也可以使用 <code>navigate</code> 的第二個參數傳遞要給 component 的參數，舉個例子</p>\n<ol>\n<li><p>在 first.component.ts 中新增要傳遞的參數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NavigationExtras</span>, <span class=\"title class_\">Router</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: Router,</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onGoSecondComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">option</span>: <span class=\"title class_\">NavigationExtras</span> = &#123;                          <span class=\"comment\">// (1)</span></span><br><span class=\"line\">      <span class=\"attr\">queryParams</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second component&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"title function_\">navigate</span>([<span class=\"string\">&#x27;../second-component&#x27;</span>], option);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個型別為 <code>NavigationExtras</code>的 object，並將要傳遞的內容寫在裡面</li>\n</ul>\n</li>\n<li><p>在 second.component.ts 中接收傳遞的參數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;                   <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-second&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./second.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecondComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;                                            <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  id!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: ActivatedRoute,</span>) &#123; &#125;                 <span class=\"comment\">// (3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">queryParamMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>);     <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">queryParamMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;id&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>ActivatedRoute</code></li>\n<li>(2): 建立兩個 property 用於接收傳遞的參數並且顯示在畫面中</li>\n<li>(3): 將 ActivatedRoute 注入到 component 中</li>\n<li>(4): 獲取 route 傳遞的參數</li>\n</ul>\n</li>\n<li><p>更改 second.component.html 的結構，將接收到的 name 與 id 顯示出來</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Second.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>ID is &#123;&#123;id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/LNQ0dPi.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當點擊 <code>Relative Route to second component</code> 的按鈕時，url 會攜帶著 first.component.ts 中我們希望他填入的參數，接著會傳遞給 second.component 將參數顯示在畫面中。</p>\n<p>這邊注意一下，由於是使用 <code>queryParamMap</code> 所以回傳的值是一組 object 裡面是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ParamsAsMap</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">paramas</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second Component&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">id</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以需要用 <code>get</code> 取得我們要的 property，而如果是使用 <code>queryParams</code> 則回傳的是一個 object 就不需要使用 get 了，這點要注意喔！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second Component&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Accessing-query-parameters-and-fragments\"><a href=\"#Accessing-query-parameters-and-fragments\" class=\"headerlink\" title=\"Accessing query parameters and fragments\"></a>Accessing query parameters and fragments</h1><p>介紹完如何使用 <code>navigate</code> 傳遞參數後，接著介紹另一種可以傳遞參數的方式，就是使用在超連結的元素上添加 <code>queryParams</code> attribute，一樣舉個例子吧</p>\n<ol>\n<li><p>將 first.component.ts 中的 <code>onGoSecondComponent</code> 移除並新增一個 property</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second Component use queryParams&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著更改 first.component.html 的結構，將連接到 second-component 的超連結改回來，並將 <code>queryParams</code> attribute 綁定剛剛建立的 property</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;../second-component&#x27;]&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;option&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>Relative Route to second component&lt;/a</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/yQSY9gv.gif\" alt=\"img\"></p>\n<p>在 second.component.ts 接收參數的方式一樣就不再寫一次了，可以看到有通過了這個方式傳遞了參數給 second-component。</p>\n<h1 id=\"Link-parameters-array\"><a href=\"#Link-parameters-array\" class=\"headerlink\" title=\"Link parameters array\"></a>Link parameters array</h1><p>在上面的例子中應該可以發現我把 <code>&lt;a&gt;</code> 的 <code>routerLink</code> 加上了括號，這個用法可以讓你傳入一個陣列的路徑資料給他，陣列資料包含：</p>\n<ul>\n<li>到目標 component 的 route 路徑</li>\n<li>進入 router 的 url 的必須和可選的 route 參數</li>\n</ul>\n<p>一樣舉個例子，將原本的範例改寫一下</p>\n<ol>\n<li><p>更改 app-routing.module.ts 的 routes 設定，將 second-component 的 route 路徑加上 <code>/:name/:id</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [ </span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-a&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildAComponent</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-b&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildBComponent</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name/:id&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 first.component.html 的 second-component 路徑</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;../second-component&#x27;, &#x27;second-component&#x27;, &#x27;1&#x27;]&quot;</span> &gt;</span>Relative Route to second component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/slz0tO7.gif\" alt=\"img\"></p>\n<p>由於 second.component.ts 中獲得參數的方法不變，所以不特別顯示，畫面中可以看到當點選 second-component 的 route 後， url 會隨著在 first.component.html 中的參數改變，而 second-component 中也可以透過 url 拿到參數並顯示。</p>\n<h1 id=\"Lazy-loading\"><a href=\"#Lazy-loading\" class=\"headerlink\" title=\"Lazy loading\"></a>Lazy loading</h1><p>再開發 Angular 中會使用到一個非常重要的觀念 <code>module</code>，而 Angular route 也提供了非常好用的延遲加載的技術，簡單來說就是只有在進到某一個頁面時才會加載屬於他的 module 而不是一開始就載入所有 module，這樣可以有效的節省資源與提高載入速度，詳細的內容留到後面講解 module 的時候會詳細說明。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章是介紹 Angular router 的最後一篇，講解了如何使用<code>相對路徑</code>指定 route 路徑，講解了如何使用 <code>navigate</code> 導向指定的 route 路徑，也介紹了許多個攜帶參數的方式，要建立 SPA 學會如何靈活的使用 Route 是非常重要的。</p>\n<p>明天開始會進到下一個系列 <code>Form</code>，他也是一個重要的概念，無論是哪一種網頁都需要有與使用者交互的表單，對於表單的設定與驗證都是必要的，那麼明天開始來介紹如何在 Angular 中使用 Form 吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/router#accessing-query-parameters-and-fragments\">Angular.io - Common Routing Tasks</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一篇中介紹了如何透過 router 傳遞參數，也介紹了怎麼建立嵌套的 route 等等，在本篇中要繼續介紹 Angular route 的其他好用的用法與功能。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210820/20124767DXMhZhaqPe.png\"></p>","more":"<h1 id=\"Route-order\"><a href=\"#Route-order\" class=\"headerlink\" title=\"Route order\"></a>Route order</h1><p>昨天提到了如何透過使用 <code>wildcard routes</code> 建立 pageNotFoundComponent，用來處理當使用者輸入了專案沒有訂一個 url 時該如何處理，當時提到說要將<code>雙星號(**)</code> 路徑定義在整個 route 的最下面，原因就是因為 Angular route 在偵測路徑匹配時會使用優先匹配的策略，簡單來說就是當第一個 route 路徑被匹配到就不會繼續往下找更匹配的路徑。</p>\n<p>所以在開發 route 時需要將更具體的 route 放在不太具的上面，首先先列出具有<code>靜態路徑</code>的 route 然後是<code>默認 route 匹配的空路徑</code> route，最後才是 <code>wildcard routes</code> 因為他會匹配所有的 route 路徑，等於說如果將它放在前面，那麼他後面的所有 route 路徑都不會被匹配到，放在最後等於說前面所有路徑都不匹配時才會選到他，這點要非常注意。</p>\n<h1 id=\"Using-relative-paths\"><a href=\"#Using-relative-paths\" class=\"headerlink\" title=\"Using relative paths\"></a>Using relative paths</h1><p>絕對路徑指的是這個檔案在本機端或是網路上的<code>絕對位置</code>，比如說一般常看到的網站 url 就是描述這個網站在網路上的絕對位置; 而相對路徑指的是相對於這個檔案的位置，比如在 A 網頁中插入了一張照片，照片的路徑是 <code>images/aaa.jpg</code> 就說明這張照片相對於 A 網頁是在圖一個層級且一個名為 <code>images</code> 的資料夾中，又比如插入了另一張照片路徑是 <code>../images/bbb.jpg</code> 就代表這張圖片是在 A 網站的上一層路徑的一個叫 images 的資料夾中。</p>\n<p>了解了相對路徑後，Angular route 允許使用相對路徑的方式定義當前的 URL 路徑，拿昨天的例子來舉個例子</p>\n<ol>\n<li><p>首先先將 app-routing.module.ts 中的 route 選項改一下，將後面的參數先移除</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [ </span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-a&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildAComponent</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-b&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildBComponent</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 app.component.html 中的內容，將路徑的參數與連結到 second-component 的元素移除</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Angular Router App<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/first-component&quot;</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>First Component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 first.component.html 的內容，新增一個超連結用於導向 second-component</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;../second-component&quot;</span>&gt;</span>Relative Route to second component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊注意連接到 second-component 的路徑是 <code>../second-component</code> 這代表 second-component 的位置相對於 first-component 是在他的上一層的資料夾中，這就是利用相對路徑指定導向的 url。</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/SfZx5ih.gif\" alt=\"img\"></p>\n<h1 id=\"Specifying-a-relative-route\"><a href=\"#Specifying-a-relative-route\" class=\"headerlink\" title=\"Specifying a relative route\"></a>Specifying a relative route</h1><p>知道了如何透過相對路徑指定 route 路徑後，接著來介紹另一個用法，可以使用 <code>navigate</code> 做到導航到某個相對路徑的 route，舉個例子</p>\n<ol>\n<li><p>先在 first.component.ts 中新增一個 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Router</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;                        <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: Router,</span>) &#123; &#125;                       <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onGoSecondComponent</span>(<span class=\"params\"></span>) &#123;                                        <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"title function_\">navigate</span>([<span class=\"string\">&#x27;../second-component&#x27;</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>Router</code></li>\n<li>(2): 將 Router 注入到 component 中</li>\n<li>(3): 新增一個 method 當畫面中的按鈕點擊後觸發，將畫面導引向指定路徑（這邊使用相對路徑）</li>\n</ul>\n</li>\n<li><p>更改 first.component.html 結構，將原本的 second-component 超連結改為 <code>&lt;button&gt;</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onGoSecondComponent()&quot;</span>&gt;</span>Relative Route to second component<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/srOQt4z.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，雖然將 second-component 的超連結更改為 <code>&lt;button&gt;</code> 但依然可以完成導航到 second-component 的目的，這就是使用 <code>navigate</code> 的方法。</p>\n<h2 id=\"Pass-parameters\"><a href=\"#Pass-parameters\" class=\"headerlink\" title=\"Pass parameters\"></a>Pass parameters</h2><p>在昨天的文章中有介紹到如何透過 url 傳遞參數給另一個 component，這邊其實也可以使用 <code>navigate</code> 的第二個參數傳遞要給 component 的參數，舉個例子</p>\n<ol>\n<li><p>在 first.component.ts 中新增要傳遞的參數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NavigationExtras</span>, <span class=\"title class_\">Router</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: Router,</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onGoSecondComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">option</span>: <span class=\"title class_\">NavigationExtras</span> = &#123;                          <span class=\"comment\">// (1)</span></span><br><span class=\"line\">      <span class=\"attr\">queryParams</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second component&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"title function_\">navigate</span>([<span class=\"string\">&#x27;../second-component&#x27;</span>], option);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個型別為 <code>NavigationExtras</code>的 object，並將要傳遞的內容寫在裡面</li>\n</ul>\n</li>\n<li><p>在 second.component.ts 中接收傳遞的參數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;                   <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-second&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./second.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecondComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;                                            <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  id!: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> route: ActivatedRoute,</span>) &#123; &#125;                 <span class=\"comment\">// (3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">queryParamMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>);     <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">route</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">queryParamMap</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;id&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>ActivatedRoute</code></li>\n<li>(2): 建立兩個 property 用於接收傳遞的參數並且顯示在畫面中</li>\n<li>(3): 將 ActivatedRoute 注入到 component 中</li>\n<li>(4): 獲取 route 傳遞的參數</li>\n</ul>\n</li>\n<li><p>更改 second.component.html 的結構，將接收到的 name 與 id 顯示出來</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Second.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>ID is &#123;&#123;id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/LNQ0dPi.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到，當點擊 <code>Relative Route to second component</code> 的按鈕時，url 會攜帶著 first.component.ts 中我們希望他填入的參數，接著會傳遞給 second.component 將參數顯示在畫面中。</p>\n<p>這邊注意一下，由於是使用 <code>queryParamMap</code> 所以回傳的值是一組 object 裡面是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ParamsAsMap</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">paramas</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second Component&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">id</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以需要用 <code>get</code> 取得我們要的 property，而如果是使用 <code>queryParams</code> 則回傳的是一個 object 就不需要使用 get 了，這點要注意喔！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second Component&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Accessing-query-parameters-and-fragments\"><a href=\"#Accessing-query-parameters-and-fragments\" class=\"headerlink\" title=\"Accessing query parameters and fragments\"></a>Accessing query parameters and fragments</h1><p>介紹完如何使用 <code>navigate</code> 傳遞參數後，接著介紹另一種可以傳遞參數的方式，就是使用在超連結的元素上添加 <code>queryParams</code> attribute，一樣舉個例子吧</p>\n<ol>\n<li><p>將 first.component.ts 中的 <code>onGoSecondComponent</code> 移除並新增一個 property</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-first&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./first.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Second Component use queryParams&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著更改 first.component.html 的結構，將連接到 second-component 的超連結改回來，並將 <code>queryParams</code> attribute 綁定剛剛建立的 property</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;../second-component&#x27;]&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;option&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>Relative Route to second component&lt;/a</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/yQSY9gv.gif\" alt=\"img\"></p>\n<p>在 second.component.ts 接收參數的方式一樣就不再寫一次了，可以看到有通過了這個方式傳遞了參數給 second-component。</p>\n<h1 id=\"Link-parameters-array\"><a href=\"#Link-parameters-array\" class=\"headerlink\" title=\"Link parameters array\"></a>Link parameters array</h1><p>在上面的例子中應該可以發現我把 <code>&lt;a&gt;</code> 的 <code>routerLink</code> 加上了括號，這個用法可以讓你傳入一個陣列的路徑資料給他，陣列資料包含：</p>\n<ul>\n<li>到目標 component 的 route 路徑</li>\n<li>進入 router 的 url 的必須和可選的 route 參數</li>\n</ul>\n<p>一樣舉個例子，將原本的範例改寫一下</p>\n<ol>\n<li><p>更改 app-routing.module.ts 的 routes 設定，將 second-component 的 route 路徑加上 <code>/:name/:id</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;first-component&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">FirstComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [ </span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-a&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildAComponent</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;child-b&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">ChildBComponent</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;second-component/:name/:id&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">SecondComponent</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">PageNotFoundComponent</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改 first.component.html 的 second-component 路徑</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- first.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Component Name is: First component<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;../second-component&#x27;, &#x27;second-component&#x27;, &#x27;1&#x27;]&quot;</span> &gt;</span>Relative Route to second component<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-a&quot;</span>&gt;</span>Child A<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;child-b&quot;</span>&gt;</span>Child B<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/slz0tO7.gif\" alt=\"img\"></p>\n<p>由於 second.component.ts 中獲得參數的方法不變，所以不特別顯示，畫面中可以看到當點選 second-component 的 route 後， url 會隨著在 first.component.html 中的參數改變，而 second-component 中也可以透過 url 拿到參數並顯示。</p>\n<h1 id=\"Lazy-loading\"><a href=\"#Lazy-loading\" class=\"headerlink\" title=\"Lazy loading\"></a>Lazy loading</h1><p>再開發 Angular 中會使用到一個非常重要的觀念 <code>module</code>，而 Angular route 也提供了非常好用的延遲加載的技術，簡單來說就是只有在進到某一個頁面時才會加載屬於他的 module 而不是一開始就載入所有 module，這樣可以有效的節省資源與提高載入速度，詳細的內容留到後面講解 module 的時候會詳細說明。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章是介紹 Angular router 的最後一篇，講解了如何使用<code>相對路徑</code>指定 route 路徑，講解了如何使用 <code>navigate</code> 導向指定的 route 路徑，也介紹了許多個攜帶參數的方式，要建立 SPA 學會如何靈活的使用 Route 是非常重要的。</p>\n<p>明天開始會進到下一個系列 <code>Form</code>，他也是一個重要的概念，無論是哪一種網頁都需要有與使用者交互的表單，對於表單的設定與驗證都是必要的，那麼明天開始來介紹如何在 Angular 中使用 Form 吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/router#accessing-query-parameters-and-fragments\">Angular.io - Common Routing Tasks</a></li>\n</ul>"},{"title":"Day23. Introduction to forms in Angular","date":"2021-09-23T02:15:51.000Z","_content":"\n從本章開始會進入 Angular Form 的部分，在現代網頁中與使用者互動的過程變得越來越重要，其中最主要的便是 Form，從一開始的登陸頁面到對商品或對網頁中元素的設定都需要使用到 Form 來取得使用者輸入的資料，也需要對使用者輸入的資料做驗證以防使用者輸入了非格式的數據導致出錯。\n\nAngular 提供了兩種不同的方法來處理使用者的輸入，分別是 `reactive` 與 `template-driven`，兩種方法都是從 view 中捕獲使用者輸入事件、驗證用戶輸入、創建表單模型或更新數據模型，本篇會大概介紹這兩種方法以及他們之間的差別，那就繼續往下看吧！\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png)\n\n<!-- more -->\n\n# Choosing an approach\n\n`Reactive forms` 和 `template-driven forms` 以不同的方式處理和管理表單數據，他們各有各自的優勢：\n\n- **Reactive forms**：提供對底層表單 object 的最直接且明顯的訪問，具有更高的可擴展性、可重用性和可測試性。\n- **Template-driven forms**：依賴 template 中的 directive 來創建或操作底層表單 object，常用於添加`簡單`的表單，他很容易被添加到專案中但他的擴展性與可測試性比較差。\n\n## Key differences\n\n可以透過一張表單來總結 `Reactive forms` 和 `template-driven forms` 之間的主要區別\n\n|    |      Description      | Reactive |\n|----------|:-------------:|:-------------:|\n| Setup of form model | 明顯的，在 Component 中創建 | 隱式的，由 directive 創建\n| Data model | 結構化和不可變 | 非結構化且可變\n| Data flow | 同步 | 非同步\n| Form validation | 透過 function | 透過 directive\n\n\n## Scalability\n\n如果 Form 是你專案中的核心部分的話，那麼就需要將整個 Form 模型重複使用於各個不同的 Component，所以可伸縮性就非常重要。\n\nReactive forms 比 template-driven forms `更具有可擴展性` ，他提供了對底層表單 API 的直接訪問，並在 view 和數據模型之間使用`同步`的數據流，這讓你創建大型的表單變得更加容易，他也需要比較少的測試設置，並且測試不需要深入了解就可以正確的測試表單的更新和驗證。\n\n相較於 Reactive forms 而言 Template-driven forms 比較常用在 `簡單且不可重複使用的場景`，他對底層表單 API 的訪問比較抽象，並在 view 與數據模型之間使用`非同步`的數據流，由於他的對 API 的訪問較為抽象所以對於測試來說比較不好撰寫，非常需要依賴手動更改檢測執行才能成功，需要非常多的設置。\n\n\n# Setting up the form model\n\n`Reactive forms` 和 `template-driven forms` 都會追蹤使用者與畫面中的表單和 Component 中表單數據之間的變化，他們在底層來說是共享同一個地層構建模塊，但在創建和管理表單控制實例的方法不同。\n\n## Common form foundation classes\n\nReactive forms 與 template-dirven forms 都建立在以下的 base classes 之上：\n\n- **FormControl**：會追蹤`單個`表單控制元件的值和驗證狀態，簡單來說他會負責追蹤畫面中一個綁定的 `<input>` 元素的內容。\n- **FormGroup**：會追蹤`多個`表單控制元件的值和狀態，簡單來說他像是 javeascript 的 object，裡面包含了很多個不同的表單控制元件，可能由多個 FormControl 或 FormArray 所組成，甚至裡面在包含一個 FormGroup。\n- **FormArray**： 會追蹤表單控制陣列中的值和狀態，簡單來說可以想像是 FormControl 的陣列。\n- **ControlValueAccessor**：在 Angular FormControl instnce 與 DOM 之間建立了一個溝通的橋樑。\n\n## Setup in reactive forms\n\n使用 reactive forms 可以直接在 component 中定義你的表單模型，`[formControl]`  directive 會使用 `internal value accessor` 將創建的 FormControl intance 鏈結到 view 中被綁定的單個輸入元素，來舉個例子吧\n\n1. 首先先在 app.module.ts 中引入 Form module\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n      ],\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule,\n        ReactiveFormsModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```\n\n2. 在 app.component.ts 中建立 FormControl\n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormControl } from '@angular/forms';                 // (1)\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      favoriteColorControl = new FormControl('');                 // (2)\n    }\n    ```\n\n    - (1): 從 `@angular/forms` 中引入 FormControl\n    - (2): 將 FormControl 實例化並賦予給 component 的 property\n3. 在 app.component.html 中綁定表單控制元件\n\n    ```html\n    <!-- app.component.html -->\n\n    <div>\n      Favorite Color: <input type=\"text\" [formControl]=\"favoriteColorControl\" />\n    </div>\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png)\n\n![img](https://i.imgur.com/TOrJdYH.gif)\n\n將 `<input>` 元件與 formControl 綁定後，他會追蹤畫面中 `<input>` 內容的變化並將它傳遞給 component 中被綁定的 property ( favoriteColorControl )，其實跟著上面的範例是無法在 console 中獲得輸入的值，要怎麼獲得我之後會詳細講解。\n\n## Setup in template-driven forms\n\n接著來看如何建立 template-dirven forms 的表單控制模型，在 template-dirven forms 中的控制模型是隱性的，使用 directive `MgModel` 為給定的表單元素創建和管理一個 formControl 實例，一樣舉個例子\n\n1. 在 app.component.ts 中新增一個 property\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-template-favorite-color',\n      templateUrl: './app.component.html',\n    })\n    export class FavoriteColorComponent {\n      favoriteColor = '';\n    }\n    ```\n\n2. 在 app.component.html 中使用 `NgModel` 綁定剛剛建立的 property\n\n    ```html\n    <!-- app.component.html -->\n\n    <div>\n      Favorite Color: <input type=\"text\" [(ngModel)]=\"favoriteColor\" />\n    </div>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png)\n\n![img](https://i.imgur.com/k4EhckL.gif)\n\n在畫面中可以看到透過 `NgModel` 將指定的 property 綁定，當畫面中的表單元素內容發生變化時會傳遞給 component 中被綁定的 property，一樣上面的範例是無法看到 console 的內容之後會講解。\n\n\n# Data flow in forms\n\n介紹完如何綁定表單的控制元件後，接著要來看看 Form 的數據流，當你的專案中有使用表單時，Angular 必須保持 view 與 component 模型內容的同步，當使用者更改畫面中的值時這個新的值需要立即的反映在數據模型中，相同的當數據模型的值更新時也需要立馬反映在畫面中，而兩種不同的 form 有著不同的處理數據與更改畫面的方式。\n\n## Data flow in reactive forms\n\n在 reactive forms 中 view 的每一個表單元素都直接鏈結到 component 中的表單模型（formControl instance），從 view 到表單模型以及表單模型到 view 的更新是`同步`的，不依賴於 UI 的呈現方式。\n\nview 到表單模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：\n\n1. 使用者在 `<input>` 中輸入了一個值，例子中是輸入了喜歡的顏色（blue）。\n2. 表單輸入元素（`<input>`）發送了帶有最新值（blue） 的`輸入事件`。\n3. `control value accessor` 會監聽輸入元素的事件，當接收到事件後會立即將最新的值中繼到 FormControl 實例上\n4. FormControl 實例會通過 `valueChanges` 這個 `observable` 發出最新的值（ valueChange.subscribe(val => { ... }) ）。\n5. valueChanges observable 的任何訂閱者都會收到這個最新的值。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png](https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png)\n\n而表單模型到 view 顯示了對表單模型進行編成更改後如何通過以下步驟更新 view 的值：\n\n1. 調用 `setValue()` method 用於更新 FormControl 的內容。\n2. FormControl 實例通過 valueChanges observable 發出新的值。\n3. valueChanges observable 的任何訂閱者都會收到新的值。\n4. `control value accessor` 使用這個最新的值更新畫面表單元素\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png)\n\n## Data flow in template-driven forms\n\n在 template-driven forms 中每個表單元素都鏈結到一個內部管理表單模型的 directive，從 view 到模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：\n\n1. 使用者在畫面中的 `<input>` 中輸入新的值（blue）。\n2. `<input>` 元素發出一個帶有 blue 的 `input 事件`。\n3.  附加在 `<input>` 的 `control value accessor` 會觸發 FormControl 實例上的 setValue() method。\n4. FormControl 實例通過 `valueChanges observable` 發出新的值。\n5. valueChanges observable 的任何訂閱者都會收到新的值。\n6. control value accessor 還會調用 `NgModel.viewToModelUpdater()`，這個 method 會發出一個 `ngModelChange` 的事件。\n7. 因為 component 的 template 對 `favoriteColor` property 使用雙向屬性綁定 (Two-way binding) ，所以 component 中的 favoriteColor property 被更新為 `ngModelChange` 事件發出的值 （blue）。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png)\n\n表單模型到 view 顯示了當 favoriteColor 從藍色變為紅色時，數據會如何從表單模型流向 view，通果以下步驟：\n\n1. 在 component 中更新 property favoriteColor 的值。\n2. 變更檢測開始。\n3. 在變更檢測期間，Lifecycle method `ngOnChanges` 在 `NgModel` directive 實例上被調用，因為他的 input binding 發生更改。\n4. ngOnChanges() 透過`非同步`的方式設置 FormControl 實例的值\n5. 變更檢測完成。\n6. FormControl 實例通過 valueChanges observable 發出最新的值。\n7. valueChanges observable 的任何訂閱者都會收到新的值。\n8. `control value accessor` 會使用最新的 favoriteColor 值更新 view 中的表單輸入元素\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png)\n\n## Mutability of the data model\n\n更改和追蹤的 method 在兩種不同的 form 會有不同的作用：\n\n- **Reactive forms**：通過將表單數據模型作為`不可更改`的數據結構用來保持表單數據模型的純淨，每次在表單數據模型上觸發更改時，FormControl 實例都會返回一個`新的`表單數據模型而不是更改現有的模型，這使你可以通過 FormControl 的 `Observable` 追蹤表單數據模型的更改，讓更改檢測更有效，因為他只要追蹤 FormControl 的更改，由於數據的更新遵循 reactive 的模式，所以可以使用 observable 的操作符改變表單數據。\n- **Template-driven forms**：依靠`雙向數據綁定`的可變性在 template 中進行更改後也更改 component 中的 property，由於在使用雙向數據綁定時沒有辦法只跟蹤表單數據模型，所以效率較低。\n\n以上面例子而言兩種不同的 form 對於數據的變更處理：\n\n- 對於 reactive forms 來說，當 FormControl 的值更新時，會返回一個新的值。\n- 對於 template-driven forms 來說當更新值時會將上一個內容取代為新的值。\n\n\n# 結論\n\n本篇中介紹了 Angular 的兩種不同的 Form，分別是 `Reactive forms` 與 `template-driven forms`，雖然兩種方法都可以做到與使用者的互動，但是還是有些的不同，`Reactive forms` 有更高的可擴展性、可重用性和可測試性，而 `template-driven forms ` 則是使用雙向綁定的方式將 component 的 property 與 template 的輸入元件綁定，所以常用在比較簡單的 Form 結構上。\n\n雖然在本篇中簡單的介紹了該如何使用 `Reactive forms` 與 `template-driven forms`，不過只有稍微提到而已，接下來會分別對他們兩個做比較詳細的介紹與如何使用，那就明天見吧！\n\n\n# Reference\n\n- [Angualr.io - Introduction to forms in Angular](https://angular.io/guide/forms-overview)","source":"_posts/Angular/angular-23.md","raw":"---\ntitle: Day23. Introduction to forms in Angular\ndate: 2021-09-23 10:15:51\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n從本章開始會進入 Angular Form 的部分，在現代網頁中與使用者互動的過程變得越來越重要，其中最主要的便是 Form，從一開始的登陸頁面到對商品或對網頁中元素的設定都需要使用到 Form 來取得使用者輸入的資料，也需要對使用者輸入的資料做驗證以防使用者輸入了非格式的數據導致出錯。\n\nAngular 提供了兩種不同的方法來處理使用者的輸入，分別是 `reactive` 與 `template-driven`，兩種方法都是從 view 中捕獲使用者輸入事件、驗證用戶輸入、創建表單模型或更新數據模型，本篇會大概介紹這兩種方法以及他們之間的差別，那就繼續往下看吧！\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png)\n\n<!-- more -->\n\n# Choosing an approach\n\n`Reactive forms` 和 `template-driven forms` 以不同的方式處理和管理表單數據，他們各有各自的優勢：\n\n- **Reactive forms**：提供對底層表單 object 的最直接且明顯的訪問，具有更高的可擴展性、可重用性和可測試性。\n- **Template-driven forms**：依賴 template 中的 directive 來創建或操作底層表單 object，常用於添加`簡單`的表單，他很容易被添加到專案中但他的擴展性與可測試性比較差。\n\n## Key differences\n\n可以透過一張表單來總結 `Reactive forms` 和 `template-driven forms` 之間的主要區別\n\n|    |      Description      | Reactive |\n|----------|:-------------:|:-------------:|\n| Setup of form model | 明顯的，在 Component 中創建 | 隱式的，由 directive 創建\n| Data model | 結構化和不可變 | 非結構化且可變\n| Data flow | 同步 | 非同步\n| Form validation | 透過 function | 透過 directive\n\n\n## Scalability\n\n如果 Form 是你專案中的核心部分的話，那麼就需要將整個 Form 模型重複使用於各個不同的 Component，所以可伸縮性就非常重要。\n\nReactive forms 比 template-driven forms `更具有可擴展性` ，他提供了對底層表單 API 的直接訪問，並在 view 和數據模型之間使用`同步`的數據流，這讓你創建大型的表單變得更加容易，他也需要比較少的測試設置，並且測試不需要深入了解就可以正確的測試表單的更新和驗證。\n\n相較於 Reactive forms 而言 Template-driven forms 比較常用在 `簡單且不可重複使用的場景`，他對底層表單 API 的訪問比較抽象，並在 view 與數據模型之間使用`非同步`的數據流，由於他的對 API 的訪問較為抽象所以對於測試來說比較不好撰寫，非常需要依賴手動更改檢測執行才能成功，需要非常多的設置。\n\n\n# Setting up the form model\n\n`Reactive forms` 和 `template-driven forms` 都會追蹤使用者與畫面中的表單和 Component 中表單數據之間的變化，他們在底層來說是共享同一個地層構建模塊，但在創建和管理表單控制實例的方法不同。\n\n## Common form foundation classes\n\nReactive forms 與 template-dirven forms 都建立在以下的 base classes 之上：\n\n- **FormControl**：會追蹤`單個`表單控制元件的值和驗證狀態，簡單來說他會負責追蹤畫面中一個綁定的 `<input>` 元素的內容。\n- **FormGroup**：會追蹤`多個`表單控制元件的值和狀態，簡單來說他像是 javeascript 的 object，裡面包含了很多個不同的表單控制元件，可能由多個 FormControl 或 FormArray 所組成，甚至裡面在包含一個 FormGroup。\n- **FormArray**： 會追蹤表單控制陣列中的值和狀態，簡單來說可以想像是 FormControl 的陣列。\n- **ControlValueAccessor**：在 Angular FormControl instnce 與 DOM 之間建立了一個溝通的橋樑。\n\n## Setup in reactive forms\n\n使用 reactive forms 可以直接在 component 中定義你的表單模型，`[formControl]`  directive 會使用 `internal value accessor` 將創建的 FormControl intance 鏈結到 view 中被綁定的單個輸入元素，來舉個例子吧\n\n1. 首先先在 app.module.ts 中引入 Form module\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n      ],\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule,\n        ReactiveFormsModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```\n\n2. 在 app.component.ts 中建立 FormControl\n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormControl } from '@angular/forms';                 // (1)\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n    })\n    export class AppComponent {\n      favoriteColorControl = new FormControl('');                 // (2)\n    }\n    ```\n\n    - (1): 從 `@angular/forms` 中引入 FormControl\n    - (2): 將 FormControl 實例化並賦予給 component 的 property\n3. 在 app.component.html 中綁定表單控制元件\n\n    ```html\n    <!-- app.component.html -->\n\n    <div>\n      Favorite Color: <input type=\"text\" [formControl]=\"favoriteColorControl\" />\n    </div>\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png)\n\n![img](https://i.imgur.com/TOrJdYH.gif)\n\n將 `<input>` 元件與 formControl 綁定後，他會追蹤畫面中 `<input>` 內容的變化並將它傳遞給 component 中被綁定的 property ( favoriteColorControl )，其實跟著上面的範例是無法在 console 中獲得輸入的值，要怎麼獲得我之後會詳細講解。\n\n## Setup in template-driven forms\n\n接著來看如何建立 template-dirven forms 的表單控制模型，在 template-dirven forms 中的控制模型是隱性的，使用 directive `MgModel` 為給定的表單元素創建和管理一個 formControl 實例，一樣舉個例子\n\n1. 在 app.component.ts 中新增一個 property\n\n    ```typescript\n    import { Component } from '@angular/core';\n\n    @Component({\n      selector: 'app-template-favorite-color',\n      templateUrl: './app.component.html',\n    })\n    export class FavoriteColorComponent {\n      favoriteColor = '';\n    }\n    ```\n\n2. 在 app.component.html 中使用 `NgModel` 綁定剛剛建立的 property\n\n    ```html\n    <!-- app.component.html -->\n\n    <div>\n      Favorite Color: <input type=\"text\" [(ngModel)]=\"favoriteColor\" />\n    </div>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png)\n\n![img](https://i.imgur.com/k4EhckL.gif)\n\n在畫面中可以看到透過 `NgModel` 將指定的 property 綁定，當畫面中的表單元素內容發生變化時會傳遞給 component 中被綁定的 property，一樣上面的範例是無法看到 console 的內容之後會講解。\n\n\n# Data flow in forms\n\n介紹完如何綁定表單的控制元件後，接著要來看看 Form 的數據流，當你的專案中有使用表單時，Angular 必須保持 view 與 component 模型內容的同步，當使用者更改畫面中的值時這個新的值需要立即的反映在數據模型中，相同的當數據模型的值更新時也需要立馬反映在畫面中，而兩種不同的 form 有著不同的處理數據與更改畫面的方式。\n\n## Data flow in reactive forms\n\n在 reactive forms 中 view 的每一個表單元素都直接鏈結到 component 中的表單模型（formControl instance），從 view 到表單模型以及表單模型到 view 的更新是`同步`的，不依賴於 UI 的呈現方式。\n\nview 到表單模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：\n\n1. 使用者在 `<input>` 中輸入了一個值，例子中是輸入了喜歡的顏色（blue）。\n2. 表單輸入元素（`<input>`）發送了帶有最新值（blue） 的`輸入事件`。\n3. `control value accessor` 會監聽輸入元素的事件，當接收到事件後會立即將最新的值中繼到 FormControl 實例上\n4. FormControl 實例會通過 `valueChanges` 這個 `observable` 發出最新的值（ valueChange.subscribe(val => { ... }) ）。\n5. valueChanges observable 的任何訂閱者都會收到這個最新的值。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png](https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png)\n\n而表單模型到 view 顯示了對表單模型進行編成更改後如何通過以下步驟更新 view 的值：\n\n1. 調用 `setValue()` method 用於更新 FormControl 的內容。\n2. FormControl 實例通過 valueChanges observable 發出新的值。\n3. valueChanges observable 的任何訂閱者都會收到新的值。\n4. `control value accessor` 使用這個最新的值更新畫面表單元素\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png)\n\n## Data flow in template-driven forms\n\n在 template-driven forms 中每個表單元素都鏈結到一個內部管理表單模型的 directive，從 view 到模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：\n\n1. 使用者在畫面中的 `<input>` 中輸入新的值（blue）。\n2. `<input>` 元素發出一個帶有 blue 的 `input 事件`。\n3.  附加在 `<input>` 的 `control value accessor` 會觸發 FormControl 實例上的 setValue() method。\n4. FormControl 實例通過 `valueChanges observable` 發出新的值。\n5. valueChanges observable 的任何訂閱者都會收到新的值。\n6. control value accessor 還會調用 `NgModel.viewToModelUpdater()`，這個 method 會發出一個 `ngModelChange` 的事件。\n7. 因為 component 的 template 對 `favoriteColor` property 使用雙向屬性綁定 (Two-way binding) ，所以 component 中的 favoriteColor property 被更新為 `ngModelChange` 事件發出的值 （blue）。\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png)\n\n表單模型到 view 顯示了當 favoriteColor 從藍色變為紅色時，數據會如何從表單模型流向 view，通果以下步驟：\n\n1. 在 component 中更新 property favoriteColor 的值。\n2. 變更檢測開始。\n3. 在變更檢測期間，Lifecycle method `ngOnChanges` 在 `NgModel` directive 實例上被調用，因為他的 input binding 發生更改。\n4. ngOnChanges() 透過`非同步`的方式設置 FormControl 實例的值\n5. 變更檢測完成。\n6. FormControl 實例通過 valueChanges observable 發出最新的值。\n7. valueChanges observable 的任何訂閱者都會收到新的值。\n8. `control value accessor` 會使用最新的 favoriteColor 值更新 view 中的表單輸入元素\n\n![https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png)\n\n## Mutability of the data model\n\n更改和追蹤的 method 在兩種不同的 form 會有不同的作用：\n\n- **Reactive forms**：通過將表單數據模型作為`不可更改`的數據結構用來保持表單數據模型的純淨，每次在表單數據模型上觸發更改時，FormControl 實例都會返回一個`新的`表單數據模型而不是更改現有的模型，這使你可以通過 FormControl 的 `Observable` 追蹤表單數據模型的更改，讓更改檢測更有效，因為他只要追蹤 FormControl 的更改，由於數據的更新遵循 reactive 的模式，所以可以使用 observable 的操作符改變表單數據。\n- **Template-driven forms**：依靠`雙向數據綁定`的可變性在 template 中進行更改後也更改 component 中的 property，由於在使用雙向數據綁定時沒有辦法只跟蹤表單數據模型，所以效率較低。\n\n以上面例子而言兩種不同的 form 對於數據的變更處理：\n\n- 對於 reactive forms 來說，當 FormControl 的值更新時，會返回一個新的值。\n- 對於 template-driven forms 來說當更新值時會將上一個內容取代為新的值。\n\n\n# 結論\n\n本篇中介紹了 Angular 的兩種不同的 Form，分別是 `Reactive forms` 與 `template-driven forms`，雖然兩種方法都可以做到與使用者的互動，但是還是有些的不同，`Reactive forms` 有更高的可擴展性、可重用性和可測試性，而 `template-driven forms ` 則是使用雙向綁定的方式將 component 的 property 與 template 的輸入元件綁定，所以常用在比較簡單的 Form 結構上。\n\n雖然在本篇中簡單的介紹了該如何使用 `Reactive forms` 與 `template-driven forms`，不過只有稍微提到而已，接下來會分別對他們兩個做比較詳細的介紹與如何使用，那就明天見吧！\n\n\n# Reference\n\n- [Angualr.io - Introduction to forms in Angular](https://angular.io/guide/forms-overview)","slug":"Angular/angular-23","published":1,"updated":"2022-02-16T06:39:16.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdw000q95w3he3mg7bj","content":"<p>從本章開始會進入 Angular Form 的部分，在現代網頁中與使用者互動的過程變得越來越重要，其中最主要的便是 Form，從一開始的登陸頁面到對商品或對網頁中元素的設定都需要使用到 Form 來取得使用者輸入的資料，也需要對使用者輸入的資料做驗證以防使用者輸入了非格式的數據導致出錯。</p>\n<p>Angular 提供了兩種不同的方法來處理使用者的輸入，分別是 <code>reactive</code> 與 <code>template-driven</code>，兩種方法都是從 view 中捕獲使用者輸入事件、驗證用戶輸入、創建表單模型或更新數據模型，本篇會大概介紹這兩種方法以及他們之間的差別，那就繼續往下看吧！</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Choosing-an-approach\"><a href=\"#Choosing-an-approach\" class=\"headerlink\" title=\"Choosing an approach\"></a>Choosing an approach</h1><p><code>Reactive forms</code> 和 <code>template-driven forms</code> 以不同的方式處理和管理表單數據，他們各有各自的優勢：</p>\n<ul>\n<li><strong>Reactive forms</strong>：提供對底層表單 object 的最直接且明顯的訪問，具有更高的可擴展性、可重用性和可測試性。</li>\n<li><strong>Template-driven forms</strong>：依賴 template 中的 directive 來創建或操作底層表單 object，常用於添加<code>簡單</code>的表單，他很容易被添加到專案中但他的擴展性與可測試性比較差。</li>\n</ul>\n<h2 id=\"Key-differences\"><a href=\"#Key-differences\" class=\"headerlink\" title=\"Key differences\"></a>Key differences</h2><p>可以透過一張表單來總結 <code>Reactive forms</code> 和 <code>template-driven forms</code> 之間的主要區別</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Reactive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Setup of form model</td>\n<td align=\"center\">明顯的，在 Component 中創建</td>\n<td align=\"center\">隱式的，由 directive 創建</td>\n</tr>\n<tr>\n<td>Data model</td>\n<td align=\"center\">結構化和不可變</td>\n<td align=\"center\">非結構化且可變</td>\n</tr>\n<tr>\n<td>Data flow</td>\n<td align=\"center\">同步</td>\n<td align=\"center\">非同步</td>\n</tr>\n<tr>\n<td>Form validation</td>\n<td align=\"center\">透過 function</td>\n<td align=\"center\">透過 directive</td>\n</tr>\n</tbody></table>\n<h2 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h2><p>如果 Form 是你專案中的核心部分的話，那麼就需要將整個 Form 模型重複使用於各個不同的 Component，所以可伸縮性就非常重要。</p>\n<p>Reactive forms 比 template-driven forms <code>更具有可擴展性</code> ，他提供了對底層表單 API 的直接訪問，並在 view 和數據模型之間使用<code>同步</code>的數據流，這讓你創建大型的表單變得更加容易，他也需要比較少的測試設置，並且測試不需要深入了解就可以正確的測試表單的更新和驗證。</p>\n<p>相較於 Reactive forms 而言 Template-driven forms 比較常用在 <code>簡單且不可重複使用的場景</code>，他對底層表單 API 的訪問比較抽象，並在 view 與數據模型之間使用<code>非同步</code>的數據流，由於他的對 API 的訪問較為抽象所以對於測試來說比較不好撰寫，非常需要依賴手動更改檢測執行才能成功，需要非常多的設置。</p>\n<h1 id=\"Setting-up-the-form-model\"><a href=\"#Setting-up-the-form-model\" class=\"headerlink\" title=\"Setting up the form model\"></a>Setting up the form model</h1><p><code>Reactive forms</code> 和 <code>template-driven forms</code> 都會追蹤使用者與畫面中的表單和 Component 中表單數據之間的變化，他們在底層來說是共享同一個地層構建模塊，但在創建和管理表單控制實例的方法不同。</p>\n<h2 id=\"Common-form-foundation-classes\"><a href=\"#Common-form-foundation-classes\" class=\"headerlink\" title=\"Common form foundation classes\"></a>Common form foundation classes</h2><p>Reactive forms 與 template-dirven forms 都建立在以下的 base classes 之上：</p>\n<ul>\n<li><strong>FormControl</strong>：會追蹤<code>單個</code>表單控制元件的值和驗證狀態，簡單來說他會負責追蹤畫面中一個綁定的 <code>&lt;input&gt;</code> 元素的內容。</li>\n<li><strong>FormGroup</strong>：會追蹤<code>多個</code>表單控制元件的值和狀態，簡單來說他像是 javeascript 的 object，裡面包含了很多個不同的表單控制元件，可能由多個 FormControl 或 FormArray 所組成，甚至裡面在包含一個 FormGroup。</li>\n<li><strong>FormArray</strong>： 會追蹤表單控制陣列中的值和狀態，簡單來說可以想像是 FormControl 的陣列。</li>\n<li><strong>ControlValueAccessor</strong>：在 Angular FormControl instnce 與 DOM 之間建立了一個溝通的橋樑。</li>\n</ul>\n<h2 id=\"Setup-in-reactive-forms\"><a href=\"#Setup-in-reactive-forms\" class=\"headerlink\" title=\"Setup in reactive forms\"></a>Setup in reactive forms</h2><p>使用 reactive forms 可以直接在 component 中定義你的表單模型，<code>[formControl]</code>  directive 會使用 <code>internal value accessor</code> 將創建的 FormControl intance 鏈結到 view 中被綁定的單個輸入元素，來舉個例子吧</p>\n<ol>\n<li><p>首先先在 app.module.ts 中引入 Form module</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span>, <span class=\"title class_\">ReactiveFormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ReactiveFormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中建立 FormControl</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  favoriteColorControl = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);                 <span class=\"comment\">// (2)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/forms</code> 中引入 FormControl</li>\n<li>(2): 將 FormControl 實例化並賦予給 component 的 property</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中綁定表單控制元件</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      Favorite Color: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;favoriteColorControl&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">![https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![img](https://i.imgur.com/TOrJdYH.gif)</span><br><span class=\"line\"></span><br><span class=\"line\">將 `<span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>` 元件與 formControl 綁定後，他會追蹤畫面中 `<span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>` 內容的變化並將它傳遞給 component 中被綁定的 property ( favoriteColorControl )，其實跟著上面的範例是無法在 console 中獲得輸入的值，要怎麼獲得我之後會詳細講解。</span><br><span class=\"line\"></span><br><span class=\"line\">## Setup in template-driven forms</span><br><span class=\"line\"></span><br><span class=\"line\">接著來看如何建立 template-dirven forms 的表單控制模型，在 template-dirven forms 中的控制模型是隱性的，使用 directive `MgModel` 為給定的表單元素創建和管理一個 formControl 實例，一樣舉個例子</span><br><span class=\"line\"></span><br><span class=\"line\">1. 在 app.component.ts 中新增一個 property</span><br><span class=\"line\"></span><br><span class=\"line\">    ```typescript</span><br><span class=\"line\">    import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Component(&#123;</span><br><span class=\"line\">      selector: &#x27;app-template-favorite-color&#x27;,</span><br><span class=\"line\">      templateUrl: &#x27;./app.component.html&#x27;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    export class FavoriteColorComponent &#123;</span><br><span class=\"line\">      favoriteColor = &#x27;&#x27;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中使用 <code>NgModel</code> 綁定剛剛建立的 property</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  Favorite Color: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;favoriteColor&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png\"></p>\n<p><img src=\"https://i.imgur.com/k4EhckL.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到透過 <code>NgModel</code> 將指定的 property 綁定，當畫面中的表單元素內容發生變化時會傳遞給 component 中被綁定的 property，一樣上面的範例是無法看到 console 的內容之後會講解。</p>\n<h1 id=\"Data-flow-in-forms\"><a href=\"#Data-flow-in-forms\" class=\"headerlink\" title=\"Data flow in forms\"></a>Data flow in forms</h1><p>介紹完如何綁定表單的控制元件後，接著要來看看 Form 的數據流，當你的專案中有使用表單時，Angular 必須保持 view 與 component 模型內容的同步，當使用者更改畫面中的值時這個新的值需要立即的反映在數據模型中，相同的當數據模型的值更新時也需要立馬反映在畫面中，而兩種不同的 form 有著不同的處理數據與更改畫面的方式。</p>\n<h2 id=\"Data-flow-in-reactive-forms\"><a href=\"#Data-flow-in-reactive-forms\" class=\"headerlink\" title=\"Data flow in reactive forms\"></a>Data flow in reactive forms</h2><p>在 reactive forms 中 view 的每一個表單元素都直接鏈結到 component 中的表單模型（formControl instance），從 view 到表單模型以及表單模型到 view 的更新是<code>同步</code>的，不依賴於 UI 的呈現方式。</p>\n<p>view 到表單模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：</p>\n<ol>\n<li>使用者在 <code>&lt;input&gt;</code> 中輸入了一個值，例子中是輸入了喜歡的顏色（blue）。</li>\n<li>表單輸入元素（<code>&lt;input&gt;</code>）發送了帶有最新值（blue） 的<code>輸入事件</code>。</li>\n<li><code>control value accessor</code> 會監聽輸入元素的事件，當接收到事件後會立即將最新的值中繼到 FormControl 實例上</li>\n<li>FormControl 實例會通過 <code>valueChanges</code> 這個 <code>observable</code> 發出最新的值（ valueChange.subscribe(val &#x3D;&gt; { … }) ）。</li>\n<li>valueChanges observable 的任何訂閱者都會收到這個最新的值。</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png\"></p>\n<p>而表單模型到 view 顯示了對表單模型進行編成更改後如何通過以下步驟更新 view 的值：</p>\n<ol>\n<li>調用 <code>setValue()</code> method 用於更新 FormControl 的內容。</li>\n<li>FormControl 實例通過 valueChanges observable 發出新的值。</li>\n<li>valueChanges observable 的任何訂閱者都會收到新的值。</li>\n<li><code>control value accessor</code> 使用這個最新的值更新畫面表單元素</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png\"></p>\n<h2 id=\"Data-flow-in-template-driven-forms\"><a href=\"#Data-flow-in-template-driven-forms\" class=\"headerlink\" title=\"Data flow in template-driven forms\"></a>Data flow in template-driven forms</h2><p>在 template-driven forms 中每個表單元素都鏈結到一個內部管理表單模型的 directive，從 view 到模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：</p>\n<ol>\n<li>使用者在畫面中的 <code>&lt;input&gt;</code> 中輸入新的值（blue）。</li>\n<li><code>&lt;input&gt;</code> 元素發出一個帶有 blue 的 <code>input 事件</code>。</li>\n<li>附加在 <code>&lt;input&gt;</code> 的 <code>control value accessor</code> 會觸發 FormControl 實例上的 setValue() method。</li>\n<li>FormControl 實例通過 <code>valueChanges observable</code> 發出新的值。</li>\n<li>valueChanges observable 的任何訂閱者都會收到新的值。</li>\n<li>control value accessor 還會調用 <code>NgModel.viewToModelUpdater()</code>，這個 method 會發出一個 <code>ngModelChange</code> 的事件。</li>\n<li>因為 component 的 template 對 <code>favoriteColor</code> property 使用雙向屬性綁定 (Two-way binding) ，所以 component 中的 favoriteColor property 被更新為 <code>ngModelChange</code> 事件發出的值 （blue）。</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png\"></p>\n<p>表單模型到 view 顯示了當 favoriteColor 從藍色變為紅色時，數據會如何從表單模型流向 view，通果以下步驟：</p>\n<ol>\n<li>在 component 中更新 property favoriteColor 的值。</li>\n<li>變更檢測開始。</li>\n<li>在變更檢測期間，Lifecycle method <code>ngOnChanges</code> 在 <code>NgModel</code> directive 實例上被調用，因為他的 input binding 發生更改。</li>\n<li>ngOnChanges() 透過<code>非同步</code>的方式設置 FormControl 實例的值</li>\n<li>變更檢測完成。</li>\n<li>FormControl 實例通過 valueChanges observable 發出最新的值。</li>\n<li>valueChanges observable 的任何訂閱者都會收到新的值。</li>\n<li><code>control value accessor</code> 會使用最新的 favoriteColor 值更新 view 中的表單輸入元素</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png\"></p>\n<h2 id=\"Mutability-of-the-data-model\"><a href=\"#Mutability-of-the-data-model\" class=\"headerlink\" title=\"Mutability of the data model\"></a>Mutability of the data model</h2><p>更改和追蹤的 method 在兩種不同的 form 會有不同的作用：</p>\n<ul>\n<li><strong>Reactive forms</strong>：通過將表單數據模型作為<code>不可更改</code>的數據結構用來保持表單數據模型的純淨，每次在表單數據模型上觸發更改時，FormControl 實例都會返回一個<code>新的</code>表單數據模型而不是更改現有的模型，這使你可以通過 FormControl 的 <code>Observable</code> 追蹤表單數據模型的更改，讓更改檢測更有效，因為他只要追蹤 FormControl 的更改，由於數據的更新遵循 reactive 的模式，所以可以使用 observable 的操作符改變表單數據。</li>\n<li><strong>Template-driven forms</strong>：依靠<code>雙向數據綁定</code>的可變性在 template 中進行更改後也更改 component 中的 property，由於在使用雙向數據綁定時沒有辦法只跟蹤表單數據模型，所以效率較低。</li>\n</ul>\n<p>以上面例子而言兩種不同的 form 對於數據的變更處理：</p>\n<ul>\n<li>對於 reactive forms 來說，當 FormControl 的值更新時，會返回一個新的值。</li>\n<li>對於 template-driven forms 來說當更新值時會將上一個內容取代為新的值。</li>\n</ul>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中介紹了 Angular 的兩種不同的 Form，分別是 <code>Reactive forms</code> 與 <code>template-driven forms</code>，雖然兩種方法都可以做到與使用者的互動，但是還是有些的不同，<code>Reactive forms</code> 有更高的可擴展性、可重用性和可測試性，而 <code>template-driven forms </code> 則是使用雙向綁定的方式將 component 的 property 與 template 的輸入元件綁定，所以常用在比較簡單的 Form 結構上。</p>\n<p>雖然在本篇中簡單的介紹了該如何使用 <code>Reactive forms</code> 與 <code>template-driven forms</code>，不過只有稍微提到而已，接下來會分別對他們兩個做比較詳細的介紹與如何使用，那就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/forms-overview\">Angualr.io - Introduction to forms in Angular</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>從本章開始會進入 Angular Form 的部分，在現代網頁中與使用者互動的過程變得越來越重要，其中最主要的便是 Form，從一開始的登陸頁面到對商品或對網頁中元素的設定都需要使用到 Form 來取得使用者輸入的資料，也需要對使用者輸入的資料做驗證以防使用者輸入了非格式的數據導致出錯。</p>\n<p>Angular 提供了兩種不同的方法來處理使用者的輸入，分別是 <code>reactive</code> 與 <code>template-driven</code>，兩種方法都是從 view 中捕獲使用者輸入事件、驗證用戶輸入、創建表單模型或更新數據模型，本篇會大概介紹這兩種方法以及他們之間的差別，那就繼續往下看吧！</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cYDUalx1rV.png\"></p>","more":"<h1 id=\"Choosing-an-approach\"><a href=\"#Choosing-an-approach\" class=\"headerlink\" title=\"Choosing an approach\"></a>Choosing an approach</h1><p><code>Reactive forms</code> 和 <code>template-driven forms</code> 以不同的方式處理和管理表單數據，他們各有各自的優勢：</p>\n<ul>\n<li><strong>Reactive forms</strong>：提供對底層表單 object 的最直接且明顯的訪問，具有更高的可擴展性、可重用性和可測試性。</li>\n<li><strong>Template-driven forms</strong>：依賴 template 中的 directive 來創建或操作底層表單 object，常用於添加<code>簡單</code>的表單，他很容易被添加到專案中但他的擴展性與可測試性比較差。</li>\n</ul>\n<h2 id=\"Key-differences\"><a href=\"#Key-differences\" class=\"headerlink\" title=\"Key differences\"></a>Key differences</h2><p>可以透過一張表單來總結 <code>Reactive forms</code> 和 <code>template-driven forms</code> 之間的主要區別</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Reactive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Setup of form model</td>\n<td align=\"center\">明顯的，在 Component 中創建</td>\n<td align=\"center\">隱式的，由 directive 創建</td>\n</tr>\n<tr>\n<td>Data model</td>\n<td align=\"center\">結構化和不可變</td>\n<td align=\"center\">非結構化且可變</td>\n</tr>\n<tr>\n<td>Data flow</td>\n<td align=\"center\">同步</td>\n<td align=\"center\">非同步</td>\n</tr>\n<tr>\n<td>Form validation</td>\n<td align=\"center\">透過 function</td>\n<td align=\"center\">透過 directive</td>\n</tr>\n</tbody></table>\n<h2 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h2><p>如果 Form 是你專案中的核心部分的話，那麼就需要將整個 Form 模型重複使用於各個不同的 Component，所以可伸縮性就非常重要。</p>\n<p>Reactive forms 比 template-driven forms <code>更具有可擴展性</code> ，他提供了對底層表單 API 的直接訪問，並在 view 和數據模型之間使用<code>同步</code>的數據流，這讓你創建大型的表單變得更加容易，他也需要比較少的測試設置，並且測試不需要深入了解就可以正確的測試表單的更新和驗證。</p>\n<p>相較於 Reactive forms 而言 Template-driven forms 比較常用在 <code>簡單且不可重複使用的場景</code>，他對底層表單 API 的訪問比較抽象，並在 view 與數據模型之間使用<code>非同步</code>的數據流，由於他的對 API 的訪問較為抽象所以對於測試來說比較不好撰寫，非常需要依賴手動更改檢測執行才能成功，需要非常多的設置。</p>\n<h1 id=\"Setting-up-the-form-model\"><a href=\"#Setting-up-the-form-model\" class=\"headerlink\" title=\"Setting up the form model\"></a>Setting up the form model</h1><p><code>Reactive forms</code> 和 <code>template-driven forms</code> 都會追蹤使用者與畫面中的表單和 Component 中表單數據之間的變化，他們在底層來說是共享同一個地層構建模塊，但在創建和管理表單控制實例的方法不同。</p>\n<h2 id=\"Common-form-foundation-classes\"><a href=\"#Common-form-foundation-classes\" class=\"headerlink\" title=\"Common form foundation classes\"></a>Common form foundation classes</h2><p>Reactive forms 與 template-dirven forms 都建立在以下的 base classes 之上：</p>\n<ul>\n<li><strong>FormControl</strong>：會追蹤<code>單個</code>表單控制元件的值和驗證狀態，簡單來說他會負責追蹤畫面中一個綁定的 <code>&lt;input&gt;</code> 元素的內容。</li>\n<li><strong>FormGroup</strong>：會追蹤<code>多個</code>表單控制元件的值和狀態，簡單來說他像是 javeascript 的 object，裡面包含了很多個不同的表單控制元件，可能由多個 FormControl 或 FormArray 所組成，甚至裡面在包含一個 FormGroup。</li>\n<li><strong>FormArray</strong>： 會追蹤表單控制陣列中的值和狀態，簡單來說可以想像是 FormControl 的陣列。</li>\n<li><strong>ControlValueAccessor</strong>：在 Angular FormControl instnce 與 DOM 之間建立了一個溝通的橋樑。</li>\n</ul>\n<h2 id=\"Setup-in-reactive-forms\"><a href=\"#Setup-in-reactive-forms\" class=\"headerlink\" title=\"Setup in reactive forms\"></a>Setup in reactive forms</h2><p>使用 reactive forms 可以直接在 component 中定義你的表單模型，<code>[formControl]</code>  directive 會使用 <code>internal value accessor</code> 將創建的 FormControl intance 鏈結到 view 中被綁定的單個輸入元素，來舉個例子吧</p>\n<ol>\n<li><p>首先先在 app.module.ts 中引入 Form module</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span>, <span class=\"title class_\">ReactiveFormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ReactiveFormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中建立 FormControl</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  favoriteColorControl = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);                 <span class=\"comment\">// (2)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/forms</code> 中引入 FormControl</li>\n<li>(2): 將 FormControl 實例化並賦予給 component 的 property</li>\n</ul>\n</li>\n<li><p>在 app.component.html 中綁定表單控制元件</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      Favorite Color: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;favoriteColorControl&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">![https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png](https://ithelp.ithome.com.tw/upload/images/20210821/20124767foRImuOGGA.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![img](https://i.imgur.com/TOrJdYH.gif)</span><br><span class=\"line\"></span><br><span class=\"line\">將 `<span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>` 元件與 formControl 綁定後，他會追蹤畫面中 `<span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>` 內容的變化並將它傳遞給 component 中被綁定的 property ( favoriteColorControl )，其實跟著上面的範例是無法在 console 中獲得輸入的值，要怎麼獲得我之後會詳細講解。</span><br><span class=\"line\"></span><br><span class=\"line\">## Setup in template-driven forms</span><br><span class=\"line\"></span><br><span class=\"line\">接著來看如何建立 template-dirven forms 的表單控制模型，在 template-dirven forms 中的控制模型是隱性的，使用 directive `MgModel` 為給定的表單元素創建和管理一個 formControl 實例，一樣舉個例子</span><br><span class=\"line\"></span><br><span class=\"line\">1. 在 app.component.ts 中新增一個 property</span><br><span class=\"line\"></span><br><span class=\"line\">    ```typescript</span><br><span class=\"line\">    import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Component(&#123;</span><br><span class=\"line\">      selector: &#x27;app-template-favorite-color&#x27;,</span><br><span class=\"line\">      templateUrl: &#x27;./app.component.html&#x27;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    export class FavoriteColorComponent &#123;</span><br><span class=\"line\">      favoriteColor = &#x27;&#x27;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.html 中使用 <code>NgModel</code> 綁定剛剛建立的 property</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  Favorite Color: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;favoriteColor&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767k4yN0zPmBx.png\"></p>\n<p><img src=\"https://i.imgur.com/k4EhckL.gif\" alt=\"img\"></p>\n<p>在畫面中可以看到透過 <code>NgModel</code> 將指定的 property 綁定，當畫面中的表單元素內容發生變化時會傳遞給 component 中被綁定的 property，一樣上面的範例是無法看到 console 的內容之後會講解。</p>\n<h1 id=\"Data-flow-in-forms\"><a href=\"#Data-flow-in-forms\" class=\"headerlink\" title=\"Data flow in forms\"></a>Data flow in forms</h1><p>介紹完如何綁定表單的控制元件後，接著要來看看 Form 的數據流，當你的專案中有使用表單時，Angular 必須保持 view 與 component 模型內容的同步，當使用者更改畫面中的值時這個新的值需要立即的反映在數據模型中，相同的當數據模型的值更新時也需要立馬反映在畫面中，而兩種不同的 form 有著不同的處理數據與更改畫面的方式。</p>\n<h2 id=\"Data-flow-in-reactive-forms\"><a href=\"#Data-flow-in-reactive-forms\" class=\"headerlink\" title=\"Data flow in reactive forms\"></a>Data flow in reactive forms</h2><p>在 reactive forms 中 view 的每一個表單元素都直接鏈結到 component 中的表單模型（formControl instance），從 view 到表單模型以及表單模型到 view 的更新是<code>同步</code>的，不依賴於 UI 的呈現方式。</p>\n<p>view 到表單模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：</p>\n<ol>\n<li>使用者在 <code>&lt;input&gt;</code> 中輸入了一個值，例子中是輸入了喜歡的顏色（blue）。</li>\n<li>表單輸入元素（<code>&lt;input&gt;</code>）發送了帶有最新值（blue） 的<code>輸入事件</code>。</li>\n<li><code>control value accessor</code> 會監聽輸入元素的事件，當接收到事件後會立即將最新的值中繼到 FormControl 實例上</li>\n<li>FormControl 實例會通過 <code>valueChanges</code> 這個 <code>observable</code> 發出最新的值（ valueChange.subscribe(val &#x3D;&gt; { … }) ）。</li>\n<li>valueChanges observable 的任何訂閱者都會收到這個最新的值。</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/2012476752sXiPKza9.png\"></p>\n<p>而表單模型到 view 顯示了對表單模型進行編成更改後如何通過以下步驟更新 view 的值：</p>\n<ol>\n<li>調用 <code>setValue()</code> method 用於更新 FormControl 的內容。</li>\n<li>FormControl 實例通過 valueChanges observable 發出新的值。</li>\n<li>valueChanges observable 的任何訂閱者都會收到新的值。</li>\n<li><code>control value accessor</code> 使用這個最新的值更新畫面表單元素</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767KNa7RJO17u.png\"></p>\n<h2 id=\"Data-flow-in-template-driven-forms\"><a href=\"#Data-flow-in-template-driven-forms\" class=\"headerlink\" title=\"Data flow in template-driven forms\"></a>Data flow in template-driven forms</h2><p>在 template-driven forms 中每個表單元素都鏈結到一個內部管理表單模型的 directive，從 view 到模型顯示了當在畫面中輸入字串後從 view 通過以下步驟流向表單模型：</p>\n<ol>\n<li>使用者在畫面中的 <code>&lt;input&gt;</code> 中輸入新的值（blue）。</li>\n<li><code>&lt;input&gt;</code> 元素發出一個帶有 blue 的 <code>input 事件</code>。</li>\n<li>附加在 <code>&lt;input&gt;</code> 的 <code>control value accessor</code> 會觸發 FormControl 實例上的 setValue() method。</li>\n<li>FormControl 實例通過 <code>valueChanges observable</code> 發出新的值。</li>\n<li>valueChanges observable 的任何訂閱者都會收到新的值。</li>\n<li>control value accessor 還會調用 <code>NgModel.viewToModelUpdater()</code>，這個 method 會發出一個 <code>ngModelChange</code> 的事件。</li>\n<li>因為 component 的 template 對 <code>favoriteColor</code> property 使用雙向屬性綁定 (Two-way binding) ，所以 component 中的 favoriteColor property 被更新為 <code>ngModelChange</code> 事件發出的值 （blue）。</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767cOKhVGuSFk.png\"></p>\n<p>表單模型到 view 顯示了當 favoriteColor 從藍色變為紅色時，數據會如何從表單模型流向 view，通果以下步驟：</p>\n<ol>\n<li>在 component 中更新 property favoriteColor 的值。</li>\n<li>變更檢測開始。</li>\n<li>在變更檢測期間，Lifecycle method <code>ngOnChanges</code> 在 <code>NgModel</code> directive 實例上被調用，因為他的 input binding 發生更改。</li>\n<li>ngOnChanges() 透過<code>非同步</code>的方式設置 FormControl 實例的值</li>\n<li>變更檢測完成。</li>\n<li>FormControl 實例通過 valueChanges observable 發出最新的值。</li>\n<li>valueChanges observable 的任何訂閱者都會收到新的值。</li>\n<li><code>control value accessor</code> 會使用最新的 favoriteColor 值更新 view 中的表單輸入元素</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210821/20124767ZCtQxTcxVF.png\"></p>\n<h2 id=\"Mutability-of-the-data-model\"><a href=\"#Mutability-of-the-data-model\" class=\"headerlink\" title=\"Mutability of the data model\"></a>Mutability of the data model</h2><p>更改和追蹤的 method 在兩種不同的 form 會有不同的作用：</p>\n<ul>\n<li><strong>Reactive forms</strong>：通過將表單數據模型作為<code>不可更改</code>的數據結構用來保持表單數據模型的純淨，每次在表單數據模型上觸發更改時，FormControl 實例都會返回一個<code>新的</code>表單數據模型而不是更改現有的模型，這使你可以通過 FormControl 的 <code>Observable</code> 追蹤表單數據模型的更改，讓更改檢測更有效，因為他只要追蹤 FormControl 的更改，由於數據的更新遵循 reactive 的模式，所以可以使用 observable 的操作符改變表單數據。</li>\n<li><strong>Template-driven forms</strong>：依靠<code>雙向數據綁定</code>的可變性在 template 中進行更改後也更改 component 中的 property，由於在使用雙向數據綁定時沒有辦法只跟蹤表單數據模型，所以效率較低。</li>\n</ul>\n<p>以上面例子而言兩種不同的 form 對於數據的變更處理：</p>\n<ul>\n<li>對於 reactive forms 來說，當 FormControl 的值更新時，會返回一個新的值。</li>\n<li>對於 template-driven forms 來說當更新值時會將上一個內容取代為新的值。</li>\n</ul>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中介紹了 Angular 的兩種不同的 Form，分別是 <code>Reactive forms</code> 與 <code>template-driven forms</code>，雖然兩種方法都可以做到與使用者的互動，但是還是有些的不同，<code>Reactive forms</code> 有更高的可擴展性、可重用性和可測試性，而 <code>template-driven forms </code> 則是使用雙向綁定的方式將 component 的 property 與 template 的輸入元件綁定，所以常用在比較簡單的 Form 結構上。</p>\n<p>雖然在本篇中簡單的介紹了該如何使用 <code>Reactive forms</code> 與 <code>template-driven forms</code>，不過只有稍微提到而已，接下來會分別對他們兩個做比較詳細的介紹與如何使用，那就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/forms-overview\">Angualr.io - Introduction to forms in Angular</a></li>\n</ul>"},{"title":"Day24. Template-driven forms","date":"2021-09-24T00:52:28.000Z","_content":"\n在上一篇中提到了 Angular 中的兩種不同的 Form，介紹了他們在使用上以及細節上的不同，接著在本篇中將會著重介紹 Template-driven forms，那就繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png](https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png)\n\n<!-- more -->\n\n# What is Template-driven forms?\n\n顧名思義 Template-driven forms 就是一個透過 template 驅動的表單，或者可以說他是基於原生 HTML 所產生出來的表單，在 template 中使用 directive 和 attribute 來為指定的輸入元件進行綁定與驗證，所有的動作都會在 template 中完成，所以 component 只需要很少的設定，這點是和 reactive forms 最大的不同，而 Template-driven forms 具有以下的設置：\n\n- Form 是使用 `ngForm` directive 所設置的\n- 使用 `ngModel` directive 設置控制元件\n- ngModel 提供了雙向綁定，將 template 的輸入元素與 component 的 property 做綁定\n- 在 template 中利用 directive 驗證輸入內容\n\n所以對於 template-driven forms 的優點在於：\n\n- 在 component 中有較少的設置\n- 相較於 reactive forms 來說設置更簡單\n\n但他的缺點是：\n\n- 難以動態添加表單控制元件\n- 單元測試較為困難\n\n\n# Building a template-driven form\n\n在介紹完 template-driven form 後，接著直接使用一個例子來講解該如何使用 template form 吧，我們的目的再於創建一個 template-driven form，其 template 中的輸入元素綁定到 component 的數據 property，並建立輸入驗證以維護數據的完整性，在這次的例子中我會添加一點樣式讓畫面不會太醜 (![/images/emoticon/emoticon07.gif](/images/emoticon/emoticon07.gif)\n\n# Import FormsModule\n\n首先要做的就是在 app.module.ts 中從 `@angular/form` 中將 `FormsModule` 引入到 app.module 中 metadata 的 `imports` 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { } \n```\n\n\n# Build the basic form\n\n接著來建立一個基本的 form 吧，在建立 form 之前先把要 form 的數據模型給定義出來，所以新增一個 class 用於制定數據模型\n\n```typescript\n// hero.ts\n\nexport class Hero {\n  id!: number;\n  name!: string;\n  power!: string;\n  alterEgo?: string;\n  constructor(id: number, name: string, power: string, alterEgo?: string) {\n    this.id = id;\n    this.name = name;\n    this.power = power;\n    this.alterEgo = alterEgo;\n  }\n}\n```\n\n建立了名為 `Hero` 的 class，這樣就可以利用 `new` 將參數傳入後產生一個固定資料結構的 object，接著使用 Angular CLI 建立一個 component 用於處理 form 的邏輯與顯示\n\n```bash\nng generate component hero-form\n```\n\n建立完 component 後，接著在 hero-form.component.ts 中定義一些 form 的細節\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { Hero } from '../hero';                                                // (1)\n\n@Component({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css'],\n})\nexport class HeroFormComponent implements OnInit {\n  powers = ['Really Smart', 'Super Flexible', 'Super Hot', 'Weather Changer']; // (2)\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');           // (3)\n  submitted = false;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onSubmit() {                                                                 // (4)\n    this.submitted = true;\n  }\n}\n```\n\n- (1): 引入剛剛寫的 Hero class\n- (2): 建立一個 property 將它指定為 array 並將所以有超能力填入其中\n- (3): 使用 new 將剛剛寫的 Hero 實例化為一個 object 並賦予給 property model\n- (4): 新增一個 method 用於當使用者點擊 submit 按鈕時觸發\n\n定義完 app-hero.component.ts 後，接著將他的 selector 加入到 app.component.html 中\n\n```html\n<!-- app.component.html -->\n\n<app-hero-form></app-hero-form>\n```\n\n現在在畫面生應該是空空如也才對，不過這非常正常因為還沒撰寫 hero-form.component 的 view，現在就來把他補上吧，希望在畫面中呈現兩個帶有 `<label>` 的 `<input>` 還要有一個 `<select>` 最後要有一個 `<button>` 用來點擊 submit。\n\n```html\n<!-- hero-form.component.html -->\n\n<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n  <input type=\"text\" class=\"form-control\" id=\"name\" required/>\n\n  <label for=\"alterEgo\">Alter Ego</label>\n  <input type=\"text\" class=\"form-control\" id=\"alterEgo\" required/>\n\n  <label for=\"power\">Hero Power</label>\n  <select class=\"form-control\" id=\"power\" required>\n    <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{ pow }}</option>\n  </select>\n\n  <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n</div>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png](https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png)\n\n在畫面中會看到這樣的畫面，因為我有加一些 CSS 的樣式，所以這邊可以發揮你的 CSS 功力看是要做的跟我一樣還是做一個屬於你自己的，不過主要還是要介紹 template form 所以就不多做介紹。\n\n\n# Bind input controls to data properties\n\n在完成基本的 form 畫面後，下一步要使用 `雙向綁定 ( Two-way binding )` 將 template 中的輸入元素綁定到 component 中對應的 property，以便將使用者輸入的值更新綁定的 property，也讓使用程式更改的 property 的值可以呈現在畫面中。\n\nFormsModule 中聲明的 `ngModel` directive 可以讓 template-driven form 中的控制元件綁定到數據模型中的 property，當使用 Two-way binding 綁定 `[(ngModel)]` 後， Angualr 就可以跟蹤控制元件的值和使用者交互，這可以讓畫面與表單模型保持同步。\n\n1. 首先先更改 hero-form.component.html 中的內容\n\n    ```html\n    <!-- hero-form.component.html -->\n\n    <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        id=\"name\"\n        [(ngModel)]=\"model.name\"\n        name=\"name\"\n    \t\trequired\n    \t\t#name=\"ngModel\"\n      />\n\n      <label for=\"alterEgo\">Alter Ego</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        id=\"alterEgo\"\n        [(ngModel)]=\"model.alterEgo\"\n        name=\"alterEgo\"\n    \t\trequired\n    \t\t#alterEgo=\"ngModel\"\n      />\n\n      <label for=\"power\">Hero Power</label>\n      <select class=\"form-control\" id=\"power\" [(ngModel)]=\"model.power\" name=\"power\">\n        <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{ pow }}</option>\n      </select>\n\n      <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n    </div>\n    ```\n\n    在 Name 和 Alter Ego 兩個 `<label>` 下面的 `<input>` 利用 `[(ngModel)]` 綁定 component 中的 property，這邊要注意的是當你使用了 `[(ngModel)]` 綁定 property 後，需要定義他的 `name` 不然會報錯喔！\n\n2. 綁定完每一個輸入元素後接著來對整個 Form 進行綁定，在導入 `FormsModule` 時 Angular 會自動創建一個 `NgForm` directive 並將其附加到 template 中的 `<form>` 上面（因為 NgForm 具有匹配 `<form>` 的 select ），所以要訪問 NgForm 和整個表單狀態，需要聲明一個 template 引用變量。\n\n    ```html\n    <!-- hero-form.component.html -->\n\n    {{ model | json }}\n\n    <form #heroForm=\"ngForm\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"name\"\n          [(ngModel)]=\"model.name\"\n          name=\"name\"\n    \t\t\trequired\n    \t\t\t#name=\"ngModel\"\n        />\n\n        <label for=\"alterEgo\">Alter Ego</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"alterEgo\"\n          [(ngModel)]=\"model.alterEgo\"\n          name=\"alterEgo\"\n    \t\t\trequired\n    \t\t\tname=\"alterEgo\"\n        />\n\n        <label for=\"power\">Hero Power</label>\n        <select\n          class=\"form-control\"\n          id=\"power\"\n          [(ngModel)]=\"model.power\"\n          name=\"power\"\n        >\n          <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{ pow }}</option>\n        </select>\n\n        <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n      </div>\n    </form>\n    ```\n\n    使用 `<form>` 將之前寫的表單包起來並使用 template variable 設定 `#heroForm`，而 heroForm 這個變量現在是對控制整個表單的 `NgForm` directive 實例的 reference。\n\n    而在整個 form 上面添加了 `{{ model | json }}` 用於觀看 component property 的變化，可以在畫面中的輸入框更改名稱或選擇其他的 power 來看看 component 中的 property 會不會跟著改變。\n    \n\n# Track control states\n\n接著要來介紹 NgModel directive 的跟蹤控制元件的狀態，他會告訴你使用者是否觸碰了控制元件、值是否被更改了或是輸入的值是否無效，Angular 在控制元件上設置了特殊的 CSS Class 來反映他的狀況，如下表所示\n\n| State | Class is true | Class if false |\n|----------|:-------------:|:-------------:|\n| 控制元件是否被訪問 | ng-touched | ng-untouched\n| 控制元件的值是否被更改 | ng-dirty | ng-pristine\n| 控制元件的值是否有效 | ng-valid | ng-invalid\n\n此外 Angular 再提交時將 `ng-submitted` CSS Class 應該要用於 `<form>`，所以不放在上面一起介紹。\n\n## Observe control states\n\n要查看 Angular 如何添加和刪除 CSS Class，可以打開瀏覽器的開發人員工具並檢查英雄姓名的 `<input>`。\n\n1. 在 Name 的輸入框中填入新的值，可以看到 `<input>` 綁定的 CSS Class 發生更改\n2. 在 `<input>` 中執行以下操作會更改成不同的 CSS Class\n    1. 完全不去點擊和更改 `<input>` 的話，代表他是`未受影響的`、`原始`且`有效的`。\n    2. 點擊 `<input>` 後在點擊外部（不更改內容），現在已經訪問了控制元件，所以 CSS Class 從 `ng-untouched` 變為 `ng-touched`。\n    3. 在 `<input>` 的內容加入一個斜槓（ \\ ），他會變成 `ng-touched` 和 `ng-dirty`。\n    4. 完全移除 `<input>` 的內容這會使這個控制元件的值變為無效，因此會從 `ng-valid` 變為 `ng-invalid`。\n\n## Create visual feedback for states\n\n可以利用 `ng-valid` 和 `ng-invalid` 來處理當使用者填入非有效內容時會發生什麼事，當輸入無效時可以在輸入框下方顯示警告的畫面，也可以在警告的畫面中填入提醒或範例，可以在 Name 的後面加上一個 `<div>` 並利用 `[hidded]` 來控制是否顯示僅告訊息\n\n```html\n<label for=\"name\">Name</label>\n<input\n  type=\"text\"\n  class=\"form-control\"\n  id=\"name\"\n  [(ngModel)]=\"model.name\"\n  name=\"name\"\n  required\n  #name=\"ngModel\"\n/>\n<div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n  Name is required\n</div>\n```\n\n當 name 的值是 `valid` 和 `pristine` 的時候會將這個警告區域隱藏，而當輸入值為 `invalid` 實則會顯示\n\n![img](https://i.imgur.com/NNEaREt.gif)\n\n\n# Submit the form with ngSubmit\n\n在使用者填寫完表單後應該要有一個功能是提交使用者所寫的內容，以上面的例子來說就是下方的 `submit` 按鈕，但是目前還沒對他進行任何處理所以點了也沒反應，接著要來對這個按鈕進行更改\n\n1. 首先在 `<form>` 中添加一個 event binding，將 `(ngSubmit)` 綁定上去\n\n    ```html\n    <form (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\">\n    ```\n\n2. 接著使用 template variable `#heroForm` 來當作 submit 按鈕是否可以被點擊（是否所有內容都 valid），並將他的 type 改為 `submit`\n\n    ```html\n    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n    ```\n\n3. 在 hero-form.component.ts 中更改 onSubmit method\n\n    ```typescript\n    import { Component, ViewChild } from '@angular/core';                // (1) \n    import { NgForm } from '@angular/forms'; \n    import { Hero } from '../hero';\n\n    @Component({\n      selector: 'app-hero-form',\n      templateUrl: './hero-form.component.html',\n      styleUrls: ['./hero-form.component.css'],\n    })\n    export class HeroFormComponent {\n      @ViewChild('heroForm', { static: true }) heroForm!: NgForm;        // (2)\n      powers = ['Really Smart', 'Super Flexible', 'Super Hot', 'Weather Changer'];\n      model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n      submitted = false;\n\n      constructor() {}\n\n      onSubmit() {\n        console.log(this.heroForm.value);                                // (3)\n        this.submitted = true;\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `ViewChild`\n    - (2) 利用 @ViewChild 獲得訪問 template 中的 `heroForm`\n    - (3) 當使用者按下 submit 按鈕時顯示目前 Form 中所有欄位的內容（真實情況可以將這一組數據做別的處理）\n\n![img](https://i.imgur.com/R602aCy.gif)\n\n\n# 結論\n\n本章中介紹了如何建立一個 template-driven form，可以對數據進行修改、驗證等等，使用 `[(NgModel)]` 雙向綁定 component 中的 property，使用 `ngModel` 中的 `valid` 來判斷使用者輸入的內容是否符合規定，至於 submit 按鈕的 event binding 並不像之前的例子一樣綁定在 `<button>` 上，而是要將 `(ngSumbit)` 綁定在 `<form>` 上，這樣才可以獲得整個 form 的內容，而在 component 中要獲得表單的內容需要使用 `@ViewChild` 綁定 `<form>` 上的 template variable。\n\n下一篇將要介紹 Angualr 中的另一種 form，`Reactive forms` 他相較於 template form 來說會複雜一點，但是比較有彈性且比較可測試性，對於大型的 form 來說是非常好用且方便的，詳細的內容就明天再講解吧，那麼明天見吧。\n\n\n# Reference\n\n- [Angular.io - Building a template-driven form](https://angular.io/guide/forms#submit-the-form-with-ngsubmit)\n","source":"_posts/Angular/angular-24.md","raw":"---\ntitle: Day24. Template-driven forms\ndate: 2021-09-24 08:52:28\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一篇中提到了 Angular 中的兩種不同的 Form，介紹了他們在使用上以及細節上的不同，接著在本篇中將會著重介紹 Template-driven forms，那就繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png](https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png)\n\n<!-- more -->\n\n# What is Template-driven forms?\n\n顧名思義 Template-driven forms 就是一個透過 template 驅動的表單，或者可以說他是基於原生 HTML 所產生出來的表單，在 template 中使用 directive 和 attribute 來為指定的輸入元件進行綁定與驗證，所有的動作都會在 template 中完成，所以 component 只需要很少的設定，這點是和 reactive forms 最大的不同，而 Template-driven forms 具有以下的設置：\n\n- Form 是使用 `ngForm` directive 所設置的\n- 使用 `ngModel` directive 設置控制元件\n- ngModel 提供了雙向綁定，將 template 的輸入元素與 component 的 property 做綁定\n- 在 template 中利用 directive 驗證輸入內容\n\n所以對於 template-driven forms 的優點在於：\n\n- 在 component 中有較少的設置\n- 相較於 reactive forms 來說設置更簡單\n\n但他的缺點是：\n\n- 難以動態添加表單控制元件\n- 單元測試較為困難\n\n\n# Building a template-driven form\n\n在介紹完 template-driven form 後，接著直接使用一個例子來講解該如何使用 template form 吧，我們的目的再於創建一個 template-driven form，其 template 中的輸入元素綁定到 component 的數據 property，並建立輸入驗證以維護數據的完整性，在這次的例子中我會添加一點樣式讓畫面不會太醜 (![/images/emoticon/emoticon07.gif](/images/emoticon/emoticon07.gif)\n\n# Import FormsModule\n\n首先要做的就是在 app.module.ts 中從 `@angular/form` 中將 `FormsModule` 引入到 app.module 中 metadata 的 `imports` 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { } \n```\n\n\n# Build the basic form\n\n接著來建立一個基本的 form 吧，在建立 form 之前先把要 form 的數據模型給定義出來，所以新增一個 class 用於制定數據模型\n\n```typescript\n// hero.ts\n\nexport class Hero {\n  id!: number;\n  name!: string;\n  power!: string;\n  alterEgo?: string;\n  constructor(id: number, name: string, power: string, alterEgo?: string) {\n    this.id = id;\n    this.name = name;\n    this.power = power;\n    this.alterEgo = alterEgo;\n  }\n}\n```\n\n建立了名為 `Hero` 的 class，這樣就可以利用 `new` 將參數傳入後產生一個固定資料結構的 object，接著使用 Angular CLI 建立一個 component 用於處理 form 的邏輯與顯示\n\n```bash\nng generate component hero-form\n```\n\n建立完 component 後，接著在 hero-form.component.ts 中定義一些 form 的細節\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { Hero } from '../hero';                                                // (1)\n\n@Component({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css'],\n})\nexport class HeroFormComponent implements OnInit {\n  powers = ['Really Smart', 'Super Flexible', 'Super Hot', 'Weather Changer']; // (2)\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');           // (3)\n  submitted = false;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onSubmit() {                                                                 // (4)\n    this.submitted = true;\n  }\n}\n```\n\n- (1): 引入剛剛寫的 Hero class\n- (2): 建立一個 property 將它指定為 array 並將所以有超能力填入其中\n- (3): 使用 new 將剛剛寫的 Hero 實例化為一個 object 並賦予給 property model\n- (4): 新增一個 method 用於當使用者點擊 submit 按鈕時觸發\n\n定義完 app-hero.component.ts 後，接著將他的 selector 加入到 app.component.html 中\n\n```html\n<!-- app.component.html -->\n\n<app-hero-form></app-hero-form>\n```\n\n現在在畫面生應該是空空如也才對，不過這非常正常因為還沒撰寫 hero-form.component 的 view，現在就來把他補上吧，希望在畫面中呈現兩個帶有 `<label>` 的 `<input>` 還要有一個 `<select>` 最後要有一個 `<button>` 用來點擊 submit。\n\n```html\n<!-- hero-form.component.html -->\n\n<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n  <input type=\"text\" class=\"form-control\" id=\"name\" required/>\n\n  <label for=\"alterEgo\">Alter Ego</label>\n  <input type=\"text\" class=\"form-control\" id=\"alterEgo\" required/>\n\n  <label for=\"power\">Hero Power</label>\n  <select class=\"form-control\" id=\"power\" required>\n    <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{ pow }}</option>\n  </select>\n\n  <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n</div>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png](https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png)\n\n在畫面中會看到這樣的畫面，因為我有加一些 CSS 的樣式，所以這邊可以發揮你的 CSS 功力看是要做的跟我一樣還是做一個屬於你自己的，不過主要還是要介紹 template form 所以就不多做介紹。\n\n\n# Bind input controls to data properties\n\n在完成基本的 form 畫面後，下一步要使用 `雙向綁定 ( Two-way binding )` 將 template 中的輸入元素綁定到 component 中對應的 property，以便將使用者輸入的值更新綁定的 property，也讓使用程式更改的 property 的值可以呈現在畫面中。\n\nFormsModule 中聲明的 `ngModel` directive 可以讓 template-driven form 中的控制元件綁定到數據模型中的 property，當使用 Two-way binding 綁定 `[(ngModel)]` 後， Angualr 就可以跟蹤控制元件的值和使用者交互，這可以讓畫面與表單模型保持同步。\n\n1. 首先先更改 hero-form.component.html 中的內容\n\n    ```html\n    <!-- hero-form.component.html -->\n\n    <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        id=\"name\"\n        [(ngModel)]=\"model.name\"\n        name=\"name\"\n    \t\trequired\n    \t\t#name=\"ngModel\"\n      />\n\n      <label for=\"alterEgo\">Alter Ego</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        id=\"alterEgo\"\n        [(ngModel)]=\"model.alterEgo\"\n        name=\"alterEgo\"\n    \t\trequired\n    \t\t#alterEgo=\"ngModel\"\n      />\n\n      <label for=\"power\">Hero Power</label>\n      <select class=\"form-control\" id=\"power\" [(ngModel)]=\"model.power\" name=\"power\">\n        <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{ pow }}</option>\n      </select>\n\n      <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n    </div>\n    ```\n\n    在 Name 和 Alter Ego 兩個 `<label>` 下面的 `<input>` 利用 `[(ngModel)]` 綁定 component 中的 property，這邊要注意的是當你使用了 `[(ngModel)]` 綁定 property 後，需要定義他的 `name` 不然會報錯喔！\n\n2. 綁定完每一個輸入元素後接著來對整個 Form 進行綁定，在導入 `FormsModule` 時 Angular 會自動創建一個 `NgForm` directive 並將其附加到 template 中的 `<form>` 上面（因為 NgForm 具有匹配 `<form>` 的 select ），所以要訪問 NgForm 和整個表單狀態，需要聲明一個 template 引用變量。\n\n    ```html\n    <!-- hero-form.component.html -->\n\n    {{ model | json }}\n\n    <form #heroForm=\"ngForm\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"name\"\n          [(ngModel)]=\"model.name\"\n          name=\"name\"\n    \t\t\trequired\n    \t\t\t#name=\"ngModel\"\n        />\n\n        <label for=\"alterEgo\">Alter Ego</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"alterEgo\"\n          [(ngModel)]=\"model.alterEgo\"\n          name=\"alterEgo\"\n    \t\t\trequired\n    \t\t\tname=\"alterEgo\"\n        />\n\n        <label for=\"power\">Hero Power</label>\n        <select\n          class=\"form-control\"\n          id=\"power\"\n          [(ngModel)]=\"model.power\"\n          name=\"power\"\n        >\n          <option *ngFor=\"let pow of powers\" [value]=\"pow\">{{ pow }}</option>\n        </select>\n\n        <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n      </div>\n    </form>\n    ```\n\n    使用 `<form>` 將之前寫的表單包起來並使用 template variable 設定 `#heroForm`，而 heroForm 這個變量現在是對控制整個表單的 `NgForm` directive 實例的 reference。\n\n    而在整個 form 上面添加了 `{{ model | json }}` 用於觀看 component property 的變化，可以在畫面中的輸入框更改名稱或選擇其他的 power 來看看 component 中的 property 會不會跟著改變。\n    \n\n# Track control states\n\n接著要來介紹 NgModel directive 的跟蹤控制元件的狀態，他會告訴你使用者是否觸碰了控制元件、值是否被更改了或是輸入的值是否無效，Angular 在控制元件上設置了特殊的 CSS Class 來反映他的狀況，如下表所示\n\n| State | Class is true | Class if false |\n|----------|:-------------:|:-------------:|\n| 控制元件是否被訪問 | ng-touched | ng-untouched\n| 控制元件的值是否被更改 | ng-dirty | ng-pristine\n| 控制元件的值是否有效 | ng-valid | ng-invalid\n\n此外 Angular 再提交時將 `ng-submitted` CSS Class 應該要用於 `<form>`，所以不放在上面一起介紹。\n\n## Observe control states\n\n要查看 Angular 如何添加和刪除 CSS Class，可以打開瀏覽器的開發人員工具並檢查英雄姓名的 `<input>`。\n\n1. 在 Name 的輸入框中填入新的值，可以看到 `<input>` 綁定的 CSS Class 發生更改\n2. 在 `<input>` 中執行以下操作會更改成不同的 CSS Class\n    1. 完全不去點擊和更改 `<input>` 的話，代表他是`未受影響的`、`原始`且`有效的`。\n    2. 點擊 `<input>` 後在點擊外部（不更改內容），現在已經訪問了控制元件，所以 CSS Class 從 `ng-untouched` 變為 `ng-touched`。\n    3. 在 `<input>` 的內容加入一個斜槓（ \\ ），他會變成 `ng-touched` 和 `ng-dirty`。\n    4. 完全移除 `<input>` 的內容這會使這個控制元件的值變為無效，因此會從 `ng-valid` 變為 `ng-invalid`。\n\n## Create visual feedback for states\n\n可以利用 `ng-valid` 和 `ng-invalid` 來處理當使用者填入非有效內容時會發生什麼事，當輸入無效時可以在輸入框下方顯示警告的畫面，也可以在警告的畫面中填入提醒或範例，可以在 Name 的後面加上一個 `<div>` 並利用 `[hidded]` 來控制是否顯示僅告訊息\n\n```html\n<label for=\"name\">Name</label>\n<input\n  type=\"text\"\n  class=\"form-control\"\n  id=\"name\"\n  [(ngModel)]=\"model.name\"\n  name=\"name\"\n  required\n  #name=\"ngModel\"\n/>\n<div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n  Name is required\n</div>\n```\n\n當 name 的值是 `valid` 和 `pristine` 的時候會將這個警告區域隱藏，而當輸入值為 `invalid` 實則會顯示\n\n![img](https://i.imgur.com/NNEaREt.gif)\n\n\n# Submit the form with ngSubmit\n\n在使用者填寫完表單後應該要有一個功能是提交使用者所寫的內容，以上面的例子來說就是下方的 `submit` 按鈕，但是目前還沒對他進行任何處理所以點了也沒反應，接著要來對這個按鈕進行更改\n\n1. 首先在 `<form>` 中添加一個 event binding，將 `(ngSubmit)` 綁定上去\n\n    ```html\n    <form (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\">\n    ```\n\n2. 接著使用 template variable `#heroForm` 來當作 submit 按鈕是否可以被點擊（是否所有內容都 valid），並將他的 type 改為 `submit`\n\n    ```html\n    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n    ```\n\n3. 在 hero-form.component.ts 中更改 onSubmit method\n\n    ```typescript\n    import { Component, ViewChild } from '@angular/core';                // (1) \n    import { NgForm } from '@angular/forms'; \n    import { Hero } from '../hero';\n\n    @Component({\n      selector: 'app-hero-form',\n      templateUrl: './hero-form.component.html',\n      styleUrls: ['./hero-form.component.css'],\n    })\n    export class HeroFormComponent {\n      @ViewChild('heroForm', { static: true }) heroForm!: NgForm;        // (2)\n      powers = ['Really Smart', 'Super Flexible', 'Super Hot', 'Weather Changer'];\n      model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n      submitted = false;\n\n      constructor() {}\n\n      onSubmit() {\n        console.log(this.heroForm.value);                                // (3)\n        this.submitted = true;\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `ViewChild`\n    - (2) 利用 @ViewChild 獲得訪問 template 中的 `heroForm`\n    - (3) 當使用者按下 submit 按鈕時顯示目前 Form 中所有欄位的內容（真實情況可以將這一組數據做別的處理）\n\n![img](https://i.imgur.com/R602aCy.gif)\n\n\n# 結論\n\n本章中介紹了如何建立一個 template-driven form，可以對數據進行修改、驗證等等，使用 `[(NgModel)]` 雙向綁定 component 中的 property，使用 `ngModel` 中的 `valid` 來判斷使用者輸入的內容是否符合規定，至於 submit 按鈕的 event binding 並不像之前的例子一樣綁定在 `<button>` 上，而是要將 `(ngSumbit)` 綁定在 `<form>` 上，這樣才可以獲得整個 form 的內容，而在 component 中要獲得表單的內容需要使用 `@ViewChild` 綁定 `<form>` 上的 template variable。\n\n下一篇將要介紹 Angualr 中的另一種 form，`Reactive forms` 他相較於 template form 來說會複雜一點，但是比較有彈性且比較可測試性，對於大型的 form 來說是非常好用且方便的，詳細的內容就明天再講解吧，那麼明天見吧。\n\n\n# Reference\n\n- [Angular.io - Building a template-driven form](https://angular.io/guide/forms#submit-the-form-with-ngsubmit)\n","slug":"Angular/angular-24","published":1,"updated":"2022-02-16T06:41:36.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdw000t95w33qsfcm8k","content":"<p>在上一篇中提到了 Angular 中的兩種不同的 Form，介紹了他們在使用上以及細節上的不同，接著在本篇中將會著重介紹 Template-driven forms，那就繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"What-is-Template-driven-forms\"><a href=\"#What-is-Template-driven-forms\" class=\"headerlink\" title=\"What is Template-driven forms?\"></a>What is Template-driven forms?</h1><p>顧名思義 Template-driven forms 就是一個透過 template 驅動的表單，或者可以說他是基於原生 HTML 所產生出來的表單，在 template 中使用 directive 和 attribute 來為指定的輸入元件進行綁定與驗證，所有的動作都會在 template 中完成，所以 component 只需要很少的設定，這點是和 reactive forms 最大的不同，而 Template-driven forms 具有以下的設置：</p>\n<ul>\n<li>Form 是使用 <code>ngForm</code> directive 所設置的</li>\n<li>使用 <code>ngModel</code> directive 設置控制元件</li>\n<li>ngModel 提供了雙向綁定，將 template 的輸入元素與 component 的 property 做綁定</li>\n<li>在 template 中利用 directive 驗證輸入內容</li>\n</ul>\n<p>所以對於 template-driven forms 的優點在於：</p>\n<ul>\n<li>在 component 中有較少的設置</li>\n<li>相較於 reactive forms 來說設置更簡單</li>\n</ul>\n<p>但他的缺點是：</p>\n<ul>\n<li>難以動態添加表單控制元件</li>\n<li>單元測試較為困難</li>\n</ul>\n<h1 id=\"Building-a-template-driven-form\"><a href=\"#Building-a-template-driven-form\" class=\"headerlink\" title=\"Building a template-driven form\"></a>Building a template-driven form</h1><p>在介紹完 template-driven form 後，接著直接使用一個例子來講解該如何使用 template form 吧，我們的目的再於創建一個 template-driven form，其 template 中的輸入元素綁定到 component 的數據 property，並建立輸入驗證以維護數據的完整性，在這次的例子中我會添加一點樣式讓畫面不會太醜 (<img src=\"/images/emoticon/emoticon07.gif\" alt=\"/images/emoticon/emoticon07.gif\"></p>\n<h1 id=\"Import-FormsModule\"><a href=\"#Import-FormsModule\" class=\"headerlink\" title=\"Import FormsModule\"></a>Import FormsModule</h1><p>首先要做的就是在 app.module.ts 中從 <code>@angular/form</code> 中將 <code>FormsModule</code> 引入到 app.module 中 metadata 的 <code>imports</code> 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125; </span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Build-the-basic-form\"><a href=\"#Build-the-basic-form\" class=\"headerlink\" title=\"Build the basic form\"></a>Build the basic form</h1><p>接著來建立一個基本的 form 吧，在建立 form 之前先把要 form 的數據模型給定義出來，所以新增一個 class 用於制定數據模型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hero.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hero</span> &#123;</span><br><span class=\"line\">  id!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  power!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  alterEgo?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">number</span>, name: <span class=\"built_in\">string</span>, power: <span class=\"built_in\">string</span>, alterEgo?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">power</span> = power;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">alterEgo</span> = alterEgo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立了名為 <code>Hero</code> 的 class，這樣就可以利用 <code>new</code> 將參數傳入後產生一個固定資料結構的 object，接著使用 Angular CLI 建立一個 component 用於處理 form 的邏輯與顯示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component hero-form</span><br></pre></td></tr></table></figure>\n\n<p>建立完 component 後，接著在 hero-form.component.ts 中定義一些 form 的細節</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Hero</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hero&#x27;</span>;                                                <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hero-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hero-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./hero-form.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  powers = [<span class=\"string\">&#x27;Really Smart&#x27;</span>, <span class=\"string\">&#x27;Super Flexible&#x27;</span>, <span class=\"string\">&#x27;Super Hot&#x27;</span>, <span class=\"string\">&#x27;Weather Changer&#x27;</span>]; <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  model = <span class=\"keyword\">new</span> <span class=\"title class_\">Hero</span>(<span class=\"number\">18</span>, <span class=\"string\">&#x27;Dr IQ&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">powers</span>[<span class=\"number\">0</span>], <span class=\"string\">&#x27;Chuck Overstreet&#x27;</span>);           <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;                                                                 <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">submitted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 引入剛剛寫的 Hero class</li>\n<li>(2): 建立一個 property 將它指定為 array 並將所以有超能力填入其中</li>\n<li>(3): 使用 new 將剛剛寫的 Hero 實例化為一個 object 並賦予給 property model</li>\n<li>(4): 新增一個 method 用於當使用者點擊 submit 按鈕時觸發</li>\n</ul>\n<p>定義完 app-hero.component.ts 後，接著將他的 selector 加入到 app.component.html 中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-hero-form</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-hero-form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>現在在畫面生應該是空空如也才對，不過這非常正常因為還沒撰寫 hero-form.component 的 view，現在就來把他補上吧，希望在畫面中呈現兩個帶有 <code>&lt;label&gt;</code> 的 <code>&lt;input&gt;</code> 還要有一個 <code>&lt;select&gt;</code> 最後要有一個 <code>&lt;button&gt;</code> 用來點擊 submit。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hero-form.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">required</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;alterEgo&quot;</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;alterEgo&quot;</span> <span class=\"attr\">required</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;power&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let pow of powers&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;pow&quot;</span>&gt;</span>&#123;&#123; pow &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png\"></p>\n<p>在畫面中會看到這樣的畫面，因為我有加一些 CSS 的樣式，所以這邊可以發揮你的 CSS 功力看是要做的跟我一樣還是做一個屬於你自己的，不過主要還是要介紹 template form 所以就不多做介紹。</p>\n<h1 id=\"Bind-input-controls-to-data-properties\"><a href=\"#Bind-input-controls-to-data-properties\" class=\"headerlink\" title=\"Bind input controls to data properties\"></a>Bind input controls to data properties</h1><p>在完成基本的 form 畫面後，下一步要使用 <code>雙向綁定 ( Two-way binding )</code> 將 template 中的輸入元素綁定到 component 中對應的 property，以便將使用者輸入的值更新綁定的 property，也讓使用程式更改的 property 的值可以呈現在畫面中。</p>\n<p>FormsModule 中聲明的 <code>ngModel</code> directive 可以讓 template-driven form 中的控制元件綁定到數據模型中的 property，當使用 Two-way binding 綁定 <code>[(ngModel)]</code> 後， Angualr 就可以跟蹤控制元件的值和使用者交互，這可以讓畫面與表單模型保持同步。</p>\n<ol>\n<li><p>首先先更改 hero-form.component.html 中的內容</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hero-form.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t#<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;alterEgo&quot;</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t#<span class=\"attr\">alterEgo</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;power&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.power&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let pow of powers&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;pow&quot;</span>&gt;</span>&#123;&#123; pow &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 在 Name 和 Alter Ego 兩個 <code>&lt;label&gt;</code> 下面的 <code>&lt;input&gt;</code> 利用 <code>[(ngModel)]</code> 綁定 component 中的 property，這邊要注意的是當你使用了 <code>[(ngModel)]</code> 綁定 property 後，需要定義他的 <code>name</code> 不然會報錯喔！</p>\n</li>\n<li><p>綁定完每一個輸入元素後接著來對整個 Form 進行綁定，在導入 <code>FormsModule</code> 時 Angular 會自動創建一個 <code>NgForm</code> directive 並將其附加到 template 中的 <code>&lt;form&gt;</code> 上面（因為 NgForm 具有匹配 <code>&lt;form&gt;</code> 的 select ），所以要訪問 NgForm 和整個表單狀態，需要聲明一個 template 引用變量。</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hero-form.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; model | json &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">heroForm</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t#<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;alterEgo&quot;</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">name</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;power&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.power&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">&quot;power&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let pow of powers&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;pow&quot;</span>&gt;</span>&#123;&#123; pow &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>&lt;form&gt;</code> 將之前寫的表單包起來並使用 template variable 設定 <code>#heroForm</code>，而 heroForm 這個變量現在是對控制整個表單的 <code>NgForm</code> directive 實例的 reference。</p>\n<p> 而在整個 form 上面添加了 <code>&#123;&#123; model | json &#125;&#125;</code> 用於觀看 component property 的變化，可以在畫面中的輸入框更改名稱或選擇其他的 power 來看看 component 中的 property 會不會跟著改變。</p>\n</li>\n</ol>\n<h1 id=\"Track-control-states\"><a href=\"#Track-control-states\" class=\"headerlink\" title=\"Track control states\"></a>Track control states</h1><p>接著要來介紹 NgModel directive 的跟蹤控制元件的狀態，他會告訴你使用者是否觸碰了控制元件、值是否被更改了或是輸入的值是否無效，Angular 在控制元件上設置了特殊的 CSS Class 來反映他的狀況，如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th align=\"center\">Class is true</th>\n<th align=\"center\">Class if false</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>控制元件是否被訪問</td>\n<td align=\"center\">ng-touched</td>\n<td align=\"center\">ng-untouched</td>\n</tr>\n<tr>\n<td>控制元件的值是否被更改</td>\n<td align=\"center\">ng-dirty</td>\n<td align=\"center\">ng-pristine</td>\n</tr>\n<tr>\n<td>控制元件的值是否有效</td>\n<td align=\"center\">ng-valid</td>\n<td align=\"center\">ng-invalid</td>\n</tr>\n</tbody></table>\n<p>此外 Angular 再提交時將 <code>ng-submitted</code> CSS Class 應該要用於 <code>&lt;form&gt;</code>，所以不放在上面一起介紹。</p>\n<h2 id=\"Observe-control-states\"><a href=\"#Observe-control-states\" class=\"headerlink\" title=\"Observe control states\"></a>Observe control states</h2><p>要查看 Angular 如何添加和刪除 CSS Class，可以打開瀏覽器的開發人員工具並檢查英雄姓名的 <code>&lt;input&gt;</code>。</p>\n<ol>\n<li>在 Name 的輸入框中填入新的值，可以看到 <code>&lt;input&gt;</code> 綁定的 CSS Class 發生更改</li>\n<li>在 <code>&lt;input&gt;</code> 中執行以下操作會更改成不同的 CSS Class<ol>\n<li>完全不去點擊和更改 <code>&lt;input&gt;</code> 的話，代表他是<code>未受影響的</code>、<code>原始</code>且<code>有效的</code>。</li>\n<li>點擊 <code>&lt;input&gt;</code> 後在點擊外部（不更改內容），現在已經訪問了控制元件，所以 CSS Class 從 <code>ng-untouched</code> 變為 <code>ng-touched</code>。</li>\n<li>在 <code>&lt;input&gt;</code> 的內容加入一個斜槓（ \\ ），他會變成 <code>ng-touched</code> 和 <code>ng-dirty</code>。</li>\n<li>完全移除 <code>&lt;input&gt;</code> 的內容這會使這個控制元件的值變為無效，因此會從 <code>ng-valid</code> 變為 <code>ng-invalid</code>。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Create-visual-feedback-for-states\"><a href=\"#Create-visual-feedback-for-states\" class=\"headerlink\" title=\"Create visual feedback for states\"></a>Create visual feedback for states</h2><p>可以利用 <code>ng-valid</code> 和 <code>ng-invalid</code> 來處理當使用者填入非有效內容時會發生什麼事，當輸入無效時可以在輸入框下方顯示警告的畫面，也可以在警告的畫面中填入提醒或範例，可以在 Name 的後面加上一個 <code>&lt;div&gt;</code> 並利用 <code>[hidded]</code> 來控制是否顯示僅告訊息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">  #<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">&quot;name.valid || name.pristine&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class=\"line\">  Name is required</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>當 name 的值是 <code>valid</code> 和 <code>pristine</code> 的時候會將這個警告區域隱藏，而當輸入值為 <code>invalid</code> 實則會顯示</p>\n<p><img src=\"https://i.imgur.com/NNEaREt.gif\" alt=\"img\"></p>\n<h1 id=\"Submit-the-form-with-ngSubmit\"><a href=\"#Submit-the-form-with-ngSubmit\" class=\"headerlink\" title=\"Submit the form with ngSubmit\"></a>Submit the form with ngSubmit</h1><p>在使用者填寫完表單後應該要有一個功能是提交使用者所寫的內容，以上面的例子來說就是下方的 <code>submit</code> 按鈕，但是目前還沒對他進行任何處理所以點了也沒反應，接著要來對這個按鈕進行更改</p>\n<ol>\n<li><p>首先在 <code>&lt;form&gt;</code> 中添加一個 event binding，將 <code>(ngSubmit)</code> 綁定上去</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span> #<span class=\"attr\">heroForm</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著使用 template variable <code>#heroForm</code> 來當作 submit 按鈕是否可以被點擊（是否所有內容都 valid），並將他的 type 改為 <code>submit</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;!heroForm.form.valid&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 hero-form.component.ts 中更改 onSubmit method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">ViewChild</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;                <span class=\"comment\">// (1) </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgForm</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Hero</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hero&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hero-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hero-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./hero-form.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroFormComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">&#x27;heroForm&#x27;</span>, &#123; <span class=\"attr\">static</span>: <span class=\"literal\">true</span> &#125;) heroForm!: <span class=\"title class_\">NgForm</span>;        <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  powers = [<span class=\"string\">&#x27;Really Smart&#x27;</span>, <span class=\"string\">&#x27;Super Flexible&#x27;</span>, <span class=\"string\">&#x27;Super Hot&#x27;</span>, <span class=\"string\">&#x27;Weather Changer&#x27;</span>];</span><br><span class=\"line\">  model = <span class=\"keyword\">new</span> <span class=\"title class_\">Hero</span>(<span class=\"number\">18</span>, <span class=\"string\">&#x27;Dr IQ&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">powers</span>[<span class=\"number\">0</span>], <span class=\"string\">&#x27;Chuck Overstreet&#x27;</span>);</span><br><span class=\"line\">  submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heroForm</span>.<span class=\"property\">value</span>);                                <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">submitted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>ViewChild</code></li>\n<li>(2) 利用 @ViewChild 獲得訪問 template 中的 <code>heroForm</code></li>\n<li>(3) 當使用者按下 submit 按鈕時顯示目前 Form 中所有欄位的內容（真實情況可以將這一組數據做別的處理）</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/R602aCy.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立一個 template-driven form，可以對數據進行修改、驗證等等，使用 <code>[(NgModel)]</code> 雙向綁定 component 中的 property，使用 <code>ngModel</code> 中的 <code>valid</code> 來判斷使用者輸入的內容是否符合規定，至於 submit 按鈕的 event binding 並不像之前的例子一樣綁定在 <code>&lt;button&gt;</code> 上，而是要將 <code>(ngSumbit)</code> 綁定在 <code>&lt;form&gt;</code> 上，這樣才可以獲得整個 form 的內容，而在 component 中要獲得表單的內容需要使用 <code>@ViewChild</code> 綁定 <code>&lt;form&gt;</code> 上的 template variable。</p>\n<p>下一篇將要介紹 Angualr 中的另一種 form，<code>Reactive forms</code> 他相較於 template form 來說會複雜一點，但是比較有彈性且比較可測試性，對於大型的 form 來說是非常好用且方便的，詳細的內容就明天再講解吧，那麼明天見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/forms#submit-the-form-with-ngsubmit\">Angular.io - Building a template-driven form</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一篇中提到了 Angular 中的兩種不同的 Form，介紹了他們在使用上以及細節上的不同，接著在本篇中將會著重介紹 Template-driven forms，那就繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767lIolI8gw9s.png\"></p>","more":"<h1 id=\"What-is-Template-driven-forms\"><a href=\"#What-is-Template-driven-forms\" class=\"headerlink\" title=\"What is Template-driven forms?\"></a>What is Template-driven forms?</h1><p>顧名思義 Template-driven forms 就是一個透過 template 驅動的表單，或者可以說他是基於原生 HTML 所產生出來的表單，在 template 中使用 directive 和 attribute 來為指定的輸入元件進行綁定與驗證，所有的動作都會在 template 中完成，所以 component 只需要很少的設定，這點是和 reactive forms 最大的不同，而 Template-driven forms 具有以下的設置：</p>\n<ul>\n<li>Form 是使用 <code>ngForm</code> directive 所設置的</li>\n<li>使用 <code>ngModel</code> directive 設置控制元件</li>\n<li>ngModel 提供了雙向綁定，將 template 的輸入元素與 component 的 property 做綁定</li>\n<li>在 template 中利用 directive 驗證輸入內容</li>\n</ul>\n<p>所以對於 template-driven forms 的優點在於：</p>\n<ul>\n<li>在 component 中有較少的設置</li>\n<li>相較於 reactive forms 來說設置更簡單</li>\n</ul>\n<p>但他的缺點是：</p>\n<ul>\n<li>難以動態添加表單控制元件</li>\n<li>單元測試較為困難</li>\n</ul>\n<h1 id=\"Building-a-template-driven-form\"><a href=\"#Building-a-template-driven-form\" class=\"headerlink\" title=\"Building a template-driven form\"></a>Building a template-driven form</h1><p>在介紹完 template-driven form 後，接著直接使用一個例子來講解該如何使用 template form 吧，我們的目的再於創建一個 template-driven form，其 template 中的輸入元素綁定到 component 的數據 property，並建立輸入驗證以維護數據的完整性，在這次的例子中我會添加一點樣式讓畫面不會太醜 (<img src=\"/images/emoticon/emoticon07.gif\" alt=\"/images/emoticon/emoticon07.gif\"></p>\n<h1 id=\"Import-FormsModule\"><a href=\"#Import-FormsModule\" class=\"headerlink\" title=\"Import FormsModule\"></a>Import FormsModule</h1><p>首先要做的就是在 app.module.ts 中從 <code>@angular/form</code> 中將 <code>FormsModule</code> 引入到 app.module 中 metadata 的 <code>imports</code> 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125; </span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Build-the-basic-form\"><a href=\"#Build-the-basic-form\" class=\"headerlink\" title=\"Build the basic form\"></a>Build the basic form</h1><p>接著來建立一個基本的 form 吧，在建立 form 之前先把要 form 的數據模型給定義出來，所以新增一個 class 用於制定數據模型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hero.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hero</span> &#123;</span><br><span class=\"line\">  id!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  power!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  alterEgo?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">number</span>, name: <span class=\"built_in\">string</span>, power: <span class=\"built_in\">string</span>, alterEgo?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">power</span> = power;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">alterEgo</span> = alterEgo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立了名為 <code>Hero</code> 的 class，這樣就可以利用 <code>new</code> 將參數傳入後產生一個固定資料結構的 object，接著使用 Angular CLI 建立一個 component 用於處理 form 的邏輯與顯示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component hero-form</span><br></pre></td></tr></table></figure>\n\n<p>建立完 component 後，接著在 hero-form.component.ts 中定義一些 form 的細節</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Hero</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hero&#x27;</span>;                                                <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hero-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hero-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./hero-form.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  powers = [<span class=\"string\">&#x27;Really Smart&#x27;</span>, <span class=\"string\">&#x27;Super Flexible&#x27;</span>, <span class=\"string\">&#x27;Super Hot&#x27;</span>, <span class=\"string\">&#x27;Weather Changer&#x27;</span>]; <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  model = <span class=\"keyword\">new</span> <span class=\"title class_\">Hero</span>(<span class=\"number\">18</span>, <span class=\"string\">&#x27;Dr IQ&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">powers</span>[<span class=\"number\">0</span>], <span class=\"string\">&#x27;Chuck Overstreet&#x27;</span>);           <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;                                                                 <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">submitted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 引入剛剛寫的 Hero class</li>\n<li>(2): 建立一個 property 將它指定為 array 並將所以有超能力填入其中</li>\n<li>(3): 使用 new 將剛剛寫的 Hero 實例化為一個 object 並賦予給 property model</li>\n<li>(4): 新增一個 method 用於當使用者點擊 submit 按鈕時觸發</li>\n</ul>\n<p>定義完 app-hero.component.ts 後，接著將他的 selector 加入到 app.component.html 中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-hero-form</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-hero-form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>現在在畫面生應該是空空如也才對，不過這非常正常因為還沒撰寫 hero-form.component 的 view，現在就來把他補上吧，希望在畫面中呈現兩個帶有 <code>&lt;label&gt;</code> 的 <code>&lt;input&gt;</code> 還要有一個 <code>&lt;select&gt;</code> 最後要有一個 <code>&lt;button&gt;</code> 用來點擊 submit。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hero-form.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">required</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;alterEgo&quot;</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;alterEgo&quot;</span> <span class=\"attr\">required</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;power&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let pow of powers&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;pow&quot;</span>&gt;</span>&#123;&#123; pow &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210823/20124767MZcnMB02me.png\"></p>\n<p>在畫面中會看到這樣的畫面，因為我有加一些 CSS 的樣式，所以這邊可以發揮你的 CSS 功力看是要做的跟我一樣還是做一個屬於你自己的，不過主要還是要介紹 template form 所以就不多做介紹。</p>\n<h1 id=\"Bind-input-controls-to-data-properties\"><a href=\"#Bind-input-controls-to-data-properties\" class=\"headerlink\" title=\"Bind input controls to data properties\"></a>Bind input controls to data properties</h1><p>在完成基本的 form 畫面後，下一步要使用 <code>雙向綁定 ( Two-way binding )</code> 將 template 中的輸入元素綁定到 component 中對應的 property，以便將使用者輸入的值更新綁定的 property，也讓使用程式更改的 property 的值可以呈現在畫面中。</p>\n<p>FormsModule 中聲明的 <code>ngModel</code> directive 可以讓 template-driven form 中的控制元件綁定到數據模型中的 property，當使用 Two-way binding 綁定 <code>[(ngModel)]</code> 後， Angualr 就可以跟蹤控制元件的值和使用者交互，這可以讓畫面與表單模型保持同步。</p>\n<ol>\n<li><p>首先先更改 hero-form.component.html 中的內容</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hero-form.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t#<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;alterEgo&quot;</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t#<span class=\"attr\">alterEgo</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;power&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.power&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let pow of powers&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;pow&quot;</span>&gt;</span>&#123;&#123; pow &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 在 Name 和 Alter Ego 兩個 <code>&lt;label&gt;</code> 下面的 <code>&lt;input&gt;</code> 利用 <code>[(ngModel)]</code> 綁定 component 中的 property，這邊要注意的是當你使用了 <code>[(ngModel)]</code> 綁定 property 後，需要定義他的 <code>name</code> 不然會報錯喔！</p>\n</li>\n<li><p>綁定完每一個輸入元素後接著來對整個 Form 進行綁定，在導入 <code>FormsModule</code> 時 Angular 會自動創建一個 <code>NgForm</code> directive 並將其附加到 template 中的 <code>&lt;form&gt;</code> 上面（因為 NgForm 具有匹配 <code>&lt;form&gt;</code> 的 select ），所以要訪問 NgForm 和整個表單狀態，需要聲明一個 template 引用變量。</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hero-form.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; model | json &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">heroForm</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t#<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;alterEgo&quot;</span>&gt;</span>Alter Ego<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">name</span>=<span class=\"string\">&quot;alterEgo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;power&quot;</span>&gt;</span>Hero Power<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;power&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.power&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">&quot;power&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let pow of powers&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;pow&quot;</span>&gt;</span>&#123;&#123; pow &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>&lt;form&gt;</code> 將之前寫的表單包起來並使用 template variable 設定 <code>#heroForm</code>，而 heroForm 這個變量現在是對控制整個表單的 <code>NgForm</code> directive 實例的 reference。</p>\n<p> 而在整個 form 上面添加了 <code>&#123;&#123; model | json &#125;&#125;</code> 用於觀看 component property 的變化，可以在畫面中的輸入框更改名稱或選擇其他的 power 來看看 component 中的 property 會不會跟著改變。</p>\n</li>\n</ol>\n<h1 id=\"Track-control-states\"><a href=\"#Track-control-states\" class=\"headerlink\" title=\"Track control states\"></a>Track control states</h1><p>接著要來介紹 NgModel directive 的跟蹤控制元件的狀態，他會告訴你使用者是否觸碰了控制元件、值是否被更改了或是輸入的值是否無效，Angular 在控制元件上設置了特殊的 CSS Class 來反映他的狀況，如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th align=\"center\">Class is true</th>\n<th align=\"center\">Class if false</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>控制元件是否被訪問</td>\n<td align=\"center\">ng-touched</td>\n<td align=\"center\">ng-untouched</td>\n</tr>\n<tr>\n<td>控制元件的值是否被更改</td>\n<td align=\"center\">ng-dirty</td>\n<td align=\"center\">ng-pristine</td>\n</tr>\n<tr>\n<td>控制元件的值是否有效</td>\n<td align=\"center\">ng-valid</td>\n<td align=\"center\">ng-invalid</td>\n</tr>\n</tbody></table>\n<p>此外 Angular 再提交時將 <code>ng-submitted</code> CSS Class 應該要用於 <code>&lt;form&gt;</code>，所以不放在上面一起介紹。</p>\n<h2 id=\"Observe-control-states\"><a href=\"#Observe-control-states\" class=\"headerlink\" title=\"Observe control states\"></a>Observe control states</h2><p>要查看 Angular 如何添加和刪除 CSS Class，可以打開瀏覽器的開發人員工具並檢查英雄姓名的 <code>&lt;input&gt;</code>。</p>\n<ol>\n<li>在 Name 的輸入框中填入新的值，可以看到 <code>&lt;input&gt;</code> 綁定的 CSS Class 發生更改</li>\n<li>在 <code>&lt;input&gt;</code> 中執行以下操作會更改成不同的 CSS Class<ol>\n<li>完全不去點擊和更改 <code>&lt;input&gt;</code> 的話，代表他是<code>未受影響的</code>、<code>原始</code>且<code>有效的</code>。</li>\n<li>點擊 <code>&lt;input&gt;</code> 後在點擊外部（不更改內容），現在已經訪問了控制元件，所以 CSS Class 從 <code>ng-untouched</code> 變為 <code>ng-touched</code>。</li>\n<li>在 <code>&lt;input&gt;</code> 的內容加入一個斜槓（ \\ ），他會變成 <code>ng-touched</code> 和 <code>ng-dirty</code>。</li>\n<li>完全移除 <code>&lt;input&gt;</code> 的內容這會使這個控制元件的值變為無效，因此會從 <code>ng-valid</code> 變為 <code>ng-invalid</code>。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Create-visual-feedback-for-states\"><a href=\"#Create-visual-feedback-for-states\" class=\"headerlink\" title=\"Create visual feedback for states\"></a>Create visual feedback for states</h2><p>可以利用 <code>ng-valid</code> 和 <code>ng-invalid</code> 來處理當使用者填入非有效內容時會發生什麼事，當輸入無效時可以在輸入框下方顯示警告的畫面，也可以在警告的畫面中填入提醒或範例，可以在 Name 的後面加上一個 <code>&lt;div&gt;</code> 並利用 <code>[hidded]</code> 來控制是否顯示僅告訊息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">  #<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">&quot;name.valid || name.pristine&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class=\"line\">  Name is required</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>當 name 的值是 <code>valid</code> 和 <code>pristine</code> 的時候會將這個警告區域隱藏，而當輸入值為 <code>invalid</code> 實則會顯示</p>\n<p><img src=\"https://i.imgur.com/NNEaREt.gif\" alt=\"img\"></p>\n<h1 id=\"Submit-the-form-with-ngSubmit\"><a href=\"#Submit-the-form-with-ngSubmit\" class=\"headerlink\" title=\"Submit the form with ngSubmit\"></a>Submit the form with ngSubmit</h1><p>在使用者填寫完表單後應該要有一個功能是提交使用者所寫的內容，以上面的例子來說就是下方的 <code>submit</code> 按鈕，但是目前還沒對他進行任何處理所以點了也沒反應，接著要來對這個按鈕進行更改</p>\n<ol>\n<li><p>首先在 <code>&lt;form&gt;</code> 中添加一個 event binding，將 <code>(ngSubmit)</code> 綁定上去</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span> #<span class=\"attr\">heroForm</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著使用 template variable <code>#heroForm</code> 來當作 submit 按鈕是否可以被點擊（是否所有內容都 valid），並將他的 type 改為 <code>submit</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;!heroForm.form.valid&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 hero-form.component.ts 中更改 onSubmit method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">ViewChild</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;                <span class=\"comment\">// (1) </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgForm</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Hero</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../hero&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-hero-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./hero-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./hero-form.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeroFormComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">&#x27;heroForm&#x27;</span>, &#123; <span class=\"attr\">static</span>: <span class=\"literal\">true</span> &#125;) heroForm!: <span class=\"title class_\">NgForm</span>;        <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  powers = [<span class=\"string\">&#x27;Really Smart&#x27;</span>, <span class=\"string\">&#x27;Super Flexible&#x27;</span>, <span class=\"string\">&#x27;Super Hot&#x27;</span>, <span class=\"string\">&#x27;Weather Changer&#x27;</span>];</span><br><span class=\"line\">  model = <span class=\"keyword\">new</span> <span class=\"title class_\">Hero</span>(<span class=\"number\">18</span>, <span class=\"string\">&#x27;Dr IQ&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">powers</span>[<span class=\"number\">0</span>], <span class=\"string\">&#x27;Chuck Overstreet&#x27;</span>);</span><br><span class=\"line\">  submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heroForm</span>.<span class=\"property\">value</span>);                                <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">submitted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>ViewChild</code></li>\n<li>(2) 利用 @ViewChild 獲得訪問 template 中的 <code>heroForm</code></li>\n<li>(3) 當使用者按下 submit 按鈕時顯示目前 Form 中所有欄位的內容（真實情況可以將這一組數據做別的處理）</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/R602aCy.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立一個 template-driven form，可以對數據進行修改、驗證等等，使用 <code>[(NgModel)]</code> 雙向綁定 component 中的 property，使用 <code>ngModel</code> 中的 <code>valid</code> 來判斷使用者輸入的內容是否符合規定，至於 submit 按鈕的 event binding 並不像之前的例子一樣綁定在 <code>&lt;button&gt;</code> 上，而是要將 <code>(ngSumbit)</code> 綁定在 <code>&lt;form&gt;</code> 上，這樣才可以獲得整個 form 的內容，而在 component 中要獲得表單的內容需要使用 <code>@ViewChild</code> 綁定 <code>&lt;form&gt;</code> 上的 template variable。</p>\n<p>下一篇將要介紹 Angualr 中的另一種 form，<code>Reactive forms</code> 他相較於 template form 來說會複雜一點，但是比較有彈性且比較可測試性，對於大型的 form 來說是非常好用且方便的，詳細的內容就明天再講解吧，那麼明天見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/forms#submit-the-form-with-ngsubmit\">Angular.io - Building a template-driven form</a></li>\n</ul>"},{"title":"Day25. Reactive forms (一)","date":"2021-09-25T05:49:10.000Z","_content":"\n上一篇中介紹完 Template-driven forms 後，接著再介紹 Angular 的另一種 form，那就是 `Reactive forms`，它提供了一種 `model-driven` 的方法來處理隨時間變化的表單輸入，本章中會介紹如何創建本章中會介紹如何創建和更新基本的表單控制元件、如何在 component 中使用多個控制元件、驗證表單的值以及創建動態表單，隨著需求新增換刪除控制元件。\n\n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg](https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg)\n\n<!-- more -->\n\n# Overview of reactive forms\n\nreactive forms 使用`顯示且不可變的`方法來管理表單在某個時間點的狀態，表單狀態在每次更新都會返回一個`新的`狀態，從而保持模型在每次更改間都保持完整，reactive forms 是圍繞著 `observable` 構建的，所以可以進行同步的訪問。\n\nreactive forms 還提供了簡易的測試路徑，因為可以確保數據在請求時是一致且可預測的，數據流中的任何操作者都可以安全的操作數據，與 template-driven forms 不同的點在於他提供對數據模型的`同步訪問`、`不變的 observable operator` 以及`可觀察數據流變化的跟蹤`。\n\n\n# Adding a basic form control\n\n要使用 reactive forms 的表單控制元件分為三個步驟：\n\n1. 在 app.module.ts 中引入 `ReactiveFormsModule`\n2. 在 component 中創建一個 `FormControl` 實例\n3. 在 template 中註冊 `FormControl`\n\n一樣舉個例子，將建立一個使用者將他們姓名填入畫面中的輸入框，透過 FormControl 捕獲到輸入的值並將它顯示出來。\n\n1. 從 `@angular/form` 中引入 `ReactiveFormsModule` 並將它添加到 ngModule 的 imports 中\n\n    ```typescript\n    import { ReactiveFormsModule } from '@angular/forms';\n\n    @NgModule({\n      imports: [\n        // other imports ...\n        ReactiveFormsModule\n      ],\n    })\n    export class AppModule { }\n    ```\n\n2. 使用 Angular CLI 建立一個 component\n\n    ```bash\n    ng generate component NameEditor\n    ```\n\n3. 在 name-editer.component.ts 中新增 FormControl\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl } from '@angular/forms';                     // (1)\n\n    @Component({\n      selector: 'app-name-editor',\n      templateUrl: './name-editor.component.html',\n      styleUrls: ['./name-editor.component.css']\n    })\n    export class NameEditorComponent implements OnInit {\n      name = new FormControl('');                                     // (2)\n      constructor() { }\n\n      ngOnInit(): void {\n      }\n\n    }\n    ```\n\n    - (1): 從 `@angular/forms` 中引入 `FormControl`\n    - (2): 給予 `FormControl` 一個參數（空字串）做為預設值並將它實例化\n4. 在 name-editer.component.html 中綁定 FormControl\n\n    ```html\n    <div class=\"formGroup\">\n        <label for=\"name\">Name: </label>\n        <input id=\"name\" type=\"text\" class=\"form-control\" [formControl]=\"name\">\n    </div>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png)\n\n## Displaying a form control value\n\n要顯示使用者輸入的值可以透過以下的方式：\n\n- 通過 `valueChanges observable` 可以在使用 AsyncPipe 的 template 或使用 `subscribe()` method 在 component 中監聽表單中值的變化\n- 使用 `value` property 他可以提供當前值的快照\n\n先介紹如何使用 `value` 取得當前值的快照\n\n```html\n<div class=\"formGroup\">\n    <label for=\"name\">Name: </label>\n    <input id=\"name\" type=\"text\" class=\"form-control\" [formControl]=\"name\">\n\n    <p>Value: {{ name.value }}</p>\n</div>\n```\n\n使用 property binding 將 FormControl 的實例綁定在 template 中\n\n![img](https://i.imgur.com/cRN4Q5z.gif)\n\n再來介紹可以在 component 中使用 `subscribe()` 監聽表單中值的變化\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-name-editor',\n  templateUrl: './name-editor.component.html',\n  styleUrls: ['./name-editor.component.css']\n})\nexport class NameEditorComponent implements OnInit {\n  name = new FormControl('');\n  constructor() { }\n\n  ngOnInit(): void {\n    this.name.valueChanges.subscribe(v => console.log(v));\n  }\n}\n```\n\n## Replacing a form control value\n\nreactive forms 可以以編成的方式更改控制元件的內容，可以讓你更靈活的更新值而無需與使用者交互，FormControl 實例提供了一個 `setValue()` method，可以更新表單控制元件的值並根據控制元件的結構驗證所提供值的結構，簡單來說如果你要更改的值的結構與控制元件的結構不相符的話會出錯，這個方法可以用在比如點擊編輯一個產品，透過 API 獲得當前產品的信息並將這些信息顯示在畫面中的每一個輸入元素上，下面舉一個簡單的例子：\n\n1. 在 name-editor.component.ts 中新增一個 method 當使用者點擊畫面按鈕時觸發\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl } from '@angular/forms';\n\n    @Component({\n      selector: 'app-name-editor',\n      templateUrl: './name-editor.component.html',\n      styleUrls: ['./name-editor.component.css']\n    })\n    export class NameEditorComponent implements OnInit {\n      name = new FormControl('');\n      constructor() { }\n\n      ngOnInit(): void {}\n\n      updateName() {\n        this.name.setValue('Nancy');\n      }\n    }\n    ```\n\n2. 在 name-editor.component.html 中新增一個 `<button>` 並綁定剛剛寫的 method\n\n    ```html\n    <div class=\"formGroup\">\n        <label for=\"name\">Name: </label>\n        <input id=\"name\" type=\"text\" class=\"form-control\" [formControl]=\"name\">\n\n        <button (click)=\"updateName()\" class=\"btn btn-success\">Update Name</button>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/rfcbRxx.gif)\n\n當點擊畫面中的按鈕後，會利用 FormControl 實例提供的 `serValue()` method 將控制元件的值更新。\n\n\n# Grouping form controls\n\n一個表單通常會包含幾個相關的控制元件，reactive forms 提供了兩種將多個相關控制元件分組到單個輸入表單的方法：\n\n1. form group 定義了一個帶有一組固定控制元件的表單，可以一起管理這些控制元件，也可進行嵌套以創建更複雜的表單\n2. form array 定義了一個`動態`的表單，可以在其中添加或刪除運行時的控制元件，也可以嵌套已進行更複雜的表單\n\n就像 FormControl  可以讓你控制單個輸入一樣，FormGroup 可以讓你跟蹤一組表單控制元件的表單狀態，在創建表單時 group 中的每一個控制元件都按`名稱`進行跟蹤，舉個例子\n\n1. 使用 Angular CLI 建立一個新的 Component\n\n    ```bash\n    ng generate component ProfileEditor\n    ```\n\n2. 在 profile-editor.component.ts 中創建 FormGroup 實例\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup } from '@angular/forms';              // (1)\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent implements OnInit {\n      profileForm = new FormGroup({                                       // (2)\n        firstName: new FormControl(''),\n        lastName: new FormControl(''),\n      });\n      \n      ngOnInit(): void {\n      }\n    }\n    ```\n\n    - (1): 從 '@angular/forms' 中引入 `FormControl` 與 `FormGroup`\n    - (2): 創建 `FormGroup` 的實例，一樣使用 `new` 關鍵字，將帶有 FormControl 的 object 傳入做為參數（初始值）\n3. 在 profile-editor.component.html 中綁定 FormGroup 和 FormControl\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\">\n      <div class=\"form-control\">\n        <label for=\"first-name\">First Name: </label>\n        <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n      </div>\n      <div class=\"form-control\">\n        <label for=\"last-name\">Last Name: </label>\n        <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n      </div>\n    </form>\n    ```\n\n    使用 `[formGroup]` directive 綁定 component 中的 FormGroup 實例，這樣會在 model 和表單輸入框之間建立一個通信層，FormControlName directive 提供的 `formControlName` 將每個單獨的輸入綁定到 FormGroup 中定義的 FormControl，FormControl 與各自綁定的輸入元素進行通信，他們之間的通信與單獨使用一個 FormControl 一樣。\n    \n## Save form data\n\nreactive forms 和 tempate-driven forms 一樣可以使用 `ngSubmit` 提交整個表單，舉個例子\n\n1. 在 profile-editor.component.ts 中添加一個 method 當使用者點擊 submit 後觸發\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent implements OnInit {\n      formValue: any;                                         // (1)\n      profileForm = new FormGroup({\n        firstName: new FormControl(''),\n        lastName: new FormControl(''),\n      });\n      \n      ngOnInit(): void {\n      }\n\n      onSubmit() {                                            // (2)\n        this.formValue = this.profileForm.value;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於儲存 form 的資料與顯示在畫面中\n    - (2): 將 formGroup 的數據賦予 formValue\n2. 在 profile-editor.component.html 中新增一個 `<button>` 並在 `<form>` 上綁定一個 event\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-control\">\n        <label for=\"first-name\">First Name: </label>\n        <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n      </div>\n      <div class=\"form-control\">\n        <label for=\"last-name\">Last Name: </label>\n        <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n    </form>\n\n    <h3>Form Value: {{ formValue | json }}</h3>\n    ```\n    \n![img](https://i.imgur.com/68oWBs3.gif)\n\n## Creating nested form groups\n\nFormGroup 除了可以接收含有 FormControl 的 object 之外，還可以接收 object 裡面包涵另一個 FormGroup 的嵌套結構，這樣可以將複雜的表單組合成同一個 FormGroup 更利於維護，將大型的表單分解為幾個更小且更易於管理的 group 最後再合併再一起，舉個例子吧\n\n1. 在 profile-editor.component.ts 中將原本的 FormGroup 中多添加一組 FormGroup\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent implements OnInit {\n      formValue: any;\n      profileForm = new FormGroup({\n        firstName: new FormControl(''),\n        lastName: new FormControl(''),\n        address: new FormGroup({\n          street: new FormControl(''),\n          city: new FormControl(''),\n          state: new FormControl(''),\n          zip: new FormControl('')\n        })\n      });\n      \n      ngOnInit(): void {\n      }\n\n      onSubmit() {\n        this.formValue = this.profileForm.value;\n      }\n    }\n    ```\n\n2. 在  profile-editor.component.html 中添加輸入元素並將它綁定下一層的 FormGroup 和 FormControl\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-control\">\n        <label for=\"first-name\">First Name: </label>\n        <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n      </div>\n      <div class=\"form-control\">\n        <label for=\"last-name\">Last Name: </label>\n        <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n      </div>\n\n      <div formGroupName=\"address\">\n        <h2>Address</h2>\n\n        <div class=\"form-control\">\n          <label for=\"street\">Street: </label>\n          <input id=\"street\" type=\"text\" formControlName=\"street\" />\n        </div>\n        <div class=\"form-control\">\n          <label for=\"city\">City: </label>\n          <input id=\"city\" type=\"text\" formControlName=\"city\" />\n        </div>\n        <div class=\"form-control\">\n          <label for=\"state\">State: </label>\n          <input id=\"state\" type=\"text\" formControlName=\"state\" />\n        </div>\n        <div class=\"form-control\">\n          <label for=\"zip\">Zip Code: </label>\n          <input id=\"zip\" type=\"text\" formControlName=\"zip\" />\n        </div>\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n    </form>\n\n    <h3>Form Value: {{ formValue | json }}</h3>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png)\n\n可以測試一下當把每一個輸入框都輸入數據後點擊 submit 看看輸出的結果會是如何。\n\n## Updating parts of the data model\n\n在介紹 FormControl 的 setValue() 時有提到當要設定的數據模型如果跟 FormGroup 的格式不同的話則會發生錯誤，這邊要來仔細講解一下，對於更新 FormGroup 中 FormControl 的值有三種方式：\n\n1. 使用 `setValue()` method 為單個 FormControl 設置新的值，但是如果使用 setValue() 的話必須嚴格遵守 FormGorup 的結構一次替換就要換掉整組，但是面對複雜的嵌套表單而言嚴格的檢查可以避免錯誤。\n2. 使用 `patchValue()` method 替換掉表單中的任何 FormControl 的內容，使用這個方法就可以不用遵守 FormGroup 的格式，可以做到只更新某一個部分的值，但是在面對複雜的表單時，就算發生錯誤時`不會提醒`只會默默地失敗。\n3. 使用 FormGroup 的 property `get`，用於獲得 FormGroup 中單個 FormControl 的實例，在對這個實力使用 `setValue()` 就可以只更改單一個 FormControl 的值\n\n先在 profile-editor.component.html 中新增一個 `<button>` 並綁掉更新數據個 event\n\n```html\n<button (click)=\"onUpdate()\" class=\"btn btn-success\">Update</button>\n```\n\n接著來介紹如何使用三種方式更新畫面中輸入框的內容\n\n1. 使用 setValue() 更改數據\n\n    ```typescript\n    onUpdate() {\n        this.profileForm.setValue({\n          firstName: 'Fandix',\n          lastName: 'Huang',\n          address: {\n            street: 'Queen',\n            city: 'New York',\n            state: 'New York',\n            zip: '123'\n          }\n        })\n      }\n    ```\n\n    ![img](https://i.imgur.com/cSlKpRo.gif)\n    \n2. 使用 patchValue() 更改部分 FormControl 的內容\n\n    ```typescript\n    onUpdate() {\n        this.profileForm.patchValue({\n          firstName: 'Fandix',\n          lastName: 'Huang',\n          address: {\n            street: 'Queen',\n            zip: '123'\n          }\n        })\n      }\n    ```\n\n    ![img](https://i.imgur.com/1qPLQNo.gif)\n    \n3. 使用 `get` 獲得單一 FomControl 並使用 setValue() 更新內容\n\n    ```typescript\n    onUpdate() {\n      this.profileForm.get('firstName')?.setValue('Fandix');\n      this.profileForm.get('address')?.get('city')?.setValue('New York');\n    }\n    ```\n\n    使用 `get` 獲得 `address` 的實例時，要記得獲得的還是 `FormGroup`，所以要獲得 `city` 的實例需要在調用一次 `get` 才能獲得下一層\n\n    ![img](https://i.imgur.com/wB8SB7O.gif)\n    \n\n# 結論\n\n本章中介紹了如何使用 `FormControl` 建立單一個表單控制元件，可以使用 FormControl 實例提供的 property `value` 獲得使用者輸入的數據，也可以使用 `subscribe()` 獲得表單的快照，而 reactive forms 的另一個特色就是可以利用編成的方式更改表單的內容，所以可以使用 `setValue()` 做到這個功能。\n\n也介紹了如何使用 `FormGroup` 將多個相關控制元件分組到單個輸入表單中，獲得表單數據的方法也是使用 FormGroup 實例提供的 value property，也可以使用 `subscribe()` 獲得表單的快照，至於設定表單內容的話可以使用 `setValue()`、`patchValue()` 兩種方式設定，但要注意的是使用 `setValue()` 需要注意填入的格式需要與 FormGroup 的格式相同不然會出錯，這對於複雜的嵌套表單而言可以起到很好的檢查作用，而使用 `patchValue()` 雖然不用滿足 FormGroup 的格式，的是在面對複雜的表單時，就算出錯他也`不會提醒`而會默默的設定失敗，所以要特別注意，最後可以使用 FormGroup 實例提供的 `get` property 可以獲得單獨的 FormControl 實例。\n\n由於 reactive forms 的篇章比較長，所以一樣分成兩篇講解，下一篇將會介紹如何使用 `FormBuilder` 利用比較簡單的方式建立 FormGroup 和 FormControl，也會介紹如何使用 FormArray 建立動態的表單，詳細的內容就明天再介紹吧，那麼明天見吧。\n\n\n# Reference\n\n- [Angular.io - Reactive forms](https://angular.io/guide/reactive-forms)","source":"_posts/Angular/angular-25.md","raw":"---\ntitle: Day25. Reactive forms (一)\ndate: 2021-09-25 13:49:10\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n上一篇中介紹完 Template-driven forms 後，接著再介紹 Angular 的另一種 form，那就是 `Reactive forms`，它提供了一種 `model-driven` 的方法來處理隨時間變化的表單輸入，本章中會介紹如何創建本章中會介紹如何創建和更新基本的表單控制元件、如何在 component 中使用多個控制元件、驗證表單的值以及創建動態表單，隨著需求新增換刪除控制元件。\n\n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg](https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg)\n\n<!-- more -->\n\n# Overview of reactive forms\n\nreactive forms 使用`顯示且不可變的`方法來管理表單在某個時間點的狀態，表單狀態在每次更新都會返回一個`新的`狀態，從而保持模型在每次更改間都保持完整，reactive forms 是圍繞著 `observable` 構建的，所以可以進行同步的訪問。\n\nreactive forms 還提供了簡易的測試路徑，因為可以確保數據在請求時是一致且可預測的，數據流中的任何操作者都可以安全的操作數據，與 template-driven forms 不同的點在於他提供對數據模型的`同步訪問`、`不變的 observable operator` 以及`可觀察數據流變化的跟蹤`。\n\n\n# Adding a basic form control\n\n要使用 reactive forms 的表單控制元件分為三個步驟：\n\n1. 在 app.module.ts 中引入 `ReactiveFormsModule`\n2. 在 component 中創建一個 `FormControl` 實例\n3. 在 template 中註冊 `FormControl`\n\n一樣舉個例子，將建立一個使用者將他們姓名填入畫面中的輸入框，透過 FormControl 捕獲到輸入的值並將它顯示出來。\n\n1. 從 `@angular/form` 中引入 `ReactiveFormsModule` 並將它添加到 ngModule 的 imports 中\n\n    ```typescript\n    import { ReactiveFormsModule } from '@angular/forms';\n\n    @NgModule({\n      imports: [\n        // other imports ...\n        ReactiveFormsModule\n      ],\n    })\n    export class AppModule { }\n    ```\n\n2. 使用 Angular CLI 建立一個 component\n\n    ```bash\n    ng generate component NameEditor\n    ```\n\n3. 在 name-editer.component.ts 中新增 FormControl\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl } from '@angular/forms';                     // (1)\n\n    @Component({\n      selector: 'app-name-editor',\n      templateUrl: './name-editor.component.html',\n      styleUrls: ['./name-editor.component.css']\n    })\n    export class NameEditorComponent implements OnInit {\n      name = new FormControl('');                                     // (2)\n      constructor() { }\n\n      ngOnInit(): void {\n      }\n\n    }\n    ```\n\n    - (1): 從 `@angular/forms` 中引入 `FormControl`\n    - (2): 給予 `FormControl` 一個參數（空字串）做為預設值並將它實例化\n4. 在 name-editer.component.html 中綁定 FormControl\n\n    ```html\n    <div class=\"formGroup\">\n        <label for=\"name\">Name: </label>\n        <input id=\"name\" type=\"text\" class=\"form-control\" [formControl]=\"name\">\n    </div>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png)\n\n## Displaying a form control value\n\n要顯示使用者輸入的值可以透過以下的方式：\n\n- 通過 `valueChanges observable` 可以在使用 AsyncPipe 的 template 或使用 `subscribe()` method 在 component 中監聽表單中值的變化\n- 使用 `value` property 他可以提供當前值的快照\n\n先介紹如何使用 `value` 取得當前值的快照\n\n```html\n<div class=\"formGroup\">\n    <label for=\"name\">Name: </label>\n    <input id=\"name\" type=\"text\" class=\"form-control\" [formControl]=\"name\">\n\n    <p>Value: {{ name.value }}</p>\n</div>\n```\n\n使用 property binding 將 FormControl 的實例綁定在 template 中\n\n![img](https://i.imgur.com/cRN4Q5z.gif)\n\n再來介紹可以在 component 中使用 `subscribe()` 監聽表單中值的變化\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-name-editor',\n  templateUrl: './name-editor.component.html',\n  styleUrls: ['./name-editor.component.css']\n})\nexport class NameEditorComponent implements OnInit {\n  name = new FormControl('');\n  constructor() { }\n\n  ngOnInit(): void {\n    this.name.valueChanges.subscribe(v => console.log(v));\n  }\n}\n```\n\n## Replacing a form control value\n\nreactive forms 可以以編成的方式更改控制元件的內容，可以讓你更靈活的更新值而無需與使用者交互，FormControl 實例提供了一個 `setValue()` method，可以更新表單控制元件的值並根據控制元件的結構驗證所提供值的結構，簡單來說如果你要更改的值的結構與控制元件的結構不相符的話會出錯，這個方法可以用在比如點擊編輯一個產品，透過 API 獲得當前產品的信息並將這些信息顯示在畫面中的每一個輸入元素上，下面舉一個簡單的例子：\n\n1. 在 name-editor.component.ts 中新增一個 method 當使用者點擊畫面按鈕時觸發\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl } from '@angular/forms';\n\n    @Component({\n      selector: 'app-name-editor',\n      templateUrl: './name-editor.component.html',\n      styleUrls: ['./name-editor.component.css']\n    })\n    export class NameEditorComponent implements OnInit {\n      name = new FormControl('');\n      constructor() { }\n\n      ngOnInit(): void {}\n\n      updateName() {\n        this.name.setValue('Nancy');\n      }\n    }\n    ```\n\n2. 在 name-editor.component.html 中新增一個 `<button>` 並綁定剛剛寫的 method\n\n    ```html\n    <div class=\"formGroup\">\n        <label for=\"name\">Name: </label>\n        <input id=\"name\" type=\"text\" class=\"form-control\" [formControl]=\"name\">\n\n        <button (click)=\"updateName()\" class=\"btn btn-success\">Update Name</button>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/rfcbRxx.gif)\n\n當點擊畫面中的按鈕後，會利用 FormControl 實例提供的 `serValue()` method 將控制元件的值更新。\n\n\n# Grouping form controls\n\n一個表單通常會包含幾個相關的控制元件，reactive forms 提供了兩種將多個相關控制元件分組到單個輸入表單的方法：\n\n1. form group 定義了一個帶有一組固定控制元件的表單，可以一起管理這些控制元件，也可進行嵌套以創建更複雜的表單\n2. form array 定義了一個`動態`的表單，可以在其中添加或刪除運行時的控制元件，也可以嵌套已進行更複雜的表單\n\n就像 FormControl  可以讓你控制單個輸入一樣，FormGroup 可以讓你跟蹤一組表單控制元件的表單狀態，在創建表單時 group 中的每一個控制元件都按`名稱`進行跟蹤，舉個例子\n\n1. 使用 Angular CLI 建立一個新的 Component\n\n    ```bash\n    ng generate component ProfileEditor\n    ```\n\n2. 在 profile-editor.component.ts 中創建 FormGroup 實例\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup } from '@angular/forms';              // (1)\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent implements OnInit {\n      profileForm = new FormGroup({                                       // (2)\n        firstName: new FormControl(''),\n        lastName: new FormControl(''),\n      });\n      \n      ngOnInit(): void {\n      }\n    }\n    ```\n\n    - (1): 從 '@angular/forms' 中引入 `FormControl` 與 `FormGroup`\n    - (2): 創建 `FormGroup` 的實例，一樣使用 `new` 關鍵字，將帶有 FormControl 的 object 傳入做為參數（初始值）\n3. 在 profile-editor.component.html 中綁定 FormGroup 和 FormControl\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\">\n      <div class=\"form-control\">\n        <label for=\"first-name\">First Name: </label>\n        <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n      </div>\n      <div class=\"form-control\">\n        <label for=\"last-name\">Last Name: </label>\n        <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n      </div>\n    </form>\n    ```\n\n    使用 `[formGroup]` directive 綁定 component 中的 FormGroup 實例，這樣會在 model 和表單輸入框之間建立一個通信層，FormControlName directive 提供的 `formControlName` 將每個單獨的輸入綁定到 FormGroup 中定義的 FormControl，FormControl 與各自綁定的輸入元素進行通信，他們之間的通信與單獨使用一個 FormControl 一樣。\n    \n## Save form data\n\nreactive forms 和 tempate-driven forms 一樣可以使用 `ngSubmit` 提交整個表單，舉個例子\n\n1. 在 profile-editor.component.ts 中添加一個 method 當使用者點擊 submit 後觸發\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent implements OnInit {\n      formValue: any;                                         // (1)\n      profileForm = new FormGroup({\n        firstName: new FormControl(''),\n        lastName: new FormControl(''),\n      });\n      \n      ngOnInit(): void {\n      }\n\n      onSubmit() {                                            // (2)\n        this.formValue = this.profileForm.value;\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於儲存 form 的資料與顯示在畫面中\n    - (2): 將 formGroup 的數據賦予 formValue\n2. 在 profile-editor.component.html 中新增一個 `<button>` 並在 `<form>` 上綁定一個 event\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-control\">\n        <label for=\"first-name\">First Name: </label>\n        <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n      </div>\n      <div class=\"form-control\">\n        <label for=\"last-name\">Last Name: </label>\n        <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n    </form>\n\n    <h3>Form Value: {{ formValue | json }}</h3>\n    ```\n    \n![img](https://i.imgur.com/68oWBs3.gif)\n\n## Creating nested form groups\n\nFormGroup 除了可以接收含有 FormControl 的 object 之外，還可以接收 object 裡面包涵另一個 FormGroup 的嵌套結構，這樣可以將複雜的表單組合成同一個 FormGroup 更利於維護，將大型的表單分解為幾個更小且更易於管理的 group 最後再合併再一起，舉個例子吧\n\n1. 在 profile-editor.component.ts 中將原本的 FormGroup 中多添加一組 FormGroup\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent implements OnInit {\n      formValue: any;\n      profileForm = new FormGroup({\n        firstName: new FormControl(''),\n        lastName: new FormControl(''),\n        address: new FormGroup({\n          street: new FormControl(''),\n          city: new FormControl(''),\n          state: new FormControl(''),\n          zip: new FormControl('')\n        })\n      });\n      \n      ngOnInit(): void {\n      }\n\n      onSubmit() {\n        this.formValue = this.profileForm.value;\n      }\n    }\n    ```\n\n2. 在  profile-editor.component.html 中添加輸入元素並將它綁定下一層的 FormGroup 和 FormControl\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-control\">\n        <label for=\"first-name\">First Name: </label>\n        <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n      </div>\n      <div class=\"form-control\">\n        <label for=\"last-name\">Last Name: </label>\n        <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n      </div>\n\n      <div formGroupName=\"address\">\n        <h2>Address</h2>\n\n        <div class=\"form-control\">\n          <label for=\"street\">Street: </label>\n          <input id=\"street\" type=\"text\" formControlName=\"street\" />\n        </div>\n        <div class=\"form-control\">\n          <label for=\"city\">City: </label>\n          <input id=\"city\" type=\"text\" formControlName=\"city\" />\n        </div>\n        <div class=\"form-control\">\n          <label for=\"state\">State: </label>\n          <input id=\"state\" type=\"text\" formControlName=\"state\" />\n        </div>\n        <div class=\"form-control\">\n          <label for=\"zip\">Zip Code: </label>\n          <input id=\"zip\" type=\"text\" formControlName=\"zip\" />\n        </div>\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n    </form>\n\n    <h3>Form Value: {{ formValue | json }}</h3>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png)\n\n可以測試一下當把每一個輸入框都輸入數據後點擊 submit 看看輸出的結果會是如何。\n\n## Updating parts of the data model\n\n在介紹 FormControl 的 setValue() 時有提到當要設定的數據模型如果跟 FormGroup 的格式不同的話則會發生錯誤，這邊要來仔細講解一下，對於更新 FormGroup 中 FormControl 的值有三種方式：\n\n1. 使用 `setValue()` method 為單個 FormControl 設置新的值，但是如果使用 setValue() 的話必須嚴格遵守 FormGorup 的結構一次替換就要換掉整組，但是面對複雜的嵌套表單而言嚴格的檢查可以避免錯誤。\n2. 使用 `patchValue()` method 替換掉表單中的任何 FormControl 的內容，使用這個方法就可以不用遵守 FormGroup 的格式，可以做到只更新某一個部分的值，但是在面對複雜的表單時，就算發生錯誤時`不會提醒`只會默默地失敗。\n3. 使用 FormGroup 的 property `get`，用於獲得 FormGroup 中單個 FormControl 的實例，在對這個實力使用 `setValue()` 就可以只更改單一個 FormControl 的值\n\n先在 profile-editor.component.html 中新增一個 `<button>` 並綁掉更新數據個 event\n\n```html\n<button (click)=\"onUpdate()\" class=\"btn btn-success\">Update</button>\n```\n\n接著來介紹如何使用三種方式更新畫面中輸入框的內容\n\n1. 使用 setValue() 更改數據\n\n    ```typescript\n    onUpdate() {\n        this.profileForm.setValue({\n          firstName: 'Fandix',\n          lastName: 'Huang',\n          address: {\n            street: 'Queen',\n            city: 'New York',\n            state: 'New York',\n            zip: '123'\n          }\n        })\n      }\n    ```\n\n    ![img](https://i.imgur.com/cSlKpRo.gif)\n    \n2. 使用 patchValue() 更改部分 FormControl 的內容\n\n    ```typescript\n    onUpdate() {\n        this.profileForm.patchValue({\n          firstName: 'Fandix',\n          lastName: 'Huang',\n          address: {\n            street: 'Queen',\n            zip: '123'\n          }\n        })\n      }\n    ```\n\n    ![img](https://i.imgur.com/1qPLQNo.gif)\n    \n3. 使用 `get` 獲得單一 FomControl 並使用 setValue() 更新內容\n\n    ```typescript\n    onUpdate() {\n      this.profileForm.get('firstName')?.setValue('Fandix');\n      this.profileForm.get('address')?.get('city')?.setValue('New York');\n    }\n    ```\n\n    使用 `get` 獲得 `address` 的實例時，要記得獲得的還是 `FormGroup`，所以要獲得 `city` 的實例需要在調用一次 `get` 才能獲得下一層\n\n    ![img](https://i.imgur.com/wB8SB7O.gif)\n    \n\n# 結論\n\n本章中介紹了如何使用 `FormControl` 建立單一個表單控制元件，可以使用 FormControl 實例提供的 property `value` 獲得使用者輸入的數據，也可以使用 `subscribe()` 獲得表單的快照，而 reactive forms 的另一個特色就是可以利用編成的方式更改表單的內容，所以可以使用 `setValue()` 做到這個功能。\n\n也介紹了如何使用 `FormGroup` 將多個相關控制元件分組到單個輸入表單中，獲得表單數據的方法也是使用 FormGroup 實例提供的 value property，也可以使用 `subscribe()` 獲得表單的快照，至於設定表單內容的話可以使用 `setValue()`、`patchValue()` 兩種方式設定，但要注意的是使用 `setValue()` 需要注意填入的格式需要與 FormGroup 的格式相同不然會出錯，這對於複雜的嵌套表單而言可以起到很好的檢查作用，而使用 `patchValue()` 雖然不用滿足 FormGroup 的格式，的是在面對複雜的表單時，就算出錯他也`不會提醒`而會默默的設定失敗，所以要特別注意，最後可以使用 FormGroup 實例提供的 `get` property 可以獲得單獨的 FormControl 實例。\n\n由於 reactive forms 的篇章比較長，所以一樣分成兩篇講解，下一篇將會介紹如何使用 `FormBuilder` 利用比較簡單的方式建立 FormGroup 和 FormControl，也會介紹如何使用 FormArray 建立動態的表單，詳細的內容就明天再介紹吧，那麼明天見吧。\n\n\n# Reference\n\n- [Angular.io - Reactive forms](https://angular.io/guide/reactive-forms)","slug":"Angular/angular-25","published":1,"updated":"2022-02-16T06:43:26.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdx000w95w33ix00uhe","content":"<p>上一篇中介紹完 Template-driven forms 後，接著再介紹 Angular 的另一種 form，那就是 <code>Reactive forms</code>，它提供了一種 <code>model-driven</code> 的方法來處理隨時間變化的表單輸入，本章中會介紹如何創建本章中會介紹如何創建和更新基本的表單控制元件、如何在 component 中使用多個控制元件、驗證表單的值以及創建動態表單，隨著需求新增換刪除控制元件。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Overview-of-reactive-forms\"><a href=\"#Overview-of-reactive-forms\" class=\"headerlink\" title=\"Overview of reactive forms\"></a>Overview of reactive forms</h1><p>reactive forms 使用<code>顯示且不可變的</code>方法來管理表單在某個時間點的狀態，表單狀態在每次更新都會返回一個<code>新的</code>狀態，從而保持模型在每次更改間都保持完整，reactive forms 是圍繞著 <code>observable</code> 構建的，所以可以進行同步的訪問。</p>\n<p>reactive forms 還提供了簡易的測試路徑，因為可以確保數據在請求時是一致且可預測的，數據流中的任何操作者都可以安全的操作數據，與 template-driven forms 不同的點在於他提供對數據模型的<code>同步訪問</code>、<code>不變的 observable operator</code> 以及<code>可觀察數據流變化的跟蹤</code>。</p>\n<h1 id=\"Adding-a-basic-form-control\"><a href=\"#Adding-a-basic-form-control\" class=\"headerlink\" title=\"Adding a basic form control\"></a>Adding a basic form control</h1><p>要使用 reactive forms 的表單控制元件分為三個步驟：</p>\n<ol>\n<li>在 app.module.ts 中引入 <code>ReactiveFormsModule</code></li>\n<li>在 component 中創建一個 <code>FormControl</code> 實例</li>\n<li>在 template 中註冊 <code>FormControl</code></li>\n</ol>\n<p>一樣舉個例子，將建立一個使用者將他們姓名填入畫面中的輸入框，透過 FormControl 捕獲到輸入的值並將它顯示出來。</p>\n<ol>\n<li><p>從 <code>@angular/form</code> 中引入 <code>ReactiveFormsModule</code> 並將它添加到 ngModule 的 imports 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactiveFormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// other imports ...</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactiveFormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Angular CLI 建立一個 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component NameEditor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 name-editer.component.ts 中新增 FormControl</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-name-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./name-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./name-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);                                     <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/forms</code> 中引入 <code>FormControl</code></li>\n<li>(2): 給予 <code>FormControl</code> 一個參數（空字串）做為預設值並將它實例化</li>\n</ul>\n</li>\n<li><p>在 name-editer.component.html 中綁定 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png\"></p>\n<h2 id=\"Displaying-a-form-control-value\"><a href=\"#Displaying-a-form-control-value\" class=\"headerlink\" title=\"Displaying a form control value\"></a>Displaying a form control value</h2><p>要顯示使用者輸入的值可以透過以下的方式：</p>\n<ul>\n<li>通過 <code>valueChanges observable</code> 可以在使用 AsyncPipe 的 template 或使用 <code>subscribe()</code> method 在 component 中監聽表單中值的變化</li>\n<li>使用 <code>value</code> property 他可以提供當前值的快照</li>\n</ul>\n<p>先介紹如何使用 <code>value</code> 取得當前值的快照</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Value: &#123;&#123; name.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 property binding 將 FormControl 的實例綁定在 template 中</p>\n<p><img src=\"https://i.imgur.com/cRN4Q5z.gif\" alt=\"img\"></p>\n<p>再來介紹可以在 component 中使用 <code>subscribe()</code> 監聽表單中值的變化</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-name-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./name-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./name-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valueChanges</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Replacing-a-form-control-value\"><a href=\"#Replacing-a-form-control-value\" class=\"headerlink\" title=\"Replacing a form control value\"></a>Replacing a form control value</h2><p>reactive forms 可以以編成的方式更改控制元件的內容，可以讓你更靈活的更新值而無需與使用者交互，FormControl 實例提供了一個 <code>setValue()</code> method，可以更新表單控制元件的值並根據控制元件的結構驗證所提供值的結構，簡單來說如果你要更改的值的結構與控制元件的結構不相符的話會出錯，這個方法可以用在比如點擊編輯一個產品，透過 API 獲得當前產品的信息並將這些信息顯示在畫面中的每一個輸入元素上，下面舉一個簡單的例子：</p>\n<ol>\n<li><p>在 name-editor.component.ts 中新增一個 method 當使用者點擊畫面按鈕時觸發</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-name-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./name-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./name-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">updateName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Nancy&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 name-editor.component.html 中新增一個 <code>&lt;button&gt;</code> 並綁定剛剛寫的 method</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;updateName()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Update Name<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/rfcbRxx.gif\" alt=\"img\"></p>\n<p>當點擊畫面中的按鈕後，會利用 FormControl 實例提供的 <code>serValue()</code> method 將控制元件的值更新。</p>\n<h1 id=\"Grouping-form-controls\"><a href=\"#Grouping-form-controls\" class=\"headerlink\" title=\"Grouping form controls\"></a>Grouping form controls</h1><p>一個表單通常會包含幾個相關的控制元件，reactive forms 提供了兩種將多個相關控制元件分組到單個輸入表單的方法：</p>\n<ol>\n<li>form group 定義了一個帶有一組固定控制元件的表單，可以一起管理這些控制元件，也可進行嵌套以創建更複雜的表單</li>\n<li>form array 定義了一個<code>動態</code>的表單，可以在其中添加或刪除運行時的控制元件，也可以嵌套已進行更複雜的表單</li>\n</ol>\n<p>就像 FormControl  可以讓你控制單個輸入一樣，FormGroup 可以讓你跟蹤一組表單控制元件的表單狀態，在創建表單時 group 中的每一個控制元件都按<code>名稱</code>進行跟蹤，舉個例子</p>\n<ol>\n<li><p>使用 Angular CLI 建立一個新的 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component ProfileEditor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 profile-editor.component.ts 中創建 FormGroup 實例</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;              <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  profileForm = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;                                       <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 ‘@angular&#x2F;forms’ 中引入 <code>FormControl</code> 與 <code>FormGroup</code></li>\n<li>(2): 創建 <code>FormGroup</code> 的實例，一樣使用 <code>new</code> 關鍵字，將帶有 FormControl 的 object 傳入做為參數（初始值）</li>\n</ul>\n</li>\n<li><p>在 profile-editor.component.html 中綁定 FormGroup 和 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>[formGroup]</code> directive 綁定 component 中的 FormGroup 實例，這樣會在 model 和表單輸入框之間建立一個通信層，FormControlName directive 提供的 <code>formControlName</code> 將每個單獨的輸入綁定到 FormGroup 中定義的 FormControl，FormControl 與各自綁定的輸入元素進行通信，他們之間的通信與單獨使用一個 FormControl 一樣。</p>\n</li>\n</ol>\n<h2 id=\"Save-form-data\"><a href=\"#Save-form-data\" class=\"headerlink\" title=\"Save form data\"></a>Save form data</h2><p>reactive forms 和 tempate-driven forms 一樣可以使用 <code>ngSubmit</code> 提交整個表單，舉個例子</p>\n<ol>\n<li><p>在 profile-editor.component.ts 中添加一個 method 當使用者點擊 submit 後觸發</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;                                         <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  profileForm = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;                                            <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於儲存 form 的資料與顯示在畫面中</li>\n<li>(2): 將 formGroup 的數據賦予 formValue</li>\n</ul>\n</li>\n<li><p>在 profile-editor.component.html 中新增一個 <code>&lt;button&gt;</code> 並在 <code>&lt;form&gt;</code> 上綁定一個 event</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Form Value: &#123;&#123; formValue | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/68oWBs3.gif\" alt=\"img\"></p>\n<h2 id=\"Creating-nested-form-groups\"><a href=\"#Creating-nested-form-groups\" class=\"headerlink\" title=\"Creating nested form groups\"></a>Creating nested form groups</h2><p>FormGroup 除了可以接收含有 FormControl 的 object 之外，還可以接收 object 裡面包涵另一個 FormGroup 的嵌套結構，這樣可以將複雜的表單組合成同一個 FormGroup 更利於維護，將大型的表單分解為幾個更小且更易於管理的 group 最後再合併再一起，舉個例子吧</p>\n<ol>\n<li><p>在 profile-editor.component.ts 中將原本的 FormGroup 中多添加一組 FormGroup</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">street</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">city</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">state</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">zip</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在  profile-editor.component.html 中添加輸入元素並將它綁定下一層的 FormGroup 和 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">&quot;address&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Address<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;street&quot;</span>&gt;</span>Street: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;street&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;street&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;city&quot;</span>&gt;</span>City: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;city&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;state&quot;</span>&gt;</span>State: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;state&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;zip&quot;</span>&gt;</span>Zip Code: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;zip&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;zip&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Form Value: &#123;&#123; formValue | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png\"></p>\n<p>可以測試一下當把每一個輸入框都輸入數據後點擊 submit 看看輸出的結果會是如何。</p>\n<h2 id=\"Updating-parts-of-the-data-model\"><a href=\"#Updating-parts-of-the-data-model\" class=\"headerlink\" title=\"Updating parts of the data model\"></a>Updating parts of the data model</h2><p>在介紹 FormControl 的 setValue() 時有提到當要設定的數據模型如果跟 FormGroup 的格式不同的話則會發生錯誤，這邊要來仔細講解一下，對於更新 FormGroup 中 FormControl 的值有三種方式：</p>\n<ol>\n<li>使用 <code>setValue()</code> method 為單個 FormControl 設置新的值，但是如果使用 setValue() 的話必須嚴格遵守 FormGorup 的結構一次替換就要換掉整組，但是面對複雜的嵌套表單而言嚴格的檢查可以避免錯誤。</li>\n<li>使用 <code>patchValue()</code> method 替換掉表單中的任何 FormControl 的內容，使用這個方法就可以不用遵守 FormGroup 的格式，可以做到只更新某一個部分的值，但是在面對複雜的表單時，就算發生錯誤時<code>不會提醒</code>只會默默地失敗。</li>\n<li>使用 FormGroup 的 property <code>get</code>，用於獲得 FormGroup 中單個 FormControl 的實例，在對這個實力使用 <code>setValue()</code> 就可以只更改單一個 FormControl 的值</li>\n</ol>\n<p>先在 profile-editor.component.html 中新增一個 <code>&lt;button&gt;</code> 並綁掉更新數據個 event</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onUpdate()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Update<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接著來介紹如何使用三種方式更新畫面中輸入框的內容</p>\n<ol>\n<li><p>使用 setValue() 更改數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">setValue</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Huang&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">street</span>: <span class=\"string\">&#x27;Queen&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">state</span>: <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">zip</span>: <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://i.imgur.com/cSlKpRo.gif\" alt=\"img\"></p>\n</li>\n<li><p>使用 patchValue() 更改部分 FormControl 的內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">patchValue</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Huang&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">street</span>: <span class=\"string\">&#x27;Queen&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">zip</span>: <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://i.imgur.com/1qPLQNo.gif\" alt=\"img\"></p>\n</li>\n<li><p>使用 <code>get</code> 獲得單一 FomControl 並使用 setValue() 更新內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;firstName&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Fandix&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;address&#x27;</span>)?.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;city&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;New York&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>get</code> 獲得 <code>address</code> 的實例時，要記得獲得的還是 <code>FormGroup</code>，所以要獲得 <code>city</code> 的實例需要在調用一次 <code>get</code> 才能獲得下一層</p>\n<p> <img src=\"https://i.imgur.com/wB8SB7O.gif\" alt=\"img\"></p>\n</li>\n</ol>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何使用 <code>FormControl</code> 建立單一個表單控制元件，可以使用 FormControl 實例提供的 property <code>value</code> 獲得使用者輸入的數據，也可以使用 <code>subscribe()</code> 獲得表單的快照，而 reactive forms 的另一個特色就是可以利用編成的方式更改表單的內容，所以可以使用 <code>setValue()</code> 做到這個功能。</p>\n<p>也介紹了如何使用 <code>FormGroup</code> 將多個相關控制元件分組到單個輸入表單中，獲得表單數據的方法也是使用 FormGroup 實例提供的 value property，也可以使用 <code>subscribe()</code> 獲得表單的快照，至於設定表單內容的話可以使用 <code>setValue()</code>、<code>patchValue()</code> 兩種方式設定，但要注意的是使用 <code>setValue()</code> 需要注意填入的格式需要與 FormGroup 的格式相同不然會出錯，這對於複雜的嵌套表單而言可以起到很好的檢查作用，而使用 <code>patchValue()</code> 雖然不用滿足 FormGroup 的格式，的是在面對複雜的表單時，就算出錯他也<code>不會提醒</code>而會默默的設定失敗，所以要特別注意，最後可以使用 FormGroup 實例提供的 <code>get</code> property 可以獲得單獨的 FormControl 實例。</p>\n<p>由於 reactive forms 的篇章比較長，所以一樣分成兩篇講解，下一篇將會介紹如何使用 <code>FormBuilder</code> 利用比較簡單的方式建立 FormGroup 和 FormControl，也會介紹如何使用 FormArray 建立動態的表單，詳細的內容就明天再介紹吧，那麼明天見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/reactive-forms\">Angular.io - Reactive forms</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上一篇中介紹完 Template-driven forms 後，接著再介紹 Angular 的另一種 form，那就是 <code>Reactive forms</code>，它提供了一種 <code>model-driven</code> 的方法來處理隨時間變化的表單輸入，本章中會介紹如何創建本章中會介紹如何創建和更新基本的表單控制元件、如何在 component 中使用多個控制元件、驗證表單的值以及創建動態表單，隨著需求新增換刪除控制元件。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767y8s0ESM8UR.jpg\"></p>","more":"<h1 id=\"Overview-of-reactive-forms\"><a href=\"#Overview-of-reactive-forms\" class=\"headerlink\" title=\"Overview of reactive forms\"></a>Overview of reactive forms</h1><p>reactive forms 使用<code>顯示且不可變的</code>方法來管理表單在某個時間點的狀態，表單狀態在每次更新都會返回一個<code>新的</code>狀態，從而保持模型在每次更改間都保持完整，reactive forms 是圍繞著 <code>observable</code> 構建的，所以可以進行同步的訪問。</p>\n<p>reactive forms 還提供了簡易的測試路徑，因為可以確保數據在請求時是一致且可預測的，數據流中的任何操作者都可以安全的操作數據，與 template-driven forms 不同的點在於他提供對數據模型的<code>同步訪問</code>、<code>不變的 observable operator</code> 以及<code>可觀察數據流變化的跟蹤</code>。</p>\n<h1 id=\"Adding-a-basic-form-control\"><a href=\"#Adding-a-basic-form-control\" class=\"headerlink\" title=\"Adding a basic form control\"></a>Adding a basic form control</h1><p>要使用 reactive forms 的表單控制元件分為三個步驟：</p>\n<ol>\n<li>在 app.module.ts 中引入 <code>ReactiveFormsModule</code></li>\n<li>在 component 中創建一個 <code>FormControl</code> 實例</li>\n<li>在 template 中註冊 <code>FormControl</code></li>\n</ol>\n<p>一樣舉個例子，將建立一個使用者將他們姓名填入畫面中的輸入框，透過 FormControl 捕獲到輸入的值並將它顯示出來。</p>\n<ol>\n<li><p>從 <code>@angular/form</code> 中引入 <code>ReactiveFormsModule</code> 並將它添加到 ngModule 的 imports 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactiveFormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// other imports ...</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactiveFormsModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Angular CLI 建立一個 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component NameEditor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 name-editer.component.ts 中新增 FormControl</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-name-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./name-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./name-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);                                     <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/forms</code> 中引入 <code>FormControl</code></li>\n<li>(2): 給予 <code>FormControl</code> 一個參數（空字串）做為預設值並將它實例化</li>\n</ul>\n</li>\n<li><p>在 name-editer.component.html 中綁定 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767VosFgACSQG.png\"></p>\n<h2 id=\"Displaying-a-form-control-value\"><a href=\"#Displaying-a-form-control-value\" class=\"headerlink\" title=\"Displaying a form control value\"></a>Displaying a form control value</h2><p>要顯示使用者輸入的值可以透過以下的方式：</p>\n<ul>\n<li>通過 <code>valueChanges observable</code> 可以在使用 AsyncPipe 的 template 或使用 <code>subscribe()</code> method 在 component 中監聽表單中值的變化</li>\n<li>使用 <code>value</code> property 他可以提供當前值的快照</li>\n</ul>\n<p>先介紹如何使用 <code>value</code> 取得當前值的快照</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Value: &#123;&#123; name.value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 property binding 將 FormControl 的實例綁定在 template 中</p>\n<p><img src=\"https://i.imgur.com/cRN4Q5z.gif\" alt=\"img\"></p>\n<p>再來介紹可以在 component 中使用 <code>subscribe()</code> 監聽表單中值的變化</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-name-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./name-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./name-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valueChanges</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Replacing-a-form-control-value\"><a href=\"#Replacing-a-form-control-value\" class=\"headerlink\" title=\"Replacing a form control value\"></a>Replacing a form control value</h2><p>reactive forms 可以以編成的方式更改控制元件的內容，可以讓你更靈活的更新值而無需與使用者交互，FormControl 實例提供了一個 <code>setValue()</code> method，可以更新表單控制元件的值並根據控制元件的結構驗證所提供值的結構，簡單來說如果你要更改的值的結構與控制元件的結構不相符的話會出錯，這個方法可以用在比如點擊編輯一個產品，透過 API 獲得當前產品的信息並將這些信息顯示在畫面中的每一個輸入元素上，下面舉一個簡單的例子：</p>\n<ol>\n<li><p>在 name-editor.component.ts 中新增一個 method 當使用者點擊畫面按鈕時觸發</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-name-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./name-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./name-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">updateName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Nancy&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 name-editor.component.html 中新增一個 <code>&lt;button&gt;</code> 並綁定剛剛寫的 method</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;updateName()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Update Name<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/rfcbRxx.gif\" alt=\"img\"></p>\n<p>當點擊畫面中的按鈕後，會利用 FormControl 實例提供的 <code>serValue()</code> method 將控制元件的值更新。</p>\n<h1 id=\"Grouping-form-controls\"><a href=\"#Grouping-form-controls\" class=\"headerlink\" title=\"Grouping form controls\"></a>Grouping form controls</h1><p>一個表單通常會包含幾個相關的控制元件，reactive forms 提供了兩種將多個相關控制元件分組到單個輸入表單的方法：</p>\n<ol>\n<li>form group 定義了一個帶有一組固定控制元件的表單，可以一起管理這些控制元件，也可進行嵌套以創建更複雜的表單</li>\n<li>form array 定義了一個<code>動態</code>的表單，可以在其中添加或刪除運行時的控制元件，也可以嵌套已進行更複雜的表單</li>\n</ol>\n<p>就像 FormControl  可以讓你控制單個輸入一樣，FormGroup 可以讓你跟蹤一組表單控制元件的表單狀態，在創建表單時 group 中的每一個控制元件都按<code>名稱</code>進行跟蹤，舉個例子</p>\n<ol>\n<li><p>使用 Angular CLI 建立一個新的 Component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component ProfileEditor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 profile-editor.component.ts 中創建 FormGroup 實例</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;              <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  profileForm = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;                                       <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 ‘@angular&#x2F;forms’ 中引入 <code>FormControl</code> 與 <code>FormGroup</code></li>\n<li>(2): 創建 <code>FormGroup</code> 的實例，一樣使用 <code>new</code> 關鍵字，將帶有 FormControl 的 object 傳入做為參數（初始值）</li>\n</ul>\n</li>\n<li><p>在 profile-editor.component.html 中綁定 FormGroup 和 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>[formGroup]</code> directive 綁定 component 中的 FormGroup 實例，這樣會在 model 和表單輸入框之間建立一個通信層，FormControlName directive 提供的 <code>formControlName</code> 將每個單獨的輸入綁定到 FormGroup 中定義的 FormControl，FormControl 與各自綁定的輸入元素進行通信，他們之間的通信與單獨使用一個 FormControl 一樣。</p>\n</li>\n</ol>\n<h2 id=\"Save-form-data\"><a href=\"#Save-form-data\" class=\"headerlink\" title=\"Save form data\"></a>Save form data</h2><p>reactive forms 和 tempate-driven forms 一樣可以使用 <code>ngSubmit</code> 提交整個表單，舉個例子</p>\n<ol>\n<li><p>在 profile-editor.component.ts 中添加一個 method 當使用者點擊 submit 後觸發</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;                                         <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  profileForm = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;                                            <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於儲存 form 的資料與顯示在畫面中</li>\n<li>(2): 將 formGroup 的數據賦予 formValue</li>\n</ul>\n</li>\n<li><p>在 profile-editor.component.html 中新增一個 <code>&lt;button&gt;</code> 並在 <code>&lt;form&gt;</code> 上綁定一個 event</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Form Value: &#123;&#123; formValue | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/68oWBs3.gif\" alt=\"img\"></p>\n<h2 id=\"Creating-nested-form-groups\"><a href=\"#Creating-nested-form-groups\" class=\"headerlink\" title=\"Creating nested form groups\"></a>Creating nested form groups</h2><p>FormGroup 除了可以接收含有 FormControl 的 object 之外，還可以接收 object 裡面包涵另一個 FormGroup 的嵌套結構，這樣可以將複雜的表單組合成同一個 FormGroup 更利於維護，將大型的表單分解為幾個更小且更易於管理的 group 最後再合併再一起，舉個例子吧</p>\n<ol>\n<li><p>在 profile-editor.component.ts 中將原本的 FormGroup 中多添加一組 FormGroup</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">street</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">city</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">state</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">zip</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在  profile-editor.component.html 中添加輸入元素並將它綁定下一層的 FormGroup 和 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">&quot;address&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Address<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;street&quot;</span>&gt;</span>Street: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;street&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;street&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;city&quot;</span>&gt;</span>City: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;city&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;state&quot;</span>&gt;</span>State: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;state&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;zip&quot;</span>&gt;</span>Zip Code: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;zip&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;zip&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Form Value: &#123;&#123; formValue | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HBMP0iFFQX.png\"></p>\n<p>可以測試一下當把每一個輸入框都輸入數據後點擊 submit 看看輸出的結果會是如何。</p>\n<h2 id=\"Updating-parts-of-the-data-model\"><a href=\"#Updating-parts-of-the-data-model\" class=\"headerlink\" title=\"Updating parts of the data model\"></a>Updating parts of the data model</h2><p>在介紹 FormControl 的 setValue() 時有提到當要設定的數據模型如果跟 FormGroup 的格式不同的話則會發生錯誤，這邊要來仔細講解一下，對於更新 FormGroup 中 FormControl 的值有三種方式：</p>\n<ol>\n<li>使用 <code>setValue()</code> method 為單個 FormControl 設置新的值，但是如果使用 setValue() 的話必須嚴格遵守 FormGorup 的結構一次替換就要換掉整組，但是面對複雜的嵌套表單而言嚴格的檢查可以避免錯誤。</li>\n<li>使用 <code>patchValue()</code> method 替換掉表單中的任何 FormControl 的內容，使用這個方法就可以不用遵守 FormGroup 的格式，可以做到只更新某一個部分的值，但是在面對複雜的表單時，就算發生錯誤時<code>不會提醒</code>只會默默地失敗。</li>\n<li>使用 FormGroup 的 property <code>get</code>，用於獲得 FormGroup 中單個 FormControl 的實例，在對這個實力使用 <code>setValue()</code> 就可以只更改單一個 FormControl 的值</li>\n</ol>\n<p>先在 profile-editor.component.html 中新增一個 <code>&lt;button&gt;</code> 並綁掉更新數據個 event</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onUpdate()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>Update<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接著來介紹如何使用三種方式更新畫面中輸入框的內容</p>\n<ol>\n<li><p>使用 setValue() 更改數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">setValue</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Huang&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">street</span>: <span class=\"string\">&#x27;Queen&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">state</span>: <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">zip</span>: <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://i.imgur.com/cSlKpRo.gif\" alt=\"img\"></p>\n</li>\n<li><p>使用 patchValue() 更改部分 FormControl 的內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">patchValue</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Fandix&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Huang&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">address</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">street</span>: <span class=\"string\">&#x27;Queen&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">zip</span>: <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://i.imgur.com/1qPLQNo.gif\" alt=\"img\"></p>\n</li>\n<li><p>使用 <code>get</code> 獲得單一 FomControl 並使用 setValue() 更新內容</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;firstName&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Fandix&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;address&#x27;</span>)?.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;city&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;New York&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>get</code> 獲得 <code>address</code> 的實例時，要記得獲得的還是 <code>FormGroup</code>，所以要獲得 <code>city</code> 的實例需要在調用一次 <code>get</code> 才能獲得下一層</p>\n<p> <img src=\"https://i.imgur.com/wB8SB7O.gif\" alt=\"img\"></p>\n</li>\n</ol>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何使用 <code>FormControl</code> 建立單一個表單控制元件，可以使用 FormControl 實例提供的 property <code>value</code> 獲得使用者輸入的數據，也可以使用 <code>subscribe()</code> 獲得表單的快照，而 reactive forms 的另一個特色就是可以利用編成的方式更改表單的內容，所以可以使用 <code>setValue()</code> 做到這個功能。</p>\n<p>也介紹了如何使用 <code>FormGroup</code> 將多個相關控制元件分組到單個輸入表單中，獲得表單數據的方法也是使用 FormGroup 實例提供的 value property，也可以使用 <code>subscribe()</code> 獲得表單的快照，至於設定表單內容的話可以使用 <code>setValue()</code>、<code>patchValue()</code> 兩種方式設定，但要注意的是使用 <code>setValue()</code> 需要注意填入的格式需要與 FormGroup 的格式相同不然會出錯，這對於複雜的嵌套表單而言可以起到很好的檢查作用，而使用 <code>patchValue()</code> 雖然不用滿足 FormGroup 的格式，的是在面對複雜的表單時，就算出錯他也<code>不會提醒</code>而會默默的設定失敗，所以要特別注意，最後可以使用 FormGroup 實例提供的 <code>get</code> property 可以獲得單獨的 FormControl 實例。</p>\n<p>由於 reactive forms 的篇章比較長，所以一樣分成兩篇講解，下一篇將會介紹如何使用 <code>FormBuilder</code> 利用比較簡單的方式建立 FormGroup 和 FormControl，也會介紹如何使用 FormArray 建立動態的表單，詳細的內容就明天再介紹吧，那麼明天見吧。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/reactive-forms\">Angular.io - Reactive forms</a></li>\n</ul>"},{"title":"Day26. Reactive forms (二)","date":"2021-09-26T01:28:27.000Z","_content":"\n上一篇中介紹了如何使用 FormControl 建立單個表單控制元件，也介紹了如何使用 FormGroup 將多個相關控制元件分組到單個輸入表單中，可以讓複雜的表單分割為一個一個小小的，對其精準的控制，最後再將它們合為一個大的 Group，而本篇將會介紹如何使用 `FormBuilder` 他可以讓建表單控制模型更簡單與更好閱讀，也會介紹怎麼使用 `FormArray` 建立一個動態的表單，詳細的內容就繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg](https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg)\n\n<!-- more -->\n\n# Using the FormBuilder service to generate controls\n\n之前提到可以將多個相關控制元件集合成一個 FormGroup，而這個 FormGroup 中又可以嵌套下一層的 FormGroup，當表單變得更複雜時手動創建單個 FormControl 會變得很麻煩而且一直重複，這時就可以使用 `FormBuilder` service 它提供了生成 FormControl 的便捷方法。\n\n舉個例子，將上一篇的例子（ProfileEditor）使用 FormBuilder 進行改寫\n\n```typescript\nimport { Component } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';                     // (1)\n\n@Component({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  formValue: any;\n  profileForm = this.fb.group({                                  // (3)\n    firstName: [''],\n    lastName: [''],\n    address: this.fb.group({\n      street: [''],\n      city: [''],\n      state: [''],\n      zip: ['']\n    })\n  })\n\n  constructor(private fb: FormBuilder) {}                        // (2)\n\n  onSubmit() {\n    this.formValue = this.profileForm.value;\n  }\n\n  onUpdate() {\n    this.profileForm.get('firstName')?.setValue('Fandix');\n    this.profileForm.get('address')?.get('city')?.setValue('New York');\n  }\n}\n```\n\n- (1): 從 `@angular/forms` 中引入 `FormBuilder`\n- (2): 在 constructor 中將 FormBuilder 注入到 component 中\n- (3): 使用 FormBuilder 改寫 FormGroup\n\n更改為這樣是不是簡單多了，從每一個 FormControl 都要使用 `new` 建立實例，到使用 FormBuilder 的話只要使用 `[ ]` 就好，簡直非常方便。\n\n\n# Validating form input\n\n reactive forms 和 template-driven forms 一樣都有對表單進行驗證的功能，這點再開發表單來說非常重要，而在 reactive forms 中對每一個 FormControl 添加驗證也比較簡單，能添加的驗證內容也更多，甚至可以創建客製化的驗證，而這邊只大概介紹該怎麼添加表單驗證，詳細的內容會到明天專門介紹 form validator。\n\n最常見的表單驗證就是 `required` 它代表著這個欄位不能為空，接著來使用上面的例子為表單添加驗證功能\n1. 從 `@angular/forms` 中引入 Validators class\n\n    ```typescript\n    import { FormBuilder, Validators } from '@angular/forms';\n    ```\n\n2. 在需要添驗證的 FormControl 後面添加 `Validators`\n\n    ```typescript\n    profileForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: [''],\n      address: this.fb.group({\n        street: [''],\n        city: [''],\n        state: [''],\n        zip: ['']\n      })\n    })\n    ```\n\n    在 `firstName` 的後面添加了 `Validators.required` 代表這個 FormControl 不能為空\n\n3. 在 profile-editor.component.html 的 submit `<button>` 中添加驗證\n\n    ```html\n    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"profileForm.invalid\">Submit</button>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png)\n\n當 First Name 欄位為空時，表單的驗證為 `invalid` 並且將 submit 按鈕 disable 掉，若將表格填上資料時\n\n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png)\n\n當 First Name 欄位為空時，表單的驗證為 `invalid` 並且將 submit 按鈕 disable 掉，若將表格填上資料時\n\n\n# Creating dynamic forms\n\n在昨天和上面的部分都是介紹與使用 FormGroup 來管理多個 FormControl，但是當遇到不確定數量的 FormControl 時就需要使用另一種集合多個 FormControl 的方式那就是 `FormArray`，他就像陣列一樣可以隨時插入或刪除陣列中的 FormControl，由於是不確定數量的 FormControl，所以不需要事先定義每一個 FormControl 的內容。\n\n舉個例子，將上面的範例做一個改寫，更改為可以動態加入或刪除的表單\n\n1. 從 `@angular/forms` 中引入 `FormArray`\n\n    ```typescript\n    import { FormArray } from '@angular/forms';\n    ```\n\n2. 將 profile-editor.component.ts 中的 FormGroup 進行更改\n\n    ```typescript\n    profileForm = this.fb.group({\n      users: this.fb.array([{ firstName: '', lastName: '' }])\n    })\n    ```\n\n    將 FormGroup 改為只有一個 Control，而這個 control 的型態為 FormArray，代表他可以存放許多 FormControl，並給予一個初始值\n\n3. 在 profile-editor.component.ts 中新增一個 `get` method，用於獲得 FormControl 的 control\n\n    ```typescript\n    get users () {\n      return this.profileForm.get('users') as FormArray;\n    }\n    ```\n\n4. 接著在 profile-editor.component.html 中綁定輸入元素\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <ng-container formArrayName=\"users\">\n        <div\n          *ngFor=\"let user of users.controls; let i = index;\"\n          [formGroupName]=\"i\"\n          class=\"formArray\"\n        >\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n        </div>\n      </ng-container>\n\n      <div class=\"option-btn\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-success\"\n          [disabled]=\"profileForm.invalid\"\n        >\n          Submit\n        </button>\n      </div>\n    </form>\n    ```\n\n    這邊稍微有點複雜，首先雖然是使用 FormArray 但他的最上一層還是使用 FormGroup，所以要在最外層的 `<form>` 綁定 FormGroup，就跟之前一樣。\n\n    和綁定 FormGroup 的方法類似，FormArrayNameDirective 提供了 `formArrayName` 讓表單數組的實例可以與 template 中的元素綁定並溝通。\n\n    接著使用 `*ngFor` 將 FormArray 中的 control 遞迴的放在每一個 `<div>` 中，而這邊使用的 `[formGroupName]=\"i\"` 可以把他看做每一個遞迴出來的 `<div>` 都和最上面的 `<form>` 一樣綁定了一個 `formGroup` ，最後將 formGroup 中的 FormControl 綁定給輸入元素，如果要拆開的話可以看成\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <ng-container formArrayName=\"users\">\n\n        <div [formGroup]=\"formGroup-1\" class=\"formArray\">\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n        </div>\n\n    \t<div [formGroup]=\"formGroup-2\" class=\"formArray\">\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n        </div>\n\n    \t\t<!-- ... -->\n\n      </ng-container>\n    </form>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png)\n\n## Dynamic add FormControl\n\n在一開始提到 FormArray 的功能就是可以動態新增或刪除 FormControl，該怎麼使用就來舉個例子吧。\n\n1. 首先先在 profile-editor.component.html 中新增插入 FormControl 的按鈕\n\n    ```html\n    <button class=\"btn btn-light\" (click)=\"onAddItem()\">Add Item</button>\n    ```\n\n2. 在 profile-editor.component.ts 中添加 onAddItem method\n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormArray, FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent {\n      formValue: any;\n      profileForm = this.fb.group({\n        users: this.fb.array([{ firstName: '', lastName: '' }])\n      })  \n\n      constructor(private fb: FormBuilder) {}\n\n      get users () {\n        return this.profileForm.get('users') as FormArray;\n      }\n\n      onAddItem() {\n        this.users.push(this.fb.group({ firstName: '', lastName: '' }))\n      }\n    }\n    ```\n\n    直接呼叫 `get` method 他將會回傳 FormArray 的實例，將 FormGroup push 進去就可以了\n    \n![img](https://i.imgur.com/ZAgA8wr.gif)\n\n## Delete FormControl\n\n除了可以動態添加 FormControl 之外也可以動態刪除指定 index 的 FormControl，舉個例子吧\n\n1. 在 profile-editor.component.html 的每個 FormControl 後面添加一個刪除的按鈕\n\n    ```html\n    <ng-container formArrayName=\"users\">\n        <div\n          *ngFor=\"let user of users.controls; let i = index\"\n          [formGroupName]=\"i\"\n          class=\"formArray\"\n        >\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n          <button type=\"button\" class=\"btn btn-danger\" (click)=\"onDeleteItem(i)\">X</button>\n        </div>\n      </ng-container>\n    ```\n\n    建立一個 `<button>` 並綁定 onDeleteItem method，這邊要注意的是是傳入了當下這個 controls 的 index，這可以用來刪除指定 index 的 control\n\n2. 在 profile-editor.component 中添加 onDeleteItem method\n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormArray, FormBuilder } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent {\n      formValue: any;\n      profileForm = this.fb.group({\n        users: this.fb.array([{ firstName: '', lastName: '' }])\n      })  \n\n      constructor(private fb: FormBuilder) {}\n\n      get users () {\n        return this.profileForm.get('users') as FormArray;\n      }\n\n      onAddItem() {\n        this.users.push(this.fb.group({ firstName: '', lastName: '' }))\n      }\n\n      onDeleteItem(index: number) {\n        this.users.removeAt(index);\n      }\n    }\n    ```\n\n    使用 FormArray 提供的 method 將 index 做完參數傳入，可以刪除指定 index 的內容\n    \n![img](https://i.imgur.com/NKCpOMh.gif)\n\n\n# 結論\n\n本章介紹了如何使用 `FormBuilder` 減少建立大量 FormControl 的動作，讓建立複雜的表單時可以更加快速且便捷。\n\n也介紹了如何使用 `FormArray` 建立動態表單，動態新增或刪除內容。\n\n最後介紹了如何使用 `Validator` 對每一個 FormControl 進行表單內容驗證，但是在這邊只有大概介紹怎麼使用，明天會介紹詳細的 Validator 內容並且可以建立客製化的 Validator，那麼詳細的內容就留到明天吧，那就明天見。\n\n\n# Reference\n\n- [Angular.io - Reactive forms](https://angular.io/guide/reactive-forms#creating-dynamic-forms)","source":"_posts/Angular/angular-26.md","raw":"---\ntitle: Day26. Reactive forms (二)\ndate: 2021-09-26 09:28:27\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n上一篇中介紹了如何使用 FormControl 建立單個表單控制元件，也介紹了如何使用 FormGroup 將多個相關控制元件分組到單個輸入表單中，可以讓複雜的表單分割為一個一個小小的，對其精準的控制，最後再將它們合為一個大的 Group，而本篇將會介紹如何使用 `FormBuilder` 他可以讓建表單控制模型更簡單與更好閱讀，也會介紹怎麼使用 `FormArray` 建立一個動態的表單，詳細的內容就繼續看下去吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg](https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg)\n\n<!-- more -->\n\n# Using the FormBuilder service to generate controls\n\n之前提到可以將多個相關控制元件集合成一個 FormGroup，而這個 FormGroup 中又可以嵌套下一層的 FormGroup，當表單變得更複雜時手動創建單個 FormControl 會變得很麻煩而且一直重複，這時就可以使用 `FormBuilder` service 它提供了生成 FormControl 的便捷方法。\n\n舉個例子，將上一篇的例子（ProfileEditor）使用 FormBuilder 進行改寫\n\n```typescript\nimport { Component } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';                     // (1)\n\n@Component({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  formValue: any;\n  profileForm = this.fb.group({                                  // (3)\n    firstName: [''],\n    lastName: [''],\n    address: this.fb.group({\n      street: [''],\n      city: [''],\n      state: [''],\n      zip: ['']\n    })\n  })\n\n  constructor(private fb: FormBuilder) {}                        // (2)\n\n  onSubmit() {\n    this.formValue = this.profileForm.value;\n  }\n\n  onUpdate() {\n    this.profileForm.get('firstName')?.setValue('Fandix');\n    this.profileForm.get('address')?.get('city')?.setValue('New York');\n  }\n}\n```\n\n- (1): 從 `@angular/forms` 中引入 `FormBuilder`\n- (2): 在 constructor 中將 FormBuilder 注入到 component 中\n- (3): 使用 FormBuilder 改寫 FormGroup\n\n更改為這樣是不是簡單多了，從每一個 FormControl 都要使用 `new` 建立實例，到使用 FormBuilder 的話只要使用 `[ ]` 就好，簡直非常方便。\n\n\n# Validating form input\n\n reactive forms 和 template-driven forms 一樣都有對表單進行驗證的功能，這點再開發表單來說非常重要，而在 reactive forms 中對每一個 FormControl 添加驗證也比較簡單，能添加的驗證內容也更多，甚至可以創建客製化的驗證，而這邊只大概介紹該怎麼添加表單驗證，詳細的內容會到明天專門介紹 form validator。\n\n最常見的表單驗證就是 `required` 它代表著這個欄位不能為空，接著來使用上面的例子為表單添加驗證功能\n1. 從 `@angular/forms` 中引入 Validators class\n\n    ```typescript\n    import { FormBuilder, Validators } from '@angular/forms';\n    ```\n\n2. 在需要添驗證的 FormControl 後面添加 `Validators`\n\n    ```typescript\n    profileForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: [''],\n      address: this.fb.group({\n        street: [''],\n        city: [''],\n        state: [''],\n        zip: ['']\n      })\n    })\n    ```\n\n    在 `firstName` 的後面添加了 `Validators.required` 代表這個 FormControl 不能為空\n\n3. 在 profile-editor.component.html 的 submit `<button>` 中添加驗證\n\n    ```html\n    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"profileForm.invalid\">Submit</button>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png)\n\n當 First Name 欄位為空時，表單的驗證為 `invalid` 並且將 submit 按鈕 disable 掉，若將表格填上資料時\n\n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png)\n\n當 First Name 欄位為空時，表單的驗證為 `invalid` 並且將 submit 按鈕 disable 掉，若將表格填上資料時\n\n\n# Creating dynamic forms\n\n在昨天和上面的部分都是介紹與使用 FormGroup 來管理多個 FormControl，但是當遇到不確定數量的 FormControl 時就需要使用另一種集合多個 FormControl 的方式那就是 `FormArray`，他就像陣列一樣可以隨時插入或刪除陣列中的 FormControl，由於是不確定數量的 FormControl，所以不需要事先定義每一個 FormControl 的內容。\n\n舉個例子，將上面的範例做一個改寫，更改為可以動態加入或刪除的表單\n\n1. 從 `@angular/forms` 中引入 `FormArray`\n\n    ```typescript\n    import { FormArray } from '@angular/forms';\n    ```\n\n2. 將 profile-editor.component.ts 中的 FormGroup 進行更改\n\n    ```typescript\n    profileForm = this.fb.group({\n      users: this.fb.array([{ firstName: '', lastName: '' }])\n    })\n    ```\n\n    將 FormGroup 改為只有一個 Control，而這個 control 的型態為 FormArray，代表他可以存放許多 FormControl，並給予一個初始值\n\n3. 在 profile-editor.component.ts 中新增一個 `get` method，用於獲得 FormControl 的 control\n\n    ```typescript\n    get users () {\n      return this.profileForm.get('users') as FormArray;\n    }\n    ```\n\n4. 接著在 profile-editor.component.html 中綁定輸入元素\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <ng-container formArrayName=\"users\">\n        <div\n          *ngFor=\"let user of users.controls; let i = index;\"\n          [formGroupName]=\"i\"\n          class=\"formArray\"\n        >\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n        </div>\n      </ng-container>\n\n      <div class=\"option-btn\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-success\"\n          [disabled]=\"profileForm.invalid\"\n        >\n          Submit\n        </button>\n      </div>\n    </form>\n    ```\n\n    這邊稍微有點複雜，首先雖然是使用 FormArray 但他的最上一層還是使用 FormGroup，所以要在最外層的 `<form>` 綁定 FormGroup，就跟之前一樣。\n\n    和綁定 FormGroup 的方法類似，FormArrayNameDirective 提供了 `formArrayName` 讓表單數組的實例可以與 template 中的元素綁定並溝通。\n\n    接著使用 `*ngFor` 將 FormArray 中的 control 遞迴的放在每一個 `<div>` 中，而這邊使用的 `[formGroupName]=\"i\"` 可以把他看做每一個遞迴出來的 `<div>` 都和最上面的 `<form>` 一樣綁定了一個 `formGroup` ，最後將 formGroup 中的 FormControl 綁定給輸入元素，如果要拆開的話可以看成\n\n    ```html\n    <form [formGroup]=\"profileForm\" class=\"form-group\" (ngSubmit)=\"onSubmit()\">\n      <ng-container formArrayName=\"users\">\n\n        <div [formGroup]=\"formGroup-1\" class=\"formArray\">\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n        </div>\n\n    \t<div [formGroup]=\"formGroup-2\" class=\"formArray\">\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n        </div>\n\n    \t\t<!-- ... -->\n\n      </ng-container>\n    </form>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png](https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png)\n\n## Dynamic add FormControl\n\n在一開始提到 FormArray 的功能就是可以動態新增或刪除 FormControl，該怎麼使用就來舉個例子吧。\n\n1. 首先先在 profile-editor.component.html 中新增插入 FormControl 的按鈕\n\n    ```html\n    <button class=\"btn btn-light\" (click)=\"onAddItem()\">Add Item</button>\n    ```\n\n2. 在 profile-editor.component.ts 中添加 onAddItem method\n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormArray, FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent {\n      formValue: any;\n      profileForm = this.fb.group({\n        users: this.fb.array([{ firstName: '', lastName: '' }])\n      })  \n\n      constructor(private fb: FormBuilder) {}\n\n      get users () {\n        return this.profileForm.get('users') as FormArray;\n      }\n\n      onAddItem() {\n        this.users.push(this.fb.group({ firstName: '', lastName: '' }))\n      }\n    }\n    ```\n\n    直接呼叫 `get` method 他將會回傳 FormArray 的實例，將 FormGroup push 進去就可以了\n    \n![img](https://i.imgur.com/ZAgA8wr.gif)\n\n## Delete FormControl\n\n除了可以動態添加 FormControl 之外也可以動態刪除指定 index 的 FormControl，舉個例子吧\n\n1. 在 profile-editor.component.html 的每個 FormControl 後面添加一個刪除的按鈕\n\n    ```html\n    <ng-container formArrayName=\"users\">\n        <div\n          *ngFor=\"let user of users.controls; let i = index\"\n          [formGroupName]=\"i\"\n          class=\"formArray\"\n        >\n          <div class=\"formControl\">\n            <label for=\"first-name\">First Name: </label>\n            <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />\n          </div>\n\n          <div class=\"formControl\">\n            <label for=\"last-name\">Last Name: </label>\n            <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />\n          </div>\n          <button type=\"button\" class=\"btn btn-danger\" (click)=\"onDeleteItem(i)\">X</button>\n        </div>\n      </ng-container>\n    ```\n\n    建立一個 `<button>` 並綁定 onDeleteItem method，這邊要注意的是是傳入了當下這個 controls 的 index，這可以用來刪除指定 index 的 control\n\n2. 在 profile-editor.component 中添加 onDeleteItem method\n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormArray, FormBuilder } from '@angular/forms';\n\n    @Component({\n      selector: 'app-profile-editor',\n      templateUrl: './profile-editor.component.html',\n      styleUrls: ['./profile-editor.component.css']\n    })\n    export class ProfileEditorComponent {\n      formValue: any;\n      profileForm = this.fb.group({\n        users: this.fb.array([{ firstName: '', lastName: '' }])\n      })  \n\n      constructor(private fb: FormBuilder) {}\n\n      get users () {\n        return this.profileForm.get('users') as FormArray;\n      }\n\n      onAddItem() {\n        this.users.push(this.fb.group({ firstName: '', lastName: '' }))\n      }\n\n      onDeleteItem(index: number) {\n        this.users.removeAt(index);\n      }\n    }\n    ```\n\n    使用 FormArray 提供的 method 將 index 做完參數傳入，可以刪除指定 index 的內容\n    \n![img](https://i.imgur.com/NKCpOMh.gif)\n\n\n# 結論\n\n本章介紹了如何使用 `FormBuilder` 減少建立大量 FormControl 的動作，讓建立複雜的表單時可以更加快速且便捷。\n\n也介紹了如何使用 `FormArray` 建立動態表單，動態新增或刪除內容。\n\n最後介紹了如何使用 `Validator` 對每一個 FormControl 進行表單內容驗證，但是在這邊只有大概介紹怎麼使用，明天會介紹詳細的 Validator 內容並且可以建立客製化的 Validator，那麼詳細的內容就留到明天吧，那就明天見。\n\n\n# Reference\n\n- [Angular.io - Reactive forms](https://angular.io/guide/reactive-forms#creating-dynamic-forms)","slug":"Angular/angular-26","published":1,"updated":"2022-02-16T06:45:00.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdx000z95w38s7w9n41","content":"<p>上一篇中介紹了如何使用 FormControl 建立單個表單控制元件，也介紹了如何使用 FormGroup 將多個相關控制元件分組到單個輸入表單中，可以讓複雜的表單分割為一個一個小小的，對其精準的控制，最後再將它們合為一個大的 Group，而本篇將會介紹如何使用 <code>FormBuilder</code> 他可以讓建表單控制模型更簡單與更好閱讀，也會介紹怎麼使用 <code>FormArray</code> 建立一個動態的表單，詳細的內容就繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Using-the-FormBuilder-service-to-generate-controls\"><a href=\"#Using-the-FormBuilder-service-to-generate-controls\" class=\"headerlink\" title=\"Using the FormBuilder service to generate controls\"></a>Using the FormBuilder service to generate controls</h1><p>之前提到可以將多個相關控制元件集合成一個 FormGroup，而這個 FormGroup 中又可以嵌套下一層的 FormGroup，當表單變得更複雜時手動創建單個 FormControl 會變得很麻煩而且一直重複，這時就可以使用 <code>FormBuilder</code> service 它提供了生成 FormControl 的便捷方法。</p>\n<p>舉個例子，將上一篇的例子（ProfileEditor）使用 FormBuilder 進行改寫</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;                                  <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">street</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">city</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">state</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">zip</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;                        <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;firstName&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Fandix&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;address&#x27;</span>)?.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;city&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;New York&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/forms</code> 中引入 <code>FormBuilder</code></li>\n<li>(2): 在 constructor 中將 FormBuilder 注入到 component 中</li>\n<li>(3): 使用 FormBuilder 改寫 FormGroup</li>\n</ul>\n<p>更改為這樣是不是簡單多了，從每一個 FormControl 都要使用 <code>new</code> 建立實例，到使用 FormBuilder 的話只要使用 <code>[ ]</code> 就好，簡直非常方便。</p>\n<h1 id=\"Validating-form-input\"><a href=\"#Validating-form-input\" class=\"headerlink\" title=\"Validating form input\"></a>Validating form input</h1><p> reactive forms 和 template-driven forms 一樣都有對表單進行驗證的功能，這點再開發表單來說非常重要，而在 reactive forms 中對每一個 FormControl 添加驗證也比較簡單，能添加的驗證內容也更多，甚至可以創建客製化的驗證，而這邊只大概介紹該怎麼添加表單驗證，詳細的內容會到明天專門介紹 form validator。</p>\n<p>最常見的表單驗證就是 <code>required</code> 它代表著這個欄位不能為空，接著來使用上面的例子為表單添加驗證功能</p>\n<ol>\n<li><p>從 <code>@angular/forms</code> 中引入 Validators class</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在需要添驗證的 FormControl 後面添加 <code>Validators</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">street</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">state</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 在 <code>firstName</code> 的後面添加了 <code>Validators.required</code> 代表這個 FormControl 不能為空</p>\n</li>\n<li><p>在 profile-editor.component.html 的 submit <code>&lt;button&gt;</code> 中添加驗證</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;profileForm.invalid&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png\"></p>\n<p>當 First Name 欄位為空時，表單的驗證為 <code>invalid</code> 並且將 submit 按鈕 disable 掉，若將表格填上資料時</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png\"></p>\n<p>當 First Name 欄位為空時，表單的驗證為 <code>invalid</code> 並且將 submit 按鈕 disable 掉，若將表格填上資料時</p>\n<h1 id=\"Creating-dynamic-forms\"><a href=\"#Creating-dynamic-forms\" class=\"headerlink\" title=\"Creating dynamic forms\"></a>Creating dynamic forms</h1><p>在昨天和上面的部分都是介紹與使用 FormGroup 來管理多個 FormControl，但是當遇到不確定數量的 FormControl 時就需要使用另一種集合多個 FormControl 的方式那就是 <code>FormArray</code>，他就像陣列一樣可以隨時插入或刪除陣列中的 FormControl，由於是不確定數量的 FormControl，所以不需要事先定義每一個 FormControl 的內容。</p>\n<p>舉個例子，將上面的範例做一個改寫，更改為可以動態加入或刪除的表單</p>\n<ol>\n<li><p>從 <code>@angular/forms</code> 中引入 <code>FormArray</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormArray</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>將 profile-editor.component.ts 中的 FormGroup 進行更改</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">users</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">array</span>([&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 將 FormGroup 改為只有一個 Control，而這個 control 的型態為 FormArray，代表他可以存放許多 FormControl，並給予一個初始值</p>\n</li>\n<li><p>在 profile-editor.component.ts 中新增一個 <code>get</code> method，用於獲得 FormControl 的 control</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get users () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;users&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">FormArray</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 profile-editor.component.html 中綁定輸入元素</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;users&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let user of users.controls; let i = index;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">formGroupName</span>]=<span class=\"string\">&quot;i&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;option-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;profileForm.invalid&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      Submit</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊稍微有點複雜，首先雖然是使用 FormArray 但他的最上一層還是使用 FormGroup，所以要在最外層的 <code>&lt;form&gt;</code> 綁定 FormGroup，就跟之前一樣。</p>\n<p> 和綁定 FormGroup 的方法類似，FormArrayNameDirective 提供了 <code>formArrayName</code> 讓表單數組的實例可以與 template 中的元素綁定並溝通。</p>\n<p> 接著使用 <code>*ngFor</code> 將 FormArray 中的 control 遞迴的放在每一個 <code>&lt;div&gt;</code> 中，而這邊使用的 <code>[formGroupName]=&quot;i&quot;</code> 可以把他看做每一個遞迴出來的 <code>&lt;div&gt;</code> 都和最上面的 <code>&lt;form&gt;</code> 一樣綁定了一個 <code>formGroup</code> ，最後將 formGroup 中的 FormControl 綁定給輸入元素，如果要拆開的話可以看成</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;users&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;formGroup-1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;formGroup-2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png\"></p>\n<h2 id=\"Dynamic-add-FormControl\"><a href=\"#Dynamic-add-FormControl\" class=\"headerlink\" title=\"Dynamic add FormControl\"></a>Dynamic add FormControl</h2><p>在一開始提到 FormArray 的功能就是可以動態新增或刪除 FormControl，該怎麼使用就來舉個例子吧。</p>\n<ol>\n<li><p>首先先在 profile-editor.component.html 中新增插入 FormControl 的按鈕</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-light&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onAddItem()&quot;</span>&gt;</span>Add Item<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 profile-editor.component.ts 中添加 onAddItem method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormArray</span>, <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">array</span>([&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;])</span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get users () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;users&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">FormArray</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onAddItem</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">users</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 直接呼叫 <code>get</code> method 他將會回傳 FormArray 的實例，將 FormGroup push 進去就可以了</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/ZAgA8wr.gif\" alt=\"img\"></p>\n<h2 id=\"Delete-FormControl\"><a href=\"#Delete-FormControl\" class=\"headerlink\" title=\"Delete FormControl\"></a>Delete FormControl</h2><p>除了可以動態添加 FormControl 之外也可以動態刪除指定 index 的 FormControl，舉個例子吧</p>\n<ol>\n<li><p>在 profile-editor.component.html 的每個 FormControl 後面添加一個刪除的按鈕</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;users&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let user of users.controls; let i = index&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">formGroupName</span>]=<span class=\"string\">&quot;i&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onDeleteItem(i)&quot;</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 建立一個 <code>&lt;button&gt;</code> 並綁定 onDeleteItem method，這邊要注意的是是傳入了當下這個 controls 的 index，這可以用來刪除指定 index 的 control</p>\n</li>\n<li><p>在 profile-editor.component 中添加 onDeleteItem method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormArray</span>, <span class=\"title class_\">FormBuilder</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">array</span>([&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;])</span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get users () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;users&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">FormArray</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onAddItem</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">users</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onDeleteItem</span>(<span class=\"params\">index: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">users</span>.<span class=\"title function_\">removeAt</span>(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 使用 FormArray 提供的 method 將 index 做完參數傳入，可以刪除指定 index 的內容</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/NKCpOMh.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何使用 <code>FormBuilder</code> 減少建立大量 FormControl 的動作，讓建立複雜的表單時可以更加快速且便捷。</p>\n<p>也介紹了如何使用 <code>FormArray</code> 建立動態表單，動態新增或刪除內容。</p>\n<p>最後介紹了如何使用 <code>Validator</code> 對每一個 FormControl 進行表單內容驗證，但是在這邊只有大概介紹怎麼使用，明天會介紹詳細的 Validator 內容並且可以建立客製化的 Validator，那麼詳細的內容就留到明天吧，那就明天見。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/reactive-forms#creating-dynamic-forms\">Angular.io - Reactive forms</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上一篇中介紹了如何使用 FormControl 建立單個表單控制元件，也介紹了如何使用 FormGroup 將多個相關控制元件分組到單個輸入表單中，可以讓複雜的表單分割為一個一個小小的，對其精準的控制，最後再將它們合為一個大的 Group，而本篇將會介紹如何使用 <code>FormBuilder</code> 他可以讓建表單控制模型更簡單與更好閱讀，也會介紹怎麼使用 <code>FormArray</code> 建立一個動態的表單，詳細的內容就繼續看下去吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767h3EynlCvSX.jpg\"></p>","more":"<h1 id=\"Using-the-FormBuilder-service-to-generate-controls\"><a href=\"#Using-the-FormBuilder-service-to-generate-controls\" class=\"headerlink\" title=\"Using the FormBuilder service to generate controls\"></a>Using the FormBuilder service to generate controls</h1><p>之前提到可以將多個相關控制元件集合成一個 FormGroup，而這個 FormGroup 中又可以嵌套下一層的 FormGroup，當表單變得更複雜時手動創建單個 FormControl 會變得很麻煩而且一直重複，這時就可以使用 <code>FormBuilder</code> service 它提供了生成 FormControl 的便捷方法。</p>\n<p>舉個例子，將上一篇的例子（ProfileEditor）使用 FormBuilder 進行改寫</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;                                  <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">street</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">city</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">state</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">zip</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;                        <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formValue</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;firstName&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Fandix&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;address&#x27;</span>)?.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;city&#x27;</span>)?.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;New York&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/forms</code> 中引入 <code>FormBuilder</code></li>\n<li>(2): 在 constructor 中將 FormBuilder 注入到 component 中</li>\n<li>(3): 使用 FormBuilder 改寫 FormGroup</li>\n</ul>\n<p>更改為這樣是不是簡單多了，從每一個 FormControl 都要使用 <code>new</code> 建立實例，到使用 FormBuilder 的話只要使用 <code>[ ]</code> 就好，簡直非常方便。</p>\n<h1 id=\"Validating-form-input\"><a href=\"#Validating-form-input\" class=\"headerlink\" title=\"Validating form input\"></a>Validating form input</h1><p> reactive forms 和 template-driven forms 一樣都有對表單進行驗證的功能，這點再開發表單來說非常重要，而在 reactive forms 中對每一個 FormControl 添加驗證也比較簡單，能添加的驗證內容也更多，甚至可以創建客製化的驗證，而這邊只大概介紹該怎麼添加表單驗證，詳細的內容會到明天專門介紹 form validator。</p>\n<p>最常見的表單驗證就是 <code>required</code> 它代表著這個欄位不能為空，接著來使用上面的例子為表單添加驗證功能</p>\n<ol>\n<li><p>從 <code>@angular/forms</code> 中引入 Validators class</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在需要添驗證的 FormControl 後面添加 <code>Validators</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">street</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">state</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 在 <code>firstName</code> 的後面添加了 <code>Validators.required</code> 代表這個 FormControl 不能為空</p>\n</li>\n<li><p>在 profile-editor.component.html 的 submit <code>&lt;button&gt;</code> 中添加驗證</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;profileForm.invalid&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767HbsKhUWCCW.png\"></p>\n<p>當 First Name 欄位為空時，表單的驗證為 <code>invalid</code> 並且將 submit 按鈕 disable 掉，若將表格填上資料時</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767ljo4RKATBj.png\"></p>\n<p>當 First Name 欄位為空時，表單的驗證為 <code>invalid</code> 並且將 submit 按鈕 disable 掉，若將表格填上資料時</p>\n<h1 id=\"Creating-dynamic-forms\"><a href=\"#Creating-dynamic-forms\" class=\"headerlink\" title=\"Creating dynamic forms\"></a>Creating dynamic forms</h1><p>在昨天和上面的部分都是介紹與使用 FormGroup 來管理多個 FormControl，但是當遇到不確定數量的 FormControl 時就需要使用另一種集合多個 FormControl 的方式那就是 <code>FormArray</code>，他就像陣列一樣可以隨時插入或刪除陣列中的 FormControl，由於是不確定數量的 FormControl，所以不需要事先定義每一個 FormControl 的內容。</p>\n<p>舉個例子，將上面的範例做一個改寫，更改為可以動態加入或刪除的表單</p>\n<ol>\n<li><p>從 <code>@angular/forms</code> 中引入 <code>FormArray</code></p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormArray</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>將 profile-editor.component.ts 中的 FormGroup 進行更改</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">users</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">array</span>([&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 將 FormGroup 改為只有一個 Control，而這個 control 的型態為 FormArray，代表他可以存放許多 FormControl，並給予一個初始值</p>\n</li>\n<li><p>在 profile-editor.component.ts 中新增一個 <code>get</code> method，用於獲得 FormControl 的 control</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get users () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;users&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">FormArray</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 profile-editor.component.html 中綁定輸入元素</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;users&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let user of users.controls; let i = index;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">formGroupName</span>]=<span class=\"string\">&quot;i&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;option-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;profileForm.invalid&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      Submit</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊稍微有點複雜，首先雖然是使用 FormArray 但他的最上一層還是使用 FormGroup，所以要在最外層的 <code>&lt;form&gt;</code> 綁定 FormGroup，就跟之前一樣。</p>\n<p> 和綁定 FormGroup 的方法類似，FormArrayNameDirective 提供了 <code>formArrayName</code> 讓表單數組的實例可以與 template 中的元素綁定並溝通。</p>\n<p> 接著使用 <code>*ngFor</code> 將 FormArray 中的 control 遞迴的放在每一個 <code>&lt;div&gt;</code> 中，而這邊使用的 <code>[formGroupName]=&quot;i&quot;</code> 可以把他看做每一個遞迴出來的 <code>&lt;div&gt;</code> 都和最上面的 <code>&lt;form&gt;</code> 一樣綁定了一個 <code>formGroup</code> ，最後將 formGroup 中的 FormControl 綁定給輸入元素，如果要拆開的話可以看成</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;profileForm&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;users&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;formGroup-1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;formGroup-2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210824/20124767k7ypBp3c6C.png\"></p>\n<h2 id=\"Dynamic-add-FormControl\"><a href=\"#Dynamic-add-FormControl\" class=\"headerlink\" title=\"Dynamic add FormControl\"></a>Dynamic add FormControl</h2><p>在一開始提到 FormArray 的功能就是可以動態新增或刪除 FormControl，該怎麼使用就來舉個例子吧。</p>\n<ol>\n<li><p>首先先在 profile-editor.component.html 中新增插入 FormControl 的按鈕</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-light&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onAddItem()&quot;</span>&gt;</span>Add Item<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 profile-editor.component.ts 中添加 onAddItem method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormArray</span>, <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">array</span>([&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;])</span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get users () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;users&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">FormArray</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onAddItem</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">users</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 直接呼叫 <code>get</code> method 他將會回傳 FormArray 的實例，將 FormGroup push 進去就可以了</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/ZAgA8wr.gif\" alt=\"img\"></p>\n<h2 id=\"Delete-FormControl\"><a href=\"#Delete-FormControl\" class=\"headerlink\" title=\"Delete FormControl\"></a>Delete FormControl</h2><p>除了可以動態添加 FormControl 之外也可以動態刪除指定 index 的 FormControl，舉個例子吧</p>\n<ol>\n<li><p>在 profile-editor.component.html 的每個 FormControl 後面添加一個刪除的按鈕</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;users&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let user of users.controls; let i = index&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">formGroupName</span>]=<span class=\"string\">&quot;i&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;formArray&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;first-name&quot;</span>&gt;</span>First Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;last-name&quot;</span>&gt;</span>Last Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;last-name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onDeleteItem(i)&quot;</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 建立一個 <code>&lt;button&gt;</code> 並綁定 onDeleteItem method，這邊要注意的是是傳入了當下這個 controls 的 index，這可以用來刪除指定 index 的 control</p>\n</li>\n<li><p>在 profile-editor.component 中添加 onDeleteItem method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormArray</span>, <span class=\"title class_\">FormBuilder</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-profile-editor&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProfileEditorComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">formValue</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  profileForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">array</span>([&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;])</span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get users () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">profileForm</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;users&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">FormArray</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onAddItem</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">users</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onDeleteItem</span>(<span class=\"params\">index: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">users</span>.<span class=\"title function_\">removeAt</span>(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 使用 FormArray 提供的 method 將 index 做完參數傳入，可以刪除指定 index 的內容</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/NKCpOMh.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何使用 <code>FormBuilder</code> 減少建立大量 FormControl 的動作，讓建立複雜的表單時可以更加快速且便捷。</p>\n<p>也介紹了如何使用 <code>FormArray</code> 建立動態表單，動態新增或刪除內容。</p>\n<p>最後介紹了如何使用 <code>Validator</code> 對每一個 FormControl 進行表單內容驗證，但是在這邊只有大概介紹怎麼使用，明天會介紹詳細的 Validator 內容並且可以建立客製化的 Validator，那麼詳細的內容就留到明天吧，那就明天見。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/reactive-forms#creating-dynamic-forms\">Angular.io - Reactive forms</a></li>\n</ul>"},{"title":"Day27. Validating form input","date":"2021-09-27T01:48:49.000Z","_content":"\n在前幾篇中介紹了 Template-driven forms 和 reactive forms 的用法與概念，雖然建立的方式不同但在根本上都是可以建立一個表單的，而兩種表單中都會需要驗證使用者輸入的資料的準確性與完整性來保持整體數據的質量，本章中將會介紹如何驗證使用者輸入的內容。\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg](https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg)\n\n<!-- more -->\n\n# Validating input in template-driven forms\n\n首先先介紹 template-driven forms 中的 validator，要在 template-driven forms 中添加驗證可以添加與原生 HTML 表單驗證相同的驗證 attribute，比如說可以在 `<input>` 中添加 `required` attribute 這樣這個輸入框就不能為空，又或是可以填入 `max` 代表填入的數字不能大於指定的數字等等，Angular 會使用 directive 將這些 attribute 和框架中的 validator functions 做匹配。\n\n每次表單控制元件的值發生變化時，Angualr 都會運行驗證並生成導致 `INVALID` 狀態的錯誤列表或是生成 `VALID` 狀態的 `null`。\n\n```html\n<div class=\"content\">\n  <input\n    type=\"text\"\n    id=\"name\"\n    name=\"name\"\n    class=\"form-control\"\n    required\n    minlength=\"4\"\n    appForbiddenName=\"bob\"\n    [(ngModel)]=\"hero.name\"\n    #name=\"ngModel\"\n  />\n\n  <div *ngIf=\"name.invalid && (name.dirty || name.touched)\" class=\"alert\">\n    <div *ngIf=\"name.errors?.required\" class=\"alert alert-danger\">Name is required.</div>\n    <div *ngIf=\"name.errors?.minlength\" class=\"alert alert-danger\">\n      Name must be at least 4 characters long.\n    </div>\n    <div *ngIf=\"name.errors?.forbiddenName\" class=\"alert alert-danger\">Name cannot be Bob.</div>\n  </div>\n</div>\n```\n\n在一個 `<input>` 中加入 `required`、`minlength` 和 `appForbiddenName`，代表這個輸入框不能為空不能小於 4 個字且不能是 `bob`，可以利用  name ( template variable ) 的 errors 來判斷是哪一個驗證出錯進而顯示不同的提示，而使用 `*ngIf` 判斷當狀態為 `INVALID` 和`表單已經被觸碰過`或`更改過`時，才會顯示提示畫面。\n\n- 如果輸入框為空\n\n    ![https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png)\n\n- 如果輸入的內容字數小於４個\n\n    ![https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png)\n    \n    至於名字不能是 `bob` 由於這個是客製化驗證的部分，留到後面再補上。\n\n\n# Validating input in reactive forms\n\n在 Reactive forms 中的驗證是通過直接在 component 中的 FormControl 添加驗證，每當 FormControl 發生變化 Angular 就會調用這些函數，而 reactive forms 的驗證器可以是同步也可以是非同步的\n\n- Sync validators：此用 FormControl 的實例並立即返回一組驗證錯誤或是驗證成功（null） 的`同步函數`，可以在實例化 FormControl 的時候將驗證函數作為`第二個`參數傳入。\n- Async validators：非同步驗證函數接收一個 FormControl 並返回一個 `promise` 或 `Observable`，隨後會發出一組驗證錯誤或是驗證成功（null），可以在實例化 FormControl 的時候將驗證函數作為`第三個`參數傳入。\n\n設置同步與非同步驗證器時需要注意，Angular 因為出於性能的問題，如果所有 Sync validators 都通過，Angular 就只會運行 Async validators。\n\n## Built-in validator functions\n\n要設置 reactive forms 的驗證器可以和 template-driven forms 在 template 中添加的驗證器一樣，比如使用 `required` 制定這個表單不能為空等等，以下列一個 validators 的表單\n\n| Name | Description\n|----------|:-------------:|\n| min | 輸入的內容要大於等於 validator 設定的值\n| max | 輸入的內容要小於等於 validator 設定的值\n| required | 輸入的值不能為空\n| requiredTrue | 輸入的值必須為 true，常用在複選框中的`必選欄位`\n| email | 輸入的值需要通過電子郵件驗證測試，常用`正則表達式`驗證\n| minLength | 要求輸入的長度需要大於等於 validator 設置的值，他僅用於舉有數字長度 property 的類型（字串或陣列） \n| maxLength | 要求輸入的長度需要小於等於 validator 設置的值，規則與 minLength 一樣\n| pattern | 輸入的值需要匹配正則表達式的設定\n| nullValidator | 不執行任何操作的 validator\n| compose | 將多個 validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合\n| composeAsync | 將多個 Async validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合\n\n1. 在 reactive.component.ts 中建立 FormControl\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-reactive',\n      templateUrl: './reactive.component.html',\n      styleUrls: ['./reactive.component.css'],\n    })\n    export class ReactiveComponent implements OnInit {\n      hero = new FormGroup({                                                 // (1)\n        name: new FormControl('', [Validators.required, Validators.minLength(4)]),\n      });\n      constructor() {}\n\n      ngOnInit(): void {}\n\n      errorDetect() {\n        return this.name?.invalid && (this.name.touched || this.name.dirty); // (2)\n      }\n\n      getErrorType (): string {                                              // (3)\n        if (this.name?.errors !== null) {\n          if (this.name?.errors.required) {\n            return 'required';\n          } else if (this.name?.errors.minlength) {\n            return 'minlength';\n          }\n        }\n        return '';\n      }\n\n      get name() {                                                           // (4)\n        return this.hero.get('name');\n      }\n    }\n    ```\n\n    - (1): 使用 FormGroup 和 FormControl 建立表單控制元件\n    - (2): 新增一個 method 用於獲得 name 的狀態（是否是無效的內容、使否被處碰與是否被更改）\n    - (3):  新增一個 method 用於獲得 name 的錯誤類型\n    - (4): 新增一個 get property 用於獲得 name 的 FormControl 實例\n2. 在 reactive.component.html 中綁定 FormControl\n\n    ```html\n    <form [formGroup]=\"hero\">\n      <div>\n        <label for=\"name\">Hero Name</label>\n        <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" />\n        <div *ngIf=\"errorDetect()\" class=\"alert alert-danger\">\n          <ng-container [ngSwitch]=\"getErrorType()\">\n            <div *ngSwitchCase=\"'required'\">Name is required.</div>\n            <div *ngSwitchCase=\"'minlength'\">\n              Name must be at least 4 characters long.\n            </div>\n            <div *ngSwitchDefault></div>\n          </ng-container>\n        </div>\n      </div>\n    </form>\n    ```\n\n    在 tempalte 中綁定 component 中的 FormControl，這邊我的寫法會跟 Angular 官方文檔的寫法不一樣，因為個人喜歡把顯示的邏輯放在 component 中，所以無論是判斷 name 是否 `INVALID` 或判斷 name error 的型態都是綁定 component 中的 method。\n    \n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png)\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png)\n\n\n# Defining custom validators\n\n除了上面介紹的預設 Validator function 之外還可以客製化自己的 Validator 用於驗證各種表單內容，template-driven forms 和 reactive forms 都可以客製化自己的 Validator 但他們的方式不一樣，首先先介紹 template-driven forms 的方式。\n\n## template-driven forms custom validators\n\n在上面的例子中有使用一個 `appForbiddenName` 名稱不能為 `bob` 的 validator，但上面目前不會對 bob 這個名字進行驗證，是因為還沒建立屬於他的 validator，那麼就來創建這個客製化的驗證器吧\n\n1. 使用 Angular CLI 建立一個 directive\n\n    ```html\n    ng generate directive forbidden-name\n    ```\n\n2. 在 forbidden-name.directive.ts 中加入 validator function\n\n    ```typescript\n    import { Directive, Input } from '@angular/core';                     // (1)\n    import {\n      AbstractControl,\n      NG_VALIDATORS,\n      ValidationErrors,\n      Validator,\n      ValidatorFn,\n    } from '@angular/forms';                                              // (2)\n\n    @Directive({                                                          // (3)\n      selector: '[appForbiddenName]',\n      providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenNameDirective, nulti: true}]\n    })\n    export class ForbiddenNameDirective implements Validator {            // (4)\n      @Input('appForbiddenName') forbiddenName = '';                      // (5)\n      constructor() {}\n\n      forbiddenNameValidator(nameRe: RegExp): ValidatorFn {               // (6)\n        return (control: AbstractControl): ValidationErrors | null => {\n          const forbidden = nameRe.test(control.value);\n          return forbidden ? { forbiddenName: { value: control.value } } : null;\n        };\n      }\n\n      validate(control: AbstractControl): ValidationErrors | null {       // (7)\n        return this.forbiddenName\n          ? this.forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(\n              control\n            )\n          : null;\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `Input`\n    - (2): 從 `@angular/forms` 中引入\n        - `AbstractControl` 用於為傳入 validate function 的 input 定義型態\n        - `NG_VALIDATORS` 用於註冊與 `AbstractControl` 一起使用的 sync validators InjectionToken\n        - `ValidationErrors` 用於定義失敗的驗證檢查返回錯誤的映射\n        - `Validator` 是執行 sync validator 的 class 的 Interface\n        - `ValidatorFn` 用於接收 FormControl 並 sync 的返回驗證錯誤的映射或返回 null\n    - (3): `NG_VALIDATORS` 使用 `useExisting` 以 `ForbiddenNameDirective` 為模板創建一個實例\n    - (4): 使用 implements 來實踐抽象的 interface ( Validator )\n    - (5): 使用 `@Input()` 裝飾 `forbiddenName` property 為輸入，並取別名為 `appForbiddenName`\n    - (6): 新增一個 method 用於接收字串後判斷字串是否符合驗證規定，返回驗證錯誤的映照或 null\n    - (7): 新增一個一個 method 用於驗證輸入的字串是否符合驗證規定\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png)\n\n## reactive forms custom validators\n\n介紹完 template-driven forms 的客製化驗證器後，接著介紹 reactive forms 的客製化驗證，他不像 template-driven forms  一樣需要建立一個 directive，只需要在 component 中的 FormControl 加入客製化驗證函數即可。\n\n1. 先在 reactive.component.ts 中新增一個客製化驗證函數\n\n    ```typescript\n    forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n      return (control: AbstractControl): ValidationErrors | null => {\n        const forbidden = nameRe.test(control.value);\n        return forbidden ? { forbiddenName: { value: control.value } } : null;\n      };\n    }\n    ```\n\n 2. 在 reactive.component.ts 中 FormGroup 的 name (FormControl) 的 Validator 中添加客製化驗證函數\n\n```typescript\nhero = new FormGroup({\n  name: new FormControl('', [\n    Validators.required,\n    Validators.minLength(4),\n    this.forbiddenNameValidator(/hank/i),\n  ]),\n  alterEgo: new FormControl(''),\n  power: new FormControl('', Validators.required),\n});\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png)\n\n\n# 結論\n\n本章介紹了如何在 template-driven forms 和 reactive forms 中添加預設的 validators function，也介紹了如何建立客製化的 validators function 然後加入到兩種不同的 forms 中，表單驗證在開發表單時非常重要，可以確保資料的確定性。\n\n明天將會介紹 Form 的另一種使用方法，雖然再開發大型表單時可以使用 FormGroup 將類似的 FormControl 分組管理，但真的很大型的表單時還是會顯得非常雜亂難以維護，這時就需要使用 Control Value Accessor 這個功能，可以把它想像成 component 中的父子層，在上層的 Component 中定義大概的 Form Model，將細節放在子層的 component 中，這樣將整個表單內容以 Component 分割，可以更好的維護與測試，詳細該怎麼使用就明天再詳細講解吧，那麼明天見\n\n\n# Reference\n\n- [Angular.io - Validating form input](https://angular.io/guide/form-validation#defining-custom-validators)","source":"_posts/Angular/angular-27.md","raw":"---\ntitle: Day27. Validating form input\ndate: 2021-09-27 09:48:49\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在前幾篇中介紹了 Template-driven forms 和 reactive forms 的用法與概念，雖然建立的方式不同但在根本上都是可以建立一個表單的，而兩種表單中都會需要驗證使用者輸入的資料的準確性與完整性來保持整體數據的質量，本章中將會介紹如何驗證使用者輸入的內容。\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg](https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg)\n\n<!-- more -->\n\n# Validating input in template-driven forms\n\n首先先介紹 template-driven forms 中的 validator，要在 template-driven forms 中添加驗證可以添加與原生 HTML 表單驗證相同的驗證 attribute，比如說可以在 `<input>` 中添加 `required` attribute 這樣這個輸入框就不能為空，又或是可以填入 `max` 代表填入的數字不能大於指定的數字等等，Angular 會使用 directive 將這些 attribute 和框架中的 validator functions 做匹配。\n\n每次表單控制元件的值發生變化時，Angualr 都會運行驗證並生成導致 `INVALID` 狀態的錯誤列表或是生成 `VALID` 狀態的 `null`。\n\n```html\n<div class=\"content\">\n  <input\n    type=\"text\"\n    id=\"name\"\n    name=\"name\"\n    class=\"form-control\"\n    required\n    minlength=\"4\"\n    appForbiddenName=\"bob\"\n    [(ngModel)]=\"hero.name\"\n    #name=\"ngModel\"\n  />\n\n  <div *ngIf=\"name.invalid && (name.dirty || name.touched)\" class=\"alert\">\n    <div *ngIf=\"name.errors?.required\" class=\"alert alert-danger\">Name is required.</div>\n    <div *ngIf=\"name.errors?.minlength\" class=\"alert alert-danger\">\n      Name must be at least 4 characters long.\n    </div>\n    <div *ngIf=\"name.errors?.forbiddenName\" class=\"alert alert-danger\">Name cannot be Bob.</div>\n  </div>\n</div>\n```\n\n在一個 `<input>` 中加入 `required`、`minlength` 和 `appForbiddenName`，代表這個輸入框不能為空不能小於 4 個字且不能是 `bob`，可以利用  name ( template variable ) 的 errors 來判斷是哪一個驗證出錯進而顯示不同的提示，而使用 `*ngIf` 判斷當狀態為 `INVALID` 和`表單已經被觸碰過`或`更改過`時，才會顯示提示畫面。\n\n- 如果輸入框為空\n\n    ![https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png)\n\n- 如果輸入的內容字數小於４個\n\n    ![https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png)\n    \n    至於名字不能是 `bob` 由於這個是客製化驗證的部分，留到後面再補上。\n\n\n# Validating input in reactive forms\n\n在 Reactive forms 中的驗證是通過直接在 component 中的 FormControl 添加驗證，每當 FormControl 發生變化 Angular 就會調用這些函數，而 reactive forms 的驗證器可以是同步也可以是非同步的\n\n- Sync validators：此用 FormControl 的實例並立即返回一組驗證錯誤或是驗證成功（null） 的`同步函數`，可以在實例化 FormControl 的時候將驗證函數作為`第二個`參數傳入。\n- Async validators：非同步驗證函數接收一個 FormControl 並返回一個 `promise` 或 `Observable`，隨後會發出一組驗證錯誤或是驗證成功（null），可以在實例化 FormControl 的時候將驗證函數作為`第三個`參數傳入。\n\n設置同步與非同步驗證器時需要注意，Angular 因為出於性能的問題，如果所有 Sync validators 都通過，Angular 就只會運行 Async validators。\n\n## Built-in validator functions\n\n要設置 reactive forms 的驗證器可以和 template-driven forms 在 template 中添加的驗證器一樣，比如使用 `required` 制定這個表單不能為空等等，以下列一個 validators 的表單\n\n| Name | Description\n|----------|:-------------:|\n| min | 輸入的內容要大於等於 validator 設定的值\n| max | 輸入的內容要小於等於 validator 設定的值\n| required | 輸入的值不能為空\n| requiredTrue | 輸入的值必須為 true，常用在複選框中的`必選欄位`\n| email | 輸入的值需要通過電子郵件驗證測試，常用`正則表達式`驗證\n| minLength | 要求輸入的長度需要大於等於 validator 設置的值，他僅用於舉有數字長度 property 的類型（字串或陣列） \n| maxLength | 要求輸入的長度需要小於等於 validator 設置的值，規則與 minLength 一樣\n| pattern | 輸入的值需要匹配正則表達式的設定\n| nullValidator | 不執行任何操作的 validator\n| compose | 將多個 validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合\n| composeAsync | 將多個 Async validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合\n\n1. 在 reactive.component.ts 中建立 FormControl\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormControl, FormGroup, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-reactive',\n      templateUrl: './reactive.component.html',\n      styleUrls: ['./reactive.component.css'],\n    })\n    export class ReactiveComponent implements OnInit {\n      hero = new FormGroup({                                                 // (1)\n        name: new FormControl('', [Validators.required, Validators.minLength(4)]),\n      });\n      constructor() {}\n\n      ngOnInit(): void {}\n\n      errorDetect() {\n        return this.name?.invalid && (this.name.touched || this.name.dirty); // (2)\n      }\n\n      getErrorType (): string {                                              // (3)\n        if (this.name?.errors !== null) {\n          if (this.name?.errors.required) {\n            return 'required';\n          } else if (this.name?.errors.minlength) {\n            return 'minlength';\n          }\n        }\n        return '';\n      }\n\n      get name() {                                                           // (4)\n        return this.hero.get('name');\n      }\n    }\n    ```\n\n    - (1): 使用 FormGroup 和 FormControl 建立表單控制元件\n    - (2): 新增一個 method 用於獲得 name 的狀態（是否是無效的內容、使否被處碰與是否被更改）\n    - (3):  新增一個 method 用於獲得 name 的錯誤類型\n    - (4): 新增一個 get property 用於獲得 name 的 FormControl 實例\n2. 在 reactive.component.html 中綁定 FormControl\n\n    ```html\n    <form [formGroup]=\"hero\">\n      <div>\n        <label for=\"name\">Hero Name</label>\n        <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" />\n        <div *ngIf=\"errorDetect()\" class=\"alert alert-danger\">\n          <ng-container [ngSwitch]=\"getErrorType()\">\n            <div *ngSwitchCase=\"'required'\">Name is required.</div>\n            <div *ngSwitchCase=\"'minlength'\">\n              Name must be at least 4 characters long.\n            </div>\n            <div *ngSwitchDefault></div>\n          </ng-container>\n        </div>\n      </div>\n    </form>\n    ```\n\n    在 tempalte 中綁定 component 中的 FormControl，這邊我的寫法會跟 Angular 官方文檔的寫法不一樣，因為個人喜歡把顯示的邏輯放在 component 中，所以無論是判斷 name 是否 `INVALID` 或判斷 name error 的型態都是綁定 component 中的 method。\n    \n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png)\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png)\n\n\n# Defining custom validators\n\n除了上面介紹的預設 Validator function 之外還可以客製化自己的 Validator 用於驗證各種表單內容，template-driven forms 和 reactive forms 都可以客製化自己的 Validator 但他們的方式不一樣，首先先介紹 template-driven forms 的方式。\n\n## template-driven forms custom validators\n\n在上面的例子中有使用一個 `appForbiddenName` 名稱不能為 `bob` 的 validator，但上面目前不會對 bob 這個名字進行驗證，是因為還沒建立屬於他的 validator，那麼就來創建這個客製化的驗證器吧\n\n1. 使用 Angular CLI 建立一個 directive\n\n    ```html\n    ng generate directive forbidden-name\n    ```\n\n2. 在 forbidden-name.directive.ts 中加入 validator function\n\n    ```typescript\n    import { Directive, Input } from '@angular/core';                     // (1)\n    import {\n      AbstractControl,\n      NG_VALIDATORS,\n      ValidationErrors,\n      Validator,\n      ValidatorFn,\n    } from '@angular/forms';                                              // (2)\n\n    @Directive({                                                          // (3)\n      selector: '[appForbiddenName]',\n      providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenNameDirective, nulti: true}]\n    })\n    export class ForbiddenNameDirective implements Validator {            // (4)\n      @Input('appForbiddenName') forbiddenName = '';                      // (5)\n      constructor() {}\n\n      forbiddenNameValidator(nameRe: RegExp): ValidatorFn {               // (6)\n        return (control: AbstractControl): ValidationErrors | null => {\n          const forbidden = nameRe.test(control.value);\n          return forbidden ? { forbiddenName: { value: control.value } } : null;\n        };\n      }\n\n      validate(control: AbstractControl): ValidationErrors | null {       // (7)\n        return this.forbiddenName\n          ? this.forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(\n              control\n            )\n          : null;\n      }\n    }\n    ```\n\n    - (1): 從 `@angular/core` 中引入 `Input`\n    - (2): 從 `@angular/forms` 中引入\n        - `AbstractControl` 用於為傳入 validate function 的 input 定義型態\n        - `NG_VALIDATORS` 用於註冊與 `AbstractControl` 一起使用的 sync validators InjectionToken\n        - `ValidationErrors` 用於定義失敗的驗證檢查返回錯誤的映射\n        - `Validator` 是執行 sync validator 的 class 的 Interface\n        - `ValidatorFn` 用於接收 FormControl 並 sync 的返回驗證錯誤的映射或返回 null\n    - (3): `NG_VALIDATORS` 使用 `useExisting` 以 `ForbiddenNameDirective` 為模板創建一個實例\n    - (4): 使用 implements 來實踐抽象的 interface ( Validator )\n    - (5): 使用 `@Input()` 裝飾 `forbiddenName` property 為輸入，並取別名為 `appForbiddenName`\n    - (6): 新增一個 method 用於接收字串後判斷字串是否符合驗證規定，返回驗證錯誤的映照或 null\n    - (7): 新增一個一個 method 用於驗證輸入的字串是否符合驗證規定\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png)\n\n## reactive forms custom validators\n\n介紹完 template-driven forms 的客製化驗證器後，接著介紹 reactive forms 的客製化驗證，他不像 template-driven forms  一樣需要建立一個 directive，只需要在 component 中的 FormControl 加入客製化驗證函數即可。\n\n1. 先在 reactive.component.ts 中新增一個客製化驗證函數\n\n    ```typescript\n    forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n      return (control: AbstractControl): ValidationErrors | null => {\n        const forbidden = nameRe.test(control.value);\n        return forbidden ? { forbiddenName: { value: control.value } } : null;\n      };\n    }\n    ```\n\n 2. 在 reactive.component.ts 中 FormGroup 的 name (FormControl) 的 Validator 中添加客製化驗證函數\n\n```typescript\nhero = new FormGroup({\n  name: new FormControl('', [\n    Validators.required,\n    Validators.minLength(4),\n    this.forbiddenNameValidator(/hank/i),\n  ]),\n  alterEgo: new FormControl(''),\n  power: new FormControl('', Validators.required),\n});\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png](https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png)\n\n\n# 結論\n\n本章介紹了如何在 template-driven forms 和 reactive forms 中添加預設的 validators function，也介紹了如何建立客製化的 validators function 然後加入到兩種不同的 forms 中，表單驗證在開發表單時非常重要，可以確保資料的確定性。\n\n明天將會介紹 Form 的另一種使用方法，雖然再開發大型表單時可以使用 FormGroup 將類似的 FormControl 分組管理，但真的很大型的表單時還是會顯得非常雜亂難以維護，這時就需要使用 Control Value Accessor 這個功能，可以把它想像成 component 中的父子層，在上層的 Component 中定義大概的 Form Model，將細節放在子層的 component 中，這樣將整個表單內容以 Component 分割，可以更好的維護與測試，詳細該怎麼使用就明天再詳細講解吧，那麼明天見\n\n\n# Reference\n\n- [Angular.io - Validating form input](https://angular.io/guide/form-validation#defining-custom-validators)","slug":"Angular/angular-27","published":1,"updated":"2022-02-16T06:47:05.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6bdy001295w30pxwfj0m","content":"<p>在前幾篇中介紹了 Template-driven forms 和 reactive forms 的用法與概念，雖然建立的方式不同但在根本上都是可以建立一個表單的，而兩種表單中都會需要驗證使用者輸入的資料的準確性與完整性來保持整體數據的質量，本章中將會介紹如何驗證使用者輸入的內容。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Validating-input-in-template-driven-forms\"><a href=\"#Validating-input-in-template-driven-forms\" class=\"headerlink\" title=\"Validating input in template-driven forms\"></a>Validating input in template-driven forms</h1><p>首先先介紹 template-driven forms 中的 validator，要在 template-driven forms 中添加驗證可以添加與原生 HTML 表單驗證相同的驗證 attribute，比如說可以在 <code>&lt;input&gt;</code> 中添加 <code>required</code> attribute 這樣這個輸入框就不能為空，又或是可以填入 <code>max</code> 代表填入的數字不能大於指定的數字等等，Angular 會使用 directive 將這些 attribute 和框架中的 validator functions 做匹配。</p>\n<p>每次表單控制元件的值發生變化時，Angualr 都會運行驗證並生成導致 <code>INVALID</code> 狀態的錯誤列表或是生成 <code>VALID</code> 狀態的 <code>null</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">minlength</span>=<span class=\"string\">&quot;4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">appForbiddenName</span>=<span class=\"string\">&quot;bob&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;hero.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    #<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.invalid &amp;&amp; (name.dirty || name.touched)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors?.required&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span>Name is required.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors?.minlength&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class=\"line\">      Name must be at least 4 characters long.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors?.forbiddenName&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span>Name cannot be Bob.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在一個 <code>&lt;input&gt;</code> 中加入 <code>required</code>、<code>minlength</code> 和 <code>appForbiddenName</code>，代表這個輸入框不能為空不能小於 4 個字且不能是 <code>bob</code>，可以利用  name ( template variable ) 的 errors 來判斷是哪一個驗證出錯進而顯示不同的提示，而使用 <code>*ngIf</code> 判斷當狀態為 <code>INVALID</code> 和<code>表單已經被觸碰過</code>或<code>更改過</code>時，才會顯示提示畫面。</p>\n<ul>\n<li><p>如果輸入框為空</p>\n<p>  <img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png\"></p>\n</li>\n<li><p>如果輸入的內容字數小於４個</p>\n<p>  <img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png\"></p>\n<p>  至於名字不能是 <code>bob</code> 由於這個是客製化驗證的部分，留到後面再補上。</p>\n</li>\n</ul>\n<h1 id=\"Validating-input-in-reactive-forms\"><a href=\"#Validating-input-in-reactive-forms\" class=\"headerlink\" title=\"Validating input in reactive forms\"></a>Validating input in reactive forms</h1><p>在 Reactive forms 中的驗證是通過直接在 component 中的 FormControl 添加驗證，每當 FormControl 發生變化 Angular 就會調用這些函數，而 reactive forms 的驗證器可以是同步也可以是非同步的</p>\n<ul>\n<li>Sync validators：此用 FormControl 的實例並立即返回一組驗證錯誤或是驗證成功（null） 的<code>同步函數</code>，可以在實例化 FormControl 的時候將驗證函數作為<code>第二個</code>參數傳入。</li>\n<li>Async validators：非同步驗證函數接收一個 FormControl 並返回一個 <code>promise</code> 或 <code>Observable</code>，隨後會發出一組驗證錯誤或是驗證成功（null），可以在實例化 FormControl 的時候將驗證函數作為<code>第三個</code>參數傳入。</li>\n</ul>\n<p>設置同步與非同步驗證器時需要注意，Angular 因為出於性能的問題，如果所有 Sync validators 都通過，Angular 就只會運行 Async validators。</p>\n<h2 id=\"Built-in-validator-functions\"><a href=\"#Built-in-validator-functions\" class=\"headerlink\" title=\"Built-in validator functions\"></a>Built-in validator functions</h2><p>要設置 reactive forms 的驗證器可以和 template-driven forms 在 template 中添加的驗證器一樣，比如使用 <code>required</code> 制定這個表單不能為空等等，以下列一個 validators 的表單</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>min</td>\n<td align=\"center\">輸入的內容要大於等於 validator 設定的值</td>\n</tr>\n<tr>\n<td>max</td>\n<td align=\"center\">輸入的內容要小於等於 validator 設定的值</td>\n</tr>\n<tr>\n<td>required</td>\n<td align=\"center\">輸入的值不能為空</td>\n</tr>\n<tr>\n<td>requiredTrue</td>\n<td align=\"center\">輸入的值必須為 true，常用在複選框中的<code>必選欄位</code></td>\n</tr>\n<tr>\n<td>email</td>\n<td align=\"center\">輸入的值需要通過電子郵件驗證測試，常用<code>正則表達式</code>驗證</td>\n</tr>\n<tr>\n<td>minLength</td>\n<td align=\"center\">要求輸入的長度需要大於等於 validator 設置的值，他僅用於舉有數字長度 property 的類型（字串或陣列）</td>\n</tr>\n<tr>\n<td>maxLength</td>\n<td align=\"center\">要求輸入的長度需要小於等於 validator 設置的值，規則與 minLength 一樣</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td align=\"center\">輸入的值需要匹配正則表達式的設定</td>\n</tr>\n<tr>\n<td>nullValidator</td>\n<td align=\"center\">不執行任何操作的 validator</td>\n</tr>\n<tr>\n<td>compose</td>\n<td align=\"center\">將多個 validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合</td>\n</tr>\n<tr>\n<td>composeAsync</td>\n<td align=\"center\">將多個 Async validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>在 reactive.component.ts 中建立 FormControl</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-reactive&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./reactive.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./reactive.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReactiveComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  hero = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;                                                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>, [<span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>, <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(<span class=\"number\">4</span>)]),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">errorDetect</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">invalid</span> &amp;&amp; (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">touched</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">dirty</span>); <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getErrorType (): <span class=\"built_in\">string</span> &#123;                                              <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">errors</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">errors</span>.<span class=\"property\">required</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;required&#x27;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">errors</span>.<span class=\"property\">minlength</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;minlength&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>() &#123;                                                           <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">hero</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 使用 FormGroup 和 FormControl 建立表單控制元件</li>\n<li>(2): 新增一個 method 用於獲得 name 的狀態（是否是無效的內容、使否被處碰與是否被更改）</li>\n<li>(3):  新增一個 method 用於獲得 name 的錯誤類型</li>\n<li>(4): 新增一個 get property 用於獲得 name 的 FormControl 實例</li>\n</ul>\n</li>\n<li><p>在 reactive.component.html 中綁定 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Hero Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;errorDetect()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">&quot;getErrorType()&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;&#x27;required&#x27;&quot;</span>&gt;</span>Name is required.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;&#x27;minlength&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">          Name must be at least 4 characters long.</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchDefault</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 在 tempalte 中綁定 component 中的 FormControl，這邊我的寫法會跟 Angular 官方文檔的寫法不一樣，因為個人喜歡把顯示的邏輯放在 component 中，所以無論是判斷 name 是否 <code>INVALID</code> 或判斷 name error 的型態都是綁定 component 中的 method。</p>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png\"></p>\n<h1 id=\"Defining-custom-validators\"><a href=\"#Defining-custom-validators\" class=\"headerlink\" title=\"Defining custom validators\"></a>Defining custom validators</h1><p>除了上面介紹的預設 Validator function 之外還可以客製化自己的 Validator 用於驗證各種表單內容，template-driven forms 和 reactive forms 都可以客製化自己的 Validator 但他們的方式不一樣，首先先介紹 template-driven forms 的方式。</p>\n<h2 id=\"template-driven-forms-custom-validators\"><a href=\"#template-driven-forms-custom-validators\" class=\"headerlink\" title=\"template-driven forms custom validators\"></a>template-driven forms custom validators</h2><p>在上面的例子中有使用一個 <code>appForbiddenName</code> 名稱不能為 <code>bob</code> 的 validator，但上面目前不會對 bob 這個名字進行驗證，是因為還沒建立屬於他的 validator，那麼就來創建這個客製化的驗證器吧</p>\n<ol>\n<li><p>使用 Angular CLI 建立一個 directive</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive forbidden-name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 forbidden-name.directive.ts 中加入 validator function</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;                     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">AbstractControl</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">NG_VALIDATORS</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ValidationErrors</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Validator</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ValidatorFn</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                                              <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;                                                          <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appForbiddenName]&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [&#123;<span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALIDATORS</span>, <span class=\"attr\">useExisting</span>: <span class=\"title class_\">ForbiddenNameDirective</span>, <span class=\"attr\">nulti</span>: <span class=\"literal\">true</span>&#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForbiddenNameDirective</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Validator</span> &#123;            <span class=\"comment\">// (4)</span></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>(<span class=\"string\">&#x27;appForbiddenName&#x27;</span>) forbiddenName = <span class=\"string\">&#x27;&#x27;</span>;                      <span class=\"comment\">// (5)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"attr\">nameRe</span>: <span class=\"title class_\">RegExp</span>): <span class=\"title class_\">ValidatorFn</span> &#123;               <span class=\"comment\">// (6)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"attr\">control</span>: <span class=\"title class_\">AbstractControl</span>): <span class=\"title class_\">ValidationErrors</span> | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> forbidden = nameRe.<span class=\"title function_\">test</span>(control.<span class=\"property\">value</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> forbidden ? &#123; <span class=\"attr\">forbiddenName</span>: &#123; <span class=\"attr\">value</span>: control.<span class=\"property\">value</span> &#125; &#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(<span class=\"attr\">control</span>: <span class=\"title class_\">AbstractControl</span>): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;       <span class=\"comment\">// (7)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">forbiddenName</span></span><br><span class=\"line\">      ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">forbiddenName</span>, <span class=\"string\">&#x27;i&#x27;</span>))(</span><br><span class=\"line\">          control</span><br><span class=\"line\">        )</span><br><span class=\"line\">      : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>Input</code></li>\n<li>(2): 從 <code>@angular/forms</code> 中引入<ul>\n<li><code>AbstractControl</code> 用於為傳入 validate function 的 input 定義型態</li>\n<li><code>NG_VALIDATORS</code> 用於註冊與 <code>AbstractControl</code> 一起使用的 sync validators InjectionToken</li>\n<li><code>ValidationErrors</code> 用於定義失敗的驗證檢查返回錯誤的映射</li>\n<li><code>Validator</code> 是執行 sync validator 的 class 的 Interface</li>\n<li><code>ValidatorFn</code> 用於接收 FormControl 並 sync 的返回驗證錯誤的映射或返回 null</li>\n</ul>\n</li>\n<li>(3): <code>NG_VALIDATORS</code> 使用 <code>useExisting</code> 以 <code>ForbiddenNameDirective</code> 為模板創建一個實例</li>\n<li>(4): 使用 implements 來實踐抽象的 interface ( Validator )</li>\n<li>(5): 使用 <code>@Input()</code> 裝飾 <code>forbiddenName</code> property 為輸入，並取別名為 <code>appForbiddenName</code></li>\n<li>(6): 新增一個 method 用於接收字串後判斷字串是否符合驗證規定，返回驗證錯誤的映照或 null</li>\n<li>(7): 新增一個一個 method 用於驗證輸入的字串是否符合驗證規定</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png\"></p>\n<h2 id=\"reactive-forms-custom-validators\"><a href=\"#reactive-forms-custom-validators\" class=\"headerlink\" title=\"reactive forms custom validators\"></a>reactive forms custom validators</h2><p>介紹完 template-driven forms 的客製化驗證器後，接著介紹 reactive forms 的客製化驗證，他不像 template-driven forms  一樣需要建立一個 directive，只需要在 component 中的 FormControl 加入客製化驗證函數即可。</p>\n<ol>\n<li><p>先在 reactive.component.ts 中新增一個客製化驗證函數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"attr\">nameRe</span>: <span class=\"title class_\">RegExp</span>): <span class=\"title class_\">ValidatorFn</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"attr\">control</span>: <span class=\"title class_\">AbstractControl</span>): <span class=\"title class_\">ValidationErrors</span> | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden = nameRe.<span class=\"title function_\">test</span>(control.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123; <span class=\"attr\">forbiddenName</span>: &#123; <span class=\"attr\">value</span>: control.<span class=\"property\">value</span> &#125; &#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 reactive.component.ts 中 FormGroup 的 name (FormControl) 的 Validator 中添加客製化驗證函數</p>\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hero = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>, [</span><br><span class=\"line\">    <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"regexp\">/hank/i</span>),</span><br><span class=\"line\">  ]),</span><br><span class=\"line\">  <span class=\"attr\">alterEgo</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">power</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>),</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何在 template-driven forms 和 reactive forms 中添加預設的 validators function，也介紹了如何建立客製化的 validators function 然後加入到兩種不同的 forms 中，表單驗證在開發表單時非常重要，可以確保資料的確定性。</p>\n<p>明天將會介紹 Form 的另一種使用方法，雖然再開發大型表單時可以使用 FormGroup 將類似的 FormControl 分組管理，但真的很大型的表單時還是會顯得非常雜亂難以維護，這時就需要使用 Control Value Accessor 這個功能，可以把它想像成 component 中的父子層，在上層的 Component 中定義大概的 Form Model，將細節放在子層的 component 中，這樣將整個表單內容以 Component 分割，可以更好的維護與測試，詳細該怎麼使用就明天再詳細講解吧，那麼明天見</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/form-validation#defining-custom-validators\">Angular.io - Validating form input</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在前幾篇中介紹了 Template-driven forms 和 reactive forms 的用法與概念，雖然建立的方式不同但在根本上都是可以建立一個表單的，而兩種表單中都會需要驗證使用者輸入的資料的準確性與完整性來保持整體數據的質量，本章中將會介紹如何驗證使用者輸入的內容。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oGJRbnjfIU.jpg\"></p>","more":"<h1 id=\"Validating-input-in-template-driven-forms\"><a href=\"#Validating-input-in-template-driven-forms\" class=\"headerlink\" title=\"Validating input in template-driven forms\"></a>Validating input in template-driven forms</h1><p>首先先介紹 template-driven forms 中的 validator，要在 template-driven forms 中添加驗證可以添加與原生 HTML 表單驗證相同的驗證 attribute，比如說可以在 <code>&lt;input&gt;</code> 中添加 <code>required</code> attribute 這樣這個輸入框就不能為空，又或是可以填入 <code>max</code> 代表填入的數字不能大於指定的數字等等，Angular 會使用 directive 將這些 attribute 和框架中的 validator functions 做匹配。</p>\n<p>每次表單控制元件的值發生變化時，Angualr 都會運行驗證並生成導致 <code>INVALID</code> 狀態的錯誤列表或是生成 <code>VALID</code> 狀態的 <code>null</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">minlength</span>=<span class=\"string\">&quot;4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">appForbiddenName</span>=<span class=\"string\">&quot;bob&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;hero.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    #<span class=\"attr\">name</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.invalid &amp;&amp; (name.dirty || name.touched)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors?.required&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span>Name is required.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors?.minlength&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class=\"line\">      Name must be at least 4 characters long.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors?.forbiddenName&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span>Name cannot be Bob.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在一個 <code>&lt;input&gt;</code> 中加入 <code>required</code>、<code>minlength</code> 和 <code>appForbiddenName</code>，代表這個輸入框不能為空不能小於 4 個字且不能是 <code>bob</code>，可以利用  name ( template variable ) 的 errors 來判斷是哪一個驗證出錯進而顯示不同的提示，而使用 <code>*ngIf</code> 判斷當狀態為 <code>INVALID</code> 和<code>表單已經被觸碰過</code>或<code>更改過</code>時，才會顯示提示畫面。</p>\n<ul>\n<li><p>如果輸入框為空</p>\n<p>  <img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767admY7u506b.png\"></p>\n</li>\n<li><p>如果輸入的內容字數小於４個</p>\n<p>  <img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767oNm1D5Kayu.png\"></p>\n<p>  至於名字不能是 <code>bob</code> 由於這個是客製化驗證的部分，留到後面再補上。</p>\n</li>\n</ul>\n<h1 id=\"Validating-input-in-reactive-forms\"><a href=\"#Validating-input-in-reactive-forms\" class=\"headerlink\" title=\"Validating input in reactive forms\"></a>Validating input in reactive forms</h1><p>在 Reactive forms 中的驗證是通過直接在 component 中的 FormControl 添加驗證，每當 FormControl 發生變化 Angular 就會調用這些函數，而 reactive forms 的驗證器可以是同步也可以是非同步的</p>\n<ul>\n<li>Sync validators：此用 FormControl 的實例並立即返回一組驗證錯誤或是驗證成功（null） 的<code>同步函數</code>，可以在實例化 FormControl 的時候將驗證函數作為<code>第二個</code>參數傳入。</li>\n<li>Async validators：非同步驗證函數接收一個 FormControl 並返回一個 <code>promise</code> 或 <code>Observable</code>，隨後會發出一組驗證錯誤或是驗證成功（null），可以在實例化 FormControl 的時候將驗證函數作為<code>第三個</code>參數傳入。</li>\n</ul>\n<p>設置同步與非同步驗證器時需要注意，Angular 因為出於性能的問題，如果所有 Sync validators 都通過，Angular 就只會運行 Async validators。</p>\n<h2 id=\"Built-in-validator-functions\"><a href=\"#Built-in-validator-functions\" class=\"headerlink\" title=\"Built-in validator functions\"></a>Built-in validator functions</h2><p>要設置 reactive forms 的驗證器可以和 template-driven forms 在 template 中添加的驗證器一樣，比如使用 <code>required</code> 制定這個表單不能為空等等，以下列一個 validators 的表單</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>min</td>\n<td align=\"center\">輸入的內容要大於等於 validator 設定的值</td>\n</tr>\n<tr>\n<td>max</td>\n<td align=\"center\">輸入的內容要小於等於 validator 設定的值</td>\n</tr>\n<tr>\n<td>required</td>\n<td align=\"center\">輸入的值不能為空</td>\n</tr>\n<tr>\n<td>requiredTrue</td>\n<td align=\"center\">輸入的值必須為 true，常用在複選框中的<code>必選欄位</code></td>\n</tr>\n<tr>\n<td>email</td>\n<td align=\"center\">輸入的值需要通過電子郵件驗證測試，常用<code>正則表達式</code>驗證</td>\n</tr>\n<tr>\n<td>minLength</td>\n<td align=\"center\">要求輸入的長度需要大於等於 validator 設置的值，他僅用於舉有數字長度 property 的類型（字串或陣列）</td>\n</tr>\n<tr>\n<td>maxLength</td>\n<td align=\"center\">要求輸入的長度需要小於等於 validator 設置的值，規則與 minLength 一樣</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td align=\"center\">輸入的值需要匹配正則表達式的設定</td>\n</tr>\n<tr>\n<td>nullValidator</td>\n<td align=\"center\">不執行任何操作的 validator</td>\n</tr>\n<tr>\n<td>compose</td>\n<td align=\"center\">將多個 validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合</td>\n</tr>\n<tr>\n<td>composeAsync</td>\n<td align=\"center\">將多個 Async validator 合成一個函數，該函數返回提供 FormControl 的各個錯誤映射的聯合</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>在 reactive.component.ts 中建立 FormControl</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-reactive&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./reactive.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./reactive.component.css&#x27;</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReactiveComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  hero = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;                                                 <span class=\"comment\">// (1)</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>, [<span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>, <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(<span class=\"number\">4</span>)]),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">errorDetect</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">invalid</span> &amp;&amp; (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">touched</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">dirty</span>); <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getErrorType (): <span class=\"built_in\">string</span> &#123;                                              <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">errors</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">errors</span>.<span class=\"property\">required</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;required&#x27;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"property\">errors</span>.<span class=\"property\">minlength</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;minlength&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>() &#123;                                                           <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">hero</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;name&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 使用 FormGroup 和 FormControl 建立表單控制元件</li>\n<li>(2): 新增一個 method 用於獲得 name 的狀態（是否是無效的內容、使否被處碰與是否被更改）</li>\n<li>(3):  新增一個 method 用於獲得 name 的錯誤類型</li>\n<li>(4): 新增一個 get property 用於獲得 name 的 FormControl 實例</li>\n</ul>\n</li>\n<li><p>在 reactive.component.html 中綁定 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;hero&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Hero Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;errorDetect()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ng-container</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">&quot;getErrorType()&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;&#x27;required&#x27;&quot;</span>&gt;</span>Name is required.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">&quot;&#x27;minlength&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">          Name must be at least 4 characters long.</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngSwitchDefault</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 在 tempalte 中綁定 component 中的 FormControl，這邊我的寫法會跟 Angular 官方文檔的寫法不一樣，因為個人喜歡把顯示的邏輯放在 component 中，所以無論是判斷 name 是否 <code>INVALID</code> 或判斷 name error 的型態都是綁定 component 中的 method。</p>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767ltGgbqbE4G.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767NDiGEUEh4U.png\"></p>\n<h1 id=\"Defining-custom-validators\"><a href=\"#Defining-custom-validators\" class=\"headerlink\" title=\"Defining custom validators\"></a>Defining custom validators</h1><p>除了上面介紹的預設 Validator function 之外還可以客製化自己的 Validator 用於驗證各種表單內容，template-driven forms 和 reactive forms 都可以客製化自己的 Validator 但他們的方式不一樣，首先先介紹 template-driven forms 的方式。</p>\n<h2 id=\"template-driven-forms-custom-validators\"><a href=\"#template-driven-forms-custom-validators\" class=\"headerlink\" title=\"template-driven forms custom validators\"></a>template-driven forms custom validators</h2><p>在上面的例子中有使用一個 <code>appForbiddenName</code> 名稱不能為 <code>bob</code> 的 validator，但上面目前不會對 bob 這個名字進行驗證，是因為還沒建立屬於他的 validator，那麼就來創建這個客製化的驗證器吧</p>\n<ol>\n<li><p>使用 Angular CLI 建立一個 directive</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate directive forbidden-name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 forbidden-name.directive.ts 中加入 validator function</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Directive</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;                     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">AbstractControl</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">NG_VALIDATORS</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ValidationErrors</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Validator</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ValidatorFn</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;                                              <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;                                                          <span class=\"comment\">// (3)</span></span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appForbiddenName]&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [&#123;<span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALIDATORS</span>, <span class=\"attr\">useExisting</span>: <span class=\"title class_\">ForbiddenNameDirective</span>, <span class=\"attr\">nulti</span>: <span class=\"literal\">true</span>&#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForbiddenNameDirective</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Validator</span> &#123;            <span class=\"comment\">// (4)</span></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>(<span class=\"string\">&#x27;appForbiddenName&#x27;</span>) forbiddenName = <span class=\"string\">&#x27;&#x27;</span>;                      <span class=\"comment\">// (5)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"attr\">nameRe</span>: <span class=\"title class_\">RegExp</span>): <span class=\"title class_\">ValidatorFn</span> &#123;               <span class=\"comment\">// (6)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"attr\">control</span>: <span class=\"title class_\">AbstractControl</span>): <span class=\"title class_\">ValidationErrors</span> | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> forbidden = nameRe.<span class=\"title function_\">test</span>(control.<span class=\"property\">value</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> forbidden ? &#123; <span class=\"attr\">forbiddenName</span>: &#123; <span class=\"attr\">value</span>: control.<span class=\"property\">value</span> &#125; &#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(<span class=\"attr\">control</span>: <span class=\"title class_\">AbstractControl</span>): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;       <span class=\"comment\">// (7)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">forbiddenName</span></span><br><span class=\"line\">      ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">forbiddenName</span>, <span class=\"string\">&#x27;i&#x27;</span>))(</span><br><span class=\"line\">          control</span><br><span class=\"line\">        )</span><br><span class=\"line\">      : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>@angular/core</code> 中引入 <code>Input</code></li>\n<li>(2): 從 <code>@angular/forms</code> 中引入<ul>\n<li><code>AbstractControl</code> 用於為傳入 validate function 的 input 定義型態</li>\n<li><code>NG_VALIDATORS</code> 用於註冊與 <code>AbstractControl</code> 一起使用的 sync validators InjectionToken</li>\n<li><code>ValidationErrors</code> 用於定義失敗的驗證檢查返回錯誤的映射</li>\n<li><code>Validator</code> 是執行 sync validator 的 class 的 Interface</li>\n<li><code>ValidatorFn</code> 用於接收 FormControl 並 sync 的返回驗證錯誤的映射或返回 null</li>\n</ul>\n</li>\n<li>(3): <code>NG_VALIDATORS</code> 使用 <code>useExisting</code> 以 <code>ForbiddenNameDirective</code> 為模板創建一個實例</li>\n<li>(4): 使用 implements 來實踐抽象的 interface ( Validator )</li>\n<li>(5): 使用 <code>@Input()</code> 裝飾 <code>forbiddenName</code> property 為輸入，並取別名為 <code>appForbiddenName</code></li>\n<li>(6): 新增一個 method 用於接收字串後判斷字串是否符合驗證規定，返回驗證錯誤的映照或 null</li>\n<li>(7): 新增一個一個 method 用於驗證輸入的字串是否符合驗證規定</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767lyWNYBJbAf.png\"></p>\n<h2 id=\"reactive-forms-custom-validators\"><a href=\"#reactive-forms-custom-validators\" class=\"headerlink\" title=\"reactive forms custom validators\"></a>reactive forms custom validators</h2><p>介紹完 template-driven forms 的客製化驗證器後，接著介紹 reactive forms 的客製化驗證，他不像 template-driven forms  一樣需要建立一個 directive，只需要在 component 中的 FormControl 加入客製化驗證函數即可。</p>\n<ol>\n<li><p>先在 reactive.component.ts 中新增一個客製化驗證函數</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"attr\">nameRe</span>: <span class=\"title class_\">RegExp</span>): <span class=\"title class_\">ValidatorFn</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"attr\">control</span>: <span class=\"title class_\">AbstractControl</span>): <span class=\"title class_\">ValidationErrors</span> | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden = nameRe.<span class=\"title function_\">test</span>(control.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123; <span class=\"attr\">forbiddenName</span>: &#123; <span class=\"attr\">value</span>: control.<span class=\"property\">value</span> &#125; &#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 reactive.component.ts 中 FormGroup 的 name (FormControl) 的 Validator 中添加客製化驗證函數</p>\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hero = <span class=\"keyword\">new</span> <span class=\"title class_\">FormGroup</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>, [</span><br><span class=\"line\">    <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">forbiddenNameValidator</span>(<span class=\"regexp\">/hank/i</span>),</span><br><span class=\"line\">  ]),</span><br><span class=\"line\">  <span class=\"attr\">alterEgo</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">power</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>),</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210826/20124767wlh2Pe5yek.png\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何在 template-driven forms 和 reactive forms 中添加預設的 validators function，也介紹了如何建立客製化的 validators function 然後加入到兩種不同的 forms 中，表單驗證在開發表單時非常重要，可以確保資料的確定性。</p>\n<p>明天將會介紹 Form 的另一種使用方法，雖然再開發大型表單時可以使用 FormGroup 將類似的 FormControl 分組管理，但真的很大型的表單時還是會顯得非常雜亂難以維護，這時就需要使用 Control Value Accessor 這個功能，可以把它想像成 component 中的父子層，在上層的 Component 中定義大概的 Form Model，將細節放在子層的 component 中，這樣將整個表單內容以 Component 分割，可以更好的維護與測試，詳細該怎麼使用就明天再詳細講解吧，那麼明天見</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/form-validation#defining-custom-validators\">Angular.io - Validating form input</a></li>\n</ul>"},{"title":"Day28. Control Value Accessor (CVA)","date":"2021-09-28T00:38:43.000Z","_content":"\n前幾篇介紹了 Form 的基本操作與概念，也介紹了如何在表單中加入驗證，最後要來介紹 Angular Form 中一個我滿喜歡的功能，`Control Value Accessor` 簡稱 `CVA`，就像開發 component 一樣，當這個 component 太大的時候我們會選擇將這個大的 component 拆解成一個一個小的 component，這樣比較方便撰寫維護與測試，CVA 就有是這種概念，當要開發一個超大的表單時，每一個 FormControl 都有自己的設定和各自的 Validator funciton，這樣整個 component 都會充滿不同的表單設定，除了 component 之外 template 也會非常龐大，要找一個 formControlName 就會找半天，所以需要使用 CVA 將龐大的表單分割成一個一個小的 component，這樣可維護性與可測試性就會提高。\n\n![https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png](https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png)\n\n<!-- more -->\n\n# Learn by example\n\n本篇會透過一個建立一個 CVA 的例子來講解如何從零開始建立屬於你的 CVA component，那麼就往下看吧。\n\n## Create new Component\n\n首先先使用 Angular CLI 建立一個新的 component\n\n```bash\nng generate component single-control-cva\n```\n\n## Setting NG_VALUE_ACCESSOR\n\n接著在 single-control-cva.component.ts 中加入 CVA 的設定\n\n```typescript\nimport { Component, OnInit, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'app-single-control-cva',\n  templateUrl: './single-control-cva.component.html',\n  styleUrls: ['./single-control-cva.component.css'],\n  providers: [\n    {                                                                   // (1)\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SingleControlCvaComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,                                           // (2)\n      useExisting: forwardRef(() => SingleControlCvaComponent),\n      multi: true\n    }\n  ] \n})\nexport class SingleControlCvaComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n```\n\n首先要先在 single-control-cva.component.ts 中建立 `NG_VALUE_ACCESSOR` 的設定，這樣當 Angular 在運行的時候會檢查這個 component 是否有這個設置，如果有就會將這個 component 視為一個 FormControl。\n\n- (1): 將 `NG_VALUE_ACCESSOR` 以 SingleControlCvaComponent 為模板創建一個實例，用於將這個 component 定義為 `NG_VALUE_ACCESSOR`，讓 Angular 將這個 component 當作 FormControl，而這邊使用 `forwardRef` 代表允許引用尚未定義的 reference\n- (2): 將 `NG_VALIDATORS` 以 SingleControlCvaComponent 為模板創建一個實例，用於建立這個 compoennt 的 validator\n\n## Inplements ControlValueAccessor\n\n接著要將 `ControlValueAccessor` 利用 `implements` 將它繼承給 SingleControlCvaComponent，將這個虛擬 interface 繼承給 component 後會需要在 component 中添加幾個 method 分別是：\n\n- **writeValue(value: any)**：當父層傳給子層新值時會觸發，簡單來說就是當有新的值傳進來時就會觸發\n- **registerOnChange(fn: any)**：當 CVA component 中的 FormControl 內容發生更改時觸發\n- **registerOnTouched(fn: any)**：當 CVA component 中的 FormControl 被處碰時觸發\n- **setDisabledState(isDisable: boolean)?**：當 CVA component 為 disable 狀態時觸發\n\n接著將他們加入到 single-control-cva.component.ts 中\n\n```typescript\nexport class SingleControlCvaComponent implements OnInit, ControlValueAccessor {\n  onChanged: any = () => {};\n  onTouched: any = () => {};\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  writeValue(value: any) {};\n\n  registerOnChange(fn: any) {\n    this.onChanged = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n\tvalidate(): ValidationErrors | null {\n\t  return this.form.valid ? null : { invalidValue: 'single-control-cva error' };\n\t}\n}\n```\n\n## Bind to parent layer\n\n設定好基本的 CVA 架構後，接著回到 app.component.ts 中建立最上層的表單結構\n\n```typescript\nimport { Component } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  form = this.fb.group({\n    singleControlCva: ['']\n  })\n\n  constructor(private fb: FormBuilder) {}\n}\n```\n\n在 app.component.ts 中利用 `FormBuilder` 建立一個 FormGroup，裡面有一個名為 `singleControlCva` 的 FormControl。\n\n接著將這個 FormGroup 與 FormControl 綁定到 template 中\n\n```html\n<!-- app.component.html -->\n\n<form [formGroup]=\"form\" class=\"content\">\n  <div class=\"item\">\n    <h2>Single Control CVA Component</h2>\n    <app-single-control-cva formControlName=\"singleControlCva\"></app-single-control-cva>\n  </div>\n</form>\n```\n\n綁定 FormGroup 的方法與之前一樣，不同的點在於之前的 `formControlName` 是綁定一個輸入元素 ( `<input>`, `<select>` ... ) 但是這邊卻不一樣，CVA 的特色就在這邊，他可以將一個 component 的 selector 當作一個輸入元素，因為在 CVA component 中設定了 `NG_VALUE_ACCESSOR` 那麼 Angular 就會將這個 component 看作一個 FormControl，所以可以達到上面這樣的效果。\n\n## Pass new Value to CVA component and display it\n\n設定完 CVA component 和綁定父層後，藉著來從父層傳遞新的值給 CVA component\n\n```typescript\nform = this.fb.group({\n  singleControlCva: ['Fandix']\n})\n```\n\n傳遞數據非常簡單，就跟之前傳遞預設值給 FormControl 一樣，作為 FormControl 的第一個參數即可。\n\n接著在 single-control-cva.component.ts 中建立屬於他的 FormControl 並在 writeValue() 中將獲得的值賦予給它\n\n```typescript\nexport class SingleControlCvaComponent implements OnInit, ControlValueAccessor {\n  onChanged: any = () => {};\n  onTouched: any = () => {};\n  name = new FormControl('');                      // (1)\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  writeValue(value: any) {\n    this.name?.setValue(value);                    // (2)\n  };\n\n  registerOnChange(fn: any) {\n    this.onChanged = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n\tvalidate(): ValidationErrors | null {\n\t  return this.name.valid ? null : { invalidValue: 'single-control-cva error' };\n\t}\n}\n```\n\n- (1): 建立 single-control-cva.component.ts 的 FormControl\n- (2): 將獲得的值賦予給 name (FormControl)\n\n接著在 single-control-cva.component.html 中添加輸入元素並綁定 FormControl\n\n```html\n<label for=\"name\">Hero Name</label>\n<input type=\"text\" id=\"name\" class=\"form-control\" [formControl]=\"name\" />\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png](https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png)\n\n## Retrun update value to parent layer\n\n可以從父層獲得值並顯示在 CVA Component 的 template 中後，接著就要做到當 CVA Component 的 FormControl 內容發生改變時，也要將這個結果往上傳回給父層，這就需要用到 `registerOnChange(fn: any)` 了\n\n```typescript\nimport { Component, OnInit, forwardRef, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { Subscription } from 'rxjs';                                  // (1)\n\n@Component({\n  selector: 'app-single-control-cva',\n  templateUrl: './single-control-cva.component.html',\n  styleUrls: ['./single-control-cva.component.css'],\n  providers: [\n    ...\n  ] \n})\nexport class SingleControlCvaComponent implements OnInit, ControlValueAccessor, OnDestroy {\n  onChanged: any = () => {};\n  onTouched: any = () => {};\n  subscription!: Subscription;                                         // (2)\n  name = new FormControl('');\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.subscription = this.name.valueChanges.subscribe((val) =>     // (3)\n      this.onChanged(val)\n    );\n  }\n\n  ngOnDestroy() {                                                     // (4)\n    this.subscription.unsubscribe();\n  }\n\n  writeValue(value: any) {\n    this.name?.setValue(value);\n  };\n\n  registerOnChange(fn: any) {\n    this.onChanged = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  validate(): ValidationErrors | null {\n    return this.name.valid ? null : { invalidValue: 'single-control-cva error' };\n  }\n}\n```\n\n- (1): 從 `rxjs` 中引入 `Subscription`\n- (2): 建立一個 property `subscription`\n- (3): 將 FormControl 實例提供的 valueChanges.subscribe() 所獲得的 FormControl 值的快照傳入 `this.onChanged()` 中，用於將值傳回父\n- (4): 在 component 結束要銷毀時解除訂閱以免造成記憶體洩漏\n\n![img](https://i.imgur.com/aSaF9ac.gif)\n\n\n# Send different types of data\n\n上面介紹了如何使用 CVA Component，但你可能覺得有只傳一個 FormControl 有必要使用 CVA Component 嗎？ 其實傳入 CVA Component 的值可以是 Object 或 Array，這樣就可以把 FormGroup 或 FormArray 寫在 CVA Component，保持最上層的 Form Model 都只有 FormControl，個舉個例子吧\n\n## Send Object in cva component\n\n1. 首先新增一個新的 component\n\n    ```bash\n    ng generate component group-control-cva\n    ```\n\n2. 在 app.component.ts 中的 Form Model 中新增一個 FormControl 並將一個 Object 傳給他做為預設值\n\n    ```typescript\n    form = this.fb.group({\n      singleControlCva: ['Fandix'],\n      groupControlCva: [{ firstName: 'Lin', lastName: 'Hank' }]\n    })\n    ```\n\n3. 在 app-group-control-cva.ts 中將 CVA component 的設定寫好，和上面的方式一樣\n\n    ```typescript\n    import { Component, OnInit, forwardRef, OnDestroy } from '@angular/core';\n    import {\n      ControlValueAccessor,\n      NG_VALIDATORS,\n      NG_VALUE_ACCESSOR,\n      ValidationErrors,\n      FormBuilder\n    } from '@angular/forms';\n    import { Subscription } from 'rxjs';\n\n    @Component({\n      selector: 'app-group-control-cva',\n      templateUrl: './group-control-cva.component.html',\n      styleUrls: ['./group-control-cva.component.css'],\n      providers: [\n        {\n          provide: NG_VALUE_ACCESSOR,\n          useExisting: forwardRef(() => GroupControlCvaComponent),\n          multi: true,\n        },\n        {\n          provide: NG_VALIDATORS,\n          useExisting: forwardRef(() => GroupControlCvaComponent),\n          multi: true,\n        },\n      ],\n    })\n    export class GroupControlCvaComponent implements OnInit, ControlValueAccessor {\n      onChanged: any = () => {};\n      onTouched: any = () => {};\n      subscription!: Subscription;\n      form = this.fb.group({\n        firstName: [''],\n        lastName: ['']\n      })\n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {\n      }\n\n      ngOnDestroy() {\n        this.subscription.unsubscribe();\n      }\n\n      writeValue(value: any) {\n    \t\tconsole.log(value);\n        this.form?.setValue(value);\n      }\n\n      registerOnChange(fn: any) {\n        this.onChanged = fn;\n      }\n\n      registerOnTouched(fn: any) {\n        this.onTouched = fn;\n      }\n\n      validate(): ValidationErrors | null {\n        return this.form.valid\n          ? null\n          : { invalidValue: 'group-control-cva error' };\n      }\n    }\n    ```\n\n    在 writeValue() 中加上 console.log 後可以看到，父層傳遞的數據是一個 object\n    \n![https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png](https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png)\n\n![img](https://i.imgur.com/rz234q6.gif)\n\n除了傳 object 之外還可以傳 Array 進去，將 FormArray 寫在 CVA Component 中，將 FormArray 的動態新增或刪除 FormControl 都寫在 CVA Componet 中，這樣的話就算你的表單同時有 5, 6 個 FormArray 也不用擔心會將最上層的 Component 寫爆，因為對於最上層的 Component 來說他只是 FormControl，而他們各自的邏輯寫在各自的 CVA Component 就好。\n\n\n# 結論\n\n本章介紹了如何使用 CVA Component 將龐大的表單項開發 Component 一樣分成數個 CVA Component，在面對非常龐大的表單時就可以使用這種技巧，將每一個 FormControl 的邏輯寫在自己的 CVA Component 中，這樣對於維護還是測試都比較簡單。\n\n本章是介紹 Angular Form 的最後一章，明天將會介紹 Angular 中提供的一種方便的工具 `i18n`，在這個越來越發達的網路世界中，國際化網站會越來越多，所以 Angular 提供了 i18n 讓我們可以開發支持多國語言的專案，詳細的內容就留到明天講解吧，那一樣明天見囉","source":"_posts/Angular/angular-28.md","raw":"---\ntitle: Day28. Control Value Accessor (CVA)\ndate: 2021-09-28 08:38:43\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n前幾篇介紹了 Form 的基本操作與概念，也介紹了如何在表單中加入驗證，最後要來介紹 Angular Form 中一個我滿喜歡的功能，`Control Value Accessor` 簡稱 `CVA`，就像開發 component 一樣，當這個 component 太大的時候我們會選擇將這個大的 component 拆解成一個一個小的 component，這樣比較方便撰寫維護與測試，CVA 就有是這種概念，當要開發一個超大的表單時，每一個 FormControl 都有自己的設定和各自的 Validator funciton，這樣整個 component 都會充滿不同的表單設定，除了 component 之外 template 也會非常龐大，要找一個 formControlName 就會找半天，所以需要使用 CVA 將龐大的表單分割成一個一個小的 component，這樣可維護性與可測試性就會提高。\n\n![https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png](https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png)\n\n<!-- more -->\n\n# Learn by example\n\n本篇會透過一個建立一個 CVA 的例子來講解如何從零開始建立屬於你的 CVA component，那麼就往下看吧。\n\n## Create new Component\n\n首先先使用 Angular CLI 建立一個新的 component\n\n```bash\nng generate component single-control-cva\n```\n\n## Setting NG_VALUE_ACCESSOR\n\n接著在 single-control-cva.component.ts 中加入 CVA 的設定\n\n```typescript\nimport { Component, OnInit, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'app-single-control-cva',\n  templateUrl: './single-control-cva.component.html',\n  styleUrls: ['./single-control-cva.component.css'],\n  providers: [\n    {                                                                   // (1)\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SingleControlCvaComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,                                           // (2)\n      useExisting: forwardRef(() => SingleControlCvaComponent),\n      multi: true\n    }\n  ] \n})\nexport class SingleControlCvaComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n```\n\n首先要先在 single-control-cva.component.ts 中建立 `NG_VALUE_ACCESSOR` 的設定，這樣當 Angular 在運行的時候會檢查這個 component 是否有這個設置，如果有就會將這個 component 視為一個 FormControl。\n\n- (1): 將 `NG_VALUE_ACCESSOR` 以 SingleControlCvaComponent 為模板創建一個實例，用於將這個 component 定義為 `NG_VALUE_ACCESSOR`，讓 Angular 將這個 component 當作 FormControl，而這邊使用 `forwardRef` 代表允許引用尚未定義的 reference\n- (2): 將 `NG_VALIDATORS` 以 SingleControlCvaComponent 為模板創建一個實例，用於建立這個 compoennt 的 validator\n\n## Inplements ControlValueAccessor\n\n接著要將 `ControlValueAccessor` 利用 `implements` 將它繼承給 SingleControlCvaComponent，將這個虛擬 interface 繼承給 component 後會需要在 component 中添加幾個 method 分別是：\n\n- **writeValue(value: any)**：當父層傳給子層新值時會觸發，簡單來說就是當有新的值傳進來時就會觸發\n- **registerOnChange(fn: any)**：當 CVA component 中的 FormControl 內容發生更改時觸發\n- **registerOnTouched(fn: any)**：當 CVA component 中的 FormControl 被處碰時觸發\n- **setDisabledState(isDisable: boolean)?**：當 CVA component 為 disable 狀態時觸發\n\n接著將他們加入到 single-control-cva.component.ts 中\n\n```typescript\nexport class SingleControlCvaComponent implements OnInit, ControlValueAccessor {\n  onChanged: any = () => {};\n  onTouched: any = () => {};\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  writeValue(value: any) {};\n\n  registerOnChange(fn: any) {\n    this.onChanged = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n\tvalidate(): ValidationErrors | null {\n\t  return this.form.valid ? null : { invalidValue: 'single-control-cva error' };\n\t}\n}\n```\n\n## Bind to parent layer\n\n設定好基本的 CVA 架構後，接著回到 app.component.ts 中建立最上層的表單結構\n\n```typescript\nimport { Component } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  form = this.fb.group({\n    singleControlCva: ['']\n  })\n\n  constructor(private fb: FormBuilder) {}\n}\n```\n\n在 app.component.ts 中利用 `FormBuilder` 建立一個 FormGroup，裡面有一個名為 `singleControlCva` 的 FormControl。\n\n接著將這個 FormGroup 與 FormControl 綁定到 template 中\n\n```html\n<!-- app.component.html -->\n\n<form [formGroup]=\"form\" class=\"content\">\n  <div class=\"item\">\n    <h2>Single Control CVA Component</h2>\n    <app-single-control-cva formControlName=\"singleControlCva\"></app-single-control-cva>\n  </div>\n</form>\n```\n\n綁定 FormGroup 的方法與之前一樣，不同的點在於之前的 `formControlName` 是綁定一個輸入元素 ( `<input>`, `<select>` ... ) 但是這邊卻不一樣，CVA 的特色就在這邊，他可以將一個 component 的 selector 當作一個輸入元素，因為在 CVA component 中設定了 `NG_VALUE_ACCESSOR` 那麼 Angular 就會將這個 component 看作一個 FormControl，所以可以達到上面這樣的效果。\n\n## Pass new Value to CVA component and display it\n\n設定完 CVA component 和綁定父層後，藉著來從父層傳遞新的值給 CVA component\n\n```typescript\nform = this.fb.group({\n  singleControlCva: ['Fandix']\n})\n```\n\n傳遞數據非常簡單，就跟之前傳遞預設值給 FormControl 一樣，作為 FormControl 的第一個參數即可。\n\n接著在 single-control-cva.component.ts 中建立屬於他的 FormControl 並在 writeValue() 中將獲得的值賦予給它\n\n```typescript\nexport class SingleControlCvaComponent implements OnInit, ControlValueAccessor {\n  onChanged: any = () => {};\n  onTouched: any = () => {};\n  name = new FormControl('');                      // (1)\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  writeValue(value: any) {\n    this.name?.setValue(value);                    // (2)\n  };\n\n  registerOnChange(fn: any) {\n    this.onChanged = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n\tvalidate(): ValidationErrors | null {\n\t  return this.name.valid ? null : { invalidValue: 'single-control-cva error' };\n\t}\n}\n```\n\n- (1): 建立 single-control-cva.component.ts 的 FormControl\n- (2): 將獲得的值賦予給 name (FormControl)\n\n接著在 single-control-cva.component.html 中添加輸入元素並綁定 FormControl\n\n```html\n<label for=\"name\">Hero Name</label>\n<input type=\"text\" id=\"name\" class=\"form-control\" [formControl]=\"name\" />\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png](https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png)\n\n## Retrun update value to parent layer\n\n可以從父層獲得值並顯示在 CVA Component 的 template 中後，接著就要做到當 CVA Component 的 FormControl 內容發生改變時，也要將這個結果往上傳回給父層，這就需要用到 `registerOnChange(fn: any)` 了\n\n```typescript\nimport { Component, OnInit, forwardRef, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { Subscription } from 'rxjs';                                  // (1)\n\n@Component({\n  selector: 'app-single-control-cva',\n  templateUrl: './single-control-cva.component.html',\n  styleUrls: ['./single-control-cva.component.css'],\n  providers: [\n    ...\n  ] \n})\nexport class SingleControlCvaComponent implements OnInit, ControlValueAccessor, OnDestroy {\n  onChanged: any = () => {};\n  onTouched: any = () => {};\n  subscription!: Subscription;                                         // (2)\n  name = new FormControl('');\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.subscription = this.name.valueChanges.subscribe((val) =>     // (3)\n      this.onChanged(val)\n    );\n  }\n\n  ngOnDestroy() {                                                     // (4)\n    this.subscription.unsubscribe();\n  }\n\n  writeValue(value: any) {\n    this.name?.setValue(value);\n  };\n\n  registerOnChange(fn: any) {\n    this.onChanged = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  validate(): ValidationErrors | null {\n    return this.name.valid ? null : { invalidValue: 'single-control-cva error' };\n  }\n}\n```\n\n- (1): 從 `rxjs` 中引入 `Subscription`\n- (2): 建立一個 property `subscription`\n- (3): 將 FormControl 實例提供的 valueChanges.subscribe() 所獲得的 FormControl 值的快照傳入 `this.onChanged()` 中，用於將值傳回父\n- (4): 在 component 結束要銷毀時解除訂閱以免造成記憶體洩漏\n\n![img](https://i.imgur.com/aSaF9ac.gif)\n\n\n# Send different types of data\n\n上面介紹了如何使用 CVA Component，但你可能覺得有只傳一個 FormControl 有必要使用 CVA Component 嗎？ 其實傳入 CVA Component 的值可以是 Object 或 Array，這樣就可以把 FormGroup 或 FormArray 寫在 CVA Component，保持最上層的 Form Model 都只有 FormControl，個舉個例子吧\n\n## Send Object in cva component\n\n1. 首先新增一個新的 component\n\n    ```bash\n    ng generate component group-control-cva\n    ```\n\n2. 在 app.component.ts 中的 Form Model 中新增一個 FormControl 並將一個 Object 傳給他做為預設值\n\n    ```typescript\n    form = this.fb.group({\n      singleControlCva: ['Fandix'],\n      groupControlCva: [{ firstName: 'Lin', lastName: 'Hank' }]\n    })\n    ```\n\n3. 在 app-group-control-cva.ts 中將 CVA component 的設定寫好，和上面的方式一樣\n\n    ```typescript\n    import { Component, OnInit, forwardRef, OnDestroy } from '@angular/core';\n    import {\n      ControlValueAccessor,\n      NG_VALIDATORS,\n      NG_VALUE_ACCESSOR,\n      ValidationErrors,\n      FormBuilder\n    } from '@angular/forms';\n    import { Subscription } from 'rxjs';\n\n    @Component({\n      selector: 'app-group-control-cva',\n      templateUrl: './group-control-cva.component.html',\n      styleUrls: ['./group-control-cva.component.css'],\n      providers: [\n        {\n          provide: NG_VALUE_ACCESSOR,\n          useExisting: forwardRef(() => GroupControlCvaComponent),\n          multi: true,\n        },\n        {\n          provide: NG_VALIDATORS,\n          useExisting: forwardRef(() => GroupControlCvaComponent),\n          multi: true,\n        },\n      ],\n    })\n    export class GroupControlCvaComponent implements OnInit, ControlValueAccessor {\n      onChanged: any = () => {};\n      onTouched: any = () => {};\n      subscription!: Subscription;\n      form = this.fb.group({\n        firstName: [''],\n        lastName: ['']\n      })\n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {\n      }\n\n      ngOnDestroy() {\n        this.subscription.unsubscribe();\n      }\n\n      writeValue(value: any) {\n    \t\tconsole.log(value);\n        this.form?.setValue(value);\n      }\n\n      registerOnChange(fn: any) {\n        this.onChanged = fn;\n      }\n\n      registerOnTouched(fn: any) {\n        this.onTouched = fn;\n      }\n\n      validate(): ValidationErrors | null {\n        return this.form.valid\n          ? null\n          : { invalidValue: 'group-control-cva error' };\n      }\n    }\n    ```\n\n    在 writeValue() 中加上 console.log 後可以看到，父層傳遞的數據是一個 object\n    \n![https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png](https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png)\n\n![img](https://i.imgur.com/rz234q6.gif)\n\n除了傳 object 之外還可以傳 Array 進去，將 FormArray 寫在 CVA Component 中，將 FormArray 的動態新增或刪除 FormControl 都寫在 CVA Componet 中，這樣的話就算你的表單同時有 5, 6 個 FormArray 也不用擔心會將最上層的 Component 寫爆，因為對於最上層的 Component 來說他只是 FormControl，而他們各自的邏輯寫在各自的 CVA Component 就好。\n\n\n# 結論\n\n本章介紹了如何使用 CVA Component 將龐大的表單項開發 Component 一樣分成數個 CVA Component，在面對非常龐大的表單時就可以使用這種技巧，將每一個 FormControl 的邏輯寫在自己的 CVA Component 中，這樣對於維護還是測試都比較簡單。\n\n本章是介紹 Angular Form 的最後一章，明天將會介紹 Angular 中提供的一種方便的工具 `i18n`，在這個越來越發達的網路世界中，國際化網站會越來越多，所以 Angular 提供了 i18n 讓我們可以開發支持多國語言的專案，詳細的內容就留到明天講解吧，那一樣明天見囉","slug":"Angular/angular-28","published":1,"updated":"2022-02-16T06:48:47.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6be0001595w35smz5jh7","content":"<p>前幾篇介紹了 Form 的基本操作與概念，也介紹了如何在表單中加入驗證，最後要來介紹 Angular Form 中一個我滿喜歡的功能，<code>Control Value Accessor</code> 簡稱 <code>CVA</code>，就像開發 component 一樣，當這個 component 太大的時候我們會選擇將這個大的 component 拆解成一個一個小的 component，這樣比較方便撰寫維護與測試，CVA 就有是這種概念，當要開發一個超大的表單時，每一個 FormControl 都有自己的設定和各自的 Validator funciton，這樣整個 component 都會充滿不同的表單設定，除了 component 之外 template 也會非常龐大，要找一個 formControlName 就會找半天，所以需要使用 CVA 將龐大的表單分割成一個一個小的 component，這樣可維護性與可測試性就會提高。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Learn-by-example\"><a href=\"#Learn-by-example\" class=\"headerlink\" title=\"Learn by example\"></a>Learn by example</h1><p>本篇會透過一個建立一個 CVA 的例子來講解如何從零開始建立屬於你的 CVA component，那麼就往下看吧。</p>\n<h2 id=\"Create-new-Component\"><a href=\"#Create-new-Component\" class=\"headerlink\" title=\"Create new Component\"></a>Create new Component</h2><p>首先先使用 Angular CLI 建立一個新的 component</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component single-control-cva</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Setting-NG-VALUE-ACCESSOR\"><a href=\"#Setting-NG-VALUE-ACCESSOR\" class=\"headerlink\" title=\"Setting NG_VALUE_ACCESSOR\"></a>Setting NG_VALUE_ACCESSOR</h2><p>接著在 single-control-cva.component.ts 中加入 CVA 的設定</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, forwardRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ControlValueAccessor</span>, <span class=\"variable constant_\">NG_VALIDATORS</span>, <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-single-control-cva&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./single-control-cva.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./single-control-cva.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;                                                                   <span class=\"comment\">// (1)</span></span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">SingleControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALIDATORS</span>,                                           <span class=\"comment\">// (2)</span></span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">SingleControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先要先在 single-control-cva.component.ts 中建立 <code>NG_VALUE_ACCESSOR</code> 的設定，這樣當 Angular 在運行的時候會檢查這個 component 是否有這個設置，如果有就會將這個 component 視為一個 FormControl。</p>\n<ul>\n<li>(1): 將 <code>NG_VALUE_ACCESSOR</code> 以 SingleControlCvaComponent 為模板創建一個實例，用於將這個 component 定義為 <code>NG_VALUE_ACCESSOR</code>，讓 Angular 將這個 component 當作 FormControl，而這邊使用 <code>forwardRef</code> 代表允許引用尚未定義的 reference</li>\n<li>(2): 將 <code>NG_VALIDATORS</code> 以 SingleControlCvaComponent 為模板創建一個實例，用於建立這個 compoennt 的 validator</li>\n</ul>\n<h2 id=\"Inplements-ControlValueAccessor\"><a href=\"#Inplements-ControlValueAccessor\" class=\"headerlink\" title=\"Inplements ControlValueAccessor\"></a>Inplements ControlValueAccessor</h2><p>接著要將 <code>ControlValueAccessor</code> 利用 <code>implements</code> 將它繼承給 SingleControlCvaComponent，將這個虛擬 interface 繼承給 component 後會需要在 component 中添加幾個 method 分別是：</p>\n<ul>\n<li>**writeValue(value: any)**：當父層傳給子層新值時會觸發，簡單來說就是當有新的值傳進來時就會觸發</li>\n<li>**registerOnChange(fn: any)**：當 CVA component 中的 FormControl 內容發生更改時觸發</li>\n<li>**registerOnTouched(fn: any)**：當 CVA component 中的 FormControl 被處碰時觸發</li>\n<li>**setDisabledState(isDisable: boolean)?**：當 CVA component 為 disable 狀態時觸發</li>\n</ul>\n<p>接著將他們加入到 single-control-cva.component.ts 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"property\">valid</span> ? <span class=\"literal\">null</span> : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;single-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bind-to-parent-layer\"><a href=\"#Bind-to-parent-layer\" class=\"headerlink\" title=\"Bind to parent layer\"></a>Bind to parent layer</h2><p>設定好基本的 CVA 架構後，接著回到 app.component.ts 中建立最上層的表單結構</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">singleControlCva</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 app.component.ts 中利用 <code>FormBuilder</code> 建立一個 FormGroup，裡面有一個名為 <code>singleControlCva</code> 的 FormControl。</p>\n<p>接著將這個 FormGroup 與 FormControl 綁定到 template 中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Single Control CVA Component<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-single-control-cva</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;singleControlCva&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-single-control-cva</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>綁定 FormGroup 的方法與之前一樣，不同的點在於之前的 <code>formControlName</code> 是綁定一個輸入元素 ( <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> … ) 但是這邊卻不一樣，CVA 的特色就在這邊，他可以將一個 component 的 selector 當作一個輸入元素，因為在 CVA component 中設定了 <code>NG_VALUE_ACCESSOR</code> 那麼 Angular 就會將這個 component 看作一個 FormControl，所以可以達到上面這樣的效果。</p>\n<h2 id=\"Pass-new-Value-to-CVA-component-and-display-it\"><a href=\"#Pass-new-Value-to-CVA-component-and-display-it\" class=\"headerlink\" title=\"Pass new Value to CVA component and display it\"></a>Pass new Value to CVA component and display it</h2><p>設定完 CVA component 和綁定父層後，藉著來從父層傳遞新的值給 CVA component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">singleControlCva</span>: [<span class=\"string\">&#x27;Fandix&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>傳遞數據非常簡單，就跟之前傳遞預設值給 FormControl 一樣，作為 FormControl 的第一個參數即可。</p>\n<p>接著在 single-control-cva.component.ts 中建立屬於他的 FormControl 並在 writeValue() 中將獲得的值賦予給它</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);                      <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"title function_\">setValue</span>(value);                    <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valid</span> ? <span class=\"literal\">null</span> : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;single-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 建立 single-control-cva.component.ts 的 FormControl</li>\n<li>(2): 將獲得的值賦予給 name (FormControl)</li>\n</ul>\n<p>接著在 single-control-cva.component.html 中添加輸入元素並綁定 FormControl</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Hero Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png\"></p>\n<h2 id=\"Retrun-update-value-to-parent-layer\"><a href=\"#Retrun-update-value-to-parent-layer\" class=\"headerlink\" title=\"Retrun update value to parent layer\"></a>Retrun update value to parent layer</h2><p>可以從父層獲得值並顯示在 CVA Component 的 template 中後，接著就要做到當 CVA Component 的 FormControl 內容發生改變時，也要將這個結果往上傳回給父層，這就需要用到 <code>registerOnChange(fn: any)</code> 了</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, forwardRef, <span class=\"title class_\">OnDestroy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ControlValueAccessor</span>, <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span>, <span class=\"variable constant_\">NG_VALIDATORS</span>, <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>, <span class=\"title class_\">ValidationErrors</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Subscription</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;                                  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-single-control-cva&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./single-control-cva.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./single-control-cva.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span>, <span class=\"title class_\">OnDestroy</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  subscription!: <span class=\"title class_\">Subscription</span>;                                         <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscription</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valueChanges</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span>     <span class=\"comment\">// (3)</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">onChanged</span>(val)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnDestroy</span>(<span class=\"params\"></span>) &#123;                                                     <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"title function_\">setValue</span>(value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valid</span> ? <span class=\"literal\">null</span> : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;single-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>rxjs</code> 中引入 <code>Subscription</code></li>\n<li>(2): 建立一個 property <code>subscription</code></li>\n<li>(3): 將 FormControl 實例提供的 valueChanges.subscribe() 所獲得的 FormControl 值的快照傳入 <code>this.onChanged()</code> 中，用於將值傳回父</li>\n<li>(4): 在 component 結束要銷毀時解除訂閱以免造成記憶體洩漏</li>\n</ul>\n<p><img src=\"https://i.imgur.com/aSaF9ac.gif\" alt=\"img\"></p>\n<h1 id=\"Send-different-types-of-data\"><a href=\"#Send-different-types-of-data\" class=\"headerlink\" title=\"Send different types of data\"></a>Send different types of data</h1><p>上面介紹了如何使用 CVA Component，但你可能覺得有只傳一個 FormControl 有必要使用 CVA Component 嗎？ 其實傳入 CVA Component 的值可以是 Object 或 Array，這樣就可以把 FormGroup 或 FormArray 寫在 CVA Component，保持最上層的 Form Model 都只有 FormControl，個舉個例子吧</p>\n<h2 id=\"Send-Object-in-cva-component\"><a href=\"#Send-Object-in-cva-component\" class=\"headerlink\" title=\"Send Object in cva component\"></a>Send Object in cva component</h2><ol>\n<li><p>首先新增一個新的 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component group-control-cva</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中的 Form Model 中新增一個 FormControl 並將一個 Object 傳給他做為預設值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">singleControlCva</span>: [<span class=\"string\">&#x27;Fandix&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">groupControlCva</span>: [&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Lin&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Hank&#x27;</span> &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app-group-control-cva.ts 中將 CVA component 的設定寫好，和上面的方式一樣</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, forwardRef, <span class=\"title class_\">OnDestroy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ControlValueAccessor</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">NG_VALIDATORS</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ValidationErrors</span>,</span><br><span class=\"line\">  <span class=\"title class_\">FormBuilder</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Subscription</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-group-control-cva&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./group-control-cva.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./group-control-cva.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">GroupControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALIDATORS</span>,</span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">GroupControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GroupControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  subscription!: <span class=\"title class_\">Subscription</span>;</span><br><span class=\"line\">  form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnDestroy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>?.<span class=\"title function_\">setValue</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"property\">valid</span></span><br><span class=\"line\">      ? <span class=\"literal\">null</span></span><br><span class=\"line\">      : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;group-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 在 writeValue() 中加上 console.log 後可以看到，父層傳遞的數據是一個 object</p>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png\"></p>\n<p><img src=\"https://i.imgur.com/rz234q6.gif\" alt=\"img\"></p>\n<p>除了傳 object 之外還可以傳 Array 進去，將 FormArray 寫在 CVA Component 中，將 FormArray 的動態新增或刪除 FormControl 都寫在 CVA Componet 中，這樣的話就算你的表單同時有 5, 6 個 FormArray 也不用擔心會將最上層的 Component 寫爆，因為對於最上層的 Component 來說他只是 FormControl，而他們各自的邏輯寫在各自的 CVA Component 就好。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何使用 CVA Component 將龐大的表單項開發 Component 一樣分成數個 CVA Component，在面對非常龐大的表單時就可以使用這種技巧，將每一個 FormControl 的邏輯寫在自己的 CVA Component 中，這樣對於維護還是測試都比較簡單。</p>\n<p>本章是介紹 Angular Form 的最後一章，明天將會介紹 Angular 中提供的一種方便的工具 <code>i18n</code>，在這個越來越發達的網路世界中，國際化網站會越來越多，所以 Angular 提供了 i18n 讓我們可以開發支持多國語言的專案，詳細的內容就留到明天講解吧，那一樣明天見囉</p>\n","site":{"data":{}},"excerpt":"<p>前幾篇介紹了 Form 的基本操作與概念，也介紹了如何在表單中加入驗證，最後要來介紹 Angular Form 中一個我滿喜歡的功能，<code>Control Value Accessor</code> 簡稱 <code>CVA</code>，就像開發 component 一樣，當這個 component 太大的時候我們會選擇將這個大的 component 拆解成一個一個小的 component，這樣比較方便撰寫維護與測試，CVA 就有是這種概念，當要開發一個超大的表單時，每一個 FormControl 都有自己的設定和各自的 Validator funciton，這樣整個 component 都會充滿不同的表單設定，除了 component 之外 template 也會非常龐大，要找一個 formControlName 就會找半天，所以需要使用 CVA 將龐大的表單分割成一個一個小的 component，這樣可維護性與可測試性就會提高。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767DJLXplGZxf.png\"></p>","more":"<h1 id=\"Learn-by-example\"><a href=\"#Learn-by-example\" class=\"headerlink\" title=\"Learn by example\"></a>Learn by example</h1><p>本篇會透過一個建立一個 CVA 的例子來講解如何從零開始建立屬於你的 CVA component，那麼就往下看吧。</p>\n<h2 id=\"Create-new-Component\"><a href=\"#Create-new-Component\" class=\"headerlink\" title=\"Create new Component\"></a>Create new Component</h2><p>首先先使用 Angular CLI 建立一個新的 component</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component single-control-cva</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Setting-NG-VALUE-ACCESSOR\"><a href=\"#Setting-NG-VALUE-ACCESSOR\" class=\"headerlink\" title=\"Setting NG_VALUE_ACCESSOR\"></a>Setting NG_VALUE_ACCESSOR</h2><p>接著在 single-control-cva.component.ts 中加入 CVA 的設定</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, forwardRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ControlValueAccessor</span>, <span class=\"variable constant_\">NG_VALIDATORS</span>, <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-single-control-cva&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./single-control-cva.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./single-control-cva.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;                                                                   <span class=\"comment\">// (1)</span></span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">SingleControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALIDATORS</span>,                                           <span class=\"comment\">// (2)</span></span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">SingleControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先要先在 single-control-cva.component.ts 中建立 <code>NG_VALUE_ACCESSOR</code> 的設定，這樣當 Angular 在運行的時候會檢查這個 component 是否有這個設置，如果有就會將這個 component 視為一個 FormControl。</p>\n<ul>\n<li>(1): 將 <code>NG_VALUE_ACCESSOR</code> 以 SingleControlCvaComponent 為模板創建一個實例，用於將這個 component 定義為 <code>NG_VALUE_ACCESSOR</code>，讓 Angular 將這個 component 當作 FormControl，而這邊使用 <code>forwardRef</code> 代表允許引用尚未定義的 reference</li>\n<li>(2): 將 <code>NG_VALIDATORS</code> 以 SingleControlCvaComponent 為模板創建一個實例，用於建立這個 compoennt 的 validator</li>\n</ul>\n<h2 id=\"Inplements-ControlValueAccessor\"><a href=\"#Inplements-ControlValueAccessor\" class=\"headerlink\" title=\"Inplements ControlValueAccessor\"></a>Inplements ControlValueAccessor</h2><p>接著要將 <code>ControlValueAccessor</code> 利用 <code>implements</code> 將它繼承給 SingleControlCvaComponent，將這個虛擬 interface 繼承給 component 後會需要在 component 中添加幾個 method 分別是：</p>\n<ul>\n<li>**writeValue(value: any)**：當父層傳給子層新值時會觸發，簡單來說就是當有新的值傳進來時就會觸發</li>\n<li>**registerOnChange(fn: any)**：當 CVA component 中的 FormControl 內容發生更改時觸發</li>\n<li>**registerOnTouched(fn: any)**：當 CVA component 中的 FormControl 被處碰時觸發</li>\n<li>**setDisabledState(isDisable: boolean)?**：當 CVA component 為 disable 狀態時觸發</li>\n</ul>\n<p>接著將他們加入到 single-control-cva.component.ts 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"property\">valid</span> ? <span class=\"literal\">null</span> : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;single-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bind-to-parent-layer\"><a href=\"#Bind-to-parent-layer\" class=\"headerlink\" title=\"Bind to parent layer\"></a>Bind to parent layer</h2><p>設定好基本的 CVA 架構後，接著回到 app.component.ts 中建立最上層的表單結構</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">singleControlCva</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 app.component.ts 中利用 <code>FormBuilder</code> 建立一個 FormGroup，裡面有一個名為 <code>singleControlCva</code> 的 FormControl。</p>\n<p>接著將這個 FormGroup 與 FormControl 綁定到 template 中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Single Control CVA Component<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-single-control-cva</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;singleControlCva&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-single-control-cva</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>綁定 FormGroup 的方法與之前一樣，不同的點在於之前的 <code>formControlName</code> 是綁定一個輸入元素 ( <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> … ) 但是這邊卻不一樣，CVA 的特色就在這邊，他可以將一個 component 的 selector 當作一個輸入元素，因為在 CVA component 中設定了 <code>NG_VALUE_ACCESSOR</code> 那麼 Angular 就會將這個 component 看作一個 FormControl，所以可以達到上面這樣的效果。</p>\n<h2 id=\"Pass-new-Value-to-CVA-component-and-display-it\"><a href=\"#Pass-new-Value-to-CVA-component-and-display-it\" class=\"headerlink\" title=\"Pass new Value to CVA component and display it\"></a>Pass new Value to CVA component and display it</h2><p>設定完 CVA component 和綁定父層後，藉著來從父層傳遞新的值給 CVA component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">singleControlCva</span>: [<span class=\"string\">&#x27;Fandix&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>傳遞數據非常簡單，就跟之前傳遞預設值給 FormControl 一樣，作為 FormControl 的第一個參數即可。</p>\n<p>接著在 single-control-cva.component.ts 中建立屬於他的 FormControl 並在 writeValue() 中將獲得的值賦予給它</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);                      <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"title function_\">setValue</span>(value);                    <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valid</span> ? <span class=\"literal\">null</span> : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;single-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 建立 single-control-cva.component.ts 的 FormControl</li>\n<li>(2): 將獲得的值賦予給 name (FormControl)</li>\n</ul>\n<p>接著在 single-control-cva.component.html 中添加輸入元素並綁定 FormControl</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Hero Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767H8MEdPe5hC.png\"></p>\n<h2 id=\"Retrun-update-value-to-parent-layer\"><a href=\"#Retrun-update-value-to-parent-layer\" class=\"headerlink\" title=\"Retrun update value to parent layer\"></a>Retrun update value to parent layer</h2><p>可以從父層獲得值並顯示在 CVA Component 的 template 中後，接著就要做到當 CVA Component 的 FormControl 內容發生改變時，也要將這個結果往上傳回給父層，這就需要用到 <code>registerOnChange(fn: any)</code> 了</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, forwardRef, <span class=\"title class_\">OnDestroy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ControlValueAccessor</span>, <span class=\"title class_\">FormControl</span>, <span class=\"title class_\">FormGroup</span>, <span class=\"variable constant_\">NG_VALIDATORS</span>, <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>, <span class=\"title class_\">ValidationErrors</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Subscription</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;                                  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-single-control-cva&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./single-control-cva.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./single-control-cva.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span>, <span class=\"title class_\">OnDestroy</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  subscription!: <span class=\"title class_\">Subscription</span>;                                         <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  name = <span class=\"keyword\">new</span> <span class=\"title class_\">FormControl</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscription</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valueChanges</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span>     <span class=\"comment\">// (3)</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">onChanged</span>(val)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnDestroy</span>(<span class=\"params\"></span>) &#123;                                                     <span class=\"comment\">// (4)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>?.<span class=\"title function_\">setValue</span>(value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>.<span class=\"property\">valid</span> ? <span class=\"literal\">null</span> : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;single-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 從 <code>rxjs</code> 中引入 <code>Subscription</code></li>\n<li>(2): 建立一個 property <code>subscription</code></li>\n<li>(3): 將 FormControl 實例提供的 valueChanges.subscribe() 所獲得的 FormControl 值的快照傳入 <code>this.onChanged()</code> 中，用於將值傳回父</li>\n<li>(4): 在 component 結束要銷毀時解除訂閱以免造成記憶體洩漏</li>\n</ul>\n<p><img src=\"https://i.imgur.com/aSaF9ac.gif\" alt=\"img\"></p>\n<h1 id=\"Send-different-types-of-data\"><a href=\"#Send-different-types-of-data\" class=\"headerlink\" title=\"Send different types of data\"></a>Send different types of data</h1><p>上面介紹了如何使用 CVA Component，但你可能覺得有只傳一個 FormControl 有必要使用 CVA Component 嗎？ 其實傳入 CVA Component 的值可以是 Object 或 Array，這樣就可以把 FormGroup 或 FormArray 寫在 CVA Component，保持最上層的 Form Model 都只有 FormControl，個舉個例子吧</p>\n<h2 id=\"Send-Object-in-cva-component\"><a href=\"#Send-Object-in-cva-component\" class=\"headerlink\" title=\"Send Object in cva component\"></a>Send Object in cva component</h2><ol>\n<li><p>首先新增一個新的 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component group-control-cva</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component.ts 中的 Form Model 中新增一個 FormControl 並將一個 Object 傳給他做為預設值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">singleControlCva</span>: [<span class=\"string\">&#x27;Fandix&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">groupControlCva</span>: [&#123; <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Lin&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Hank&#x27;</span> &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app-group-control-cva.ts 中將 CVA component 的設定寫好，和上面的方式一樣</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, forwardRef, <span class=\"title class_\">OnDestroy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ControlValueAccessor</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">NG_VALIDATORS</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ValidationErrors</span>,</span><br><span class=\"line\">  <span class=\"title class_\">FormBuilder</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Subscription</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-group-control-cva&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./group-control-cva.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./group-control-cva.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALUE_ACCESSOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">GroupControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">NG_VALIDATORS</span>,</span><br><span class=\"line\">      <span class=\"attr\">useExisting</span>: <span class=\"title function_\">forwardRef</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">GroupControlCvaComponent</span>),</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GroupControlCvaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">ControlValueAccessor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">onChanged</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"attr\">onTouched</span>: <span class=\"built_in\">any</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  subscription!: <span class=\"title class_\">Subscription</span>;</span><br><span class=\"line\">  form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: [<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnDestroy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">writeValue</span>(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>?.<span class=\"title function_\">setValue</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnChange</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onChanged</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">registerOnTouched</span>(<span class=\"params\">fn: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onTouched</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">validate</span>(): <span class=\"title class_\">ValidationErrors</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"property\">valid</span></span><br><span class=\"line\">      ? <span class=\"literal\">null</span></span><br><span class=\"line\">      : &#123; <span class=\"attr\">invalidValue</span>: <span class=\"string\">&#x27;group-control-cva error&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 在 writeValue() 中加上 console.log 後可以看到，父層傳遞的數據是一個 object</p>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210827/20124767aFhKxAHBIW.png\"></p>\n<p><img src=\"https://i.imgur.com/rz234q6.gif\" alt=\"img\"></p>\n<p>除了傳 object 之外還可以傳 Array 進去，將 FormArray 寫在 CVA Component 中，將 FormArray 的動態新增或刪除 FormControl 都寫在 CVA Componet 中，這樣的話就算你的表單同時有 5, 6 個 FormArray 也不用擔心會將最上層的 Component 寫爆，因為對於最上層的 Component 來說他只是 FormControl，而他們各自的邏輯寫在各自的 CVA Component 就好。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了如何使用 CVA Component 將龐大的表單項開發 Component 一樣分成數個 CVA Component，在面對非常龐大的表單時就可以使用這種技巧，將每一個 FormControl 的邏輯寫在自己的 CVA Component 中，這樣對於維護還是測試都比較簡單。</p>\n<p>本章是介紹 Angular Form 的最後一章，明天將會介紹 Angular 中提供的一種方便的工具 <code>i18n</code>，在這個越來越發達的網路世界中，國際化網站會越來越多，所以 Angular 提供了 i18n 讓我們可以開發支持多國語言的專案，詳細的內容就留到明天講解吧，那一樣明天見囉</p>"},{"title":"Day29. Internationalization (i18n)","date":"2021-09-29T00:47:10.000Z","_content":"\nAngular 提供了 `i18n` 功能讓我們開發專案時可以讓我們的專案應在不同的國家中被使用，`Localization` 是為不同語言環境構建應用程式版本的過程，包過提取文本已翻譯成不同語言以及為特定語言環境設置數據格式。\n\n使用 Angular i18n 為應用程式進行國際化：\n\n- 使用 `pipes` 顯示本地化的日期、數字、百分比和貨幣\n- 在 template 中標記文本以進行翻譯\n- 標複數形式的表達方式以提供翻譯\n- 標記替代文本進行翻譯\n\n要使用 Angular i18n 的前提下需要準備好 Angular CLI，因為幾乎全部的任務都需要使用 Angular CLI\n\n- 使用 Angular CLI 將標記的文本提取到 source language file\n- 為每種語言製作此文本的副本，將這些翻譯文件發送給相關的翻譯人員，對文本內的語言進行翻譯\n- 在為一種會多種語言環境構建應用程序時，使用 Angular CLI 合併完成的翻譯文件\n\n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg](https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg)\n\n<!-- more -->\n\n# Add the localize package\n\n要使用 Angular CLI 的功能需要先使用 Angular CLI 將 `@angular/localize` 添加到專案中\n\n```bash\nng add @angular/localize\n```\n\n使用這個 CLI Command 後會在 `package.json` 與 `polyfill.ts` 中導入 `@angular/localize`，要注意如果沒有加入這個功能的話，使用 i18n 功能將會失敗。\n\n\n# Refer to locales by ID\n\nAngular i18n 使用 `Unicode` 語言環境標示符 (ID) 引用語言環境，他可以用於指定 `語言`、`國家/地區`，這個 ID 由語言標示符所組成，例如 `en` 代表英語或 `fr` 代表法語，後面可以加上一個 `破折號 ( - )` 和 `區域擴展名`，例如 US 表示美國 CA 表示加拿大，所以可以變成 `en-US` 他代表在美國的英語，fr-CA 代表在加拿大的法語以此類推， Angular 會依照這個 ID 來查找正確的對應區域設置數據。\n\n在默認情況下 Angular 是使用 `en-US` 作為應用程序的初始語言環境，可以在 `angular.json` 中的 `sourceLocale` 中更改原始語言環境。\n\n\n# Prepare templates for translations\n\n講了這麼多，接著直接來看看如何在 Angular 終使用 i18n 吧，要翻譯應用程序的 template 需要通過使用 Angular i18n attribute 和其他 attribute 來為翻譯器準備文本，通常會使用以下的步驟：\n\n1. 標記要翻譯的文本\n2. 添加有用的描述和含義，這用於幫助翻譯人員知道這個要翻譯的文本是什麼東西\n3. 翻譯不用於顯示的文本\n4. 標記翻譯的元素 attribute\n5. 標記複數和代替翻譯，以符合不同語言的複數規則和語法結構\n\n## Mark text for translations\n\n使用 `i18n` 這個 attribute 標記要翻譯的 template 的內容，將它放在需要翻譯的元素標籤上並帶有要翻譯的固定文本，舉個例子\n\n```html\n<h1>Hello i18n!</h1>\n```\n\n如果要將上面這個 `<h1>` 元素進行翻譯的話，將 i18n attribute 添加到上面\n\n```html\n<h1 i18n>Hello i18n!</h1>\n```\n\n## Add helpful descriptions and meanings\n\n當翻譯人員與程式開發人員是不同人時，程式開發人員需要將這個要翻譯的內容做一些解釋好讓翻譯人員知道這個是什麼，才能進行準確的翻譯，所以需要在 i18n attribute 中添加額外的說明用於描述這個翻譯是什麼\n\n```html\n<h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1>\n```\n\n除了加上這個 i18n attribute 的意圖之外，還需要添加這個對於這個元素的描述，這樣可大幅提高翻譯的精準度，使用 `|` 將意圖與描述分開 `<maining> | <description>`。\n\n```html\n<h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1>\n```\n\n## Translate text not for display\n\n如果需要翻譯一個還沒有顯示出來的元素時，請將文本加入到 `<ng-container>` 中\n\n```html\n<ng-container i18n>I don't output any element</ng-container>\n```\n\n## Mark element attributes for translations\n\n如果要翻譯 HTML 的 attribute，例如 `<img>` 中的 title attribute 應該要將 i18n 使用 `-` 符號連接要翻譯的 attribute\n\n```html\n<img [src]=\"logo\" title=\"Angular logo\">\n```\n\n若要翻譯 HTML 元素的 attribute 請添加 `i18n-attribute` 其中的 attribute 是需要翻譯的 attribute 名稱\n\n```html\n<img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n```\n\n也可以使用 `i18n-attribute=\"<meaning> | <description>@@<id>\"`  語法分配含義、描述以及自定義的 ID\n\n\n# Mark plurals and alternates for translation\n\n不同語言有不同的複數規則和語法結構，這讓翻譯的難度大大增加，所以為了簡化翻譯請使用帶有`正規表達式` 的 `Unicode`ICU 子句。\n\n## Mark plurals\n\n使用 `plural` 來標記如果逐字翻譯可能沒有意義表達，例如如果想用英文顯示 `updated x minutes ago` 可能希望顯示 `jest now`、`one minute ago` 或 `x minutes ago`，可以使用下面的例子\n\n```html\n<span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}</span>\n```\n\n- 第一個參數 `minutes` 綁定了 component 的 property，她決定了顯示的分鐘數\n- 第二個參數將這個標記為 `plural` 翻譯類型\n- 第三個參數定義了複數類別及其匹配值的模式\n    - 當 property minutes 為 0 時會使用 `=0 { just now }`\n    - 當 property minutes 為 1 時會使用 `=1  { one minute ago }`\n    - 如果不匹配前面兩個則會顯示 property 的值\n\n## Mark alternates and nested expressions\n\n如果要根據變量的值來決定替代的文本時則需要翻譯所又替代文本，`select` 子句類似 `plural` 子句，根據定義的字串值標記替代文本的選擇，舉例來說 template 綁定了 component 的 property，透過 property 的值決定要翻譯 `male`、`female` 或 `other`\n\n```html\n<span i18n>The author is {gender, select, male {male} female {female} other {other}}</span> \n```\n\n也可以將兩種不的子句嵌套再一起\n\n```html\n<span i18n>Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n</span>\n```\n\n\n# Learn by example\n\n上面介紹了一堆 i18n 的概念與用法後，接這直接來建立一個例子吧\n\n## Create component\n\n```bash\nng generate component form\n```\n\n## Complete the form component\n\n1. 在 form.component.ts 中新增 Form Model \n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-form',\n      templateUrl: './form.component.html',\n      styleUrls: ['./form.component.css']\n    })\n    export class FormComponent {\n      form = this.fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required],\n      })\n      constructor(private fb: FormBuilder) { }\n    }\n    ```\n\n2. 在 form.component.html 中綁定 FormControl 並在要翻譯的元素上加上 `i18n`\n\n    ```html\n    <form [formGroup]=\"form\">\n        <div class=\"content\">\n            <label for=\"username\" i18n>Username</label>\n            <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"username\" />\n            <label for=\"password\" i18n>Password</label>\n            <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"password\" />\n        </div>\n        <div class=\"optionBtn\">\n            <button type=\"button\" class=\"btn btn-success\" i18n>Login</button>\n        </div>\n    </form>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png](https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png)\n\n## Generate language files\n\n準備好要翻譯的 template 後請使用 Angular CLI `extract-i18n` command 將 tempalte 中標記的文本提取到 source language file\n\n```bash\nng extract-i18n\n```\n\nextract-i18n 使用 `XML` 本地化交換文件格式，在項目的根目錄中創建一個名為 `messages.xlf` 的 source language file，可以使用一些 option 選項\n\n- -output-path： 更改 soruce language file 位置\n- —format：更改 soruce language file 格式\n- —outFile：更改 soruce language file 名稱\n\n可以使用 `--format` 將  soruce language file 的格式更改為以下幾種格式\n\n```bash\nng extract-i18n  --format=xlf\nng extract-i18n  --format=xlf2\nng extract-i18n  --format=xmb\nng extract-i18n  --format=json\nng extract-i18n  --format=arb\n```\n\n## Translate various languages\n\n產生了 source language file 後接著來將他們翻譯為各國的語言，由於 Angular 預設語言就是英文，所以不需要對英文進行翻譯\n\n### Translate chinese\n\n將 source language file 複製一份後更改他的檔名，更改為 `messages.zh.hant.xlf`，並加上翻譯\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  <file source-language=\"en-US\" datatype=\"plaintext\" original=\"ng2.template\">\n    <body>\n      <trans-unit id=\"5248717555542428023\" datatype=\"html\">\n        <source>Username</source>\n        <target>使用者名稱</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">3</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"1431416938026210429\" datatype=\"html\">\n        <source>Password</source>\n        <target>密碼</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">5</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"2454050363478003966\" datatype=\"html\">\n        <source>Login</source>\n        <target>登陸</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">9</context>\n        </context-group>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n```\n\n在要翻譯的名稱 `<source>` 下方加上 `<target>` 並把要翻譯的內容填入\n\n### Translate Japanese\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  <file source-language=\"en-US\" datatype=\"plaintext\" original=\"ng2.template\">\n    <body>\n      <trans-unit id=\"5248717555542428023\" datatype=\"html\">\n        <source>Username</source>\n        <target>ユーザー名</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">3</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"1431416938026210429\" datatype=\"html\">\n        <source>Password</source>\n        <target>パスワード</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">5</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"2454050363478003966\" datatype=\"html\">\n        <source>Login</source>\n        <target>ログイン</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">9</context>\n        </context-group>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n```\n\n## Merge translations into the app\n\n將需要翻譯的文本設定好後，接著更改 angular.json 的內容讓 Angular 知道該使用哪一個語言\n\n```json\n{\n\t...\n\t\"projects\": {\n\t\t\"project-name\": {\n\t\t\"i18n\": {\n        \"locales\": {\n          \"tw\": {\n            \"translation\": \"messages.zh.hant.xlf\",\n            \"baseHref\": \"/tw/\"\n          },\n          \"jp\": {\n            \"translation\": \"messages.jp.xlf\",\n            \"baseHref\": \"/jp/\"\n          }\n        }\n      }\n\t\t}\n\t}\n}\n```\n\n修改 build 的設定\n\n```json\n\"architect\": {\n\t\"build\": {\n\t   ...\n\t   \"options\": {\n       \"localize\": true,\n       \"aot\": true,\n\t\t\t...\n\t\t},\n\t\t\"configurations\": {\n\t\t  \"tw\": {\n            \"localize\": [\"tw\"]\n          },\n          \"jp\": {\n            \"localize\": [\"jp\"]\n          },\n\t    }\n\t}\n}\n```\n\n修改 serve 的設定\n\n```json\n\"serve\": {\n\t\"builder\": \"@angular-devkit/build-angular:dev-server\",\n  \"configurations\": {\n\t\t\"production\": {\n       \"browserTarget\": \"Angular-blog:build:production\"\n     },\n     \"tw\": {\n       \"browserTarget\": \"Angular-blog:build:tw\"\n     },\n     \"jp\": {\n       \"browserTarget\": \"Angular-blog:build:jp\"\n            },\n\t   \"development\": {\n       \"browserTarget\": \"Angular-blog:build:development\"\n     }\t\n\t}\n}\n```\n\n## Test  i18n\n\n使用 Angular CLI 將專案跑起來，來看看是否完成翻譯\n\n```bash\nng serve --configuration=tw --open\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png](https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png)\n\n```bash\nng serve --configuration=jp --open\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png](https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png)\n\n當完成翻譯後可以在表單上面新增一個 select 用於選擇要顯示什麼語言，可以做到這種效果\n\n![img](https://i.imgur.com/WQY5zIG.gif)\n\n\n# 結論\n\n本章中介紹了如何使用 Angular 的 i18n 功能做出國際化的應用程式，先在 template 中將要翻譯的內容加上 i18n attribute，之後使用 Angular CLI  Command `ng extract-i18n` 產生 source langange file，獲得 source langange file 之後就可以對不同的語言進行翻譯，在 `<soruce>` 的下方加上 `<target>` 並在其中填入翻譯的內容，最後在 angular.json 中進行 i18n 的設定就完成了，是不是很簡單呢。\n\n下一篇會介紹 Angular 中一個重要的觀念那就是 `Module`，在前面很多篇中都會看到要引入某某 module 到 app.module.ts 中，這個 Module 可以看成是將各個功能進行模組化分割，這樣比較方便管理與測試，詳細的內容就留到明天講解吧，明天見\n\n\n# Reference\n\n- [Angular.io - Localizing your app](https://angular.io/guide/i18n#plurals-alternates)","source":"_posts/Angular/angular-29.md","raw":"---\ntitle: Day29. Internationalization (i18n)\ndate: 2021-09-29 08:47:10\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\nAngular 提供了 `i18n` 功能讓我們開發專案時可以讓我們的專案應在不同的國家中被使用，`Localization` 是為不同語言環境構建應用程式版本的過程，包過提取文本已翻譯成不同語言以及為特定語言環境設置數據格式。\n\n使用 Angular i18n 為應用程式進行國際化：\n\n- 使用 `pipes` 顯示本地化的日期、數字、百分比和貨幣\n- 在 template 中標記文本以進行翻譯\n- 標複數形式的表達方式以提供翻譯\n- 標記替代文本進行翻譯\n\n要使用 Angular i18n 的前提下需要準備好 Angular CLI，因為幾乎全部的任務都需要使用 Angular CLI\n\n- 使用 Angular CLI 將標記的文本提取到 source language file\n- 為每種語言製作此文本的副本，將這些翻譯文件發送給相關的翻譯人員，對文本內的語言進行翻譯\n- 在為一種會多種語言環境構建應用程序時，使用 Angular CLI 合併完成的翻譯文件\n\n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg](https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg)\n\n<!-- more -->\n\n# Add the localize package\n\n要使用 Angular CLI 的功能需要先使用 Angular CLI 將 `@angular/localize` 添加到專案中\n\n```bash\nng add @angular/localize\n```\n\n使用這個 CLI Command 後會在 `package.json` 與 `polyfill.ts` 中導入 `@angular/localize`，要注意如果沒有加入這個功能的話，使用 i18n 功能將會失敗。\n\n\n# Refer to locales by ID\n\nAngular i18n 使用 `Unicode` 語言環境標示符 (ID) 引用語言環境，他可以用於指定 `語言`、`國家/地區`，這個 ID 由語言標示符所組成，例如 `en` 代表英語或 `fr` 代表法語，後面可以加上一個 `破折號 ( - )` 和 `區域擴展名`，例如 US 表示美國 CA 表示加拿大，所以可以變成 `en-US` 他代表在美國的英語，fr-CA 代表在加拿大的法語以此類推， Angular 會依照這個 ID 來查找正確的對應區域設置數據。\n\n在默認情況下 Angular 是使用 `en-US` 作為應用程序的初始語言環境，可以在 `angular.json` 中的 `sourceLocale` 中更改原始語言環境。\n\n\n# Prepare templates for translations\n\n講了這麼多，接著直接來看看如何在 Angular 終使用 i18n 吧，要翻譯應用程序的 template 需要通過使用 Angular i18n attribute 和其他 attribute 來為翻譯器準備文本，通常會使用以下的步驟：\n\n1. 標記要翻譯的文本\n2. 添加有用的描述和含義，這用於幫助翻譯人員知道這個要翻譯的文本是什麼東西\n3. 翻譯不用於顯示的文本\n4. 標記翻譯的元素 attribute\n5. 標記複數和代替翻譯，以符合不同語言的複數規則和語法結構\n\n## Mark text for translations\n\n使用 `i18n` 這個 attribute 標記要翻譯的 template 的內容，將它放在需要翻譯的元素標籤上並帶有要翻譯的固定文本，舉個例子\n\n```html\n<h1>Hello i18n!</h1>\n```\n\n如果要將上面這個 `<h1>` 元素進行翻譯的話，將 i18n attribute 添加到上面\n\n```html\n<h1 i18n>Hello i18n!</h1>\n```\n\n## Add helpful descriptions and meanings\n\n當翻譯人員與程式開發人員是不同人時，程式開發人員需要將這個要翻譯的內容做一些解釋好讓翻譯人員知道這個是什麼，才能進行準確的翻譯，所以需要在 i18n attribute 中添加額外的說明用於描述這個翻譯是什麼\n\n```html\n<h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1>\n```\n\n除了加上這個 i18n attribute 的意圖之外，還需要添加這個對於這個元素的描述，這樣可大幅提高翻譯的精準度，使用 `|` 將意圖與描述分開 `<maining> | <description>`。\n\n```html\n<h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1>\n```\n\n## Translate text not for display\n\n如果需要翻譯一個還沒有顯示出來的元素時，請將文本加入到 `<ng-container>` 中\n\n```html\n<ng-container i18n>I don't output any element</ng-container>\n```\n\n## Mark element attributes for translations\n\n如果要翻譯 HTML 的 attribute，例如 `<img>` 中的 title attribute 應該要將 i18n 使用 `-` 符號連接要翻譯的 attribute\n\n```html\n<img [src]=\"logo\" title=\"Angular logo\">\n```\n\n若要翻譯 HTML 元素的 attribute 請添加 `i18n-attribute` 其中的 attribute 是需要翻譯的 attribute 名稱\n\n```html\n<img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n```\n\n也可以使用 `i18n-attribute=\"<meaning> | <description>@@<id>\"`  語法分配含義、描述以及自定義的 ID\n\n\n# Mark plurals and alternates for translation\n\n不同語言有不同的複數規則和語法結構，這讓翻譯的難度大大增加，所以為了簡化翻譯請使用帶有`正規表達式` 的 `Unicode`ICU 子句。\n\n## Mark plurals\n\n使用 `plural` 來標記如果逐字翻譯可能沒有意義表達，例如如果想用英文顯示 `updated x minutes ago` 可能希望顯示 `jest now`、`one minute ago` 或 `x minutes ago`，可以使用下面的例子\n\n```html\n<span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}</span>\n```\n\n- 第一個參數 `minutes` 綁定了 component 的 property，她決定了顯示的分鐘數\n- 第二個參數將這個標記為 `plural` 翻譯類型\n- 第三個參數定義了複數類別及其匹配值的模式\n    - 當 property minutes 為 0 時會使用 `=0 { just now }`\n    - 當 property minutes 為 1 時會使用 `=1  { one minute ago }`\n    - 如果不匹配前面兩個則會顯示 property 的值\n\n## Mark alternates and nested expressions\n\n如果要根據變量的值來決定替代的文本時則需要翻譯所又替代文本，`select` 子句類似 `plural` 子句，根據定義的字串值標記替代文本的選擇，舉例來說 template 綁定了 component 的 property，透過 property 的值決定要翻譯 `male`、`female` 或 `other`\n\n```html\n<span i18n>The author is {gender, select, male {male} female {female} other {other}}</span> \n```\n\n也可以將兩種不的子句嵌套再一起\n\n```html\n<span i18n>Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n</span>\n```\n\n\n# Learn by example\n\n上面介紹了一堆 i18n 的概念與用法後，接這直接來建立一個例子吧\n\n## Create component\n\n```bash\nng generate component form\n```\n\n## Complete the form component\n\n1. 在 form.component.ts 中新增 Form Model \n\n    ```typescript\n    import { Component } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-form',\n      templateUrl: './form.component.html',\n      styleUrls: ['./form.component.css']\n    })\n    export class FormComponent {\n      form = this.fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required],\n      })\n      constructor(private fb: FormBuilder) { }\n    }\n    ```\n\n2. 在 form.component.html 中綁定 FormControl 並在要翻譯的元素上加上 `i18n`\n\n    ```html\n    <form [formGroup]=\"form\">\n        <div class=\"content\">\n            <label for=\"username\" i18n>Username</label>\n            <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"username\" />\n            <label for=\"password\" i18n>Password</label>\n            <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"password\" />\n        </div>\n        <div class=\"optionBtn\">\n            <button type=\"button\" class=\"btn btn-success\" i18n>Login</button>\n        </div>\n    </form>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png](https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png)\n\n## Generate language files\n\n準備好要翻譯的 template 後請使用 Angular CLI `extract-i18n` command 將 tempalte 中標記的文本提取到 source language file\n\n```bash\nng extract-i18n\n```\n\nextract-i18n 使用 `XML` 本地化交換文件格式，在項目的根目錄中創建一個名為 `messages.xlf` 的 source language file，可以使用一些 option 選項\n\n- -output-path： 更改 soruce language file 位置\n- —format：更改 soruce language file 格式\n- —outFile：更改 soruce language file 名稱\n\n可以使用 `--format` 將  soruce language file 的格式更改為以下幾種格式\n\n```bash\nng extract-i18n  --format=xlf\nng extract-i18n  --format=xlf2\nng extract-i18n  --format=xmb\nng extract-i18n  --format=json\nng extract-i18n  --format=arb\n```\n\n## Translate various languages\n\n產生了 source language file 後接著來將他們翻譯為各國的語言，由於 Angular 預設語言就是英文，所以不需要對英文進行翻譯\n\n### Translate chinese\n\n將 source language file 複製一份後更改他的檔名，更改為 `messages.zh.hant.xlf`，並加上翻譯\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  <file source-language=\"en-US\" datatype=\"plaintext\" original=\"ng2.template\">\n    <body>\n      <trans-unit id=\"5248717555542428023\" datatype=\"html\">\n        <source>Username</source>\n        <target>使用者名稱</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">3</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"1431416938026210429\" datatype=\"html\">\n        <source>Password</source>\n        <target>密碼</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">5</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"2454050363478003966\" datatype=\"html\">\n        <source>Login</source>\n        <target>登陸</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">9</context>\n        </context-group>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n```\n\n在要翻譯的名稱 `<source>` 下方加上 `<target>` 並把要翻譯的內容填入\n\n### Translate Japanese\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  <file source-language=\"en-US\" datatype=\"plaintext\" original=\"ng2.template\">\n    <body>\n      <trans-unit id=\"5248717555542428023\" datatype=\"html\">\n        <source>Username</source>\n        <target>ユーザー名</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">3</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"1431416938026210429\" datatype=\"html\">\n        <source>Password</source>\n        <target>パスワード</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">5</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"2454050363478003966\" datatype=\"html\">\n        <source>Login</source>\n        <target>ログイン</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">src/app/form/form.component.html</context>\n          <context context-type=\"linenumber\">9</context>\n        </context-group>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n```\n\n## Merge translations into the app\n\n將需要翻譯的文本設定好後，接著更改 angular.json 的內容讓 Angular 知道該使用哪一個語言\n\n```json\n{\n\t...\n\t\"projects\": {\n\t\t\"project-name\": {\n\t\t\"i18n\": {\n        \"locales\": {\n          \"tw\": {\n            \"translation\": \"messages.zh.hant.xlf\",\n            \"baseHref\": \"/tw/\"\n          },\n          \"jp\": {\n            \"translation\": \"messages.jp.xlf\",\n            \"baseHref\": \"/jp/\"\n          }\n        }\n      }\n\t\t}\n\t}\n}\n```\n\n修改 build 的設定\n\n```json\n\"architect\": {\n\t\"build\": {\n\t   ...\n\t   \"options\": {\n       \"localize\": true,\n       \"aot\": true,\n\t\t\t...\n\t\t},\n\t\t\"configurations\": {\n\t\t  \"tw\": {\n            \"localize\": [\"tw\"]\n          },\n          \"jp\": {\n            \"localize\": [\"jp\"]\n          },\n\t    }\n\t}\n}\n```\n\n修改 serve 的設定\n\n```json\n\"serve\": {\n\t\"builder\": \"@angular-devkit/build-angular:dev-server\",\n  \"configurations\": {\n\t\t\"production\": {\n       \"browserTarget\": \"Angular-blog:build:production\"\n     },\n     \"tw\": {\n       \"browserTarget\": \"Angular-blog:build:tw\"\n     },\n     \"jp\": {\n       \"browserTarget\": \"Angular-blog:build:jp\"\n            },\n\t   \"development\": {\n       \"browserTarget\": \"Angular-blog:build:development\"\n     }\t\n\t}\n}\n```\n\n## Test  i18n\n\n使用 Angular CLI 將專案跑起來，來看看是否完成翻譯\n\n```bash\nng serve --configuration=tw --open\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png](https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png)\n\n```bash\nng serve --configuration=jp --open\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png](https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png)\n\n當完成翻譯後可以在表單上面新增一個 select 用於選擇要顯示什麼語言，可以做到這種效果\n\n![img](https://i.imgur.com/WQY5zIG.gif)\n\n\n# 結論\n\n本章中介紹了如何使用 Angular 的 i18n 功能做出國際化的應用程式，先在 template 中將要翻譯的內容加上 i18n attribute，之後使用 Angular CLI  Command `ng extract-i18n` 產生 source langange file，獲得 source langange file 之後就可以對不同的語言進行翻譯，在 `<soruce>` 的下方加上 `<target>` 並在其中填入翻譯的內容，最後在 angular.json 中進行 i18n 的設定就完成了，是不是很簡單呢。\n\n下一篇會介紹 Angular 中一個重要的觀念那就是 `Module`，在前面很多篇中都會看到要引入某某 module 到 app.module.ts 中，這個 Module 可以看成是將各個功能進行模組化分割，這樣比較方便管理與測試，詳細的內容就留到明天講解吧，明天見\n\n\n# Reference\n\n- [Angular.io - Localizing your app](https://angular.io/guide/i18n#plurals-alternates)","slug":"Angular/angular-29","published":1,"updated":"2022-02-16T06:50:36.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6be0001895w3ghosde0o","content":"<p>Angular 提供了 <code>i18n</code> 功能讓我們開發專案時可以讓我們的專案應在不同的國家中被使用，<code>Localization</code> 是為不同語言環境構建應用程式版本的過程，包過提取文本已翻譯成不同語言以及為特定語言環境設置數據格式。</p>\n<p>使用 Angular i18n 為應用程式進行國際化：</p>\n<ul>\n<li>使用 <code>pipes</code> 顯示本地化的日期、數字、百分比和貨幣</li>\n<li>在 template 中標記文本以進行翻譯</li>\n<li>標複數形式的表達方式以提供翻譯</li>\n<li>標記替代文本進行翻譯</li>\n</ul>\n<p>要使用 Angular i18n 的前提下需要準備好 Angular CLI，因為幾乎全部的任務都需要使用 Angular CLI</p>\n<ul>\n<li>使用 Angular CLI 將標記的文本提取到 source language file</li>\n<li>為每種語言製作此文本的副本，將這些翻譯文件發送給相關的翻譯人員，對文本內的語言進行翻譯</li>\n<li>在為一種會多種語言環境構建應用程序時，使用 Angular CLI 合併完成的翻譯文件</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Add-the-localize-package\"><a href=\"#Add-the-localize-package\" class=\"headerlink\" title=\"Add the localize package\"></a>Add the localize package</h1><p>要使用 Angular CLI 的功能需要先使用 Angular CLI 將 <code>@angular/localize</code> 添加到專案中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @angular/localize</span><br></pre></td></tr></table></figure>\n\n<p>使用這個 CLI Command 後會在 <code>package.json</code> 與 <code>polyfill.ts</code> 中導入 <code>@angular/localize</code>，要注意如果沒有加入這個功能的話，使用 i18n 功能將會失敗。</p>\n<h1 id=\"Refer-to-locales-by-ID\"><a href=\"#Refer-to-locales-by-ID\" class=\"headerlink\" title=\"Refer to locales by ID\"></a>Refer to locales by ID</h1><p>Angular i18n 使用 <code>Unicode</code> 語言環境標示符 (ID) 引用語言環境，他可以用於指定 <code>語言</code>、<code>國家/地區</code>，這個 ID 由語言標示符所組成，例如 <code>en</code> 代表英語或 <code>fr</code> 代表法語，後面可以加上一個 <code>破折號 ( - )</code> 和 <code>區域擴展名</code>，例如 US 表示美國 CA 表示加拿大，所以可以變成 <code>en-US</code> 他代表在美國的英語，fr-CA 代表在加拿大的法語以此類推， Angular 會依照這個 ID 來查找正確的對應區域設置數據。</p>\n<p>在默認情況下 Angular 是使用 <code>en-US</code> 作為應用程序的初始語言環境，可以在 <code>angular.json</code> 中的 <code>sourceLocale</code> 中更改原始語言環境。</p>\n<h1 id=\"Prepare-templates-for-translations\"><a href=\"#Prepare-templates-for-translations\" class=\"headerlink\" title=\"Prepare templates for translations\"></a>Prepare templates for translations</h1><p>講了這麼多，接著直接來看看如何在 Angular 終使用 i18n 吧，要翻譯應用程序的 template 需要通過使用 Angular i18n attribute 和其他 attribute 來為翻譯器準備文本，通常會使用以下的步驟：</p>\n<ol>\n<li>標記要翻譯的文本</li>\n<li>添加有用的描述和含義，這用於幫助翻譯人員知道這個要翻譯的文本是什麼東西</li>\n<li>翻譯不用於顯示的文本</li>\n<li>標記翻譯的元素 attribute</li>\n<li>標記複數和代替翻譯，以符合不同語言的複數規則和語法結構</li>\n</ol>\n<h2 id=\"Mark-text-for-translations\"><a href=\"#Mark-text-for-translations\" class=\"headerlink\" title=\"Mark text for translations\"></a>Mark text for translations</h2><p>使用 <code>i18n</code> 這個 attribute 標記要翻譯的 template 的內容，將它放在需要翻譯的元素標籤上並帶有要翻譯的固定文本，舉個例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要將上面這個 <code>&lt;h1&gt;</code> 元素進行翻譯的話，將 i18n attribute 添加到上面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-helpful-descriptions-and-meanings\"><a href=\"#Add-helpful-descriptions-and-meanings\" class=\"headerlink\" title=\"Add helpful descriptions and meanings\"></a>Add helpful descriptions and meanings</h2><p>當翻譯人員與程式開發人員是不同人時，程式開發人員需要將這個要翻譯的內容做一些解釋好讓翻譯人員知道這個是什麼，才能進行準確的翻譯，所以需要在 i18n attribute 中添加額外的說明用於描述這個翻譯是什麼</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>=<span class=\"string\">&quot;An introduction header for this sample&quot;</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了加上這個 i18n attribute 的意圖之外，還需要添加這個對於這個元素的描述，這樣可大幅提高翻譯的精準度，使用 <code>|</code> 將意圖與描述分開 <code>&lt;maining&gt; | &lt;description&gt;</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>=<span class=\"string\">&quot;site header|An introduction header for this sample&quot;</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Translate-text-not-for-display\"><a href=\"#Translate-text-not-for-display\" class=\"headerlink\" title=\"Translate text not for display\"></a>Translate text not for display</h2><p>如果需要翻譯一個還沒有顯示出來的元素時，請將文本加入到 <code>&lt;ng-container&gt;</code> 中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">i18n</span>&gt;</span>I don&#x27;t output any element<span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mark-element-attributes-for-translations\"><a href=\"#Mark-element-attributes-for-translations\" class=\"headerlink\" title=\"Mark element attributes for translations\"></a>Mark element attributes for translations</h2><p>如果要翻譯 HTML 的 attribute，例如 <code>&lt;img&gt;</code> 中的 title attribute 應該要將 i18n 使用 <code>-</code> 符號連接要翻譯的 attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;logo&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Angular logo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>若要翻譯 HTML 元素的 attribute 請添加 <code>i18n-attribute</code> 其中的 attribute 是需要翻譯的 attribute 名稱</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;logo&quot;</span> <span class=\"attr\">i18n-title</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Angular logo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 <code>i18n-attribute=&quot;&lt;meaning&gt; | &lt;description&gt;@@&lt;id&gt;&quot;</code>  語法分配含義、描述以及自定義的 ID</p>\n<h1 id=\"Mark-plurals-and-alternates-for-translation\"><a href=\"#Mark-plurals-and-alternates-for-translation\" class=\"headerlink\" title=\"Mark plurals and alternates for translation\"></a>Mark plurals and alternates for translation</h1><p>不同語言有不同的複數規則和語法結構，這讓翻譯的難度大大增加，所以為了簡化翻譯請使用帶有<code>正規表達式</code> 的 <code>Unicode</code>ICU 子句。</p>\n<h2 id=\"Mark-plurals\"><a href=\"#Mark-plurals\" class=\"headerlink\" title=\"Mark plurals\"></a>Mark plurals</h2><p>使用 <code>plural</code> 來標記如果逐字翻譯可能沒有意義表達，例如如果想用英文顯示 <code>updated x minutes ago</code> 可能希望顯示 <code>jest now</code>、<code>one minute ago</code> 或 <code>x minutes ago</code>，可以使用下面的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>Updated &#123;minutes, plural, =0 &#123;just now&#125; =1 &#123;one minute ago&#125; other &#123;&#123;&#123;minutes&#125;&#125; minutes ago&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一個參數 <code>minutes</code> 綁定了 component 的 property，她決定了顯示的分鐘數</li>\n<li>第二個參數將這個標記為 <code>plural</code> 翻譯類型</li>\n<li>第三個參數定義了複數類別及其匹配值的模式<ul>\n<li>當 property minutes 為 0 時會使用 <code>=0 &#123; just now &#125;</code></li>\n<li>當 property minutes 為 1 時會使用 <code>=1  &#123; one minute ago &#125;</code></li>\n<li>如果不匹配前面兩個則會顯示 property 的值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Mark-alternates-and-nested-expressions\"><a href=\"#Mark-alternates-and-nested-expressions\" class=\"headerlink\" title=\"Mark alternates and nested expressions\"></a>Mark alternates and nested expressions</h2><p>如果要根據變量的值來決定替代的文本時則需要翻譯所又替代文本，<code>select</code> 子句類似 <code>plural</code> 子句，根據定義的字串值標記替代文本的選擇，舉例來說 template 綁定了 component 的 property，透過 property 的值決定要翻譯 <code>male</code>、<code>female</code> 或 <code>other</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>The author is &#123;gender, select, male &#123;male&#125; female &#123;female&#125; other &#123;other&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>也可以將兩種不的子句嵌套再一起</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>Updated: &#123;minutes, plural,</span><br><span class=\"line\">  =0 &#123;just now&#125;</span><br><span class=\"line\">  =1 &#123;one minute ago&#125;</span><br><span class=\"line\">  other &#123;&#123;&#123;minutes&#125;&#125; minutes ago by &#123;gender, select, male &#123;male&#125; female &#123;female&#125; other &#123;other&#125;&#125;&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Learn-by-example\"><a href=\"#Learn-by-example\" class=\"headerlink\" title=\"Learn by example\"></a>Learn by example</h1><p>上面介紹了一堆 i18n 的概念與用法後，接這直接來建立一個例子吧</p>\n<h2 id=\"Create-component\"><a href=\"#Create-component\" class=\"headerlink\" title=\"Create component\"></a>Create component</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component form</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Complete-the-form-component\"><a href=\"#Complete-the-form-component\" class=\"headerlink\" title=\"Complete the form component\"></a>Complete the form component</h2><ol>\n<li><p>在 form.component.ts 中新增 Form Model </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FormComponent</span> &#123;</span><br><span class=\"line\">  form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">password</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 form.component.html 中綁定 FormControl 並在要翻譯的元素上加上 <code>i18n</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">i18n</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;username&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">i18n</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;optionBtn&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> <span class=\"attr\">i18n</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png\"></p>\n<h2 id=\"Generate-language-files\"><a href=\"#Generate-language-files\" class=\"headerlink\" title=\"Generate language files\"></a>Generate language files</h2><p>準備好要翻譯的 template 後請使用 Angular CLI <code>extract-i18n</code> command 將 tempalte 中標記的文本提取到 source language file</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng extract-i18n</span><br></pre></td></tr></table></figure>\n\n<p>extract-i18n 使用 <code>XML</code> 本地化交換文件格式，在項目的根目錄中創建一個名為 <code>messages.xlf</code> 的 source language file，可以使用一些 option 選項</p>\n<ul>\n<li>-output-path： 更改 soruce language file 位置</li>\n<li>—format：更改 soruce language file 格式</li>\n<li>—outFile：更改 soruce language file 名稱</li>\n</ul>\n<p>可以使用 <code>--format</code> 將  soruce language file 的格式更改為以下幾種格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng extract-i18n  --format=xlf</span><br><span class=\"line\">ng extract-i18n  --format=xlf2</span><br><span class=\"line\">ng extract-i18n  --format=xmb</span><br><span class=\"line\">ng extract-i18n  --format=json</span><br><span class=\"line\">ng extract-i18n  --format=arb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Translate-various-languages\"><a href=\"#Translate-various-languages\" class=\"headerlink\" title=\"Translate various languages\"></a>Translate various languages</h2><p>產生了 source language file 後接著來將他們翻譯為各國的語言，由於 Angular 預設語言就是英文，所以不需要對英文進行翻譯</p>\n<h3 id=\"Translate-chinese\"><a href=\"#Translate-chinese\" class=\"headerlink\" title=\"Translate chinese\"></a>Translate chinese</h3><p>將 source language file 複製一份後更改他的檔名，更改為 <code>messages.zh.hant.xlf</code>，並加上翻譯</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xliff</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.2&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">source-language</span>=<span class=\"string\">&quot;en-US&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;plaintext&quot;</span> <span class=\"attr\">original</span>=<span class=\"string\">&quot;ng2.template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;5248717555542428023&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>使用者名稱<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1431416938026210429&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>密碼<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2454050363478003966&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>登陸<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xliff</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在要翻譯的名稱 <code>&lt;source&gt;</code> 下方加上 <code>&lt;target&gt;</code> 並把要翻譯的內容填入</p>\n<h3 id=\"Translate-Japanese\"><a href=\"#Translate-Japanese\" class=\"headerlink\" title=\"Translate Japanese\"></a>Translate Japanese</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xliff</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.2&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">source-language</span>=<span class=\"string\">&quot;en-US&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;plaintext&quot;</span> <span class=\"attr\">original</span>=<span class=\"string\">&quot;ng2.template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;5248717555542428023&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>ユーザー名<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1431416938026210429&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>パスワード<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2454050363478003966&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>ログイン<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xliff</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Merge-translations-into-the-app\"><a href=\"#Merge-translations-into-the-app\" class=\"headerlink\" title=\"Merge translations into the app\"></a>Merge translations into the app</h2><p>將需要翻譯的文本設定好後，接著更改 angular.json 的內容讓 Angular 知道該使用哪一個語言</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"attr\">&quot;projects&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;project-name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;i18n&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;locales&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;tw&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;translation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;messages.zh.hant.xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;baseHref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/tw/&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;jp&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;translation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;messages.jp.xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;baseHref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/jp/&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 build 的設定</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;architect&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t   ...</span><br><span class=\"line\">\t   <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;localize&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;aot&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">&quot;tw&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;localize&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tw&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;jp&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;localize&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;jp&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 serve 的設定</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;serve&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;builder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@angular-devkit/build-angular:dev-server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;production&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:production&quot;</span></span><br><span class=\"line\">     <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">     <span class=\"attr\">&quot;tw&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:tw&quot;</span></span><br><span class=\"line\">     <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">     <span class=\"attr\">&quot;jp&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:jp&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t   <span class=\"attr\">&quot;development&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:development&quot;</span></span><br><span class=\"line\">     <span class=\"punctuation\">&#125;</span>\t</span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Test-i18n\"><a href=\"#Test-i18n\" class=\"headerlink\" title=\"Test  i18n\"></a>Test  i18n</h2><p>使用 Angular CLI 將專案跑起來，來看看是否完成翻譯</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve --configuration=tw --open</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve --configuration=jp --open</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png\"></p>\n<p>當完成翻譯後可以在表單上面新增一個 select 用於選擇要顯示什麼語言，可以做到這種效果</p>\n<p><img src=\"https://i.imgur.com/WQY5zIG.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何使用 Angular 的 i18n 功能做出國際化的應用程式，先在 template 中將要翻譯的內容加上 i18n attribute，之後使用 Angular CLI  Command <code>ng extract-i18n</code> 產生 source langange file，獲得 source langange file 之後就可以對不同的語言進行翻譯，在 <code>&lt;soruce&gt;</code> 的下方加上 <code>&lt;target&gt;</code> 並在其中填入翻譯的內容，最後在 angular.json 中進行 i18n 的設定就完成了，是不是很簡單呢。</p>\n<p>下一篇會介紹 Angular 中一個重要的觀念那就是 <code>Module</code>，在前面很多篇中都會看到要引入某某 module 到 app.module.ts 中，這個 Module 可以看成是將各個功能進行模組化分割，這樣比較方便管理與測試，詳細的內容就留到明天講解吧，明天見</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/i18n#plurals-alternates\">Angular.io - Localizing your app</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Angular 提供了 <code>i18n</code> 功能讓我們開發專案時可以讓我們的專案應在不同的國家中被使用，<code>Localization</code> 是為不同語言環境構建應用程式版本的過程，包過提取文本已翻譯成不同語言以及為特定語言環境設置數據格式。</p>\n<p>使用 Angular i18n 為應用程式進行國際化：</p>\n<ul>\n<li>使用 <code>pipes</code> 顯示本地化的日期、數字、百分比和貨幣</li>\n<li>在 template 中標記文本以進行翻譯</li>\n<li>標複數形式的表達方式以提供翻譯</li>\n<li>標記替代文本進行翻譯</li>\n</ul>\n<p>要使用 Angular i18n 的前提下需要準備好 Angular CLI，因為幾乎全部的任務都需要使用 Angular CLI</p>\n<ul>\n<li>使用 Angular CLI 將標記的文本提取到 source language file</li>\n<li>為每種語言製作此文本的副本，將這些翻譯文件發送給相關的翻譯人員，對文本內的語言進行翻譯</li>\n<li>在為一種會多種語言環境構建應用程序時，使用 Angular CLI 合併完成的翻譯文件</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LCHVMC00vy.jpg\"></p>","more":"<h1 id=\"Add-the-localize-package\"><a href=\"#Add-the-localize-package\" class=\"headerlink\" title=\"Add the localize package\"></a>Add the localize package</h1><p>要使用 Angular CLI 的功能需要先使用 Angular CLI 將 <code>@angular/localize</code> 添加到專案中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @angular/localize</span><br></pre></td></tr></table></figure>\n\n<p>使用這個 CLI Command 後會在 <code>package.json</code> 與 <code>polyfill.ts</code> 中導入 <code>@angular/localize</code>，要注意如果沒有加入這個功能的話，使用 i18n 功能將會失敗。</p>\n<h1 id=\"Refer-to-locales-by-ID\"><a href=\"#Refer-to-locales-by-ID\" class=\"headerlink\" title=\"Refer to locales by ID\"></a>Refer to locales by ID</h1><p>Angular i18n 使用 <code>Unicode</code> 語言環境標示符 (ID) 引用語言環境，他可以用於指定 <code>語言</code>、<code>國家/地區</code>，這個 ID 由語言標示符所組成，例如 <code>en</code> 代表英語或 <code>fr</code> 代表法語，後面可以加上一個 <code>破折號 ( - )</code> 和 <code>區域擴展名</code>，例如 US 表示美國 CA 表示加拿大，所以可以變成 <code>en-US</code> 他代表在美國的英語，fr-CA 代表在加拿大的法語以此類推， Angular 會依照這個 ID 來查找正確的對應區域設置數據。</p>\n<p>在默認情況下 Angular 是使用 <code>en-US</code> 作為應用程序的初始語言環境，可以在 <code>angular.json</code> 中的 <code>sourceLocale</code> 中更改原始語言環境。</p>\n<h1 id=\"Prepare-templates-for-translations\"><a href=\"#Prepare-templates-for-translations\" class=\"headerlink\" title=\"Prepare templates for translations\"></a>Prepare templates for translations</h1><p>講了這麼多，接著直接來看看如何在 Angular 終使用 i18n 吧，要翻譯應用程序的 template 需要通過使用 Angular i18n attribute 和其他 attribute 來為翻譯器準備文本，通常會使用以下的步驟：</p>\n<ol>\n<li>標記要翻譯的文本</li>\n<li>添加有用的描述和含義，這用於幫助翻譯人員知道這個要翻譯的文本是什麼東西</li>\n<li>翻譯不用於顯示的文本</li>\n<li>標記翻譯的元素 attribute</li>\n<li>標記複數和代替翻譯，以符合不同語言的複數規則和語法結構</li>\n</ol>\n<h2 id=\"Mark-text-for-translations\"><a href=\"#Mark-text-for-translations\" class=\"headerlink\" title=\"Mark text for translations\"></a>Mark text for translations</h2><p>使用 <code>i18n</code> 這個 attribute 標記要翻譯的 template 的內容，將它放在需要翻譯的元素標籤上並帶有要翻譯的固定文本，舉個例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要將上面這個 <code>&lt;h1&gt;</code> 元素進行翻譯的話，將 i18n attribute 添加到上面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-helpful-descriptions-and-meanings\"><a href=\"#Add-helpful-descriptions-and-meanings\" class=\"headerlink\" title=\"Add helpful descriptions and meanings\"></a>Add helpful descriptions and meanings</h2><p>當翻譯人員與程式開發人員是不同人時，程式開發人員需要將這個要翻譯的內容做一些解釋好讓翻譯人員知道這個是什麼，才能進行準確的翻譯，所以需要在 i18n attribute 中添加額外的說明用於描述這個翻譯是什麼</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>=<span class=\"string\">&quot;An introduction header for this sample&quot;</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了加上這個 i18n attribute 的意圖之外，還需要添加這個對於這個元素的描述，這樣可大幅提高翻譯的精準度，使用 <code>|</code> 將意圖與描述分開 <code>&lt;maining&gt; | &lt;description&gt;</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>=<span class=\"string\">&quot;site header|An introduction header for this sample&quot;</span>&gt;</span>Hello i18n!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Translate-text-not-for-display\"><a href=\"#Translate-text-not-for-display\" class=\"headerlink\" title=\"Translate text not for display\"></a>Translate text not for display</h2><p>如果需要翻譯一個還沒有顯示出來的元素時，請將文本加入到 <code>&lt;ng-container&gt;</code> 中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-container</span> <span class=\"attr\">i18n</span>&gt;</span>I don&#x27;t output any element<span class=\"tag\">&lt;/<span class=\"name\">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mark-element-attributes-for-translations\"><a href=\"#Mark-element-attributes-for-translations\" class=\"headerlink\" title=\"Mark element attributes for translations\"></a>Mark element attributes for translations</h2><p>如果要翻譯 HTML 的 attribute，例如 <code>&lt;img&gt;</code> 中的 title attribute 應該要將 i18n 使用 <code>-</code> 符號連接要翻譯的 attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;logo&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Angular logo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>若要翻譯 HTML 元素的 attribute 請添加 <code>i18n-attribute</code> 其中的 attribute 是需要翻譯的 attribute 名稱</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> [<span class=\"attr\">src</span>]=<span class=\"string\">&quot;logo&quot;</span> <span class=\"attr\">i18n-title</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Angular logo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 <code>i18n-attribute=&quot;&lt;meaning&gt; | &lt;description&gt;@@&lt;id&gt;&quot;</code>  語法分配含義、描述以及自定義的 ID</p>\n<h1 id=\"Mark-plurals-and-alternates-for-translation\"><a href=\"#Mark-plurals-and-alternates-for-translation\" class=\"headerlink\" title=\"Mark plurals and alternates for translation\"></a>Mark plurals and alternates for translation</h1><p>不同語言有不同的複數規則和語法結構，這讓翻譯的難度大大增加，所以為了簡化翻譯請使用帶有<code>正規表達式</code> 的 <code>Unicode</code>ICU 子句。</p>\n<h2 id=\"Mark-plurals\"><a href=\"#Mark-plurals\" class=\"headerlink\" title=\"Mark plurals\"></a>Mark plurals</h2><p>使用 <code>plural</code> 來標記如果逐字翻譯可能沒有意義表達，例如如果想用英文顯示 <code>updated x minutes ago</code> 可能希望顯示 <code>jest now</code>、<code>one minute ago</code> 或 <code>x minutes ago</code>，可以使用下面的例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>Updated &#123;minutes, plural, =0 &#123;just now&#125; =1 &#123;one minute ago&#125; other &#123;&#123;&#123;minutes&#125;&#125; minutes ago&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一個參數 <code>minutes</code> 綁定了 component 的 property，她決定了顯示的分鐘數</li>\n<li>第二個參數將這個標記為 <code>plural</code> 翻譯類型</li>\n<li>第三個參數定義了複數類別及其匹配值的模式<ul>\n<li>當 property minutes 為 0 時會使用 <code>=0 &#123; just now &#125;</code></li>\n<li>當 property minutes 為 1 時會使用 <code>=1  &#123; one minute ago &#125;</code></li>\n<li>如果不匹配前面兩個則會顯示 property 的值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Mark-alternates-and-nested-expressions\"><a href=\"#Mark-alternates-and-nested-expressions\" class=\"headerlink\" title=\"Mark alternates and nested expressions\"></a>Mark alternates and nested expressions</h2><p>如果要根據變量的值來決定替代的文本時則需要翻譯所又替代文本，<code>select</code> 子句類似 <code>plural</code> 子句，根據定義的字串值標記替代文本的選擇，舉例來說 template 綁定了 component 的 property，透過 property 的值決定要翻譯 <code>male</code>、<code>female</code> 或 <code>other</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>The author is &#123;gender, select, male &#123;male&#125; female &#123;female&#125; other &#123;other&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>也可以將兩種不的子句嵌套再一起</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>Updated: &#123;minutes, plural,</span><br><span class=\"line\">  =0 &#123;just now&#125;</span><br><span class=\"line\">  =1 &#123;one minute ago&#125;</span><br><span class=\"line\">  other &#123;&#123;&#123;minutes&#125;&#125; minutes ago by &#123;gender, select, male &#123;male&#125; female &#123;female&#125; other &#123;other&#125;&#125;&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Learn-by-example\"><a href=\"#Learn-by-example\" class=\"headerlink\" title=\"Learn by example\"></a>Learn by example</h1><p>上面介紹了一堆 i18n 的概念與用法後，接這直接來建立一個例子吧</p>\n<h2 id=\"Create-component\"><a href=\"#Create-component\" class=\"headerlink\" title=\"Create component\"></a>Create component</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component form</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Complete-the-form-component\"><a href=\"#Complete-the-form-component\" class=\"headerlink\" title=\"Complete the form component\"></a>Complete the form component</h2><ol>\n<li><p>在 form.component.ts 中新增 Form Model </p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FormComponent</span> &#123;</span><br><span class=\"line\">  form = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">password</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 form.component.html 中綁定 FormControl 並在要翻譯的元素上加上 <code>i18n</code></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">i18n</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;username&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">i18n</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;optionBtn&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> <span class=\"attr\">i18n</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767IvMMcvJsHE.png\"></p>\n<h2 id=\"Generate-language-files\"><a href=\"#Generate-language-files\" class=\"headerlink\" title=\"Generate language files\"></a>Generate language files</h2><p>準備好要翻譯的 template 後請使用 Angular CLI <code>extract-i18n</code> command 將 tempalte 中標記的文本提取到 source language file</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng extract-i18n</span><br></pre></td></tr></table></figure>\n\n<p>extract-i18n 使用 <code>XML</code> 本地化交換文件格式，在項目的根目錄中創建一個名為 <code>messages.xlf</code> 的 source language file，可以使用一些 option 選項</p>\n<ul>\n<li>-output-path： 更改 soruce language file 位置</li>\n<li>—format：更改 soruce language file 格式</li>\n<li>—outFile：更改 soruce language file 名稱</li>\n</ul>\n<p>可以使用 <code>--format</code> 將  soruce language file 的格式更改為以下幾種格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng extract-i18n  --format=xlf</span><br><span class=\"line\">ng extract-i18n  --format=xlf2</span><br><span class=\"line\">ng extract-i18n  --format=xmb</span><br><span class=\"line\">ng extract-i18n  --format=json</span><br><span class=\"line\">ng extract-i18n  --format=arb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Translate-various-languages\"><a href=\"#Translate-various-languages\" class=\"headerlink\" title=\"Translate various languages\"></a>Translate various languages</h2><p>產生了 source language file 後接著來將他們翻譯為各國的語言，由於 Angular 預設語言就是英文，所以不需要對英文進行翻譯</p>\n<h3 id=\"Translate-chinese\"><a href=\"#Translate-chinese\" class=\"headerlink\" title=\"Translate chinese\"></a>Translate chinese</h3><p>將 source language file 複製一份後更改他的檔名，更改為 <code>messages.zh.hant.xlf</code>，並加上翻譯</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xliff</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.2&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">source-language</span>=<span class=\"string\">&quot;en-US&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;plaintext&quot;</span> <span class=\"attr\">original</span>=<span class=\"string\">&quot;ng2.template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;5248717555542428023&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>使用者名稱<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1431416938026210429&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>密碼<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2454050363478003966&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>登陸<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xliff</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在要翻譯的名稱 <code>&lt;source&gt;</code> 下方加上 <code>&lt;target&gt;</code> 並把要翻譯的內容填入</p>\n<h3 id=\"Translate-Japanese\"><a href=\"#Translate-Japanese\" class=\"headerlink\" title=\"Translate Japanese\"></a>Translate Japanese</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xliff</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.2&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">source-language</span>=<span class=\"string\">&quot;en-US&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;plaintext&quot;</span> <span class=\"attr\">original</span>=<span class=\"string\">&quot;ng2.template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;5248717555542428023&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>ユーザー名<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1431416938026210429&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>パスワード<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2454050363478003966&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>ログイン<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/form/form.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xliff</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Merge-translations-into-the-app\"><a href=\"#Merge-translations-into-the-app\" class=\"headerlink\" title=\"Merge translations into the app\"></a>Merge translations into the app</h2><p>將需要翻譯的文本設定好後，接著更改 angular.json 的內容讓 Angular 知道該使用哪一個語言</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"attr\">&quot;projects&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;project-name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;i18n&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;locales&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;tw&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;translation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;messages.zh.hant.xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;baseHref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/tw/&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;jp&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;translation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;messages.jp.xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;baseHref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/jp/&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 build 的設定</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;architect&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t   ...</span><br><span class=\"line\">\t   <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;localize&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;aot&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">&quot;tw&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;localize&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tw&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;jp&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;localize&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;jp&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 serve 的設定</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;serve&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;builder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@angular-devkit/build-angular:dev-server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;production&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:production&quot;</span></span><br><span class=\"line\">     <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">     <span class=\"attr\">&quot;tw&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:tw&quot;</span></span><br><span class=\"line\">     <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">     <span class=\"attr\">&quot;jp&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:jp&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t   <span class=\"attr\">&quot;development&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">       <span class=\"attr\">&quot;browserTarget&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Angular-blog:build:development&quot;</span></span><br><span class=\"line\">     <span class=\"punctuation\">&#125;</span>\t</span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Test-i18n\"><a href=\"#Test-i18n\" class=\"headerlink\" title=\"Test  i18n\"></a>Test  i18n</h2><p>使用 Angular CLI 將專案跑起來，來看看是否完成翻譯</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve --configuration=tw --open</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767LkrRPBsZbj.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve --configuration=jp --open</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210828/20124767V3j0Qi41tg.png\"></p>\n<p>當完成翻譯後可以在表單上面新增一個 select 用於選擇要顯示什麼語言，可以做到這種效果</p>\n<p><img src=\"https://i.imgur.com/WQY5zIG.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何使用 Angular 的 i18n 功能做出國際化的應用程式，先在 template 中將要翻譯的內容加上 i18n attribute，之後使用 Angular CLI  Command <code>ng extract-i18n</code> 產生 source langange file，獲得 source langange file 之後就可以對不同的語言進行翻譯，在 <code>&lt;soruce&gt;</code> 的下方加上 <code>&lt;target&gt;</code> 並在其中填入翻譯的內容，最後在 angular.json 中進行 i18n 的設定就完成了，是不是很簡單呢。</p>\n<p>下一篇會介紹 Angular 中一個重要的觀念那就是 <code>Module</code>，在前面很多篇中都會看到要引入某某 module 到 app.module.ts 中，這個 Module 可以看成是將各個功能進行模組化分割，這樣比較方便管理與測試，詳細的內容就留到明天講解吧，明天見</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/i18n#plurals-alternates\">Angular.io - Localizing your app</a></li>\n</ul>"},{"title":"Day31. Angular Module（二）","date":"2021-10-01T01:23:36.000Z","_content":"\n在上一篇中介紹了 Angular 中 Module 的一部分，接著要繼續介紹還沒講完的部分，那就往下看吧\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg](https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg)\n\n<!-- more -->\n\n# Entry components\n\n在上一張的 `NgModule metadata` 中提到了 `bootstrap` 這個 Property，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，插入這個 bootstrapped component 後會觸發一連串的子層 component 來填充這個應用程式的 component tree，而這個被指定的 component 就稱為 `Entry components`。\n\nEntry components 是 Angular 按類型命令加載的 component，這意味者你不需要在任何 template 中引用他，可以通過 NgModule 中的 bootstrap 中這定他，也可以通過將它包含在 `rooting` 中來指定 Entry components。\n\n所以 Entry components 主要可以分為兩種\n\n- bootstrapped component：metadata 中 bootstrap 的 component\n- 在 route 中指定的 component\n\n## A bootstrapped entry component\n\nbootstrapped component 是 Angular 在引導過程（應用程序啟動）期間加載到 DOM 的 Entry component，一個最基本的 bootstrapped component 就是在 app.module.ts 中設定的 Entry component\n\n```typescript\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] // bootstrapped entry component\n})\n```\n\n以上面的例子來說，Angular 會動態加載 root AppComponent，因為他被設置在 bootstrap 中。\n\n`@NgModule.bootstrap` property 告訴編譯器這是一個 `entry component`，應該生成戴法來用這個 component 啟動應用程序，所以 bootstrapped component 必須要是 entry component，因為 bootstrapping 是一個命令式的過程，所唷需要一個 entry component。\n\n## A routed entry component\n\n第二種 entry component 會出現在 route 的定義中，比如\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n```\n\n所有 router components 必須是 entry component，因為這需要在兩個地方（router 和 entryComponents） 添加 component，所以編譯器可以識別這是一個 router 定義並自動將它添加到 entryComponent 中。\n\n## The entryComponents array\n\n雖然 @NgModule 裝飾器有一個 property 是 entryComponent 的陣列，但大多數`不需要`設置任何 entryComponent，因為 Angular 添加了 @NgModule.bootstrap 中添加的 component 和 route 定義中的那些自動進入的 component，儘管這兩種機制佔了大多數的  entry components，但如果你的應用程序需要引導或動態加載 component，則也可以將 component 添加到 entryComponent 中。\n\n\n# Feature modules\n\nfeature module 是用於組織程式的 NgModules，隨著應用程式著增長，可以將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界，使用 feature modules 將特定功能或相關的程式與其他部分拆開，這樣的分割有助於開發人員與團隊人員的合作，將不同的 feature modules 交由不同人進行維護與開發，可以更好的保障這個功能的完整性與安全性。\n\n## Feature modules vs. root modules\n\nfeature modules 是一種`組織相關程式`的最佳實踐，他與 Angular 核心的 API 概念相反，feature module 提供了一組內聚的功能，專注於特定的應用程式`功能`或`需求`，例如 form 或 routing 等等，雖然這些動作都可以在 root module 中做到，但使用 feature modules 可以幫助你將應用程式以功能而言劃分為不同的重點區域。\n\n## How to make a feature module\n\n可以在應用程式中使用 Angular CLI 建立一個新的 feature module\n\n```bash\nng generate module CustomerDashboard\n```\n\n輸入上面的 CLI Command 後 Angular 會建立一個名為 customer-dashboard 的資料夾，其中會包含一個名為 customer-dashboard.module.ts 的文件，文件內容會是\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class CustomerDashboardModule { }\n```\n\n無論是 root module 或是 feature module 他們的 NgModule 結構都會是一樣的，在 CLI 產生的 feature module 中，在它的頂部 import 了兩個東西，第一個是導入 `NgModule` 他與 root module 一樣允許你使用 @NgModule 裝飾器，第二個導入的事 `CommonModule` 他用於提供與多常用的 directive，比如 `ngIf` 或 `ngFor`， feature module 導入的是 `CommonModule` 而不是像 root module 中引入 `BrowserModule`， 因為他只會`被引入一次`，CommonModule 只包含常見的 directive 而 BrowserModule 是會為瀏覽器配置 Angular 應用程式，這個過程只需要完成一次。\n\nmodule 中的 declarations 陣列可以用來定義屬於這個 module 的 component、pipe 或 directive，要添加屬於這個 module 的 component 的話，可以使用下面的 CLI Command\n\n```typescript\nng generate component customer-dashboard/CustomerDashboard\n```\n\n或\n\n```typescript\nng generate component customer-dashboard --module customer-dashboard.module\n```\n\n都可以建立一個屬於 customer-dashboard.module 的 component\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomerDashboardComponent } from './customer-dashboard.component';\n\n@NgModule({\n  declarations: [\n    CustomerDashboardComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class CustomerDashboardModule { }\n```\n\nCustomerDashboardComponent 會透過 Import 引入 module 中，並將它添加到 `declarations` 中，這樣會讓 Angular 知道這個 Component 與這個 module 有關聯。\n\n## Importing a feature module\n\n要將其他的 feature modules 合併到應用程式中，需要讓 root module 知道這件事，可以看到 customer-dashboard.module 的最下方有使用 `export` 將此 module 導出，這樣可以讓其他 module 使用，要將其添加到 AppModule 中的 `imports` 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CustomerDashboardModule } from './customer-dashboard/customer-dashboard.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    CustomerDashboardModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n## Rendering a feature module’s component template\n\n要在 AppComponent 中的 template 中使用 CustomerDashboardComponent 的 selector，首先需要將在 CustomerDashboardModule 中導出 CustomerDashboardComponent\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomerDashboardComponent } from './customer-dashboard.component';\n\n@NgModule({\n  declarations: [\n    CustomerDashboardComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CustomerDashboardComponent\n  ]\n})\nexport class CustomerDashboardModule { }\n```\n\n將它導出後就可以在 AppComponent 中的 template 中使用這個 selector\n\n```typescript\n<h1>{{title}}</h1>\n\n<app-customer-dashboard></app-customer-dashboard>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png)\n\n\n# Providing dependencies in modules\n\nprovider 是 Dependency Injection 系統關於如何獲取 dependency 的指令。\n\n## Providing a service\n\n可以使用 Angular CLI 建立一個新的 service\n\n```typescript\nng generate service User\n```\n\n用這個 CLI Command 創建出來的 servce.ts 會長成下面這樣\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n}\n```\n\n有了這個 service 後就可以在應用程式的任何一個位置注入 `UserService`。\n\nservice 本身是由 Angular CLI 所建立出來的一個 class，他使用了 `@Injectable()` 進行修飾，默認情況下這個裝飾器有一個 property 名為 `providedIn`，他會為 service 創建一個 `provider`，在上面的例子中 `provideIn: 'root'` 代表它他是注入在 root injector 中，代表所有地方都可以將它注入並且使用。\n\n## Provider scope\n\n當在 root module 中提供 service 時 Angular 會將它建立成一個`單一的`、`共享的` service 實例，並注入到任何需要他的 class 中，除了這樣之外 Angular 還會將沒有被使用到的 service 移除進而優化整個應用程式，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用，這意味著如果兩個 module 都在使用這個 service 的內容時，他們使用的是相同的 service 實例`（singleton pattern）`，所以記得當添加 service 到 root module 時，他會變成整個應用程式都可以使用，並且大家都是放問到`同一個實例`，除非 module 是使用延遲載入。\n\n當有兩個不同 module 中（這邊舉例 AppModule 和 FeatureModule）的 component 使用同一個 service（這邊舉例 VoteService）所提供的服務時會發生以下的事件\n\n1. AppModule 和 FeatureModule 的 providers 都有 VoteService\n2. 因為在 AppModule 中有將 FeatureModule 導入，並且這兩個 module 都有著同一個 `token`（相同的 service）的 provider，所以最上層的 AppModule 會獲勝，因為 Angular 所使用的 injector 系統在應用程式啟動後載入 root module 時，所有被導入的 module 中的 providers 都會被添加到 `root injector` 中。 \n3. 所以當 FeatureModule 中的 component 要使用 VoteService 所提供的內容時，會因為在 `root injector` 中找到了被創建實例的 VoteService，所以就會直接使用它而不會創建一個新的 VoteService 實例。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png)\n\n## Limiting provider scope by lazy loading modules\n\n一般來說透過 Angular CLI 所建立的 Module 中都是被`急切載入`的，這意味著當應用程式啟動的話就會立馬加載這些 module，Angular 使用 injector 系統使 module 之間的 service 可以互相使用，但在急切加載的應用程式中 root injector 會讓所有 module 的 providers 在整個應用程式中可以使用，這意味著剛剛介紹的方法變得無法使用。\n\n不過當你使用延遲加載的話就不會出現這種行為，延遲加載是指僅在需要的時候才載入某一個 Module，例如 route 變化的時候，他不會像急切加載一樣立即加載所有的 module，這意味著延遲載入的 module 中 `providers` 的 service 變得無法被其他地方使用，因為 root injector 不知知道這些 module（ 尚未被載入 ）。\n\n當 router 延遲加載一個 module 時會創建一個新的 injector，這個 injector 是 root injector 的小孩，每一個延遲加載的 module 都會有一個 `root injector` 和 `child injector`，router 會將所有 providers 從 root injector 添加到 child injector，所以當 router 透過延遲加載的 module 創建 component 時，會將延遲加載的 module 的 providers 創建成 service 實例，可能有點抽象這邊舉個個例子\n\n1. 使用 Angular CLI 創建新的 service\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class VoteService {\n      votes = 10;\n      constructor() { }\n\n      getVotes() {\n        return this.votes;\n      }\n      setVotes(vote: number) {\n         this.votes = vote;\n      }\n    }\n    ```\n\n2. 在 app.component 中注入 service 並將獲得的數據顯示在畫面中\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { VoteService } from './vote.service';\n\n    @Component({\n      selector: 'app-root',\n      template: `\n        app component - {{votes}}\n        <button (click)=\"onClick()\">get vote again</button>\n        <button routerLink=\"/orders\">Orders</button>\n        <router-outlet></router-outlet>\n      `\n    })\n    export class AppComponent implements OnInit {\n      votes!: number;\n      constructor(private voteService: VoteService) {}\n\n      ngOnInit() {\n        this.votes = this.voteService.getVotes();\n        this.voteService.setVotes(25);\n      }\n\n      onClick() {\n        this.votes = this.voteService.getVotes();\n      }\n    }\n    ```\n\n3. 接著使用 Angular CLI 創建一個延遲載入了 module 與他的 component\n\n    ```bash\n    ng generate module customers --route customers --module app.module\n    ```\n\n    這邊可能會有點看不懂，但沒關係之後會詳細介紹 Angular 的延遲載入 module\n\n4. 使用上的 CLI Command 後，在 order.component 中注入 VoteService，並將獲得的數據顯示在畫面上\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { VoteService } from '../vote.service';\n\n    @Component({\n      selector: 'app-orders',\n      template: `\n        <div>app-orders - {{vote}}</div>\n      `\n    })\n    export class OrdersComponent implements OnInit {\n      vote!: number;\n      constructor(private voteService: VoteService) { }\n\n      ngOnInit(): void {\n        this.vote = this.voteService.getVotes();\n      }\n    }\n    ```\n    \n![img](https://i.imgur.com/91Bga9D.gif)\n\n在 app.component 中已經將 VoteService 中的 votes 更改為 25，但是在 orders.component 中所獲得的依然是初始的 10，這代表 app.component 中所使用的 service 實例與 orders.component 中使用的 service 實例是不一樣的。\n\n\n# 結論\n\n本章介紹了什麼是 Entry components，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，而設定這個 entry component 可以透過在 AppModule 中的bootstrap 中設定，也可以在 routed 中設定，這兩種方法都可以設定應用程式的 Entry components。\n\n介紹了什麼是 Feature module 與該如何建立與使用，通常會因為應用程式著增長，而將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界。\n\n最後介紹了 Providing dependencies，provider 是 Dependency Injection 系統關於如何獲取 dependency 的指令，而當在 root module 中提供 service 時 Angular 會將它建立成一個`單一的`、`共享的` service 實例，所以當不同 module 中的 component 注入並且使用同一個 Service 時，其實他們是會使用同一個 Service 的實例，這就是 Angular 的 singleton pattern 模式。\n\n但是如果是在延遲載入的 module 中使用相同的 Service 的話就會跟上面說的不一樣，延遲載入的 module 會為自己的 component 創建一個`新的` Service 實例。\n\n本章中利用延遲載入來測試延遲載入的 module 是否會跟其他立即載入的 module 共用同一個 service 實例，不過卻沒有詳細的講解這個方法，不過沒關係明天將會詳細的介紹 Angular 的延遲載入功能，那就明天見吧\n\n\n# Reference\n\n- [Angular.io - Entry components](https://angular.io/guide/entry-components)\n- [Angular.io - Feature modules](https://angular.io/guide/feature-modules)\n- [Angular.io - Providing dependencies in modules](https://angular.io/guide/providers)\n- [Understanding provider scope in Angular](https://itnext.io/understanding-provider-scope-in-angular-4c2589de5bc)","source":"_posts/Angular/angular-31.md","raw":"---\ntitle: Day31. Angular Module（二）\ndate: 2021-10-01 09:23:36\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在上一篇中介紹了 Angular 中 Module 的一部分，接著要繼續介紹還沒講完的部分，那就往下看吧\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg](https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg)\n\n<!-- more -->\n\n# Entry components\n\n在上一張的 `NgModule metadata` 中提到了 `bootstrap` 這個 Property，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，插入這個 bootstrapped component 後會觸發一連串的子層 component 來填充這個應用程式的 component tree，而這個被指定的 component 就稱為 `Entry components`。\n\nEntry components 是 Angular 按類型命令加載的 component，這意味者你不需要在任何 template 中引用他，可以通過 NgModule 中的 bootstrap 中這定他，也可以通過將它包含在 `rooting` 中來指定 Entry components。\n\n所以 Entry components 主要可以分為兩種\n\n- bootstrapped component：metadata 中 bootstrap 的 component\n- 在 route 中指定的 component\n\n## A bootstrapped entry component\n\nbootstrapped component 是 Angular 在引導過程（應用程序啟動）期間加載到 DOM 的 Entry component，一個最基本的 bootstrapped component 就是在 app.module.ts 中設定的 Entry component\n\n```typescript\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] // bootstrapped entry component\n})\n```\n\n以上面的例子來說，Angular 會動態加載 root AppComponent，因為他被設置在 bootstrap 中。\n\n`@NgModule.bootstrap` property 告訴編譯器這是一個 `entry component`，應該生成戴法來用這個 component 啟動應用程序，所以 bootstrapped component 必須要是 entry component，因為 bootstrapping 是一個命令式的過程，所唷需要一個 entry component。\n\n## A routed entry component\n\n第二種 entry component 會出現在 route 的定義中，比如\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n```\n\n所有 router components 必須是 entry component，因為這需要在兩個地方（router 和 entryComponents） 添加 component，所以編譯器可以識別這是一個 router 定義並自動將它添加到 entryComponent 中。\n\n## The entryComponents array\n\n雖然 @NgModule 裝飾器有一個 property 是 entryComponent 的陣列，但大多數`不需要`設置任何 entryComponent，因為 Angular 添加了 @NgModule.bootstrap 中添加的 component 和 route 定義中的那些自動進入的 component，儘管這兩種機制佔了大多數的  entry components，但如果你的應用程序需要引導或動態加載 component，則也可以將 component 添加到 entryComponent 中。\n\n\n# Feature modules\n\nfeature module 是用於組織程式的 NgModules，隨著應用程式著增長，可以將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界，使用 feature modules 將特定功能或相關的程式與其他部分拆開，這樣的分割有助於開發人員與團隊人員的合作，將不同的 feature modules 交由不同人進行維護與開發，可以更好的保障這個功能的完整性與安全性。\n\n## Feature modules vs. root modules\n\nfeature modules 是一種`組織相關程式`的最佳實踐，他與 Angular 核心的 API 概念相反，feature module 提供了一組內聚的功能，專注於特定的應用程式`功能`或`需求`，例如 form 或 routing 等等，雖然這些動作都可以在 root module 中做到，但使用 feature modules 可以幫助你將應用程式以功能而言劃分為不同的重點區域。\n\n## How to make a feature module\n\n可以在應用程式中使用 Angular CLI 建立一個新的 feature module\n\n```bash\nng generate module CustomerDashboard\n```\n\n輸入上面的 CLI Command 後 Angular 會建立一個名為 customer-dashboard 的資料夾，其中會包含一個名為 customer-dashboard.module.ts 的文件，文件內容會是\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class CustomerDashboardModule { }\n```\n\n無論是 root module 或是 feature module 他們的 NgModule 結構都會是一樣的，在 CLI 產生的 feature module 中，在它的頂部 import 了兩個東西，第一個是導入 `NgModule` 他與 root module 一樣允許你使用 @NgModule 裝飾器，第二個導入的事 `CommonModule` 他用於提供與多常用的 directive，比如 `ngIf` 或 `ngFor`， feature module 導入的是 `CommonModule` 而不是像 root module 中引入 `BrowserModule`， 因為他只會`被引入一次`，CommonModule 只包含常見的 directive 而 BrowserModule 是會為瀏覽器配置 Angular 應用程式，這個過程只需要完成一次。\n\nmodule 中的 declarations 陣列可以用來定義屬於這個 module 的 component、pipe 或 directive，要添加屬於這個 module 的 component 的話，可以使用下面的 CLI Command\n\n```typescript\nng generate component customer-dashboard/CustomerDashboard\n```\n\n或\n\n```typescript\nng generate component customer-dashboard --module customer-dashboard.module\n```\n\n都可以建立一個屬於 customer-dashboard.module 的 component\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomerDashboardComponent } from './customer-dashboard.component';\n\n@NgModule({\n  declarations: [\n    CustomerDashboardComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class CustomerDashboardModule { }\n```\n\nCustomerDashboardComponent 會透過 Import 引入 module 中，並將它添加到 `declarations` 中，這樣會讓 Angular 知道這個 Component 與這個 module 有關聯。\n\n## Importing a feature module\n\n要將其他的 feature modules 合併到應用程式中，需要讓 root module 知道這件事，可以看到 customer-dashboard.module 的最下方有使用 `export` 將此 module 導出，這樣可以讓其他 module 使用，要將其添加到 AppModule 中的 `imports` 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CustomerDashboardModule } from './customer-dashboard/customer-dashboard.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    CustomerDashboardModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n## Rendering a feature module’s component template\n\n要在 AppComponent 中的 template 中使用 CustomerDashboardComponent 的 selector，首先需要將在 CustomerDashboardModule 中導出 CustomerDashboardComponent\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomerDashboardComponent } from './customer-dashboard.component';\n\n@NgModule({\n  declarations: [\n    CustomerDashboardComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CustomerDashboardComponent\n  ]\n})\nexport class CustomerDashboardModule { }\n```\n\n將它導出後就可以在 AppComponent 中的 template 中使用這個 selector\n\n```typescript\n<h1>{{title}}</h1>\n\n<app-customer-dashboard></app-customer-dashboard>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png)\n\n\n# Providing dependencies in modules\n\nprovider 是 Dependency Injection 系統關於如何獲取 dependency 的指令。\n\n## Providing a service\n\n可以使用 Angular CLI 建立一個新的 service\n\n```typescript\nng generate service User\n```\n\n用這個 CLI Command 創建出來的 servce.ts 會長成下面這樣\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n}\n```\n\n有了這個 service 後就可以在應用程式的任何一個位置注入 `UserService`。\n\nservice 本身是由 Angular CLI 所建立出來的一個 class，他使用了 `@Injectable()` 進行修飾，默認情況下這個裝飾器有一個 property 名為 `providedIn`，他會為 service 創建一個 `provider`，在上面的例子中 `provideIn: 'root'` 代表它他是注入在 root injector 中，代表所有地方都可以將它注入並且使用。\n\n## Provider scope\n\n當在 root module 中提供 service 時 Angular 會將它建立成一個`單一的`、`共享的` service 實例，並注入到任何需要他的 class 中，除了這樣之外 Angular 還會將沒有被使用到的 service 移除進而優化整個應用程式，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用，這意味著如果兩個 module 都在使用這個 service 的內容時，他們使用的是相同的 service 實例`（singleton pattern）`，所以記得當添加 service 到 root module 時，他會變成整個應用程式都可以使用，並且大家都是放問到`同一個實例`，除非 module 是使用延遲載入。\n\n當有兩個不同 module 中（這邊舉例 AppModule 和 FeatureModule）的 component 使用同一個 service（這邊舉例 VoteService）所提供的服務時會發生以下的事件\n\n1. AppModule 和 FeatureModule 的 providers 都有 VoteService\n2. 因為在 AppModule 中有將 FeatureModule 導入，並且這兩個 module 都有著同一個 `token`（相同的 service）的 provider，所以最上層的 AppModule 會獲勝，因為 Angular 所使用的 injector 系統在應用程式啟動後載入 root module 時，所有被導入的 module 中的 providers 都會被添加到 `root injector` 中。 \n3. 所以當 FeatureModule 中的 component 要使用 VoteService 所提供的內容時，會因為在 `root injector` 中找到了被創建實例的 VoteService，所以就會直接使用它而不會創建一個新的 VoteService 實例。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png)\n\n## Limiting provider scope by lazy loading modules\n\n一般來說透過 Angular CLI 所建立的 Module 中都是被`急切載入`的，這意味著當應用程式啟動的話就會立馬加載這些 module，Angular 使用 injector 系統使 module 之間的 service 可以互相使用，但在急切加載的應用程式中 root injector 會讓所有 module 的 providers 在整個應用程式中可以使用，這意味著剛剛介紹的方法變得無法使用。\n\n不過當你使用延遲加載的話就不會出現這種行為，延遲加載是指僅在需要的時候才載入某一個 Module，例如 route 變化的時候，他不會像急切加載一樣立即加載所有的 module，這意味著延遲載入的 module 中 `providers` 的 service 變得無法被其他地方使用，因為 root injector 不知知道這些 module（ 尚未被載入 ）。\n\n當 router 延遲加載一個 module 時會創建一個新的 injector，這個 injector 是 root injector 的小孩，每一個延遲加載的 module 都會有一個 `root injector` 和 `child injector`，router 會將所有 providers 從 root injector 添加到 child injector，所以當 router 透過延遲加載的 module 創建 component 時，會將延遲加載的 module 的 providers 創建成 service 實例，可能有點抽象這邊舉個個例子\n\n1. 使用 Angular CLI 創建新的 service\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class VoteService {\n      votes = 10;\n      constructor() { }\n\n      getVotes() {\n        return this.votes;\n      }\n      setVotes(vote: number) {\n         this.votes = vote;\n      }\n    }\n    ```\n\n2. 在 app.component 中注入 service 並將獲得的數據顯示在畫面中\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { VoteService } from './vote.service';\n\n    @Component({\n      selector: 'app-root',\n      template: `\n        app component - {{votes}}\n        <button (click)=\"onClick()\">get vote again</button>\n        <button routerLink=\"/orders\">Orders</button>\n        <router-outlet></router-outlet>\n      `\n    })\n    export class AppComponent implements OnInit {\n      votes!: number;\n      constructor(private voteService: VoteService) {}\n\n      ngOnInit() {\n        this.votes = this.voteService.getVotes();\n        this.voteService.setVotes(25);\n      }\n\n      onClick() {\n        this.votes = this.voteService.getVotes();\n      }\n    }\n    ```\n\n3. 接著使用 Angular CLI 創建一個延遲載入了 module 與他的 component\n\n    ```bash\n    ng generate module customers --route customers --module app.module\n    ```\n\n    這邊可能會有點看不懂，但沒關係之後會詳細介紹 Angular 的延遲載入 module\n\n4. 使用上的 CLI Command 後，在 order.component 中注入 VoteService，並將獲得的數據顯示在畫面上\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { VoteService } from '../vote.service';\n\n    @Component({\n      selector: 'app-orders',\n      template: `\n        <div>app-orders - {{vote}}</div>\n      `\n    })\n    export class OrdersComponent implements OnInit {\n      vote!: number;\n      constructor(private voteService: VoteService) { }\n\n      ngOnInit(): void {\n        this.vote = this.voteService.getVotes();\n      }\n    }\n    ```\n    \n![img](https://i.imgur.com/91Bga9D.gif)\n\n在 app.component 中已經將 VoteService 中的 votes 更改為 25，但是在 orders.component 中所獲得的依然是初始的 10，這代表 app.component 中所使用的 service 實例與 orders.component 中使用的 service 實例是不一樣的。\n\n\n# 結論\n\n本章介紹了什麼是 Entry components，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，而設定這個 entry component 可以透過在 AppModule 中的bootstrap 中設定，也可以在 routed 中設定，這兩種方法都可以設定應用程式的 Entry components。\n\n介紹了什麼是 Feature module 與該如何建立與使用，通常會因為應用程式著增長，而將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界。\n\n最後介紹了 Providing dependencies，provider 是 Dependency Injection 系統關於如何獲取 dependency 的指令，而當在 root module 中提供 service 時 Angular 會將它建立成一個`單一的`、`共享的` service 實例，所以當不同 module 中的 component 注入並且使用同一個 Service 時，其實他們是會使用同一個 Service 的實例，這就是 Angular 的 singleton pattern 模式。\n\n但是如果是在延遲載入的 module 中使用相同的 Service 的話就會跟上面說的不一樣，延遲載入的 module 會為自己的 component 創建一個`新的` Service 實例。\n\n本章中利用延遲載入來測試延遲載入的 module 是否會跟其他立即載入的 module 共用同一個 service 實例，不過卻沒有詳細的講解這個方法，不過沒關係明天將會詳細的介紹 Angular 的延遲載入功能，那就明天見吧\n\n\n# Reference\n\n- [Angular.io - Entry components](https://angular.io/guide/entry-components)\n- [Angular.io - Feature modules](https://angular.io/guide/feature-modules)\n- [Angular.io - Providing dependencies in modules](https://angular.io/guide/providers)\n- [Understanding provider scope in Angular](https://itnext.io/understanding-provider-scope-in-angular-4c2589de5bc)","slug":"Angular/angular-31","published":1,"updated":"2022-02-16T06:54:18.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6be2001b95w3aytodlc8","content":"<p>在上一篇中介紹了 Angular 中 Module 的一部分，接著要繼續介紹還沒講完的部分，那就往下看吧</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Entry-components\"><a href=\"#Entry-components\" class=\"headerlink\" title=\"Entry components\"></a>Entry components</h1><p>在上一張的 <code>NgModule metadata</code> 中提到了 <code>bootstrap</code> 這個 Property，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，插入這個 bootstrapped component 後會觸發一連串的子層 component 來填充這個應用程式的 component tree，而這個被指定的 component 就稱為 <code>Entry components</code>。</p>\n<p>Entry components 是 Angular 按類型命令加載的 component，這意味者你不需要在任何 template 中引用他，可以通過 NgModule 中的 bootstrap 中這定他，也可以通過將它包含在 <code>rooting</code> 中來指定 Entry components。</p>\n<p>所以 Entry components 主要可以分為兩種</p>\n<ul>\n<li>bootstrapped component：metadata 中 bootstrap 的 component</li>\n<li>在 route 中指定的 component</li>\n</ul>\n<h2 id=\"A-bootstrapped-entry-component\"><a href=\"#A-bootstrapped-entry-component\" class=\"headerlink\" title=\"A bootstrapped entry component\"></a>A bootstrapped entry component</h2><p>bootstrapped component 是 Angular 在引導過程（應用程序啟動）期間加載到 DOM 的 Entry component，一個最基本的 bootstrapped component 就是在 app.module.ts 中設定的 Entry component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">HttpClientModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>] <span class=\"comment\">// bootstrapped entry component</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以上面的例子來說，Angular 會動態加載 root AppComponent，因為他被設置在 bootstrap 中。</p>\n<p><code>@NgModule.bootstrap</code> property 告訴編譯器這是一個 <code>entry component</code>，應該生成戴法來用這個 component 啟動應用程序，所以 bootstrapped component 必須要是 entry component，因為 bootstrapping 是一個命令式的過程，所唷需要一個 entry component。</p>\n<h2 id=\"A-routed-entry-component\"><a href=\"#A-routed-entry-component\" class=\"headerlink\" title=\"A routed entry component\"></a>A routed entry component</h2><p>第二種 entry component 會出現在 route 的定義中，比如</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">CustomerListComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>所有 router components 必須是 entry component，因為這需要在兩個地方（router 和 entryComponents） 添加 component，所以編譯器可以識別這是一個 router 定義並自動將它添加到 entryComponent 中。</p>\n<h2 id=\"The-entryComponents-array\"><a href=\"#The-entryComponents-array\" class=\"headerlink\" title=\"The entryComponents array\"></a>The entryComponents array</h2><p>雖然 @NgModule 裝飾器有一個 property 是 entryComponent 的陣列，但大多數<code>不需要</code>設置任何 entryComponent，因為 Angular 添加了 @NgModule.bootstrap 中添加的 component 和 route 定義中的那些自動進入的 component，儘管這兩種機制佔了大多數的  entry components，但如果你的應用程序需要引導或動態加載 component，則也可以將 component 添加到 entryComponent 中。</p>\n<h1 id=\"Feature-modules\"><a href=\"#Feature-modules\" class=\"headerlink\" title=\"Feature modules\"></a>Feature modules</h1><p>feature module 是用於組織程式的 NgModules，隨著應用程式著增長，可以將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界，使用 feature modules 將特定功能或相關的程式與其他部分拆開，這樣的分割有助於開發人員與團隊人員的合作，將不同的 feature modules 交由不同人進行維護與開發，可以更好的保障這個功能的完整性與安全性。</p>\n<h2 id=\"Feature-modules-vs-root-modules\"><a href=\"#Feature-modules-vs-root-modules\" class=\"headerlink\" title=\"Feature modules vs. root modules\"></a>Feature modules vs. root modules</h2><p>feature modules 是一種<code>組織相關程式</code>的最佳實踐，他與 Angular 核心的 API 概念相反，feature module 提供了一組內聚的功能，專注於特定的應用程式<code>功能</code>或<code>需求</code>，例如 form 或 routing 等等，雖然這些動作都可以在 root module 中做到，但使用 feature modules 可以幫助你將應用程式以功能而言劃分為不同的重點區域。</p>\n<h2 id=\"How-to-make-a-feature-module\"><a href=\"#How-to-make-a-feature-module\" class=\"headerlink\" title=\"How to make a feature module\"></a>How to make a feature module</h2><p>可以在應用程式中使用 Angular CLI 建立一個新的 feature module</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module CustomerDashboard</span><br></pre></td></tr></table></figure>\n\n<p>輸入上面的 CLI Command 後 Angular 會建立一個名為 customer-dashboard 的資料夾，其中會包含一個名為 customer-dashboard.module.ts 的文件，文件內容會是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDashboardModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>無論是 root module 或是 feature module 他們的 NgModule 結構都會是一樣的，在 CLI 產生的 feature module 中，在它的頂部 import 了兩個東西，第一個是導入 <code>NgModule</code> 他與 root module 一樣允許你使用 @NgModule 裝飾器，第二個導入的事 <code>CommonModule</code> 他用於提供與多常用的 directive，比如 <code>ngIf</code> 或 <code>ngFor</code>， feature module 導入的是 <code>CommonModule</code> 而不是像 root module 中引入 <code>BrowserModule</code>， 因為他只會<code>被引入一次</code>，CommonModule 只包含常見的 directive 而 BrowserModule 是會為瀏覽器配置 Angular 應用程式，這個過程只需要完成一次。</p>\n<p>module 中的 declarations 陣列可以用來定義屬於這個 module 的 component、pipe 或 directive，要添加屬於這個 module 的 component 的話，可以使用下面的 CLI Command</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component customer-dashboard/<span class=\"title class_\">CustomerDashboard</span></span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component customer-dashboard --<span class=\"variable language_\">module</span> customer-dashboard.<span class=\"property\">module</span></span><br></pre></td></tr></table></figure>\n\n<p>都可以建立一個屬於 customer-dashboard.module 的 component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomerDashboardComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customer-dashboard.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDashboardModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>CustomerDashboardComponent 會透過 Import 引入 module 中，並將它添加到 <code>declarations</code> 中，這樣會讓 Angular 知道這個 Component 與這個 module 有關聯。</p>\n<h2 id=\"Importing-a-feature-module\"><a href=\"#Importing-a-feature-module\" class=\"headerlink\" title=\"Importing a feature module\"></a>Importing a feature module</h2><p>要將其他的 feature modules 合併到應用程式中，需要讓 root module 知道這件事，可以看到 customer-dashboard.module 的最下方有使用 <code>export</code> 將此 module 導出，這樣可以讓其他 module 使用，要將其添加到 AppModule 中的 <code>imports</code> 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomerDashboardModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customer-dashboard/customer-dashboard.module&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rendering-a-feature-module’s-component-template\"><a href=\"#Rendering-a-feature-module’s-component-template\" class=\"headerlink\" title=\"Rendering a feature module’s component template\"></a>Rendering a feature module’s component template</h2><p>要在 AppComponent 中的 template 中使用 CustomerDashboardComponent 的 selector，首先需要將在 CustomerDashboardModule 中導出 CustomerDashboardComponent</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomerDashboardComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customer-dashboard.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardComponent</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDashboardModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>將它導出後就可以在 AppComponent 中的 template 中使用這個 selector</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">app-customer-dashboard</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-customer-dashboard</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png\"></p>\n<h1 id=\"Providing-dependencies-in-modules\"><a href=\"#Providing-dependencies-in-modules\" class=\"headerlink\" title=\"Providing dependencies in modules\"></a>Providing dependencies in modules</h1><p>provider 是 Dependency Injection 系統關於如何獲取 dependency 的指令。</p>\n<h2 id=\"Providing-a-service\"><a href=\"#Providing-a-service\" class=\"headerlink\" title=\"Providing a service\"></a>Providing a service</h2><p>可以使用 Angular CLI 建立一個新的 service</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service <span class=\"title class_\">User</span></span><br></pre></td></tr></table></figure>\n\n<p>用這個 CLI Command 創建出來的 servce.ts 會長成下面這樣</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了這個 service 後就可以在應用程式的任何一個位置注入 <code>UserService</code>。</p>\n<p>service 本身是由 Angular CLI 所建立出來的一個 class，他使用了 <code>@Injectable()</code> 進行修飾，默認情況下這個裝飾器有一個 property 名為 <code>providedIn</code>，他會為 service 創建一個 <code>provider</code>，在上面的例子中 <code>provideIn: &#39;root&#39;</code> 代表它他是注入在 root injector 中，代表所有地方都可以將它注入並且使用。</p>\n<h2 id=\"Provider-scope\"><a href=\"#Provider-scope\" class=\"headerlink\" title=\"Provider scope\"></a>Provider scope</h2><p>當在 root module 中提供 service 時 Angular 會將它建立成一個<code>單一的</code>、<code>共享的</code> service 實例，並注入到任何需要他的 class 中，除了這樣之外 Angular 還會將沒有被使用到的 service 移除進而優化整個應用程式，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用，這意味著如果兩個 module 都在使用這個 service 的內容時，他們使用的是相同的 service 實例<code>（singleton pattern）</code>，所以記得當添加 service 到 root module 時，他會變成整個應用程式都可以使用，並且大家都是放問到<code>同一個實例</code>，除非 module 是使用延遲載入。</p>\n<p>當有兩個不同 module 中（這邊舉例 AppModule 和 FeatureModule）的 component 使用同一個 service（這邊舉例 VoteService）所提供的服務時會發生以下的事件</p>\n<ol>\n<li>AppModule 和 FeatureModule 的 providers 都有 VoteService</li>\n<li>因為在 AppModule 中有將 FeatureModule 導入，並且這兩個 module 都有著同一個 <code>token</code>（相同的 service）的 provider，所以最上層的 AppModule 會獲勝，因為 Angular 所使用的 injector 系統在應用程式啟動後載入 root module 時，所有被導入的 module 中的 providers 都會被添加到 <code>root injector</code> 中。 </li>\n<li>所以當 FeatureModule 中的 component 要使用 VoteService 所提供的內容時，會因為在 <code>root injector</code> 中找到了被創建實例的 VoteService，所以就會直接使用它而不會創建一個新的 VoteService 實例。</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png\"></p>\n<h2 id=\"Limiting-provider-scope-by-lazy-loading-modules\"><a href=\"#Limiting-provider-scope-by-lazy-loading-modules\" class=\"headerlink\" title=\"Limiting provider scope by lazy loading modules\"></a>Limiting provider scope by lazy loading modules</h2><p>一般來說透過 Angular CLI 所建立的 Module 中都是被<code>急切載入</code>的，這意味著當應用程式啟動的話就會立馬加載這些 module，Angular 使用 injector 系統使 module 之間的 service 可以互相使用，但在急切加載的應用程式中 root injector 會讓所有 module 的 providers 在整個應用程式中可以使用，這意味著剛剛介紹的方法變得無法使用。</p>\n<p>不過當你使用延遲加載的話就不會出現這種行為，延遲加載是指僅在需要的時候才載入某一個 Module，例如 route 變化的時候，他不會像急切加載一樣立即加載所有的 module，這意味著延遲載入的 module 中 <code>providers</code> 的 service 變得無法被其他地方使用，因為 root injector 不知知道這些 module（ 尚未被載入 ）。</p>\n<p>當 router 延遲加載一個 module 時會創建一個新的 injector，這個 injector 是 root injector 的小孩，每一個延遲加載的 module 都會有一個 <code>root injector</code> 和 <code>child injector</code>，router 會將所有 providers 從 root injector 添加到 child injector，所以當 router 透過延遲加載的 module 創建 component 時，會將延遲加載的 module 的 providers 創建成 service 實例，可能有點抽象這邊舉個個例子</p>\n<ol>\n<li><p>使用 Angular CLI 創建新的 service</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VoteService</span> &#123;</span><br><span class=\"line\">  votes = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getVotes</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setVotes</span>(<span class=\"params\">vote: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span> = vote;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component 中注入 service 並將獲得的數據顯示在畫面中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VoteService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vote.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    app component - &#123;&#123;votes&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button (click)=&quot;onClick()&quot;&gt;get vote again&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button routerLink=&quot;/orders&quot;&gt;Orders&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;router-outlet&gt;&lt;/router-outlet&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  votes!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> voteService: VoteService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">getVotes</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">setVotes</span>(<span class=\"number\">25</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">getVotes</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著使用 Angular CLI 創建一個延遲載入了 module 與他的 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module customers --route customers --module app.module</span><br></pre></td></tr></table></figure>\n\n<p> 這邊可能會有點看不懂，但沒關係之後會詳細介紹 Angular 的延遲載入 module</p>\n</li>\n<li><p>使用上的 CLI Command 後，在 order.component 中注入 VoteService，並將獲得的數據顯示在畫面上</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VoteService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../vote.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-orders&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;app-orders - &#123;&#123;vote&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrdersComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  vote!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> voteService: VoteService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vote</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">getVotes</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/91Bga9D.gif\" alt=\"img\"></p>\n<p>在 app.component 中已經將 VoteService 中的 votes 更改為 25，但是在 orders.component 中所獲得的依然是初始的 10，這代表 app.component 中所使用的 service 實例與 orders.component 中使用的 service 實例是不一樣的。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了什麼是 Entry components，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，而設定這個 entry component 可以透過在 AppModule 中的bootstrap 中設定，也可以在 routed 中設定，這兩種方法都可以設定應用程式的 Entry components。</p>\n<p>介紹了什麼是 Feature module 與該如何建立與使用，通常會因為應用程式著增長，而將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界。</p>\n<p>最後介紹了 Providing dependencies，provider 是 Dependency Injection 系統關於如何獲取 dependency 的指令，而當在 root module 中提供 service 時 Angular 會將它建立成一個<code>單一的</code>、<code>共享的</code> service 實例，所以當不同 module 中的 component 注入並且使用同一個 Service 時，其實他們是會使用同一個 Service 的實例，這就是 Angular 的 singleton pattern 模式。</p>\n<p>但是如果是在延遲載入的 module 中使用相同的 Service 的話就會跟上面說的不一樣，延遲載入的 module 會為自己的 component 創建一個<code>新的</code> Service 實例。</p>\n<p>本章中利用延遲載入來測試延遲載入的 module 是否會跟其他立即載入的 module 共用同一個 service 實例，不過卻沒有詳細的講解這個方法，不過沒關係明天將會詳細的介紹 Angular 的延遲載入功能，那就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/entry-components\">Angular.io - Entry components</a></li>\n<li><a href=\"https://angular.io/guide/feature-modules\">Angular.io - Feature modules</a></li>\n<li><a href=\"https://angular.io/guide/providers\">Angular.io - Providing dependencies in modules</a></li>\n<li><a href=\"https://itnext.io/understanding-provider-scope-in-angular-4c2589de5bc\">Understanding provider scope in Angular</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在上一篇中介紹了 Angular 中 Module 的一部分，接著要繼續介紹還沒講完的部分，那就往下看吧</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767WkLGbCrgWU.jpg\"></p>","more":"<h1 id=\"Entry-components\"><a href=\"#Entry-components\" class=\"headerlink\" title=\"Entry components\"></a>Entry components</h1><p>在上一張的 <code>NgModule metadata</code> 中提到了 <code>bootstrap</code> 這個 Property，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，插入這個 bootstrapped component 後會觸發一連串的子層 component 來填充這個應用程式的 component tree，而這個被指定的 component 就稱為 <code>Entry components</code>。</p>\n<p>Entry components 是 Angular 按類型命令加載的 component，這意味者你不需要在任何 template 中引用他，可以通過 NgModule 中的 bootstrap 中這定他，也可以通過將它包含在 <code>rooting</code> 中來指定 Entry components。</p>\n<p>所以 Entry components 主要可以分為兩種</p>\n<ul>\n<li>bootstrapped component：metadata 中 bootstrap 的 component</li>\n<li>在 route 中指定的 component</li>\n</ul>\n<h2 id=\"A-bootstrapped-entry-component\"><a href=\"#A-bootstrapped-entry-component\" class=\"headerlink\" title=\"A bootstrapped entry component\"></a>A bootstrapped entry component</h2><p>bootstrapped component 是 Angular 在引導過程（應用程序啟動）期間加載到 DOM 的 Entry component，一個最基本的 bootstrapped component 就是在 app.module.ts 中設定的 Entry component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">HttpClientModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>] <span class=\"comment\">// bootstrapped entry component</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以上面的例子來說，Angular 會動態加載 root AppComponent，因為他被設置在 bootstrap 中。</p>\n<p><code>@NgModule.bootstrap</code> property 告訴編譯器這是一個 <code>entry component</code>，應該生成戴法來用這個 component 啟動應用程序，所以 bootstrapped component 必須要是 entry component，因為 bootstrapping 是一個命令式的過程，所唷需要一個 entry component。</p>\n<h2 id=\"A-routed-entry-component\"><a href=\"#A-routed-entry-component\" class=\"headerlink\" title=\"A routed entry component\"></a>A routed entry component</h2><p>第二種 entry component 會出現在 route 的定義中，比如</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">CustomerListComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>所有 router components 必須是 entry component，因為這需要在兩個地方（router 和 entryComponents） 添加 component，所以編譯器可以識別這是一個 router 定義並自動將它添加到 entryComponent 中。</p>\n<h2 id=\"The-entryComponents-array\"><a href=\"#The-entryComponents-array\" class=\"headerlink\" title=\"The entryComponents array\"></a>The entryComponents array</h2><p>雖然 @NgModule 裝飾器有一個 property 是 entryComponent 的陣列，但大多數<code>不需要</code>設置任何 entryComponent，因為 Angular 添加了 @NgModule.bootstrap 中添加的 component 和 route 定義中的那些自動進入的 component，儘管這兩種機制佔了大多數的  entry components，但如果你的應用程序需要引導或動態加載 component，則也可以將 component 添加到 entryComponent 中。</p>\n<h1 id=\"Feature-modules\"><a href=\"#Feature-modules\" class=\"headerlink\" title=\"Feature modules\"></a>Feature modules</h1><p>feature module 是用於組織程式的 NgModules，隨著應用程式著增長，可以將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界，使用 feature modules 將特定功能或相關的程式與其他部分拆開，這樣的分割有助於開發人員與團隊人員的合作，將不同的 feature modules 交由不同人進行維護與開發，可以更好的保障這個功能的完整性與安全性。</p>\n<h2 id=\"Feature-modules-vs-root-modules\"><a href=\"#Feature-modules-vs-root-modules\" class=\"headerlink\" title=\"Feature modules vs. root modules\"></a>Feature modules vs. root modules</h2><p>feature modules 是一種<code>組織相關程式</code>的最佳實踐，他與 Angular 核心的 API 概念相反，feature module 提供了一組內聚的功能，專注於特定的應用程式<code>功能</code>或<code>需求</code>，例如 form 或 routing 等等，雖然這些動作都可以在 root module 中做到，但使用 feature modules 可以幫助你將應用程式以功能而言劃分為不同的重點區域。</p>\n<h2 id=\"How-to-make-a-feature-module\"><a href=\"#How-to-make-a-feature-module\" class=\"headerlink\" title=\"How to make a feature module\"></a>How to make a feature module</h2><p>可以在應用程式中使用 Angular CLI 建立一個新的 feature module</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module CustomerDashboard</span><br></pre></td></tr></table></figure>\n\n<p>輸入上面的 CLI Command 後 Angular 會建立一個名為 customer-dashboard 的資料夾，其中會包含一個名為 customer-dashboard.module.ts 的文件，文件內容會是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDashboardModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>無論是 root module 或是 feature module 他們的 NgModule 結構都會是一樣的，在 CLI 產生的 feature module 中，在它的頂部 import 了兩個東西，第一個是導入 <code>NgModule</code> 他與 root module 一樣允許你使用 @NgModule 裝飾器，第二個導入的事 <code>CommonModule</code> 他用於提供與多常用的 directive，比如 <code>ngIf</code> 或 <code>ngFor</code>， feature module 導入的是 <code>CommonModule</code> 而不是像 root module 中引入 <code>BrowserModule</code>， 因為他只會<code>被引入一次</code>，CommonModule 只包含常見的 directive 而 BrowserModule 是會為瀏覽器配置 Angular 應用程式，這個過程只需要完成一次。</p>\n<p>module 中的 declarations 陣列可以用來定義屬於這個 module 的 component、pipe 或 directive，要添加屬於這個 module 的 component 的話，可以使用下面的 CLI Command</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component customer-dashboard/<span class=\"title class_\">CustomerDashboard</span></span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component customer-dashboard --<span class=\"variable language_\">module</span> customer-dashboard.<span class=\"property\">module</span></span><br></pre></td></tr></table></figure>\n\n<p>都可以建立一個屬於 customer-dashboard.module 的 component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomerDashboardComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customer-dashboard.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDashboardModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>CustomerDashboardComponent 會透過 Import 引入 module 中，並將它添加到 <code>declarations</code> 中，這樣會讓 Angular 知道這個 Component 與這個 module 有關聯。</p>\n<h2 id=\"Importing-a-feature-module\"><a href=\"#Importing-a-feature-module\" class=\"headerlink\" title=\"Importing a feature module\"></a>Importing a feature module</h2><p>要將其他的 feature modules 合併到應用程式中，需要讓 root module 知道這件事，可以看到 customer-dashboard.module 的最下方有使用 <code>export</code> 將此 module 導出，這樣可以讓其他 module 使用，要將其添加到 AppModule 中的 <code>imports</code> 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomerDashboardModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customer-dashboard/customer-dashboard.module&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rendering-a-feature-module’s-component-template\"><a href=\"#Rendering-a-feature-module’s-component-template\" class=\"headerlink\" title=\"Rendering a feature module’s component template\"></a>Rendering a feature module’s component template</h2><p>要在 AppComponent 中的 template 中使用 CustomerDashboardComponent 的 selector，首先需要將在 CustomerDashboardModule 中導出 CustomerDashboardComponent</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomerDashboardComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customer-dashboard.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomerDashboardComponent</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerDashboardModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>將它導出後就可以在 AppComponent 中的 template 中使用這個 selector</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">app-customer-dashboard</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-customer-dashboard</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767ARHtAppSCa.png\"></p>\n<h1 id=\"Providing-dependencies-in-modules\"><a href=\"#Providing-dependencies-in-modules\" class=\"headerlink\" title=\"Providing dependencies in modules\"></a>Providing dependencies in modules</h1><p>provider 是 Dependency Injection 系統關於如何獲取 dependency 的指令。</p>\n<h2 id=\"Providing-a-service\"><a href=\"#Providing-a-service\" class=\"headerlink\" title=\"Providing a service\"></a>Providing a service</h2><p>可以使用 Angular CLI 建立一個新的 service</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service <span class=\"title class_\">User</span></span><br></pre></td></tr></table></figure>\n\n<p>用這個 CLI Command 創建出來的 servce.ts 會長成下面這樣</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了這個 service 後就可以在應用程式的任何一個位置注入 <code>UserService</code>。</p>\n<p>service 本身是由 Angular CLI 所建立出來的一個 class，他使用了 <code>@Injectable()</code> 進行修飾，默認情況下這個裝飾器有一個 property 名為 <code>providedIn</code>，他會為 service 創建一個 <code>provider</code>，在上面的例子中 <code>provideIn: &#39;root&#39;</code> 代表它他是注入在 root injector 中，代表所有地方都可以將它注入並且使用。</p>\n<h2 id=\"Provider-scope\"><a href=\"#Provider-scope\" class=\"headerlink\" title=\"Provider scope\"></a>Provider scope</h2><p>當在 root module 中提供 service 時 Angular 會將它建立成一個<code>單一的</code>、<code>共享的</code> service 實例，並注入到任何需要他的 class 中，除了這樣之外 Angular 還會將沒有被使用到的 service 移除進而優化整個應用程式，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用，這意味著如果兩個 module 都在使用這個 service 的內容時，他們使用的是相同的 service 實例<code>（singleton pattern）</code>，所以記得當添加 service 到 root module 時，他會變成整個應用程式都可以使用，並且大家都是放問到<code>同一個實例</code>，除非 module 是使用延遲載入。</p>\n<p>當有兩個不同 module 中（這邊舉例 AppModule 和 FeatureModule）的 component 使用同一個 service（這邊舉例 VoteService）所提供的服務時會發生以下的事件</p>\n<ol>\n<li>AppModule 和 FeatureModule 的 providers 都有 VoteService</li>\n<li>因為在 AppModule 中有將 FeatureModule 導入，並且這兩個 module 都有著同一個 <code>token</code>（相同的 service）的 provider，所以最上層的 AppModule 會獲勝，因為 Angular 所使用的 injector 系統在應用程式啟動後載入 root module 時，所有被導入的 module 中的 providers 都會被添加到 <code>root injector</code> 中。 </li>\n<li>所以當 FeatureModule 中的 component 要使用 VoteService 所提供的內容時，會因為在 <code>root injector</code> 中找到了被創建實例的 VoteService，所以就會直接使用它而不會創建一個新的 VoteService 實例。</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767iOqiZ2ePK4.png\"></p>\n<h2 id=\"Limiting-provider-scope-by-lazy-loading-modules\"><a href=\"#Limiting-provider-scope-by-lazy-loading-modules\" class=\"headerlink\" title=\"Limiting provider scope by lazy loading modules\"></a>Limiting provider scope by lazy loading modules</h2><p>一般來說透過 Angular CLI 所建立的 Module 中都是被<code>急切載入</code>的，這意味著當應用程式啟動的話就會立馬加載這些 module，Angular 使用 injector 系統使 module 之間的 service 可以互相使用，但在急切加載的應用程式中 root injector 會讓所有 module 的 providers 在整個應用程式中可以使用，這意味著剛剛介紹的方法變得無法使用。</p>\n<p>不過當你使用延遲加載的話就不會出現這種行為，延遲加載是指僅在需要的時候才載入某一個 Module，例如 route 變化的時候，他不會像急切加載一樣立即加載所有的 module，這意味著延遲載入的 module 中 <code>providers</code> 的 service 變得無法被其他地方使用，因為 root injector 不知知道這些 module（ 尚未被載入 ）。</p>\n<p>當 router 延遲加載一個 module 時會創建一個新的 injector，這個 injector 是 root injector 的小孩，每一個延遲加載的 module 都會有一個 <code>root injector</code> 和 <code>child injector</code>，router 會將所有 providers 從 root injector 添加到 child injector，所以當 router 透過延遲加載的 module 創建 component 時，會將延遲加載的 module 的 providers 創建成 service 實例，可能有點抽象這邊舉個個例子</p>\n<ol>\n<li><p>使用 Angular CLI 創建新的 service</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VoteService</span> &#123;</span><br><span class=\"line\">  votes = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getVotes</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setVotes</span>(<span class=\"params\">vote: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span> = vote;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 app.component 中注入 service 並將獲得的數據顯示在畫面中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VoteService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vote.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    app component - &#123;&#123;votes&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button (click)=&quot;onClick()&quot;&gt;get vote again&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button routerLink=&quot;/orders&quot;&gt;Orders&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;router-outlet&gt;&lt;/router-outlet&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  votes!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> voteService: VoteService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">getVotes</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">setVotes</span>(<span class=\"number\">25</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">votes</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">getVotes</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著使用 Angular CLI 創建一個延遲載入了 module 與他的 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module customers --route customers --module app.module</span><br></pre></td></tr></table></figure>\n\n<p> 這邊可能會有點看不懂，但沒關係之後會詳細介紹 Angular 的延遲載入 module</p>\n</li>\n<li><p>使用上的 CLI Command 後，在 order.component 中注入 VoteService，並將獲得的數據顯示在畫面上</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VoteService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../vote.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-orders&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;app-orders - &#123;&#123;vote&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrdersComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  vote!: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> voteService: VoteService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vote</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">voteService</span>.<span class=\"title function_\">getVotes</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/91Bga9D.gif\" alt=\"img\"></p>\n<p>在 app.component 中已經將 VoteService 中的 votes 更改為 25，但是在 orders.component 中所獲得的依然是初始的 10，這代表 app.component 中所使用的 service 實例與 orders.component 中使用的 service 實例是不一樣的。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了什麼是 Entry components，設置他的主要目的是為了讓應用程式透過這個指定的這個 component 創建最基礎的 DOM 元素，而設定這個 entry component 可以透過在 AppModule 中的bootstrap 中設定，也可以在 routed 中設定，這兩種方法都可以設定應用程式的 Entry components。</p>\n<p>介紹了什麼是 Feature module 與該如何建立與使用，通常會因為應用程式著增長，而將特定功能的相關程式組織在一起，這有助於增加應用程式中每個功能之間的邊界。</p>\n<p>最後介紹了 Providing dependencies，provider 是 Dependency Injection 系統關於如何獲取 dependency 的指令，而當在 root module 中提供 service 時 Angular 會將它建立成一個<code>單一的</code>、<code>共享的</code> service 實例，所以當不同 module 中的 component 注入並且使用同一個 Service 時，其實他們是會使用同一個 Service 的實例，這就是 Angular 的 singleton pattern 模式。</p>\n<p>但是如果是在延遲載入的 module 中使用相同的 Service 的話就會跟上面說的不一樣，延遲載入的 module 會為自己的 component 創建一個<code>新的</code> Service 實例。</p>\n<p>本章中利用延遲載入來測試延遲載入的 module 是否會跟其他立即載入的 module 共用同一個 service 實例，不過卻沒有詳細的講解這個方法，不過沒關係明天將會詳細的介紹 Angular 的延遲載入功能，那就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/entry-components\">Angular.io - Entry components</a></li>\n<li><a href=\"https://angular.io/guide/feature-modules\">Angular.io - Feature modules</a></li>\n<li><a href=\"https://angular.io/guide/providers\">Angular.io - Providing dependencies in modules</a></li>\n<li><a href=\"https://itnext.io/understanding-provider-scope-in-angular-4c2589de5bc\">Understanding provider scope in Angular</a></li>\n</ul>"},{"title":"Day32. Lazy-loading feature modules","date":"2021-10-02T12:46:01.000Z","_content":"\n在默認情況下 NgModules 都是`急切加載`的，這意味著一但應用程式加載，所有的 NgModules 無論是否需要都會被載入，但對於許多大型的應用程式而言可以考慮使用`延遲加載`功能，他是一種根據`需要才加載` NgModules 的設計模式，延遲加載有助於讓初始化的檔案保持為較小的大小，從而`減少加載的時間`，下面就來介紹該如何使用延遲加載模式吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg](https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg)\n\n<!-- more -->\n\n# Step-by-step setup\n\n要設置延遲加載的 feature module 主要有兩個步驟：\n\n1. 使用 `--route` 通過 Angular CLI 創建 feature module\n2. 配置 routes\n\n接著來看看該怎麼創建一個新的延遲載入的 feature module 吧\n\n## Create a feature module with routing\n\n首先需要創建一個帶有 `route` 功能的 feature module，並這個 route 的路徑要指定到 feature module 宣告的某一個 component，可以使用 Angular CLI 一次就完成所有動作，所以是不是很需要 Angular CLI 呢（ gif\n\n```bash\nng generate module customers --route customers --module app.module\n```\n\n上面的 CLI Command 會創建一個名為 customers 的文件夾，其中的 customers.module.ts 中會定義一個延遲載入的 feature module 名為 `CustomersModule`，還會創建一個用於定義 route 的 route module 名為 `CustomersRoutingModule`，除此之外還會建立一個 CustomerComponent 並自動導入到 CustomersRoutingModule 的 `declarations` 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomersComponent } from './customers.component';\n\n@NgModule({\n  declarations: [\n    CustomersComponent\n  ],\n  imports: [\n    CommonModule,\n    CustomersRoutingModule\n  ]\n})\nexport class CustomersModule { }\n```\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CustomersComponent } from './customers.component';\n\nconst routes: Routes = [{ path: '', component: CustomersComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CustomersRoutingModule { }\n```\n\n由於這個新的 feature module 是延遲加載的所以這個 Command 不會在 root module 中添加對這個 fearute module 的引用，因為如果將它加入到 root module 的 imports 的話就會變成`立即加載`，相反的他會將這個 feature module 添加到 route 中\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'customers',\n    loadChildren: () =>\n      import('./customers/customers.module').then((m) => m.CustomersModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\n注意 `loadChildren` 的用法，他後面需要加一個函數，這個函數會使用瀏覽器內置的 `import()` 語法進行動態導入，導入 module 的路徑是`相對路徑`。\n\n## Set up the UI\n\n設定完延遲載入的 module 後，接著來設定一下 UI 畫面讓我們等等可以測試這個延遲載入是否成功，在 app.component.html 中設定按鈕並加上 `<router-outlet>` 用於顯示 route 的 component\n\n```html\n<h1>{{title}}</h1>\n\n<button type=\"button\" class=\"btn btn-primary\" routerLink=\"/customers\">Customers</button>\n<button type=\"button\" class=\"btn btn-success\" routerLink=\"\">Home</button>\n\n<router-outlet></router-outlet>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png)\n\n接著來測試一下會不會當點擊 Customers 按鈕後才會加載 feature module 吧，首先先先打開瀏覽器的開發者頁面並選到 Network 頁面，可以將前面載入的資訊先去除以便比較清楚的看到加載過程\n\n![img](https://i.imgur.com/3NtPEj5.gif)\n\n可以看到當我們點擊了 Customers 按鈕後才會載入延遲載入的 feature module。\n\n\n# forRoot() and forChild()\n\n如果使用 Angular CLI 創建一個 root module 的話，你會看到他將 `RouterModule.forRoot(route)` 添加到 AppRoutingModule 的 `imports` 中，這會讓 Angular 知道 AppRoutingModule 是一個 route module，而 forRoot() 指定這是 `root route module`，他會配置傳遞給他的所有 route 讓你可以訪問 route directive 並註冊 route service，在整個應用程式中 AppRoutingModule 只會使用 forRoot() 一次。\n\nAngular CLI 還會將 RouterModule.forChild(routes) 添加到 feature module 的 `imports` 中，這樣 Angular 就會知道這個只是負責提供額外的 route，並是針對 feature module 的，所以你可以在多個 route modules 中使用 forChild()。\n\n\n# Provider service in lazy-loading modules\n\n在前幾篇中提到了如果在 root module 中提供 service 時 Angular 會將它建立成一個`單一的`、`共享的` service 實例，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用。\n\n但是如果是將 service provider 到 lazy-loading 的 module 時，由於 lazy-loading 的特性，因為這個 module 還沒被載入所以這個 lazy-loading 中添加的 service 就無法在還沒被載入的時候被其他地方的 module 使用，舉個例子\n\n1. 先新增一個 service 並添加一個簡單的 method\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n    import { CustomersModule } from './customers.module';\n\n    @Injectable()\n    export class CustomersService {\n\n      constructor() { }\n\n      getName() {\n        return 'Fandix Huang';\n      }\n    }\n    ```\n\n2. 接著在 CustomersModule 的 providers 添加 CustomersService\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n\n    import { CustomersRoutingModule } from './customers-routing.module';\n    import { CustomersComponent } from './customers.component';\n    import { CustomersService } from './customers.service';\n\n    @NgModule({\n      declarations: [\n        CustomersComponent\n      ],\n      imports: [\n        CommonModule,\n        CustomersRoutingModule\n      ],\n      providers: [CustomersService]\n    })\n    export class CustomersModule { }\n    ```\n\n這時候如果在 app.component.ts 中注入這個 service 的話就會出錯，因為他被 provide 在 lazy-loading 的  module 中，所以還沒被載入的話大家都不知道這個 service 是什麼\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { CustomersService } from './customers/customers.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Angular blog';\n  constructor(private customersService: CustomersService) {}\n\n  ngOnInit() {\n    console.log(this.customersService.getName())\n  }\n}\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png)\n\n但是如果是注入在 CustomersModule 中 declarations 的 component 中的話就可以正常使用\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { CustomersService } from './customers.service';\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.css']\n})\nexport class CustomersComponent implements OnInit {\n\n  constructor(private customerService: CustomersService) { }\n\n  ngOnInit(): void {\n    console.log(this.customerService.getName())\n  }\n}\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png)\n\n\n\n# 結論\n\n本章中介紹了如何建立與使用延遲載入的 module，雖然在中小專案中可以讓所有 module 都是立即載入的，但隨著專案變大這樣所有 module 都是立即載入的話就會讓初始檔案變得非常大，因為應用程式一開始就要載入全部的 module，會讓整個應用程式的載入變得非常慢，這時候就需要使用延遲載入的功能，當有需要才載入對應的 module 這樣可以讓一開始的專案維持在比較小的大小，從而加快應用程式的載入速度。\n\n本章是介紹 module 的最後一張，下一章將會介紹也是常重要的一個部分，在現代的網頁中都會需要串接後端的 API 以獲得數據或是儲存數據到 database，這些操作都需要與後端溝通，Angular 提供了一個方式讓我們可以與後端進行溝通，那就是 `HttpClient` 詳細的內容就留到明天講解吧，那就明天見\n\n\n\n# Reference\n\n- [Angular.io - Lazy-loading feature modules](https://angular.io/guide/lazy-loading-ngmodules)","source":"_posts/Angular/angular-32.md","raw":"---\ntitle: Day32. Lazy-loading feature modules\ndate: 2021-10-02 20:46:01\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在默認情況下 NgModules 都是`急切加載`的，這意味著一但應用程式加載，所有的 NgModules 無論是否需要都會被載入，但對於許多大型的應用程式而言可以考慮使用`延遲加載`功能，他是一種根據`需要才加載` NgModules 的設計模式，延遲加載有助於讓初始化的檔案保持為較小的大小，從而`減少加載的時間`，下面就來介紹該如何使用延遲加載模式吧。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg](https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg)\n\n<!-- more -->\n\n# Step-by-step setup\n\n要設置延遲加載的 feature module 主要有兩個步驟：\n\n1. 使用 `--route` 通過 Angular CLI 創建 feature module\n2. 配置 routes\n\n接著來看看該怎麼創建一個新的延遲載入的 feature module 吧\n\n## Create a feature module with routing\n\n首先需要創建一個帶有 `route` 功能的 feature module，並這個 route 的路徑要指定到 feature module 宣告的某一個 component，可以使用 Angular CLI 一次就完成所有動作，所以是不是很需要 Angular CLI 呢（ gif\n\n```bash\nng generate module customers --route customers --module app.module\n```\n\n上面的 CLI Command 會創建一個名為 customers 的文件夾，其中的 customers.module.ts 中會定義一個延遲載入的 feature module 名為 `CustomersModule`，還會創建一個用於定義 route 的 route module 名為 `CustomersRoutingModule`，除此之外還會建立一個 CustomerComponent 並自動導入到 CustomersRoutingModule 的 `declarations` 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomersComponent } from './customers.component';\n\n@NgModule({\n  declarations: [\n    CustomersComponent\n  ],\n  imports: [\n    CommonModule,\n    CustomersRoutingModule\n  ]\n})\nexport class CustomersModule { }\n```\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CustomersComponent } from './customers.component';\n\nconst routes: Routes = [{ path: '', component: CustomersComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CustomersRoutingModule { }\n```\n\n由於這個新的 feature module 是延遲加載的所以這個 Command 不會在 root module 中添加對這個 fearute module 的引用，因為如果將它加入到 root module 的 imports 的話就會變成`立即加載`，相反的他會將這個 feature module 添加到 route 中\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'customers',\n    loadChildren: () =>\n      import('./customers/customers.module').then((m) => m.CustomersModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\n注意 `loadChildren` 的用法，他後面需要加一個函數，這個函數會使用瀏覽器內置的 `import()` 語法進行動態導入，導入 module 的路徑是`相對路徑`。\n\n## Set up the UI\n\n設定完延遲載入的 module 後，接著來設定一下 UI 畫面讓我們等等可以測試這個延遲載入是否成功，在 app.component.html 中設定按鈕並加上 `<router-outlet>` 用於顯示 route 的 component\n\n```html\n<h1>{{title}}</h1>\n\n<button type=\"button\" class=\"btn btn-primary\" routerLink=\"/customers\">Customers</button>\n<button type=\"button\" class=\"btn btn-success\" routerLink=\"\">Home</button>\n\n<router-outlet></router-outlet>\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png)\n\n接著來測試一下會不會當點擊 Customers 按鈕後才會加載 feature module 吧，首先先先打開瀏覽器的開發者頁面並選到 Network 頁面，可以將前面載入的資訊先去除以便比較清楚的看到加載過程\n\n![img](https://i.imgur.com/3NtPEj5.gif)\n\n可以看到當我們點擊了 Customers 按鈕後才會載入延遲載入的 feature module。\n\n\n# forRoot() and forChild()\n\n如果使用 Angular CLI 創建一個 root module 的話，你會看到他將 `RouterModule.forRoot(route)` 添加到 AppRoutingModule 的 `imports` 中，這會讓 Angular 知道 AppRoutingModule 是一個 route module，而 forRoot() 指定這是 `root route module`，他會配置傳遞給他的所有 route 讓你可以訪問 route directive 並註冊 route service，在整個應用程式中 AppRoutingModule 只會使用 forRoot() 一次。\n\nAngular CLI 還會將 RouterModule.forChild(routes) 添加到 feature module 的 `imports` 中，這樣 Angular 就會知道這個只是負責提供額外的 route，並是針對 feature module 的，所以你可以在多個 route modules 中使用 forChild()。\n\n\n# Provider service in lazy-loading modules\n\n在前幾篇中提到了如果在 root module 中提供 service 時 Angular 會將它建立成一個`單一的`、`共享的` service 實例，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用。\n\n但是如果是將 service provider 到 lazy-loading 的 module 時，由於 lazy-loading 的特性，因為這個 module 還沒被載入所以這個 lazy-loading 中添加的 service 就無法在還沒被載入的時候被其他地方的 module 使用，舉個例子\n\n1. 先新增一個 service 並添加一個簡單的 method\n\n    ```typescript\n    import { Injectable } from '@angular/core';\n    import { CustomersModule } from './customers.module';\n\n    @Injectable()\n    export class CustomersService {\n\n      constructor() { }\n\n      getName() {\n        return 'Fandix Huang';\n      }\n    }\n    ```\n\n2. 接著在 CustomersModule 的 providers 添加 CustomersService\n\n    ```typescript\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n\n    import { CustomersRoutingModule } from './customers-routing.module';\n    import { CustomersComponent } from './customers.component';\n    import { CustomersService } from './customers.service';\n\n    @NgModule({\n      declarations: [\n        CustomersComponent\n      ],\n      imports: [\n        CommonModule,\n        CustomersRoutingModule\n      ],\n      providers: [CustomersService]\n    })\n    export class CustomersModule { }\n    ```\n\n這時候如果在 app.component.ts 中注入這個 service 的話就會出錯，因為他被 provide 在 lazy-loading 的  module 中，所以還沒被載入的話大家都不知道這個 service 是什麼\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { CustomersService } from './customers/customers.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Angular blog';\n  constructor(private customersService: CustomersService) {}\n\n  ngOnInit() {\n    console.log(this.customersService.getName())\n  }\n}\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png)\n\n但是如果是注入在 CustomersModule 中 declarations 的 component 中的話就可以正常使用\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { CustomersService } from './customers.service';\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.css']\n})\nexport class CustomersComponent implements OnInit {\n\n  constructor(private customerService: CustomersService) { }\n\n  ngOnInit(): void {\n    console.log(this.customerService.getName())\n  }\n}\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png)\n\n\n\n# 結論\n\n本章中介紹了如何建立與使用延遲載入的 module，雖然在中小專案中可以讓所有 module 都是立即載入的，但隨著專案變大這樣所有 module 都是立即載入的話就會讓初始檔案變得非常大，因為應用程式一開始就要載入全部的 module，會讓整個應用程式的載入變得非常慢，這時候就需要使用延遲載入的功能，當有需要才載入對應的 module 這樣可以讓一開始的專案維持在比較小的大小，從而加快應用程式的載入速度。\n\n本章是介紹 module 的最後一張，下一章將會介紹也是常重要的一個部分，在現代的網頁中都會需要串接後端的 API 以獲得數據或是儲存數據到 database，這些操作都需要與後端溝通，Angular 提供了一個方式讓我們可以與後端進行溝通，那就是 `HttpClient` 詳細的內容就留到明天講解吧，那就明天見\n\n\n\n# Reference\n\n- [Angular.io - Lazy-loading feature modules](https://angular.io/guide/lazy-loading-ngmodules)","slug":"Angular/angular-32","published":1,"updated":"2022-02-16T06:55:51.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6be3001e95w3cbpubme2","content":"<p>在默認情況下 NgModules 都是<code>急切加載</code>的，這意味著一但應用程式加載，所有的 NgModules 無論是否需要都會被載入，但對於許多大型的應用程式而言可以考慮使用<code>延遲加載</code>功能，他是一種根據<code>需要才加載</code> NgModules 的設計模式，延遲加載有助於讓初始化的檔案保持為較小的大小，從而<code>減少加載的時間</code>，下面就來介紹該如何使用延遲加載模式吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Step-by-step-setup\"><a href=\"#Step-by-step-setup\" class=\"headerlink\" title=\"Step-by-step setup\"></a>Step-by-step setup</h1><p>要設置延遲加載的 feature module 主要有兩個步驟：</p>\n<ol>\n<li>使用 <code>--route</code> 通過 Angular CLI 創建 feature module</li>\n<li>配置 routes</li>\n</ol>\n<p>接著來看看該怎麼創建一個新的延遲載入的 feature module 吧</p>\n<h2 id=\"Create-a-feature-module-with-routing\"><a href=\"#Create-a-feature-module-with-routing\" class=\"headerlink\" title=\"Create a feature module with routing\"></a>Create a feature module with routing</h2><p>首先需要創建一個帶有 <code>route</code> 功能的 feature module，並這個 route 的路徑要指定到 feature module 宣告的某一個 component，可以使用 Angular CLI 一次就完成所有動作，所以是不是很需要 Angular CLI 呢（ gif</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module customers --route customers --module app.module</span><br></pre></td></tr></table></figure>\n\n<p>上面的 CLI Command 會創建一個名為 customers 的文件夾，其中的 customers.module.ts 中會定義一個延遲載入的 feature module 名為 <code>CustomersModule</code>，還會創建一個用於定義 route 的 route module 名為 <code>CustomersRoutingModule</code>，除此之外還會建立一個 CustomerComponent 並自動導入到 CustomersRoutingModule 的 <code>declarations</code> 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomersComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">CustomersRoutingModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">CustomersComponent</span> &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>由於這個新的 feature module 是延遲加載的所以這個 Command 不會在 root module 中添加對這個 fearute module 的引用，因為如果將它加入到 root module 的 imports 的話就會變成<code>立即加載</code>，相反的他會將這個 feature module 添加到 route 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;customers&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;./customers/customers.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">CustomersModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>loadChildren</code> 的用法，他後面需要加一個函數，這個函數會使用瀏覽器內置的 <code>import()</code> 語法進行動態導入，導入 module 的路徑是<code>相對路徑</code>。</p>\n<h2 id=\"Set-up-the-UI\"><a href=\"#Set-up-the-UI\" class=\"headerlink\" title=\"Set up the UI\"></a>Set up the UI</h2><p>設定完延遲載入的 module 後，接著來設定一下 UI 畫面讓我們等等可以測試這個延遲載入是否成功，在 app.component.html 中設定按鈕並加上 <code>&lt;router-outlet&gt;</code> 用於顯示 route 的 component</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/customers&quot;</span>&gt;</span>Customers<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png\"></p>\n<p>接著來測試一下會不會當點擊 Customers 按鈕後才會加載 feature module 吧，首先先先打開瀏覽器的開發者頁面並選到 Network 頁面，可以將前面載入的資訊先去除以便比較清楚的看到加載過程</p>\n<p><img src=\"https://i.imgur.com/3NtPEj5.gif\" alt=\"img\"></p>\n<p>可以看到當我們點擊了 Customers 按鈕後才會載入延遲載入的 feature module。</p>\n<h1 id=\"forRoot-and-forChild\"><a href=\"#forRoot-and-forChild\" class=\"headerlink\" title=\"forRoot() and forChild()\"></a>forRoot() and forChild()</h1><p>如果使用 Angular CLI 創建一個 root module 的話，你會看到他將 <code>RouterModule.forRoot(route)</code> 添加到 AppRoutingModule 的 <code>imports</code> 中，這會讓 Angular 知道 AppRoutingModule 是一個 route module，而 forRoot() 指定這是 <code>root route module</code>，他會配置傳遞給他的所有 route 讓你可以訪問 route directive 並註冊 route service，在整個應用程式中 AppRoutingModule 只會使用 forRoot() 一次。</p>\n<p>Angular CLI 還會將 RouterModule.forChild(routes) 添加到 feature module 的 <code>imports</code> 中，這樣 Angular 就會知道這個只是負責提供額外的 route，並是針對 feature module 的，所以你可以在多個 route modules 中使用 forChild()。</p>\n<h1 id=\"Provider-service-in-lazy-loading-modules\"><a href=\"#Provider-service-in-lazy-loading-modules\" class=\"headerlink\" title=\"Provider service in lazy-loading modules\"></a>Provider service in lazy-loading modules</h1><p>在前幾篇中提到了如果在 root module 中提供 service 時 Angular 會將它建立成一個<code>單一的</code>、<code>共享的</code> service 實例，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用。</p>\n<p>但是如果是將 service provider 到 lazy-loading 的 module 時，由於 lazy-loading 的特性，因為這個 module 還沒被載入所以這個 lazy-loading 中添加的 service 就無法在還沒被載入的時候被其他地方的 module 使用，舉個例子</p>\n<ol>\n<li><p>先新增一個 service 並添加一個簡單的 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.module&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Fandix Huang&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 CustomersModule 的 providers 添加 CustomersService</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomersComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">CustomersRoutingModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">CustomersService</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>這時候如果在 app.component.ts 中注入這個 service 的話就會出錯，因為他被 provide 在 lazy-loading 的  module 中，所以還沒被載入的話大家都不知道這個 service 是什麼</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers/customers.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  title = <span class=\"string\">&#x27;Angular blog&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> customersService: CustomersService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">customersService</span>.<span class=\"title function_\">getName</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png\"></p>\n<p>但是如果是注入在 CustomersModule 中 declarations 的 component 中的話就可以正常使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-customers&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./customers.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./customers.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> customerService: CustomersService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">customerService</span>.<span class=\"title function_\">getName</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立與使用延遲載入的 module，雖然在中小專案中可以讓所有 module 都是立即載入的，但隨著專案變大這樣所有 module 都是立即載入的話就會讓初始檔案變得非常大，因為應用程式一開始就要載入全部的 module，會讓整個應用程式的載入變得非常慢，這時候就需要使用延遲載入的功能，當有需要才載入對應的 module 這樣可以讓一開始的專案維持在比較小的大小，從而加快應用程式的載入速度。</p>\n<p>本章是介紹 module 的最後一張，下一章將會介紹也是常重要的一個部分，在現代的網頁中都會需要串接後端的 API 以獲得數據或是儲存數據到 database，這些操作都需要與後端溝通，Angular 提供了一個方式讓我們可以與後端進行溝通，那就是 <code>HttpClient</code> 詳細的內容就留到明天講解吧，那就明天見</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/lazy-loading-ngmodules\">Angular.io - Lazy-loading feature modules</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在默認情況下 NgModules 都是<code>急切加載</code>的，這意味著一但應用程式加載，所有的 NgModules 無論是否需要都會被載入，但對於許多大型的應用程式而言可以考慮使用<code>延遲加載</code>功能，他是一種根據<code>需要才加載</code> NgModules 的設計模式，延遲加載有助於讓初始化的檔案保持為較小的大小，從而<code>減少加載的時間</code>，下面就來介紹該如何使用延遲加載模式吧。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675kZ9WQlQIh.jpg\"></p>","more":"<h1 id=\"Step-by-step-setup\"><a href=\"#Step-by-step-setup\" class=\"headerlink\" title=\"Step-by-step setup\"></a>Step-by-step setup</h1><p>要設置延遲加載的 feature module 主要有兩個步驟：</p>\n<ol>\n<li>使用 <code>--route</code> 通過 Angular CLI 創建 feature module</li>\n<li>配置 routes</li>\n</ol>\n<p>接著來看看該怎麼創建一個新的延遲載入的 feature module 吧</p>\n<h2 id=\"Create-a-feature-module-with-routing\"><a href=\"#Create-a-feature-module-with-routing\" class=\"headerlink\" title=\"Create a feature module with routing\"></a>Create a feature module with routing</h2><p>首先需要創建一個帶有 <code>route</code> 功能的 feature module，並這個 route 的路徑要指定到 feature module 宣告的某一個 component，可以使用 Angular CLI 一次就完成所有動作，所以是不是很需要 Angular CLI 呢（ gif</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module customers --route customers --module app.module</span><br></pre></td></tr></table></figure>\n\n<p>上面的 CLI Command 會創建一個名為 customers 的文件夾，其中的 customers.module.ts 中會定義一個延遲載入的 feature module 名為 <code>CustomersModule</code>，還會創建一個用於定義 route 的 route module 名為 <code>CustomersRoutingModule</code>，除此之外還會建立一個 CustomerComponent 並自動導入到 CustomersRoutingModule 的 <code>declarations</code> 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomersComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">CustomersRoutingModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">CustomersComponent</span> &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>由於這個新的 feature module 是延遲加載的所以這個 Command 不會在 root module 中添加對這個 fearute module 的引用，因為如果將它加入到 root module 的 imports 的話就會變成<code>立即加載</code>，相反的他會將這個 feature module 添加到 route 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;customers&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;./customers/customers.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">CustomersModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>loadChildren</code> 的用法，他後面需要加一個函數，這個函數會使用瀏覽器內置的 <code>import()</code> 語法進行動態導入，導入 module 的路徑是<code>相對路徑</code>。</p>\n<h2 id=\"Set-up-the-UI\"><a href=\"#Set-up-the-UI\" class=\"headerlink\" title=\"Set up the UI\"></a>Set up the UI</h2><p>設定完延遲載入的 module 後，接著來設定一下 UI 畫面讓我們等等可以測試這個延遲載入是否成功，在 app.component.html 中設定按鈕並加上 <code>&lt;router-outlet&gt;</code> 用於顯示 route 的 component</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/customers&quot;</span>&gt;</span>Customers<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Ws1vG3NoVD.png\"></p>\n<p>接著來測試一下會不會當點擊 Customers 按鈕後才會加載 feature module 吧，首先先先打開瀏覽器的開發者頁面並選到 Network 頁面，可以將前面載入的資訊先去除以便比較清楚的看到加載過程</p>\n<p><img src=\"https://i.imgur.com/3NtPEj5.gif\" alt=\"img\"></p>\n<p>可以看到當我們點擊了 Customers 按鈕後才會載入延遲載入的 feature module。</p>\n<h1 id=\"forRoot-and-forChild\"><a href=\"#forRoot-and-forChild\" class=\"headerlink\" title=\"forRoot() and forChild()\"></a>forRoot() and forChild()</h1><p>如果使用 Angular CLI 創建一個 root module 的話，你會看到他將 <code>RouterModule.forRoot(route)</code> 添加到 AppRoutingModule 的 <code>imports</code> 中，這會讓 Angular 知道 AppRoutingModule 是一個 route module，而 forRoot() 指定這是 <code>root route module</code>，他會配置傳遞給他的所有 route 讓你可以訪問 route directive 並註冊 route service，在整個應用程式中 AppRoutingModule 只會使用 forRoot() 一次。</p>\n<p>Angular CLI 還會將 RouterModule.forChild(routes) 添加到 feature module 的 <code>imports</code> 中，這樣 Angular 就會知道這個只是負責提供額外的 route，並是針對 feature module 的，所以你可以在多個 route modules 中使用 forChild()。</p>\n<h1 id=\"Provider-service-in-lazy-loading-modules\"><a href=\"#Provider-service-in-lazy-loading-modules\" class=\"headerlink\" title=\"Provider service in lazy-loading modules\"></a>Provider service in lazy-loading modules</h1><p>在前幾篇中提到了如果在 root module 中提供 service 時 Angular 會將它建立成一個<code>單一的</code>、<code>共享的</code> service 實例，所以將 service provider 添加到 root module 後，代表所有地方都可以將它注入並且使用。</p>\n<p>但是如果是將 service provider 到 lazy-loading 的 module 時，由於 lazy-loading 的特性，因為這個 module 還沒被載入所以這個 lazy-loading 中添加的 service 就無法在還沒被載入的時候被其他地方的 module 使用，舉個例子</p>\n<ol>\n<li><p>先新增一個 service 並添加一個簡單的 method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.module&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Fandix Huang&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 CustomersModule 的 providers 添加 CustomersService</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CustomersComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">CustomersRoutingModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">CustomersService</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>這時候如果在 app.component.ts 中注入這個 service 的話就會出錯，因為他被 provide 在 lazy-loading 的  module 中，所以還沒被載入的話大家都不知道這個 service 是什麼</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers/customers.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  title = <span class=\"string\">&#x27;Angular blog&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> customersService: CustomersService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">customersService</span>.<span class=\"title function_\">getName</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767YrfNPAxGVj.png\"></p>\n<p>但是如果是注入在 CustomersModule 中 declarations 的 component 中的話就可以正常使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CustomersService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./customers.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-customers&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./customers.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./customers.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomersComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> customerService: CustomersService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">customerService</span>.<span class=\"title function_\">getName</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767GKOxZkfphj.png\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章中介紹了如何建立與使用延遲載入的 module，雖然在中小專案中可以讓所有 module 都是立即載入的，但隨著專案變大這樣所有 module 都是立即載入的話就會讓初始檔案變得非常大，因為應用程式一開始就要載入全部的 module，會讓整個應用程式的載入變得非常慢，這時候就需要使用延遲載入的功能，當有需要才載入對應的 module 這樣可以讓一開始的專案維持在比較小的大小，從而加快應用程式的載入速度。</p>\n<p>本章是介紹 module 的最後一張，下一章將會介紹也是常重要的一個部分，在現代的網頁中都會需要串接後端的 API 以獲得數據或是儲存數據到 database，這些操作都需要與後端溝通，Angular 提供了一個方式讓我們可以與後端進行溝通，那就是 <code>HttpClient</code> 詳細的內容就留到明天講解吧，那就明天見</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/lazy-loading-ngmodules\">Angular.io - Lazy-loading feature modules</a></li>\n</ul>"},{"title":"Day30. Angular Module（一）","date":"2021-09-30T01:21:11.000Z","_content":"\n在 Angular 中應用程式是模塊化的，Angular 有自己的模塊化系統稱為 `NgModule`，他可以包含 `component`、`service providers` 和其他程式的文件，還可以導入從其他 NgModules 導出的功能，並導出顯訂的功能以提供給其他 NgModules 使用，每一個 Angular app 都至少有一個 NgModule 他被稱為 root module，通常會叫做 `AppModule`。\n\n雖然一個小的專案中可能會只有一個 module (root module)，但在大多數大型的專案中都會建立多個 modules 用於將功能分割，達到將專案模塊化的目的。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg](https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg)\n\n<!-- more -->\n\n# NgModule metadata\n\nNgModule 是由一個用 `@NgModule()` 裝飾的 class，@NgModule() 是一個接收單個 `metadata` 物件的函數，它具有以下的 properties：\n\n- **declarations**：屬於這個 NgModule 的 component、pipes 或 directive。\n- **exports**：要導出的功能，可以讓其他的 NgModules 引入並且使用\n- **imports**：引入來自其他 NgModules 所導出的功能\n- **providers**：在這個 NgModule 中所使用的所有 Service\n- **bootstrap**：主應用程序的 view 稱為 root component，他乘載著所有應用程式的 view，簡單來說就是定義應用程式中 view 的最上層 component\n\nmetadata 提供了該如何編譯 component 的 template 以及如何在運行時創建注入器 ( injector )，它識別了 NgModule 的 component、pipe 或 directive，並通過 exports property 將需要給其他 NgModules 使用的部分公開，還可以使用 NgModule 為 service 添加 provide ，以便 serviec 在其那地方也可以被使用。\n\n可以在 metadata 中的 declarations 中定義哪些 component、pipes 或 directive 屬於這個 Module。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n通常 root module 不需要設置 exports property，因為沒有其他的 NgModules 需要引入 root module。\n\n## The declarations array\n\n在 NgModule 的 declarations 中定義了哪些 `component`、`pipes` 或 `directive` 屬於這個 Module，當你使用 Angular CLI 創建新的 component 時會`自動將新的 component 添加到這裡`，所以如果是手動建立新的 component 時要記得要把他添加到這裡，相對的如果移除一個 component 也要記得將它從 declarations 中移除。\n\n如果你使用一個沒有聲明的 component 則 Angular 會返回錯誤，而 declarations 只能接收可聲明的，可聲明的包括 `component`、`pipes` 或 `directive` ，Module 的所有聲明項都必須在 declarations 當中，而這個 declarations 只能屬於`一個` Module 不然會有多重宣告的錯誤，這些聲明項只有在 Module 中是可見的，除非將他們使用 `export` 導出，否則在其他地方是不可見的。\n\n## The imports array\n\nimports 只出現在 `@NgModule()` 的 metadata 中，它告訴 Angular 這個 Module 的運行需要使用到其他 Modules 的內容，當在此 Module 中引入其他 Module 所導出的內容時，該 Module 中的 component 就可以使用別的 Module 導出的 component、pipe 或 directive。\n\n## The bootstrap array\n\nAngular 的應用程式透過 root module 啟動，也稱為 `entryComponent`，在創建應用程式的過程中會創建 bootstrap 中的 component 並將它插入瀏覽器的 DOM 中，每一個 bootstrapped component 都是本身 component tree 的`基礎（最上層的 component）`，所以當插入一個 bootstrapped component 後會觸發一連串的 component 創建然後填充本身 component tree。\n\n大多數應用程式都只有一個 component tree 並引導單個 root component，但是你也可以創建多個 component tree 來擴大你的應用程式，而這個 root component 通常稱為 `AppComponent` 並位於 root module 的 bootstrap 中。\n\n\n# NgModules and components\n\nNgModule 為 component 提供了 compilation context，簡單來說 NgModule 提供了創建 component 所需要的所有資訊，除了 root module 總是有一個 root component 之外，其他的任何 NgModules 都可以有任意數量的 component，而這個 NgModule 會為他底下的所有 component 提供 compilation context。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png](https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png)\n\n一個 component 和他的 template 定義了一個 view，但是一個 component 可以包含一個有層次結構的 view，他允許你創建、修改或銷毀一個嵌入式 view，而層次結構的 view 可以混合在屬於不同 NgModules 的 component 中定義的 view，簡單來說就是你可以在 componentA 的 view 中創建一個屬於另一個 NgModule 的 componentB 的 view。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png](https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png)\n\n當你嵌入一個 view 時，他會直接與一個稱為 `host view` 的 view 進行連接，host view 可以是這組 view 的 root，他可以包含所有嵌入的 view，就算這些 view 是來自別的 NgModules 也可以，而嵌入的 view 又可以在嵌入自己的 view，所以可以嵌套到任一深度。\n\n\n# JavaScript modules vs. NgModules\n\n在 Javascript ES6 中引入了屬於 Javascript 的 module 系統，雖然了解 Javascript 的 Module 對於了解 Angular 的 Module 很有幫助，但還是與 NgModule 有一些不同的地方，不過 Angular 同時使用了這兩種 Module 的概念\n\n## JavaScript modules: Files containing code\n\nJavascript Module 是帶有 Javascript 程式的`單個文件`，通常包含用於應用程式中特定目的的 class 或 library，Javascript 的 Module 可以讓你將工作分散到多個檔案中。\n\n要讓  Module 中的內容提供給其他 Module 使用，要在這個 Module 的末尾使用 `export` 語法，比如說\n\n```typescript\nexport class AppComponent { ... }\n```\n\n而要使用其他 Module 中的內容時，要使用 `import` 將它導入到自身 Module 中\n\n```typescript\nimport { AppComponent } from './app.component';\n```\n\n每一個 Module 都有自己的 `top level variable`，簡單來說就是每一個 Module 中的 variable 或 method 在別的 Module 或地方是看不到的，每一個 Module 都有自己的命名空間以防止他們與其他 Module 中的內容發生衝突。\n\n\n# Frequently-used modules\n\n一個 Angular 應用程式至少需要一個 Module 作為 root module，當像應用程式添加新功能時，可以將這些功能對應的 Module 添加到你的 Module 中，下面介紹一些經常使用的 Angular module 以及他們所包含的一些內容\n\n| NgModule | Import it from | Why you use it\n| ------------- | ------------- | ------------- \n| BrowserModule | @angular/platform-browser | 當你想在瀏覽器中運行你的專案\n| CommonModule | @angular/common | 當你需要使用 `NgIf` 或 `NgFor` 等等\n| FormsModule | @angular/forms | 當你想要構建 template-driven forms 時\n| ReactiveFormsModule | @angular/forms | 當你想要構建 reactive form 時\n| RouterModule | @angular/router | 當你要使用 `RouterLink`, `.forRoot()` 或 `.forChild()` 時\n| HttpClientModule | @angular/common/http | 當你需要與 server 溝通時\n\n## BrowserModule and CommonModule\n\n在 BrowserModule 中導入了 CommonModule，它提供了許多常用的 directive 例如 `ngIf`, `ngFor` 等等，此外 BrowserModule 重新的導出了 CommonModule 這使其所有的 directive 可以用於導入 BrowserModule 中。\n\n對於在瀏覽器中運行的應用程式而言，在 root module 中導入 `BrowserModule` 是必須的，因為它提供了啟動和運行瀏覽器應用程式必不可少的服務，他是為整個應用程序所提供的，所以他只應該在 `root module` 中被導入，所以不可以將它放在延遲加載的 feature module 中，因為會造成錯誤。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png](https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png)\n\n\n# Guidelines for creating NgModules\n\n通常再開發 Angular 的應用程式時會因為不同的目的創建不同的 NgModule，NgModule 是組織程式並將與特定功能或特性相關的程式與其他部分分開，使用 NgModule 將 component、pipe 和 directive 合併回內聚的功能模組，將一個功能模組集中在服務某一個功能或業務上面，所以通常會建立下面幾種類型的 NgModule\n\n## Domain NgModules\n\n使用 `Domain NgModule` 通常是為了專門提供於`特定功能或應用程序的用戶體驗`，比如說編輯客戶或下訂單，他組織與某個`功能`相關的程式，包括構建該功能的所有 component、routing 和 template。\n\n通常會將最上層的 component 或 root component 作為唯一導出的 component，Domain NgModule 主要由 `declarations` 所組成。\n\n## Routed NgModules\n\n對所有 `lazy-loaded NgModule` 使用 `Routed NgModule`，使用 Routed NgModule 的最頂層 component 作為路由器導航的路徑，而 Routed NgModule `不會導出`任何內容，因為他們的 component 永遠不會出現在其他 component 的 template 中。\n\n還要注意不要將 `lazy-loaded NgModule` 導入另一個 NgModule 中，因為這樣會會立馬將這個 Module 載入到應用程式中，就失去了 lazy-loaded 的目的了。\n\nRouted NgModule 只需要很少的 `providers`，因為對於應用程式而言只有在需要的時候才會載入 Routed NgModule，所以如果在他的 providers 中填入 service 的話將會變得不可用，因為 injector 不知道 lazy-loaded NgModule。\n\n## Routing NgModules\n\n`Routing NgModule` 為 `Domain NgModule` 提供路由配置，通常會由 Routing NgModule 完成以下任務\n\n- 定義路由\n- 將路由器配置添加到 NgModule 的 imports 中\n- 向 NgModule 的 providers 提供 service\n\nRouting NgModule 的名稱應該與其同伴的 NgModule 名稱平行，比如說 contact.module.ts 中的 ContactModule 在 contact-routing.module.ts 中有一個名為 ContactRoutingModule 的 Routing NgModule。\n\n如果 Routing NgModule 是 root App Module 則 AppRoutingModule 是使用 `RouterModule.forRoot(routes)` 將路由器配置添加在 imports 中\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n而如果是其他 Routing NgModule 都是使用 `RouterModule.forChild(routes)` 將路由器配置添加到他們的 imports 中。\n\n要注意`不要`在 Routing NgModule 中使用 `declarations`，component、pipe 或 directive 的聲明是在伴隨的 `Domain NgModule` 中聲明的。\n\n## Service NgModules\n\n`Service NgModule` 用於提供實用的服務，例如數據的訪問或消息的傳遞，理想的 Service NgModule 應該全由 providers 所組成，如果要創建 Service NgModule 可以查看 Angular 的 `HttpClientModule` 他是一個非常好的例子，要注意的是請只在 `root AppModule` 中導入所有的 Service NgModules\n\n## Widget NgModules\n\n使用 Widget NgModule 使 component、pipe 或 directive 可被外部的 NgModule 給使用，當某個 NgModule 中的 component 需要使用到 Widget NgModule 中的某一個 component 或功能時，將\n\nWidget NgModule 到入到這個 NgModule 中即可，需多第三方 UI component libaray 都是作為 Widget NgModule 然後提供給各個 NgModule 中， 一個 Widget NgModule 應該`完全`由 `declarations` 所組成，其中大部分都是導出的這樣才能讓其他地方使用。\n\n## Shared NgModules\n\n最後介紹 Shared NgModule 他是將常用的 directive、pipe 或 component 統一放入一個 NgModule 中，通常會命名為 `SharedModule`，然後再應用程式的其他部分需要時導入，這樣只導入一個 Module 就可以獲得許多功能。\n\nShared NgModule 不應該包含 `providers`，任何其導入或導出的 NgModule 都不應該包含 providers。\n\n\n# 結論\n\n本篇中介紹了 Angular 的 NgModule 的觀念，NgModule 中 metadata 是由 `declarations`、`exports`、`imports`、`providers` 與 `bootstrap` 所組成\n\n- **declarations** 是用於宣告屬於這個 NgModule 的 component、pipe 或 directive\n- **exports** 是用於將這個 NgModule 需要給其他 NgModule 使用的部分導出\n- **imports** 是用於引入其他 NgModule 導出的功能\n- **providers** 是用於提供 NgModule 所使用的 Services\n- **bootstrap** 是用於定義應用程式的 `entryComponent`\n\n也介紹了 Angular 同時使用了 Javascript Module 與 NgModule 的概念，對於一個檔案中的內容要導出的給其他部分使用的話要使用 `export`，而要使用別的檔案中提供的內容時需要使用 `import` 將它導入。\n\n最後介紹了再開發 Angular 專案時會建立的幾種 NgModule\n\n- **Domain** 是圍繞功能或用戶體驗所組成的\n- **Routed** 中的頂部 component 充當路由器導航路徑的目的地\n- **Routing** 是為另一個 NgModule 提供路由配置的\n- **Service** 是提供實用服務的，例如數據訪問或消息傳達\n- **Widget** 是將某一部分的 component, pipe, directive 所組合起來讓其他 NgModule 可以使用，常用於第三方 UI library\n- **Shared** 是將共享的所有 component, pipe, directive 所組合，當其他 NgModule 要使用時引入它即可\n\nAngular Module 的觀念還有很多，由於文章長度的問題沒辦法一次講完，所以一樣將他分為兩段這樣可以介紹的比較完整，下半部的 NgModule 就明天見吧\n\n\n# Reference\n\n- [Angular.io - Guidelines for creating NgModules](https://angular.io/guide/module-types)","source":"_posts/Angular/angular-30.md","raw":"---\ntitle: Day30. Angular Module（一）\ndate: 2021-09-30 09:21:11\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在 Angular 中應用程式是模塊化的，Angular 有自己的模塊化系統稱為 `NgModule`，他可以包含 `component`、`service providers` 和其他程式的文件，還可以導入從其他 NgModules 導出的功能，並導出顯訂的功能以提供給其他 NgModules 使用，每一個 Angular app 都至少有一個 NgModule 他被稱為 root module，通常會叫做 `AppModule`。\n\n雖然一個小的專案中可能會只有一個 module (root module)，但在大多數大型的專案中都會建立多個 modules 用於將功能分割，達到將專案模塊化的目的。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg](https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg)\n\n<!-- more -->\n\n# NgModule metadata\n\nNgModule 是由一個用 `@NgModule()` 裝飾的 class，@NgModule() 是一個接收單個 `metadata` 物件的函數，它具有以下的 properties：\n\n- **declarations**：屬於這個 NgModule 的 component、pipes 或 directive。\n- **exports**：要導出的功能，可以讓其他的 NgModules 引入並且使用\n- **imports**：引入來自其他 NgModules 所導出的功能\n- **providers**：在這個 NgModule 中所使用的所有 Service\n- **bootstrap**：主應用程序的 view 稱為 root component，他乘載著所有應用程式的 view，簡單來說就是定義應用程式中 view 的最上層 component\n\nmetadata 提供了該如何編譯 component 的 template 以及如何在運行時創建注入器 ( injector )，它識別了 NgModule 的 component、pipe 或 directive，並通過 exports property 將需要給其他 NgModules 使用的部分公開，還可以使用 NgModule 為 service 添加 provide ，以便 serviec 在其那地方也可以被使用。\n\n可以在 metadata 中的 declarations 中定義哪些 component、pipes 或 directive 屬於這個 Module。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n通常 root module 不需要設置 exports property，因為沒有其他的 NgModules 需要引入 root module。\n\n## The declarations array\n\n在 NgModule 的 declarations 中定義了哪些 `component`、`pipes` 或 `directive` 屬於這個 Module，當你使用 Angular CLI 創建新的 component 時會`自動將新的 component 添加到這裡`，所以如果是手動建立新的 component 時要記得要把他添加到這裡，相對的如果移除一個 component 也要記得將它從 declarations 中移除。\n\n如果你使用一個沒有聲明的 component 則 Angular 會返回錯誤，而 declarations 只能接收可聲明的，可聲明的包括 `component`、`pipes` 或 `directive` ，Module 的所有聲明項都必須在 declarations 當中，而這個 declarations 只能屬於`一個` Module 不然會有多重宣告的錯誤，這些聲明項只有在 Module 中是可見的，除非將他們使用 `export` 導出，否則在其他地方是不可見的。\n\n## The imports array\n\nimports 只出現在 `@NgModule()` 的 metadata 中，它告訴 Angular 這個 Module 的運行需要使用到其他 Modules 的內容，當在此 Module 中引入其他 Module 所導出的內容時，該 Module 中的 component 就可以使用別的 Module 導出的 component、pipe 或 directive。\n\n## The bootstrap array\n\nAngular 的應用程式透過 root module 啟動，也稱為 `entryComponent`，在創建應用程式的過程中會創建 bootstrap 中的 component 並將它插入瀏覽器的 DOM 中，每一個 bootstrapped component 都是本身 component tree 的`基礎（最上層的 component）`，所以當插入一個 bootstrapped component 後會觸發一連串的 component 創建然後填充本身 component tree。\n\n大多數應用程式都只有一個 component tree 並引導單個 root component，但是你也可以創建多個 component tree 來擴大你的應用程式，而這個 root component 通常稱為 `AppComponent` 並位於 root module 的 bootstrap 中。\n\n\n# NgModules and components\n\nNgModule 為 component 提供了 compilation context，簡單來說 NgModule 提供了創建 component 所需要的所有資訊，除了 root module 總是有一個 root component 之外，其他的任何 NgModules 都可以有任意數量的 component，而這個 NgModule 會為他底下的所有 component 提供 compilation context。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png](https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png)\n\n一個 component 和他的 template 定義了一個 view，但是一個 component 可以包含一個有層次結構的 view，他允許你創建、修改或銷毀一個嵌入式 view，而層次結構的 view 可以混合在屬於不同 NgModules 的 component 中定義的 view，簡單來說就是你可以在 componentA 的 view 中創建一個屬於另一個 NgModule 的 componentB 的 view。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png](https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png)\n\n當你嵌入一個 view 時，他會直接與一個稱為 `host view` 的 view 進行連接，host view 可以是這組 view 的 root，他可以包含所有嵌入的 view，就算這些 view 是來自別的 NgModules 也可以，而嵌入的 view 又可以在嵌入自己的 view，所以可以嵌套到任一深度。\n\n\n# JavaScript modules vs. NgModules\n\n在 Javascript ES6 中引入了屬於 Javascript 的 module 系統，雖然了解 Javascript 的 Module 對於了解 Angular 的 Module 很有幫助，但還是與 NgModule 有一些不同的地方，不過 Angular 同時使用了這兩種 Module 的概念\n\n## JavaScript modules: Files containing code\n\nJavascript Module 是帶有 Javascript 程式的`單個文件`，通常包含用於應用程式中特定目的的 class 或 library，Javascript 的 Module 可以讓你將工作分散到多個檔案中。\n\n要讓  Module 中的內容提供給其他 Module 使用，要在這個 Module 的末尾使用 `export` 語法，比如說\n\n```typescript\nexport class AppComponent { ... }\n```\n\n而要使用其他 Module 中的內容時，要使用 `import` 將它導入到自身 Module 中\n\n```typescript\nimport { AppComponent } from './app.component';\n```\n\n每一個 Module 都有自己的 `top level variable`，簡單來說就是每一個 Module 中的 variable 或 method 在別的 Module 或地方是看不到的，每一個 Module 都有自己的命名空間以防止他們與其他 Module 中的內容發生衝突。\n\n\n# Frequently-used modules\n\n一個 Angular 應用程式至少需要一個 Module 作為 root module，當像應用程式添加新功能時，可以將這些功能對應的 Module 添加到你的 Module 中，下面介紹一些經常使用的 Angular module 以及他們所包含的一些內容\n\n| NgModule | Import it from | Why you use it\n| ------------- | ------------- | ------------- \n| BrowserModule | @angular/platform-browser | 當你想在瀏覽器中運行你的專案\n| CommonModule | @angular/common | 當你需要使用 `NgIf` 或 `NgFor` 等等\n| FormsModule | @angular/forms | 當你想要構建 template-driven forms 時\n| ReactiveFormsModule | @angular/forms | 當你想要構建 reactive form 時\n| RouterModule | @angular/router | 當你要使用 `RouterLink`, `.forRoot()` 或 `.forChild()` 時\n| HttpClientModule | @angular/common/http | 當你需要與 server 溝通時\n\n## BrowserModule and CommonModule\n\n在 BrowserModule 中導入了 CommonModule，它提供了許多常用的 directive 例如 `ngIf`, `ngFor` 等等，此外 BrowserModule 重新的導出了 CommonModule 這使其所有的 directive 可以用於導入 BrowserModule 中。\n\n對於在瀏覽器中運行的應用程式而言，在 root module 中導入 `BrowserModule` 是必須的，因為它提供了啟動和運行瀏覽器應用程式必不可少的服務，他是為整個應用程序所提供的，所以他只應該在 `root module` 中被導入，所以不可以將它放在延遲加載的 feature module 中，因為會造成錯誤。\n\n![https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png](https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png)\n\n\n# Guidelines for creating NgModules\n\n通常再開發 Angular 的應用程式時會因為不同的目的創建不同的 NgModule，NgModule 是組織程式並將與特定功能或特性相關的程式與其他部分分開，使用 NgModule 將 component、pipe 和 directive 合併回內聚的功能模組，將一個功能模組集中在服務某一個功能或業務上面，所以通常會建立下面幾種類型的 NgModule\n\n## Domain NgModules\n\n使用 `Domain NgModule` 通常是為了專門提供於`特定功能或應用程序的用戶體驗`，比如說編輯客戶或下訂單，他組織與某個`功能`相關的程式，包括構建該功能的所有 component、routing 和 template。\n\n通常會將最上層的 component 或 root component 作為唯一導出的 component，Domain NgModule 主要由 `declarations` 所組成。\n\n## Routed NgModules\n\n對所有 `lazy-loaded NgModule` 使用 `Routed NgModule`，使用 Routed NgModule 的最頂層 component 作為路由器導航的路徑，而 Routed NgModule `不會導出`任何內容，因為他們的 component 永遠不會出現在其他 component 的 template 中。\n\n還要注意不要將 `lazy-loaded NgModule` 導入另一個 NgModule 中，因為這樣會會立馬將這個 Module 載入到應用程式中，就失去了 lazy-loaded 的目的了。\n\nRouted NgModule 只需要很少的 `providers`，因為對於應用程式而言只有在需要的時候才會載入 Routed NgModule，所以如果在他的 providers 中填入 service 的話將會變得不可用，因為 injector 不知道 lazy-loaded NgModule。\n\n## Routing NgModules\n\n`Routing NgModule` 為 `Domain NgModule` 提供路由配置，通常會由 Routing NgModule 完成以下任務\n\n- 定義路由\n- 將路由器配置添加到 NgModule 的 imports 中\n- 向 NgModule 的 providers 提供 service\n\nRouting NgModule 的名稱應該與其同伴的 NgModule 名稱平行，比如說 contact.module.ts 中的 ContactModule 在 contact-routing.module.ts 中有一個名為 ContactRoutingModule 的 Routing NgModule。\n\n如果 Routing NgModule 是 root App Module 則 AppRoutingModule 是使用 `RouterModule.forRoot(routes)` 將路由器配置添加在 imports 中\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n而如果是其他 Routing NgModule 都是使用 `RouterModule.forChild(routes)` 將路由器配置添加到他們的 imports 中。\n\n要注意`不要`在 Routing NgModule 中使用 `declarations`，component、pipe 或 directive 的聲明是在伴隨的 `Domain NgModule` 中聲明的。\n\n## Service NgModules\n\n`Service NgModule` 用於提供實用的服務，例如數據的訪問或消息的傳遞，理想的 Service NgModule 應該全由 providers 所組成，如果要創建 Service NgModule 可以查看 Angular 的 `HttpClientModule` 他是一個非常好的例子，要注意的是請只在 `root AppModule` 中導入所有的 Service NgModules\n\n## Widget NgModules\n\n使用 Widget NgModule 使 component、pipe 或 directive 可被外部的 NgModule 給使用，當某個 NgModule 中的 component 需要使用到 Widget NgModule 中的某一個 component 或功能時，將\n\nWidget NgModule 到入到這個 NgModule 中即可，需多第三方 UI component libaray 都是作為 Widget NgModule 然後提供給各個 NgModule 中， 一個 Widget NgModule 應該`完全`由 `declarations` 所組成，其中大部分都是導出的這樣才能讓其他地方使用。\n\n## Shared NgModules\n\n最後介紹 Shared NgModule 他是將常用的 directive、pipe 或 component 統一放入一個 NgModule 中，通常會命名為 `SharedModule`，然後再應用程式的其他部分需要時導入，這樣只導入一個 Module 就可以獲得許多功能。\n\nShared NgModule 不應該包含 `providers`，任何其導入或導出的 NgModule 都不應該包含 providers。\n\n\n# 結論\n\n本篇中介紹了 Angular 的 NgModule 的觀念，NgModule 中 metadata 是由 `declarations`、`exports`、`imports`、`providers` 與 `bootstrap` 所組成\n\n- **declarations** 是用於宣告屬於這個 NgModule 的 component、pipe 或 directive\n- **exports** 是用於將這個 NgModule 需要給其他 NgModule 使用的部分導出\n- **imports** 是用於引入其他 NgModule 導出的功能\n- **providers** 是用於提供 NgModule 所使用的 Services\n- **bootstrap** 是用於定義應用程式的 `entryComponent`\n\n也介紹了 Angular 同時使用了 Javascript Module 與 NgModule 的概念，對於一個檔案中的內容要導出的給其他部分使用的話要使用 `export`，而要使用別的檔案中提供的內容時需要使用 `import` 將它導入。\n\n最後介紹了再開發 Angular 專案時會建立的幾種 NgModule\n\n- **Domain** 是圍繞功能或用戶體驗所組成的\n- **Routed** 中的頂部 component 充當路由器導航路徑的目的地\n- **Routing** 是為另一個 NgModule 提供路由配置的\n- **Service** 是提供實用服務的，例如數據訪問或消息傳達\n- **Widget** 是將某一部分的 component, pipe, directive 所組合起來讓其他 NgModule 可以使用，常用於第三方 UI library\n- **Shared** 是將共享的所有 component, pipe, directive 所組合，當其他 NgModule 要使用時引入它即可\n\nAngular Module 的觀念還有很多，由於文章長度的問題沒辦法一次講完，所以一樣將他分為兩段這樣可以介紹的比較完整，下半部的 NgModule 就明天見吧\n\n\n# Reference\n\n- [Angular.io - Guidelines for creating NgModules](https://angular.io/guide/module-types)","slug":"Angular/angular-30","published":1,"updated":"2022-02-16T06:52:48.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6be3001h95w3ahjh6gyu","content":"<p>在 Angular 中應用程式是模塊化的，Angular 有自己的模塊化系統稱為 <code>NgModule</code>，他可以包含 <code>component</code>、<code>service providers</code> 和其他程式的文件，還可以導入從其他 NgModules 導出的功能，並導出顯訂的功能以提供給其他 NgModules 使用，每一個 Angular app 都至少有一個 NgModule 他被稱為 root module，通常會叫做 <code>AppModule</code>。</p>\n<p>雖然一個小的專案中可能會只有一個 module (root module)，但在大多數大型的專案中都會建立多個 modules 用於將功能分割，達到將專案模塊化的目的。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"NgModule-metadata\"><a href=\"#NgModule-metadata\" class=\"headerlink\" title=\"NgModule metadata\"></a>NgModule metadata</h1><p>NgModule 是由一個用 <code>@NgModule()</code> 裝飾的 class，@NgModule() 是一個接收單個 <code>metadata</code> 物件的函數，它具有以下的 properties：</p>\n<ul>\n<li><strong>declarations</strong>：屬於這個 NgModule 的 component、pipes 或 directive。</li>\n<li><strong>exports</strong>：要導出的功能，可以讓其他的 NgModules 引入並且使用</li>\n<li><strong>imports</strong>：引入來自其他 NgModules 所導出的功能</li>\n<li><strong>providers</strong>：在這個 NgModule 中所使用的所有 Service</li>\n<li><strong>bootstrap</strong>：主應用程序的 view 稱為 root component，他乘載著所有應用程式的 view，簡單來說就是定義應用程式中 view 的最上層 component</li>\n</ul>\n<p>metadata 提供了該如何編譯 component 的 template 以及如何在運行時創建注入器 ( injector )，它識別了 NgModule 的 component、pipe 或 directive，並通過 exports property 將需要給其他 NgModules 使用的部分公開，還可以使用 NgModule 為 service 添加 provide ，以便 serviec 在其那地方也可以被使用。</p>\n<p>可以在 metadata 中的 declarations 中定義哪些 component、pipes 或 directive 屬於這個 Module。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常 root module 不需要設置 exports property，因為沒有其他的 NgModules 需要引入 root module。</p>\n<h2 id=\"The-declarations-array\"><a href=\"#The-declarations-array\" class=\"headerlink\" title=\"The declarations array\"></a>The declarations array</h2><p>在 NgModule 的 declarations 中定義了哪些 <code>component</code>、<code>pipes</code> 或 <code>directive</code> 屬於這個 Module，當你使用 Angular CLI 創建新的 component 時會<code>自動將新的 component 添加到這裡</code>，所以如果是手動建立新的 component 時要記得要把他添加到這裡，相對的如果移除一個 component 也要記得將它從 declarations 中移除。</p>\n<p>如果你使用一個沒有聲明的 component 則 Angular 會返回錯誤，而 declarations 只能接收可聲明的，可聲明的包括 <code>component</code>、<code>pipes</code> 或 <code>directive</code> ，Module 的所有聲明項都必須在 declarations 當中，而這個 declarations 只能屬於<code>一個</code> Module 不然會有多重宣告的錯誤，這些聲明項只有在 Module 中是可見的，除非將他們使用 <code>export</code> 導出，否則在其他地方是不可見的。</p>\n<h2 id=\"The-imports-array\"><a href=\"#The-imports-array\" class=\"headerlink\" title=\"The imports array\"></a>The imports array</h2><p>imports 只出現在 <code>@NgModule()</code> 的 metadata 中，它告訴 Angular 這個 Module 的運行需要使用到其他 Modules 的內容，當在此 Module 中引入其他 Module 所導出的內容時，該 Module 中的 component 就可以使用別的 Module 導出的 component、pipe 或 directive。</p>\n<h2 id=\"The-bootstrap-array\"><a href=\"#The-bootstrap-array\" class=\"headerlink\" title=\"The bootstrap array\"></a>The bootstrap array</h2><p>Angular 的應用程式透過 root module 啟動，也稱為 <code>entryComponent</code>，在創建應用程式的過程中會創建 bootstrap 中的 component 並將它插入瀏覽器的 DOM 中，每一個 bootstrapped component 都是本身 component tree 的<code>基礎（最上層的 component）</code>，所以當插入一個 bootstrapped component 後會觸發一連串的 component 創建然後填充本身 component tree。</p>\n<p>大多數應用程式都只有一個 component tree 並引導單個 root component，但是你也可以創建多個 component tree 來擴大你的應用程式，而這個 root component 通常稱為 <code>AppComponent</code> 並位於 root module 的 bootstrap 中。</p>\n<h1 id=\"NgModules-and-components\"><a href=\"#NgModules-and-components\" class=\"headerlink\" title=\"NgModules and components\"></a>NgModules and components</h1><p>NgModule 為 component 提供了 compilation context，簡單來說 NgModule 提供了創建 component 所需要的所有資訊，除了 root module 總是有一個 root component 之外，其他的任何 NgModules 都可以有任意數量的 component，而這個 NgModule 會為他底下的所有 component 提供 compilation context。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png\"></p>\n<p>一個 component 和他的 template 定義了一個 view，但是一個 component 可以包含一個有層次結構的 view，他允許你創建、修改或銷毀一個嵌入式 view，而層次結構的 view 可以混合在屬於不同 NgModules 的 component 中定義的 view，簡單來說就是你可以在 componentA 的 view 中創建一個屬於另一個 NgModule 的 componentB 的 view。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png\"></p>\n<p>當你嵌入一個 view 時，他會直接與一個稱為 <code>host view</code> 的 view 進行連接，host view 可以是這組 view 的 root，他可以包含所有嵌入的 view，就算這些 view 是來自別的 NgModules 也可以，而嵌入的 view 又可以在嵌入自己的 view，所以可以嵌套到任一深度。</p>\n<h1 id=\"JavaScript-modules-vs-NgModules\"><a href=\"#JavaScript-modules-vs-NgModules\" class=\"headerlink\" title=\"JavaScript modules vs. NgModules\"></a>JavaScript modules vs. NgModules</h1><p>在 Javascript ES6 中引入了屬於 Javascript 的 module 系統，雖然了解 Javascript 的 Module 對於了解 Angular 的 Module 很有幫助，但還是與 NgModule 有一些不同的地方，不過 Angular 同時使用了這兩種 Module 的概念</p>\n<h2 id=\"JavaScript-modules-Files-containing-code\"><a href=\"#JavaScript-modules-Files-containing-code\" class=\"headerlink\" title=\"JavaScript modules: Files containing code\"></a>JavaScript modules: Files containing code</h2><p>Javascript Module 是帶有 Javascript 程式的<code>單個文件</code>，通常包含用於應用程式中特定目的的 class 或 library，Javascript 的 Module 可以讓你將工作分散到多個檔案中。</p>\n<p>要讓  Module 中的內容提供給其他 Module 使用，要在這個 Module 的末尾使用 <code>export</code> 語法，比如說</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>而要使用其他 Module 中的內容時，要使用 <code>import</code> 將它導入到自身 Module 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>每一個 Module 都有自己的 <code>top level variable</code>，簡單來說就是每一個 Module 中的 variable 或 method 在別的 Module 或地方是看不到的，每一個 Module 都有自己的命名空間以防止他們與其他 Module 中的內容發生衝突。</p>\n<h1 id=\"Frequently-used-modules\"><a href=\"#Frequently-used-modules\" class=\"headerlink\" title=\"Frequently-used modules\"></a>Frequently-used modules</h1><p>一個 Angular 應用程式至少需要一個 Module 作為 root module，當像應用程式添加新功能時，可以將這些功能對應的 Module 添加到你的 Module 中，下面介紹一些經常使用的 Angular module 以及他們所包含的一些內容</p>\n<table>\n<thead>\n<tr>\n<th>NgModule</th>\n<th>Import it from</th>\n<th>Why you use it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BrowserModule</td>\n<td>@angular&#x2F;platform-browser</td>\n<td>當你想在瀏覽器中運行你的專案</td>\n</tr>\n<tr>\n<td>CommonModule</td>\n<td>@angular&#x2F;common</td>\n<td>當你需要使用 <code>NgIf</code> 或 <code>NgFor</code> 等等</td>\n</tr>\n<tr>\n<td>FormsModule</td>\n<td>@angular&#x2F;forms</td>\n<td>當你想要構建 template-driven forms 時</td>\n</tr>\n<tr>\n<td>ReactiveFormsModule</td>\n<td>@angular&#x2F;forms</td>\n<td>當你想要構建 reactive form 時</td>\n</tr>\n<tr>\n<td>RouterModule</td>\n<td>@angular&#x2F;router</td>\n<td>當你要使用 <code>RouterLink</code>, <code>.forRoot()</code> 或 <code>.forChild()</code> 時</td>\n</tr>\n<tr>\n<td>HttpClientModule</td>\n<td>@angular&#x2F;common&#x2F;http</td>\n<td>當你需要與 server 溝通時</td>\n</tr>\n</tbody></table>\n<h2 id=\"BrowserModule-and-CommonModule\"><a href=\"#BrowserModule-and-CommonModule\" class=\"headerlink\" title=\"BrowserModule and CommonModule\"></a>BrowserModule and CommonModule</h2><p>在 BrowserModule 中導入了 CommonModule，它提供了許多常用的 directive 例如 <code>ngIf</code>, <code>ngFor</code> 等等，此外 BrowserModule 重新的導出了 CommonModule 這使其所有的 directive 可以用於導入 BrowserModule 中。</p>\n<p>對於在瀏覽器中運行的應用程式而言，在 root module 中導入 <code>BrowserModule</code> 是必須的，因為它提供了啟動和運行瀏覽器應用程式必不可少的服務，他是為整個應用程序所提供的，所以他只應該在 <code>root module</code> 中被導入，所以不可以將它放在延遲加載的 feature module 中，因為會造成錯誤。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png\"></p>\n<h1 id=\"Guidelines-for-creating-NgModules\"><a href=\"#Guidelines-for-creating-NgModules\" class=\"headerlink\" title=\"Guidelines for creating NgModules\"></a>Guidelines for creating NgModules</h1><p>通常再開發 Angular 的應用程式時會因為不同的目的創建不同的 NgModule，NgModule 是組織程式並將與特定功能或特性相關的程式與其他部分分開，使用 NgModule 將 component、pipe 和 directive 合併回內聚的功能模組，將一個功能模組集中在服務某一個功能或業務上面，所以通常會建立下面幾種類型的 NgModule</p>\n<h2 id=\"Domain-NgModules\"><a href=\"#Domain-NgModules\" class=\"headerlink\" title=\"Domain NgModules\"></a>Domain NgModules</h2><p>使用 <code>Domain NgModule</code> 通常是為了專門提供於<code>特定功能或應用程序的用戶體驗</code>，比如說編輯客戶或下訂單，他組織與某個<code>功能</code>相關的程式，包括構建該功能的所有 component、routing 和 template。</p>\n<p>通常會將最上層的 component 或 root component 作為唯一導出的 component，Domain NgModule 主要由 <code>declarations</code> 所組成。</p>\n<h2 id=\"Routed-NgModules\"><a href=\"#Routed-NgModules\" class=\"headerlink\" title=\"Routed NgModules\"></a>Routed NgModules</h2><p>對所有 <code>lazy-loaded NgModule</code> 使用 <code>Routed NgModule</code>，使用 Routed NgModule 的最頂層 component 作為路由器導航的路徑，而 Routed NgModule <code>不會導出</code>任何內容，因為他們的 component 永遠不會出現在其他 component 的 template 中。</p>\n<p>還要注意不要將 <code>lazy-loaded NgModule</code> 導入另一個 NgModule 中，因為這樣會會立馬將這個 Module 載入到應用程式中，就失去了 lazy-loaded 的目的了。</p>\n<p>Routed NgModule 只需要很少的 <code>providers</code>，因為對於應用程式而言只有在需要的時候才會載入 Routed NgModule，所以如果在他的 providers 中填入 service 的話將會變得不可用，因為 injector 不知道 lazy-loaded NgModule。</p>\n<h2 id=\"Routing-NgModules\"><a href=\"#Routing-NgModules\" class=\"headerlink\" title=\"Routing NgModules\"></a>Routing NgModules</h2><p><code>Routing NgModule</code> 為 <code>Domain NgModule</code> 提供路由配置，通常會由 Routing NgModule 完成以下任務</p>\n<ul>\n<li>定義路由</li>\n<li>將路由器配置添加到 NgModule 的 imports 中</li>\n<li>向 NgModule 的 providers 提供 service</li>\n</ul>\n<p>Routing NgModule 的名稱應該與其同伴的 NgModule 名稱平行，比如說 contact.module.ts 中的 ContactModule 在 contact-routing.module.ts 中有一個名為 ContactRoutingModule 的 Routing NgModule。</p>\n<p>如果 Routing NgModule 是 root App Module 則 AppRoutingModule 是使用 <code>RouterModule.forRoot(routes)</code> 將路由器配置添加在 imports 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>而如果是其他 Routing NgModule 都是使用 <code>RouterModule.forChild(routes)</code> 將路由器配置添加到他們的 imports 中。</p>\n<p>要注意<code>不要</code>在 Routing NgModule 中使用 <code>declarations</code>，component、pipe 或 directive 的聲明是在伴隨的 <code>Domain NgModule</code> 中聲明的。</p>\n<h2 id=\"Service-NgModules\"><a href=\"#Service-NgModules\" class=\"headerlink\" title=\"Service NgModules\"></a>Service NgModules</h2><p><code>Service NgModule</code> 用於提供實用的服務，例如數據的訪問或消息的傳遞，理想的 Service NgModule 應該全由 providers 所組成，如果要創建 Service NgModule 可以查看 Angular 的 <code>HttpClientModule</code> 他是一個非常好的例子，要注意的是請只在 <code>root AppModule</code> 中導入所有的 Service NgModules</p>\n<h2 id=\"Widget-NgModules\"><a href=\"#Widget-NgModules\" class=\"headerlink\" title=\"Widget NgModules\"></a>Widget NgModules</h2><p>使用 Widget NgModule 使 component、pipe 或 directive 可被外部的 NgModule 給使用，當某個 NgModule 中的 component 需要使用到 Widget NgModule 中的某一個 component 或功能時，將</p>\n<p>Widget NgModule 到入到這個 NgModule 中即可，需多第三方 UI component libaray 都是作為 Widget NgModule 然後提供給各個 NgModule 中， 一個 Widget NgModule 應該<code>完全</code>由 <code>declarations</code> 所組成，其中大部分都是導出的這樣才能讓其他地方使用。</p>\n<h2 id=\"Shared-NgModules\"><a href=\"#Shared-NgModules\" class=\"headerlink\" title=\"Shared NgModules\"></a>Shared NgModules</h2><p>最後介紹 Shared NgModule 他是將常用的 directive、pipe 或 component 統一放入一個 NgModule 中，通常會命名為 <code>SharedModule</code>，然後再應用程式的其他部分需要時導入，這樣只導入一個 Module 就可以獲得許多功能。</p>\n<p>Shared NgModule 不應該包含 <code>providers</code>，任何其導入或導出的 NgModule 都不應該包含 providers。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中介紹了 Angular 的 NgModule 的觀念，NgModule 中 metadata 是由 <code>declarations</code>、<code>exports</code>、<code>imports</code>、<code>providers</code> 與 <code>bootstrap</code> 所組成</p>\n<ul>\n<li><strong>declarations</strong> 是用於宣告屬於這個 NgModule 的 component、pipe 或 directive</li>\n<li><strong>exports</strong> 是用於將這個 NgModule 需要給其他 NgModule 使用的部分導出</li>\n<li><strong>imports</strong> 是用於引入其他 NgModule 導出的功能</li>\n<li><strong>providers</strong> 是用於提供 NgModule 所使用的 Services</li>\n<li><strong>bootstrap</strong> 是用於定義應用程式的 <code>entryComponent</code></li>\n</ul>\n<p>也介紹了 Angular 同時使用了 Javascript Module 與 NgModule 的概念，對於一個檔案中的內容要導出的給其他部分使用的話要使用 <code>export</code>，而要使用別的檔案中提供的內容時需要使用 <code>import</code> 將它導入。</p>\n<p>最後介紹了再開發 Angular 專案時會建立的幾種 NgModule</p>\n<ul>\n<li><strong>Domain</strong> 是圍繞功能或用戶體驗所組成的</li>\n<li><strong>Routed</strong> 中的頂部 component 充當路由器導航路徑的目的地</li>\n<li><strong>Routing</strong> 是為另一個 NgModule 提供路由配置的</li>\n<li><strong>Service</strong> 是提供實用服務的，例如數據訪問或消息傳達</li>\n<li><strong>Widget</strong> 是將某一部分的 component, pipe, directive 所組合起來讓其他 NgModule 可以使用，常用於第三方 UI library</li>\n<li><strong>Shared</strong> 是將共享的所有 component, pipe, directive 所組合，當其他 NgModule 要使用時引入它即可</li>\n</ul>\n<p>Angular Module 的觀念還有很多，由於文章長度的問題沒辦法一次講完，所以一樣將他分為兩段這樣可以介紹的比較完整，下半部的 NgModule 就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/module-types\">Angular.io - Guidelines for creating NgModules</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在 Angular 中應用程式是模塊化的，Angular 有自己的模塊化系統稱為 <code>NgModule</code>，他可以包含 <code>component</code>、<code>service providers</code> 和其他程式的文件，還可以導入從其他 NgModules 導出的功能，並導出顯訂的功能以提供給其他 NgModules 使用，每一個 Angular app 都至少有一個 NgModule 他被稱為 root module，通常會叫做 <code>AppModule</code>。</p>\n<p>雖然一個小的專案中可能會只有一個 module (root module)，但在大多數大型的專案中都會建立多個 modules 用於將功能分割，達到將專案模塊化的目的。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767ZK4CbvmUSc.jpg\"></p>","more":"<h1 id=\"NgModule-metadata\"><a href=\"#NgModule-metadata\" class=\"headerlink\" title=\"NgModule metadata\"></a>NgModule metadata</h1><p>NgModule 是由一個用 <code>@NgModule()</code> 裝飾的 class，@NgModule() 是一個接收單個 <code>metadata</code> 物件的函數，它具有以下的 properties：</p>\n<ul>\n<li><strong>declarations</strong>：屬於這個 NgModule 的 component、pipes 或 directive。</li>\n<li><strong>exports</strong>：要導出的功能，可以讓其他的 NgModules 引入並且使用</li>\n<li><strong>imports</strong>：引入來自其他 NgModules 所導出的功能</li>\n<li><strong>providers</strong>：在這個 NgModule 中所使用的所有 Service</li>\n<li><strong>bootstrap</strong>：主應用程序的 view 稱為 root component，他乘載著所有應用程式的 view，簡單來說就是定義應用程式中 view 的最上層 component</li>\n</ul>\n<p>metadata 提供了該如何編譯 component 的 template 以及如何在運行時創建注入器 ( injector )，它識別了 NgModule 的 component、pipe 或 directive，並通過 exports property 將需要給其他 NgModules 使用的部分公開，還可以使用 NgModule 為 service 添加 provide ，以便 serviec 在其那地方也可以被使用。</p>\n<p>可以在 metadata 中的 declarations 中定義哪些 component、pipes 或 directive 屬於這個 Module。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AppRoutingModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常 root module 不需要設置 exports property，因為沒有其他的 NgModules 需要引入 root module。</p>\n<h2 id=\"The-declarations-array\"><a href=\"#The-declarations-array\" class=\"headerlink\" title=\"The declarations array\"></a>The declarations array</h2><p>在 NgModule 的 declarations 中定義了哪些 <code>component</code>、<code>pipes</code> 或 <code>directive</code> 屬於這個 Module，當你使用 Angular CLI 創建新的 component 時會<code>自動將新的 component 添加到這裡</code>，所以如果是手動建立新的 component 時要記得要把他添加到這裡，相對的如果移除一個 component 也要記得將它從 declarations 中移除。</p>\n<p>如果你使用一個沒有聲明的 component 則 Angular 會返回錯誤，而 declarations 只能接收可聲明的，可聲明的包括 <code>component</code>、<code>pipes</code> 或 <code>directive</code> ，Module 的所有聲明項都必須在 declarations 當中，而這個 declarations 只能屬於<code>一個</code> Module 不然會有多重宣告的錯誤，這些聲明項只有在 Module 中是可見的，除非將他們使用 <code>export</code> 導出，否則在其他地方是不可見的。</p>\n<h2 id=\"The-imports-array\"><a href=\"#The-imports-array\" class=\"headerlink\" title=\"The imports array\"></a>The imports array</h2><p>imports 只出現在 <code>@NgModule()</code> 的 metadata 中，它告訴 Angular 這個 Module 的運行需要使用到其他 Modules 的內容，當在此 Module 中引入其他 Module 所導出的內容時，該 Module 中的 component 就可以使用別的 Module 導出的 component、pipe 或 directive。</p>\n<h2 id=\"The-bootstrap-array\"><a href=\"#The-bootstrap-array\" class=\"headerlink\" title=\"The bootstrap array\"></a>The bootstrap array</h2><p>Angular 的應用程式透過 root module 啟動，也稱為 <code>entryComponent</code>，在創建應用程式的過程中會創建 bootstrap 中的 component 並將它插入瀏覽器的 DOM 中，每一個 bootstrapped component 都是本身 component tree 的<code>基礎（最上層的 component）</code>，所以當插入一個 bootstrapped component 後會觸發一連串的 component 創建然後填充本身 component tree。</p>\n<p>大多數應用程式都只有一個 component tree 並引導單個 root component，但是你也可以創建多個 component tree 來擴大你的應用程式，而這個 root component 通常稱為 <code>AppComponent</code> 並位於 root module 的 bootstrap 中。</p>\n<h1 id=\"NgModules-and-components\"><a href=\"#NgModules-and-components\" class=\"headerlink\" title=\"NgModules and components\"></a>NgModules and components</h1><p>NgModule 為 component 提供了 compilation context，簡單來說 NgModule 提供了創建 component 所需要的所有資訊，除了 root module 總是有一個 root component 之外，其他的任何 NgModules 都可以有任意數量的 component，而這個 NgModule 會為他底下的所有 component 提供 compilation context。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767olOJtbHwPU.png\"></p>\n<p>一個 component 和他的 template 定義了一個 view，但是一個 component 可以包含一個有層次結構的 view，他允許你創建、修改或銷毀一個嵌入式 view，而層次結構的 view 可以混合在屬於不同 NgModules 的 component 中定義的 view，簡單來說就是你可以在 componentA 的 view 中創建一個屬於另一個 NgModule 的 componentB 的 view。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767Cmvc8VcS1N.png\"></p>\n<p>當你嵌入一個 view 時，他會直接與一個稱為 <code>host view</code> 的 view 進行連接，host view 可以是這組 view 的 root，他可以包含所有嵌入的 view，就算這些 view 是來自別的 NgModules 也可以，而嵌入的 view 又可以在嵌入自己的 view，所以可以嵌套到任一深度。</p>\n<h1 id=\"JavaScript-modules-vs-NgModules\"><a href=\"#JavaScript-modules-vs-NgModules\" class=\"headerlink\" title=\"JavaScript modules vs. NgModules\"></a>JavaScript modules vs. NgModules</h1><p>在 Javascript ES6 中引入了屬於 Javascript 的 module 系統，雖然了解 Javascript 的 Module 對於了解 Angular 的 Module 很有幫助，但還是與 NgModule 有一些不同的地方，不過 Angular 同時使用了這兩種 Module 的概念</p>\n<h2 id=\"JavaScript-modules-Files-containing-code\"><a href=\"#JavaScript-modules-Files-containing-code\" class=\"headerlink\" title=\"JavaScript modules: Files containing code\"></a>JavaScript modules: Files containing code</h2><p>Javascript Module 是帶有 Javascript 程式的<code>單個文件</code>，通常包含用於應用程式中特定目的的 class 或 library，Javascript 的 Module 可以讓你將工作分散到多個檔案中。</p>\n<p>要讓  Module 中的內容提供給其他 Module 使用，要在這個 Module 的末尾使用 <code>export</code> 語法，比如說</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>而要使用其他 Module 中的內容時，要使用 <code>import</code> 將它導入到自身 Module 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>每一個 Module 都有自己的 <code>top level variable</code>，簡單來說就是每一個 Module 中的 variable 或 method 在別的 Module 或地方是看不到的，每一個 Module 都有自己的命名空間以防止他們與其他 Module 中的內容發生衝突。</p>\n<h1 id=\"Frequently-used-modules\"><a href=\"#Frequently-used-modules\" class=\"headerlink\" title=\"Frequently-used modules\"></a>Frequently-used modules</h1><p>一個 Angular 應用程式至少需要一個 Module 作為 root module，當像應用程式添加新功能時，可以將這些功能對應的 Module 添加到你的 Module 中，下面介紹一些經常使用的 Angular module 以及他們所包含的一些內容</p>\n<table>\n<thead>\n<tr>\n<th>NgModule</th>\n<th>Import it from</th>\n<th>Why you use it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BrowserModule</td>\n<td>@angular&#x2F;platform-browser</td>\n<td>當你想在瀏覽器中運行你的專案</td>\n</tr>\n<tr>\n<td>CommonModule</td>\n<td>@angular&#x2F;common</td>\n<td>當你需要使用 <code>NgIf</code> 或 <code>NgFor</code> 等等</td>\n</tr>\n<tr>\n<td>FormsModule</td>\n<td>@angular&#x2F;forms</td>\n<td>當你想要構建 template-driven forms 時</td>\n</tr>\n<tr>\n<td>ReactiveFormsModule</td>\n<td>@angular&#x2F;forms</td>\n<td>當你想要構建 reactive form 時</td>\n</tr>\n<tr>\n<td>RouterModule</td>\n<td>@angular&#x2F;router</td>\n<td>當你要使用 <code>RouterLink</code>, <code>.forRoot()</code> 或 <code>.forChild()</code> 時</td>\n</tr>\n<tr>\n<td>HttpClientModule</td>\n<td>@angular&#x2F;common&#x2F;http</td>\n<td>當你需要與 server 溝通時</td>\n</tr>\n</tbody></table>\n<h2 id=\"BrowserModule-and-CommonModule\"><a href=\"#BrowserModule-and-CommonModule\" class=\"headerlink\" title=\"BrowserModule and CommonModule\"></a>BrowserModule and CommonModule</h2><p>在 BrowserModule 中導入了 CommonModule，它提供了許多常用的 directive 例如 <code>ngIf</code>, <code>ngFor</code> 等等，此外 BrowserModule 重新的導出了 CommonModule 這使其所有的 directive 可以用於導入 BrowserModule 中。</p>\n<p>對於在瀏覽器中運行的應用程式而言，在 root module 中導入 <code>BrowserModule</code> 是必須的，因為它提供了啟動和運行瀏覽器應用程式必不可少的服務，他是為整個應用程序所提供的，所以他只應該在 <code>root module</code> 中被導入，所以不可以將它放在延遲加載的 feature module 中，因為會造成錯誤。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210829/20124767kFmuniMozj.png\"></p>\n<h1 id=\"Guidelines-for-creating-NgModules\"><a href=\"#Guidelines-for-creating-NgModules\" class=\"headerlink\" title=\"Guidelines for creating NgModules\"></a>Guidelines for creating NgModules</h1><p>通常再開發 Angular 的應用程式時會因為不同的目的創建不同的 NgModule，NgModule 是組織程式並將與特定功能或特性相關的程式與其他部分分開，使用 NgModule 將 component、pipe 和 directive 合併回內聚的功能模組，將一個功能模組集中在服務某一個功能或業務上面，所以通常會建立下面幾種類型的 NgModule</p>\n<h2 id=\"Domain-NgModules\"><a href=\"#Domain-NgModules\" class=\"headerlink\" title=\"Domain NgModules\"></a>Domain NgModules</h2><p>使用 <code>Domain NgModule</code> 通常是為了專門提供於<code>特定功能或應用程序的用戶體驗</code>，比如說編輯客戶或下訂單，他組織與某個<code>功能</code>相關的程式，包括構建該功能的所有 component、routing 和 template。</p>\n<p>通常會將最上層的 component 或 root component 作為唯一導出的 component，Domain NgModule 主要由 <code>declarations</code> 所組成。</p>\n<h2 id=\"Routed-NgModules\"><a href=\"#Routed-NgModules\" class=\"headerlink\" title=\"Routed NgModules\"></a>Routed NgModules</h2><p>對所有 <code>lazy-loaded NgModule</code> 使用 <code>Routed NgModule</code>，使用 Routed NgModule 的最頂層 component 作為路由器導航的路徑，而 Routed NgModule <code>不會導出</code>任何內容，因為他們的 component 永遠不會出現在其他 component 的 template 中。</p>\n<p>還要注意不要將 <code>lazy-loaded NgModule</code> 導入另一個 NgModule 中，因為這樣會會立馬將這個 Module 載入到應用程式中，就失去了 lazy-loaded 的目的了。</p>\n<p>Routed NgModule 只需要很少的 <code>providers</code>，因為對於應用程式而言只有在需要的時候才會載入 Routed NgModule，所以如果在他的 providers 中填入 service 的話將會變得不可用，因為 injector 不知道 lazy-loaded NgModule。</p>\n<h2 id=\"Routing-NgModules\"><a href=\"#Routing-NgModules\" class=\"headerlink\" title=\"Routing NgModules\"></a>Routing NgModules</h2><p><code>Routing NgModule</code> 為 <code>Domain NgModule</code> 提供路由配置，通常會由 Routing NgModule 完成以下任務</p>\n<ul>\n<li>定義路由</li>\n<li>將路由器配置添加到 NgModule 的 imports 中</li>\n<li>向 NgModule 的 providers 提供 service</li>\n</ul>\n<p>Routing NgModule 的名稱應該與其同伴的 NgModule 名稱平行，比如說 contact.module.ts 中的 ContactModule 在 contact-routing.module.ts 中有一個名為 ContactRoutingModule 的 Routing NgModule。</p>\n<p>如果 Routing NgModule 是 root App Module 則 AppRoutingModule 是使用 <code>RouterModule.forRoot(routes)</code> 將路由器配置添加在 imports 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>而如果是其他 Routing NgModule 都是使用 <code>RouterModule.forChild(routes)</code> 將路由器配置添加到他們的 imports 中。</p>\n<p>要注意<code>不要</code>在 Routing NgModule 中使用 <code>declarations</code>，component、pipe 或 directive 的聲明是在伴隨的 <code>Domain NgModule</code> 中聲明的。</p>\n<h2 id=\"Service-NgModules\"><a href=\"#Service-NgModules\" class=\"headerlink\" title=\"Service NgModules\"></a>Service NgModules</h2><p><code>Service NgModule</code> 用於提供實用的服務，例如數據的訪問或消息的傳遞，理想的 Service NgModule 應該全由 providers 所組成，如果要創建 Service NgModule 可以查看 Angular 的 <code>HttpClientModule</code> 他是一個非常好的例子，要注意的是請只在 <code>root AppModule</code> 中導入所有的 Service NgModules</p>\n<h2 id=\"Widget-NgModules\"><a href=\"#Widget-NgModules\" class=\"headerlink\" title=\"Widget NgModules\"></a>Widget NgModules</h2><p>使用 Widget NgModule 使 component、pipe 或 directive 可被外部的 NgModule 給使用，當某個 NgModule 中的 component 需要使用到 Widget NgModule 中的某一個 component 或功能時，將</p>\n<p>Widget NgModule 到入到這個 NgModule 中即可，需多第三方 UI component libaray 都是作為 Widget NgModule 然後提供給各個 NgModule 中， 一個 Widget NgModule 應該<code>完全</code>由 <code>declarations</code> 所組成，其中大部分都是導出的這樣才能讓其他地方使用。</p>\n<h2 id=\"Shared-NgModules\"><a href=\"#Shared-NgModules\" class=\"headerlink\" title=\"Shared NgModules\"></a>Shared NgModules</h2><p>最後介紹 Shared NgModule 他是將常用的 directive、pipe 或 component 統一放入一個 NgModule 中，通常會命名為 <code>SharedModule</code>，然後再應用程式的其他部分需要時導入，這樣只導入一個 Module 就可以獲得許多功能。</p>\n<p>Shared NgModule 不應該包含 <code>providers</code>，任何其導入或導出的 NgModule 都不應該包含 providers。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本篇中介紹了 Angular 的 NgModule 的觀念，NgModule 中 metadata 是由 <code>declarations</code>、<code>exports</code>、<code>imports</code>、<code>providers</code> 與 <code>bootstrap</code> 所組成</p>\n<ul>\n<li><strong>declarations</strong> 是用於宣告屬於這個 NgModule 的 component、pipe 或 directive</li>\n<li><strong>exports</strong> 是用於將這個 NgModule 需要給其他 NgModule 使用的部分導出</li>\n<li><strong>imports</strong> 是用於引入其他 NgModule 導出的功能</li>\n<li><strong>providers</strong> 是用於提供 NgModule 所使用的 Services</li>\n<li><strong>bootstrap</strong> 是用於定義應用程式的 <code>entryComponent</code></li>\n</ul>\n<p>也介紹了 Angular 同時使用了 Javascript Module 與 NgModule 的概念，對於一個檔案中的內容要導出的給其他部分使用的話要使用 <code>export</code>，而要使用別的檔案中提供的內容時需要使用 <code>import</code> 將它導入。</p>\n<p>最後介紹了再開發 Angular 專案時會建立的幾種 NgModule</p>\n<ul>\n<li><strong>Domain</strong> 是圍繞功能或用戶體驗所組成的</li>\n<li><strong>Routed</strong> 中的頂部 component 充當路由器導航路徑的目的地</li>\n<li><strong>Routing</strong> 是為另一個 NgModule 提供路由配置的</li>\n<li><strong>Service</strong> 是提供實用服務的，例如數據訪問或消息傳達</li>\n<li><strong>Widget</strong> 是將某一部分的 component, pipe, directive 所組合起來讓其他 NgModule 可以使用，常用於第三方 UI library</li>\n<li><strong>Shared</strong> 是將共享的所有 component, pipe, directive 所組合，當其他 NgModule 要使用時引入它即可</li>\n</ul>\n<p>Angular Module 的觀念還有很多，由於文章長度的問題沒辦法一次講完，所以一樣將他分為兩段這樣可以介紹的比較完整，下半部的 NgModule 就明天見吧</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/module-types\">Angular.io - Guidelines for creating NgModules</a></li>\n</ul>"},{"title":"Day33. Communicating with backend services using HTTP","date":"2021-10-03T02:35:20.000Z","_content":"\n在現代的網頁中絕大部分會需要與 server 互相溝通，無論是從 server 獲取商品的資料用於顯示在畫面中，還是畫面中的設定要儲存回 server 的設定都需與後端 server 互相溝通，Angular 提供了一個 client 端的 HTTP API，那便是 `@angular/common/http` 中的 `HttpClient` service class，該怎麼使用就繼續往下看吧!\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg](https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg)\n\n<!-- more -->\n\n# An overview of HTTP\n\nHTTP 是一種允許`獲得數據`（例如 HTML 文檔）的協議，他是一種 client 端與 server 端的協議是數據交換的基礎，這意味著通常 request 是由接收方（ client 端）發起的，從而獲得不同的數據或檔案，從 client 發送的消息稱為 `request` 而 server 端回傳的數據稱為 `response`。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png)\n\n## HTTP request methods\n\nHTTP 定義了一組 request method 用於 client 端對 server 端的所有操作，他們分別是\n\n- **GET**：GET request 用於`請求數據`\n- **HEAD**：和 GET request 一樣用於請求數據，但 response 沒有內容\n- **POST**：用於向指定 server 提交數據，會導致狀態更改或對 server 產稱副作用（更改數據）\n- **PUT**：用於將有效的數據替換掉目標資源的當前值\n- **DELETE**：用於刪除指定資源\n- **CONNECT**：用於建立到目標資源的 server 通道\n- **OPTION**：用於描述目標資源的通選項\n\n\n# Setup for server communication\n\n大概介紹完 HTTP 與 HTTP method 後，接著回到 Angular 的內容，要在 Angular 中使用 HttpClient 之前需要先導入 `HttpClientModule`，大多數操作都會將他到入到 AppModule 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n```\n\n接著可以在需要使用到 httpClient 的地方將它注入到 component 中\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class ConfigService {\n  constructor(private http: HttpClient) { }\n}\n```\n\n\n# Requesting data from a server\n\n首先介紹的是使用 HttpClient.get() method 從 server 中獲取數據，這個同步的 method 會發送一個 HTTP request，並在收到 responses 後會返回一個 `Observable`，responses 的類型會依據 request 中的 `observe` 和 `responseType` 決定，他接收兩個參數，一個是 server 的路徑 url 第二個是用於設置 request 的 option object。\n\n```typescript\noptions: {\n  headers?: HttpHeaders | {[header: string]: string | string[]},\n  observe?: 'body' | 'events' | 'response',\n  params?: HttpParams|{[param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>},\n  reportProgress?: boolean,\n  responseType?: 'arraybuffer'|'blob'|'json'|'text',\n  withCredentials?: boolean,\n}\n```\n\n其中重要的是 `observe` 與 `responseType`，`observe` 會決定要返回多少 response，`responseType` 會指定返回 response 的格式。\n\n所以如果要接收一個 JSON 形式的數據的話，需要將 `get()` 的 option 設置為 `{ observe: 'body', responseType: 'json' }` ，不過這些選項是預設值就算不加也會傳遞一樣的設置，下面來舉個例子，目標是獲得這一組數據\n\n```json\n{\n  \"heroesUrl\": \"api/heroes\",\n  \"textfile\": \"assets/textfile.txt\",\n  \"date\": \"2021-09-03\"\n}\n```\n\n1. 在 app.component.ts 中注入 HttpClient service\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      heros!: any;\n      constructor(private http: HttpClient) {}\n\n      ngOnInit() {\n        \n      }\n    }\n    ```\n\n2. 接著在 app.component.ts 的 `ngOnInit()` 中使用 get 獲取數據，這邊我是有建一個 server，如果不想建的話也可以跟官方文檔一樣把假數據放在專案的別的位置\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      heros!: any;\n      constructor(private http: HttpClient) {}\n\n      ngOnInit() {\n        this.http.get('http://localhost:3000/heros').subscribe((res: any) => {\n          this.heros = res[0];\n        });\n      }\n    }\n    ```\n\n3. 接著在 template 中把獲得的數據顯示在上面\n\n    ```html\n    <div class=\"content\">\n      <h4>HeroUrl: {{heros.herosUrl}}</h4>\n      <h4>textFile: {{heros.textFile}}</h4>\n      <h4>date: {{heros.date}}</h4>\n    </div>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png)\n\n## Requesting a typed response\n\n可以構造 HttpClient request 來聲明獲得的 reponse 數據類型，可以更好的對獲得的數據進行處理，收先先定義 responses 的資料型態\n\n```typescript\nexport interface Config {\n  heroesUrl: string;\n  textfile: string;\n  date: any;\n}\n```\n\n將這個資料型態定義給 HttpClient.get() \n\n```typescript\nngOnInit() {\n  this.http.get<Config[]>('http://localhost:3000/heros').subscribe((res) => {\n    this.heros = res[0];\n  });\n}\n```\n\n## Reading the full response\n\n在前面的範例中沒有設定 HttpClient.get() 的 option object，因為他預設就會獲得 `JSON` 格式的資料，不過有時候 server 會返回特殊的 header 或狀態用於指定某些特殊的條件，可以使用 `observe` 設定需要獲取完整的數據\n\n```typescript\n ngOnInit() {\n  this.http\n    .get<Config[]>('http://localhost:3000/heros', { observe: 'response' })\n    .subscribe((res) => {\n      console.log(res);\n    });\n}\n```\n\n如果要獲取完整數據的話，就會連 header, status.... 都會獲得\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png)\n\n## Requesting non-JSON data\n\n除了向上面一樣 get 一組 `JSON` 型態的檔案之外，還可以隨著後端 server 回傳的數據類型不同 get 的 option 進行操作，比如今天後端傳遞的是一個 `string` 類型的數據，如果不去設定 request 的 option 的話就會出錯，因為預設你是會獲得 `JSON` 格式的數據但實際上拿到的卻是 `String`，這時就需要更改 option\n\n```typescript\nthis.http\n  .get('http://localhost:3000/heroName', { responseType: 'text' })\n  .subscribe((res) => console.log(res));\n```\n\n將 `responseType` 更改為 `text` 代表獲得的 responses 會是 string 形式。\n\n\n# Handling request errors\n\n向 server 發送 request 的行為一定不會每一次都成功，所以當 request 失敗的話 HttpClient 將會返回一個 `error object` 而不是成功的 response，所以在我們撰寫處理 response 的 method 時也應該要同時加入`處理錯誤`的動作，所以當發生錯誤時可以獲得`失敗的原因`，這一方面可以讓我們開發者知道哪裡出了問題，也可以通知使用者發生了錯誤而不是空白畫面給他，甚至某些情況下還得再次發送 request 等等的錯誤處理。\n\n## Getting error details\n\n當 request 數據失敗的話，應用程式應該向使用者提供有用的反饋告入使用這發生了什麼事，是不是操作不當或是系統有問題等等，通常必較常會發生兩種錯誤：\n\n- Server 後端可能會拒絕 client 的 request，這時會返回帶有`狀態` 的代碼（ 404, 500... ）的 HTTP response，這就是 error response\n- Client 端可能會出錯，比如說阻止 request 完成的網路錯誤或 RxJS 拋出的錯誤，這屬於前端的錯誤，這類型的錯誤狀態會是 `0`，error obejct 的 property 會包含一個 `ProgressEvent`，他可以提供更多的錯誤信息。\n\nHttpClient 在其 HttpErrorResponse 中會捕獲這兩種錯誤，可以檢查錯誤的原因，所以將剛剛的 get() 加上錯誤處理\n\n```typescript\nthis.http\n  .get('http://localhost:3000/heros', { observe: 'response' })\n  .pipe(\n    catchError(this.handleError)\n).subscribe((res: any) => this.heros = res.body[0])\n```\n\n```typescript\nhandleError(error: HttpErrorResponse) {\n  if (error.status === 0) {\n    console.error('An error occurred', error.error);\n  } else {\n    console.error(`Back-end returned code ${error.status}, body was: ${error.error}`);\n  }\n  return throwError ('Something bad happened; Please try again later.')\n}\n```\n\n## Retrying a failed request\n\n有時候遇到 response 錯誤只是暫時的，可以再試一次說不定就會恢復正常，例如網路中斷就會導致 request 失敗，但是一但網路回歸正常後便可以再次 request，這時就可以使用 RxJS 提供的重試操作符 `retry()` 將會自動重新 request，次數可以隨意設定\n\n```typescript\nthis.http\n  .get('http://localhost:3000/heros', { observe: 'response' })\n  .pipe(\n    catchError(this.handleError),\n    retry(3)\n).subscribe((res: any) => this.heros = res.body[0])\n```\n\n\n# Sending data to a server\n\n除了從 server 獲得數據之外，HttpClinet 還支持其他 HTTP method，比如 PUT, POST 和 DELETE，可以使用它們來修改 server 的數據，下面將會做一個 Todo 的範例，UI 會填入代辦事項並將待辦事項寫入 server 中，也可以對他進行更改與刪除。\n\n## Post todo data to server\n\n第一步要建立一個 Todo 的畫面並將在畫面中輸入的內容利用 `HttpClient.post` 傳遞給 server\n\n1. 首先利用 Angular CLI 創建一個 component\n\n    ```bash\n    ng generate component todo-form\n    ```\n\n2. 在 todo-form.component.ts 中建立 todo 的 form model（記得要在 AppModule 中添加 `ReactiveFormsModule` 喔）\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      myForm = this.fb.group({\n        title: ['', Validators.required],\n        description: ['', Validators.required]\n      })\n      \n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {}\n    }\n    ```\n\n3. 接著在 todo-form.component.html 中添加輸入元件並綁定 FormControl\n\n    ```html\n    <form [formGroup]=\"myForm\" (submit)=\"onSubmit()\">\n      <div class=\"input-area\">\n        <label for=\"title\">Title </label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          class=\"form-control\"\n          formControlName=\"title\"\n        />\n      </div>\n      <div class=\"input-area\">\n        <label for=\"description\">Description </label>\n        <textarea\n          id=\"name\"\n          type=\"text\"\n          class=\"form-control\"\n          formControlName=\"description\"\n        ></textarea>\n      </div>\n\n      <button class=\"btn btn-success\" type=\"submit\">Add Todo</button>\n    </form>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png)\n\n1. 在 todo-form.component.ts 中注入 HttpClient 並新增 post method\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      myForm = this.fb.group({\n        title: ['', Validators.required],\n        description: ['', Validators.required]\n      })\n      id = 0;\n      httpOptions = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        }),\n      };\n\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n\n      ngOnInit(): void {}\n\n      onSubmit() {\n        const body = {\n          id: this.id,\n          title: this.myForm.value.title,\n          description: this.myForm.value.description\n        }\n\n        this.http\n          .post('http://localhost:3000/todo', body, this.httpOptions)\n          .subscribe((todo: any) => this.todoList = todo);\n\n        this.id++;\n      }\n    }\n    ```\n\n    在 onSubmit() 中添加 `HttpClient.post` method，將 Todo 中的數據傳遞給 Server，這邊新增了一個 property `id`，用於後面要指定更改或刪除哪一個 todo item，現在點擊畫面中的 Add todo 不會有任何動作，不過可以打開瀏覽器的 Network 確實可以看到有一個 POST 的 method。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png)\n\n## Get todo list from server\n\n要確認是否確實有將數據傳送給 server，可以使用上面介紹的 `HttpClient.get` method 取得 todo 的資料\n\n1. 在 todo-form.component.ts 中的 OnInit() 中使用 HttpClient.get 獲得數據\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      todoList: any[] = [];                                    // (1)\n     \n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n\n      ngOnInit(): void {\n        this.http.get('http://localhost:3000/todo').subscribe((todo: any) => {\n          this.todoList = todo;                                // (2)\n        })\n      }\n\n    \t// ...\n    }\n    ```\n\n    - (1): 新增一個 property 用於存放從 server 獲得的數據\n    - (2): 在 ngOnInit 中使用 HttpClient.get 獲得 server 數據並存放在 todoList 中\n2. 使用 Angular CLI 創建一個 component 用於顯示獲得的 todo 數據\n\n    ```bash\n    ng generate component todo-list\n    ```\n\n3. 在 todo-list.component.ts 中使用 `@Input()` 裝飾 property 代表從父層傳遞的數據\n\n    ```typescript\n    import { Component, Input } from '@angular/core';\n\n    @Component({\n      selector: 'app-todo-list',\n      templateUrl: './todo-list.component.html',\n      styleUrls: ['./todo-list.component.css']\n    })\n    export class TodoListComponent {\n      @Input() todoList: any;\n      constructor() { }\n    }\n    ```\n\n4. 在 todo-list.component.html 中把獲得的 todo 數據顯示在畫面中\n\n    ```html\n    <div *ngFor=\"let todo of todoList\" class=\"todo-content\">\n        <div class=\"todo-item\">\n            <div class=\"title\">Title: {{ todo.title }}</div>\n            <div class=\"desc\">Description: {{ todo.description }}</div>\n        </div>\n        <div class=\"optionBtn\">\n            <button type=\"button\" class=\"btn btn-success\">E</button>\n            <button type=\"button\" class=\"btn btn-danger\">X</button>\n        </div>\n    </div>\n    ```\n\n    這邊先新增了兩個 `<button>` 用於對單一 todo item 進行刪除或更改\n\n5. 在 todo-form.component.html 中使用 todo-list 的 select 並使用 property binding 綁定 todo 數據\n\n    ```html\n    <div class=\"todo-list\">\n      <app-todo-list [todoList]=\"todoList\"></app-todo-list>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/EgXMfKL.gif)\n\n## Delete todo item\n\n在畫面中可以順利看到傳遞給 server 的數據後，接著要對這些數據進行刪除\n\n1. 將 todo-list.component.ts 中新增一個 `@Output` 用於將點擊刪除事件傳遞給父層，這邊我的設計是將所有 http 動作都放在同一個 component 中\n\n    ```typescript\n    import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n    @Component({\n      selector: 'app-todo-list',\n      templateUrl: './todo-list.component.html',\n      styleUrls: ['./todo-list.component.css']\n    })\n    export class TodoListComponent {\n      @Input() todoList: any;\n      @Output() deleteEvent = new EventEmitter<number>();\n      constructor() { }\n\n      onDelete(todoItem: any) {\n        this.deleteEvent.emit(todoItem.id);\n      }\n    }\n    ```\n\n    這邊向父層傳遞被選中的 todo item 的 id，用於刪除指定 id 的數據\n\n2. 在 todo-form.component.ts 中新增 onDelete() method 用於調用 `HttpClient.delete` method\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      httpOptions = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        }),\n      };\n\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n    \t// ...\n    \t\n      onDelete(id: number) {\n        this.http\n          .delete(`http://localhost:3000/todo/${id}`, this.httpOptions)\n          .subscribe((todo: any) => this.todoList = todo);\n      }\n\n    \t// ...\n     }\n    ```\n\n    將被選中的 todo item 的 id 做為參數加在 url 上，讓 server 端可以獲得指定的 Id 並對刪除指定的 todo item。\n\n3. 在 todo-form.component.html 中綁定 `@Output()` 事件\n\n    ```html\n    <div class=\"todo-list\">\n      <app-todo-list \n    \t\t[todoList]=\"todoList\" \n    \t\t(deleteEvent)=\"onDelete($event)\"\n    \t></app-todo-list>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/K8lTVkw.gif)\n\n## Put todo data to update server\n\n完成刪除功能後，接著要利用 `HttpClient.put` method 更改 server 中的 todo 數據，不過要做到這一點首先要先建立一個畫面，用來顯示目前的 todo 內容，對他的內容更改後才能送出 PUT 更新 server 中的數據\n\n1. 利用 Angular CLI 創建一個 component 用於顯示被選中的 todo item 內容\n\n    ```bash\n    ng generate component edit-panel\n    ```\n\n2. 在 edit-panel.component.ts 中建立 Todo 的 form model\n\n    ```typescript\n    import { Component, OnInit, Input } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-edit-panel',\n      templateUrl: './edit-panel.component.html',\n      styleUrls: ['./edit-panel.component.css']\n    })\n    export class EditPanelComponent implements OnInit {\n      myForm = this.fb.group({\n        id: [''],\n        title: ['', Validators.required],\n        description: ['', Validators.required]\n      })\n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {}\n    }\n    ```\n\n3. 在 todo-list.component.ts 中建立 onEdit() method，他和 onDelete() 一樣傳遞被選中的 Todo id 給父層\n\n    ```typescript\n    import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n    @Component({\n      selector: 'app-todo-list',\n      templateUrl: './todo-list.component.html',\n      styleUrls: ['./todo-list.component.css']\n    })\n    export class TodoListComponent {\n      @Input() todoList: any;\n      @Output() openPanelEvent = new EventEmitter<number>();\n      constructor() { }\n    \t//... \n    \t\n      onEdit(todoItem: any) {\n        this.openPanelEvent.emit(todoItem.id);\n      }\n    }\n    ```\n\n4. 在 todo-form.component.ts 中建立 onOpenEditPanel() method，這邊使用 `HttpClient.get` 獲取被選中的 todo item 數據，這邊多加入一個 property 用於決定是否開啟 edit-panel 畫面\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      todoItem: any;                                          // (1)\n      isEditPanelOpen = false;                                // (2)\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n    \t// ...\n      \n      onOpenEditPanel(id: number) {                           // (3)\n        this.http.get(`http://localhost:3000/todo/${id}`)\n        .subscribe((todo: any) => {\n          this.todoItem = todo;\n          this.isEditPanelOpen = true;\n        });\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於獲得指定的 todo item 數據\n    - (2): 新增一個 property 用於決定是否開啟 edit-panel 畫面\n    - (3): 新增一個 method 用於調用 `HttpClient.get`，這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數回傳指定 id 的數據\n\n    這邊記得要在 todo-form.component.html 中將 Output event 綁定\n\n    ```html\n    <div class=\"todo-list\">\n      <app-todo-list \n    \t\t[todoList]=\"todoList\" \n    \t\t(deleteEvent)=\"onDelete($event)\" \n    \t\t(openPanelEvent)=\"onOpenEditPanel($event)\"\n    \t></app-todo-list>\n    </div>\n    ```\n\n5. 將獲得的 todo 數據透過 property binding 綁定給 edit-panel \n\n    ```html\n    <div *ngIf=\"isEditPanelOpen && todoItem\" class=\"edit-panel\">\n        <app-edit-panel [todoItem]=\"todoItem\"></app-edit-panel>\n    </div>\n    ```\n\n    這邊加上 `*ngIf` 只有在 isEditPanelOpen 為 true 和 todoItem 有數據時才會顯示畫面\n\n6. 由於需要將被選中的 todo 數據顯示在畫面中，所以要在 edit-panel.component.ts 的 ngOnInit() 中使用 `setValue` 設定表單的預設值\n\n    ```typescript\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-edit-panel',\n      templateUrl: './edit-panel.component.html',\n      styleUrls: ['./edit-panel.component.css']\n    })\n    export class EditPanelComponent implements OnInit {\n      @Input() todoItem: any;\n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {\n        this.myForm.setValue(this.todoItem);\n      }\n    }\n    ```\n    \n![img](https://i.imgur.com/cAovjJr.gif)\n\n1. 和 delete 一樣在 edit-panel.component.ts 中利用 `Output()`  將更改後的數據傳遞給父層\n\n    ```typescript\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-edit-panel',\n      templateUrl: './edit-panel.component.html',\n      styleUrls: ['./edit-panel.component.css']\n    })\n    export class EditPanelComponent implements OnInit {\n      @Output() editEvent = new EventEmitter<any>();\n      \n      constructor(private fb: FormBuilder) { }\n\n    \t// ...\n      onSubmit() {\n        this.editEvent.emit(this.myForm.value);\n      }  \n    }\n    ```\n\n2. 在 todo-form.component.ts 中新增一個 method 用於調用 `HttpClient.put` 將更新的數據傳遞給 server 更新數據\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      isEditPanelOpen = false;\n\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n\n    \t// ...\n      onEdit(todoItem: any) {\n        this.http.put(`http://localhost:3000/todo/${todoItem.id}`, todoItem, this.httpOptions)\n        .subscribe((todo: any) => {\n          this.todoList = todo;\n          this.isEditPanelOpen = false;\n        });\n      }\n    }\n    ```\n\n    這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數更改指定的數據內容\n    \n![img](https://i.imgur.com/qOsOT8n.gif)\n\n\n# 結論\n\n本章介紹了基本的 HTTP 概念與 HTTP method 這是 client 與 server 溝通的方法，可以使用 get 從 server 端獲得數據、可以使用 post 將 client 端的數據傳給 server、可以使用 delete 刪除 server 的數據也可以使用 Put 更改 server 的數據。\n\n最後介紹了如何利用 Angular 提供的 HttpClient 達成上面提到的所有功能，由於上面提到的範例與官方文檔的不一樣，我是自己寫 back-end server，所以有些地方可能會比較複雜，如果有看不懂的問題可以在下面留言問我喔！\n\nAngular 的 HTTP 因為篇章也比較長，所以也會拆成兩部分講解，所以明天還會介紹 Angular Http 的一些其他功能與細節，那就明天見吧！\n\n\n# Reference\n\n- [Angular.io - Communicating with backend services using HTTP](https://angular.io/guide/http#adding-and-updating-headers)\n- [An overview of HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)\n- [HTTP request methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods)","source":"_posts/Angular/angular-33.md","raw":"---\ntitle: Day33. Communicating with backend services using HTTP\ndate: 2021-10-03 10:35:20\ntags:\n- Angular\n- Front-end\n\ncategories:\n- 2021 鐵人賽\n---\n\n在現代的網頁中絕大部分會需要與 server 互相溝通，無論是從 server 獲取商品的資料用於顯示在畫面中，還是畫面中的設定要儲存回 server 的設定都需與後端 server 互相溝通，Angular 提供了一個 client 端的 HTTP API，那便是 `@angular/common/http` 中的 `HttpClient` service class，該怎麼使用就繼續往下看吧!\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg](https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg)\n\n<!-- more -->\n\n# An overview of HTTP\n\nHTTP 是一種允許`獲得數據`（例如 HTML 文檔）的協議，他是一種 client 端與 server 端的協議是數據交換的基礎，這意味著通常 request 是由接收方（ client 端）發起的，從而獲得不同的數據或檔案，從 client 發送的消息稱為 `request` 而 server 端回傳的數據稱為 `response`。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png)\n\n## HTTP request methods\n\nHTTP 定義了一組 request method 用於 client 端對 server 端的所有操作，他們分別是\n\n- **GET**：GET request 用於`請求數據`\n- **HEAD**：和 GET request 一樣用於請求數據，但 response 沒有內容\n- **POST**：用於向指定 server 提交數據，會導致狀態更改或對 server 產稱副作用（更改數據）\n- **PUT**：用於將有效的數據替換掉目標資源的當前值\n- **DELETE**：用於刪除指定資源\n- **CONNECT**：用於建立到目標資源的 server 通道\n- **OPTION**：用於描述目標資源的通選項\n\n\n# Setup for server communication\n\n大概介紹完 HTTP 與 HTTP method 後，接著回到 Angular 的內容，要在 Angular 中使用 HttpClient 之前需要先導入 `HttpClientModule`，大多數操作都會將他到入到 AppModule 中。\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n```\n\n接著可以在需要使用到 httpClient 的地方將它注入到 component 中\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class ConfigService {\n  constructor(private http: HttpClient) { }\n}\n```\n\n\n# Requesting data from a server\n\n首先介紹的是使用 HttpClient.get() method 從 server 中獲取數據，這個同步的 method 會發送一個 HTTP request，並在收到 responses 後會返回一個 `Observable`，responses 的類型會依據 request 中的 `observe` 和 `responseType` 決定，他接收兩個參數，一個是 server 的路徑 url 第二個是用於設置 request 的 option object。\n\n```typescript\noptions: {\n  headers?: HttpHeaders | {[header: string]: string | string[]},\n  observe?: 'body' | 'events' | 'response',\n  params?: HttpParams|{[param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>},\n  reportProgress?: boolean,\n  responseType?: 'arraybuffer'|'blob'|'json'|'text',\n  withCredentials?: boolean,\n}\n```\n\n其中重要的是 `observe` 與 `responseType`，`observe` 會決定要返回多少 response，`responseType` 會指定返回 response 的格式。\n\n所以如果要接收一個 JSON 形式的數據的話，需要將 `get()` 的 option 設置為 `{ observe: 'body', responseType: 'json' }` ，不過這些選項是預設值就算不加也會傳遞一樣的設置，下面來舉個例子，目標是獲得這一組數據\n\n```json\n{\n  \"heroesUrl\": \"api/heroes\",\n  \"textfile\": \"assets/textfile.txt\",\n  \"date\": \"2021-09-03\"\n}\n```\n\n1. 在 app.component.ts 中注入 HttpClient service\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      heros!: any;\n      constructor(private http: HttpClient) {}\n\n      ngOnInit() {\n        \n      }\n    }\n    ```\n\n2. 接著在 app.component.ts 的 `ngOnInit()` 中使用 get 獲取數據，這邊我是有建一個 server，如果不想建的話也可以跟官方文檔一樣把假數據放在專案的別的位置\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      heros!: any;\n      constructor(private http: HttpClient) {}\n\n      ngOnInit() {\n        this.http.get('http://localhost:3000/heros').subscribe((res: any) => {\n          this.heros = res[0];\n        });\n      }\n    }\n    ```\n\n3. 接著在 template 中把獲得的數據顯示在上面\n\n    ```html\n    <div class=\"content\">\n      <h4>HeroUrl: {{heros.herosUrl}}</h4>\n      <h4>textFile: {{heros.textFile}}</h4>\n      <h4>date: {{heros.date}}</h4>\n    </div>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png)\n\n## Requesting a typed response\n\n可以構造 HttpClient request 來聲明獲得的 reponse 數據類型，可以更好的對獲得的數據進行處理，收先先定義 responses 的資料型態\n\n```typescript\nexport interface Config {\n  heroesUrl: string;\n  textfile: string;\n  date: any;\n}\n```\n\n將這個資料型態定義給 HttpClient.get() \n\n```typescript\nngOnInit() {\n  this.http.get<Config[]>('http://localhost:3000/heros').subscribe((res) => {\n    this.heros = res[0];\n  });\n}\n```\n\n## Reading the full response\n\n在前面的範例中沒有設定 HttpClient.get() 的 option object，因為他預設就會獲得 `JSON` 格式的資料，不過有時候 server 會返回特殊的 header 或狀態用於指定某些特殊的條件，可以使用 `observe` 設定需要獲取完整的數據\n\n```typescript\n ngOnInit() {\n  this.http\n    .get<Config[]>('http://localhost:3000/heros', { observe: 'response' })\n    .subscribe((res) => {\n      console.log(res);\n    });\n}\n```\n\n如果要獲取完整數據的話，就會連 header, status.... 都會獲得\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png)\n\n## Requesting non-JSON data\n\n除了向上面一樣 get 一組 `JSON` 型態的檔案之外，還可以隨著後端 server 回傳的數據類型不同 get 的 option 進行操作，比如今天後端傳遞的是一個 `string` 類型的數據，如果不去設定 request 的 option 的話就會出錯，因為預設你是會獲得 `JSON` 格式的數據但實際上拿到的卻是 `String`，這時就需要更改 option\n\n```typescript\nthis.http\n  .get('http://localhost:3000/heroName', { responseType: 'text' })\n  .subscribe((res) => console.log(res));\n```\n\n將 `responseType` 更改為 `text` 代表獲得的 responses 會是 string 形式。\n\n\n# Handling request errors\n\n向 server 發送 request 的行為一定不會每一次都成功，所以當 request 失敗的話 HttpClient 將會返回一個 `error object` 而不是成功的 response，所以在我們撰寫處理 response 的 method 時也應該要同時加入`處理錯誤`的動作，所以當發生錯誤時可以獲得`失敗的原因`，這一方面可以讓我們開發者知道哪裡出了問題，也可以通知使用者發生了錯誤而不是空白畫面給他，甚至某些情況下還得再次發送 request 等等的錯誤處理。\n\n## Getting error details\n\n當 request 數據失敗的話，應用程式應該向使用者提供有用的反饋告入使用這發生了什麼事，是不是操作不當或是系統有問題等等，通常必較常會發生兩種錯誤：\n\n- Server 後端可能會拒絕 client 的 request，這時會返回帶有`狀態` 的代碼（ 404, 500... ）的 HTTP response，這就是 error response\n- Client 端可能會出錯，比如說阻止 request 完成的網路錯誤或 RxJS 拋出的錯誤，這屬於前端的錯誤，這類型的錯誤狀態會是 `0`，error obejct 的 property 會包含一個 `ProgressEvent`，他可以提供更多的錯誤信息。\n\nHttpClient 在其 HttpErrorResponse 中會捕獲這兩種錯誤，可以檢查錯誤的原因，所以將剛剛的 get() 加上錯誤處理\n\n```typescript\nthis.http\n  .get('http://localhost:3000/heros', { observe: 'response' })\n  .pipe(\n    catchError(this.handleError)\n).subscribe((res: any) => this.heros = res.body[0])\n```\n\n```typescript\nhandleError(error: HttpErrorResponse) {\n  if (error.status === 0) {\n    console.error('An error occurred', error.error);\n  } else {\n    console.error(`Back-end returned code ${error.status}, body was: ${error.error}`);\n  }\n  return throwError ('Something bad happened; Please try again later.')\n}\n```\n\n## Retrying a failed request\n\n有時候遇到 response 錯誤只是暫時的，可以再試一次說不定就會恢復正常，例如網路中斷就會導致 request 失敗，但是一但網路回歸正常後便可以再次 request，這時就可以使用 RxJS 提供的重試操作符 `retry()` 將會自動重新 request，次數可以隨意設定\n\n```typescript\nthis.http\n  .get('http://localhost:3000/heros', { observe: 'response' })\n  .pipe(\n    catchError(this.handleError),\n    retry(3)\n).subscribe((res: any) => this.heros = res.body[0])\n```\n\n\n# Sending data to a server\n\n除了從 server 獲得數據之外，HttpClinet 還支持其他 HTTP method，比如 PUT, POST 和 DELETE，可以使用它們來修改 server 的數據，下面將會做一個 Todo 的範例，UI 會填入代辦事項並將待辦事項寫入 server 中，也可以對他進行更改與刪除。\n\n## Post todo data to server\n\n第一步要建立一個 Todo 的畫面並將在畫面中輸入的內容利用 `HttpClient.post` 傳遞給 server\n\n1. 首先利用 Angular CLI 創建一個 component\n\n    ```bash\n    ng generate component todo-form\n    ```\n\n2. 在 todo-form.component.ts 中建立 todo 的 form model（記得要在 AppModule 中添加 `ReactiveFormsModule` 喔）\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      myForm = this.fb.group({\n        title: ['', Validators.required],\n        description: ['', Validators.required]\n      })\n      \n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {}\n    }\n    ```\n\n3. 接著在 todo-form.component.html 中添加輸入元件並綁定 FormControl\n\n    ```html\n    <form [formGroup]=\"myForm\" (submit)=\"onSubmit()\">\n      <div class=\"input-area\">\n        <label for=\"title\">Title </label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          class=\"form-control\"\n          formControlName=\"title\"\n        />\n      </div>\n      <div class=\"input-area\">\n        <label for=\"description\">Description </label>\n        <textarea\n          id=\"name\"\n          type=\"text\"\n          class=\"form-control\"\n          formControlName=\"description\"\n        ></textarea>\n      </div>\n\n      <button class=\"btn btn-success\" type=\"submit\">Add Todo</button>\n    </form>\n    ```\n    \n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png)\n\n1. 在 todo-form.component.ts 中注入 HttpClient 並新增 post method\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      myForm = this.fb.group({\n        title: ['', Validators.required],\n        description: ['', Validators.required]\n      })\n      id = 0;\n      httpOptions = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        }),\n      };\n\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n\n      ngOnInit(): void {}\n\n      onSubmit() {\n        const body = {\n          id: this.id,\n          title: this.myForm.value.title,\n          description: this.myForm.value.description\n        }\n\n        this.http\n          .post('http://localhost:3000/todo', body, this.httpOptions)\n          .subscribe((todo: any) => this.todoList = todo);\n\n        this.id++;\n      }\n    }\n    ```\n\n    在 onSubmit() 中添加 `HttpClient.post` method，將 Todo 中的數據傳遞給 Server，這邊新增了一個 property `id`，用於後面要指定更改或刪除哪一個 todo item，現在點擊畫面中的 Add todo 不會有任何動作，不過可以打開瀏覽器的 Network 確實可以看到有一個 POST 的 method。\n\n![https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png](https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png)\n\n## Get todo list from server\n\n要確認是否確實有將數據傳送給 server，可以使用上面介紹的 `HttpClient.get` method 取得 todo 的資料\n\n1. 在 todo-form.component.ts 中的 OnInit() 中使用 HttpClient.get 獲得數據\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      todoList: any[] = [];                                    // (1)\n     \n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n\n      ngOnInit(): void {\n        this.http.get('http://localhost:3000/todo').subscribe((todo: any) => {\n          this.todoList = todo;                                // (2)\n        })\n      }\n\n    \t// ...\n    }\n    ```\n\n    - (1): 新增一個 property 用於存放從 server 獲得的數據\n    - (2): 在 ngOnInit 中使用 HttpClient.get 獲得 server 數據並存放在 todoList 中\n2. 使用 Angular CLI 創建一個 component 用於顯示獲得的 todo 數據\n\n    ```bash\n    ng generate component todo-list\n    ```\n\n3. 在 todo-list.component.ts 中使用 `@Input()` 裝飾 property 代表從父層傳遞的數據\n\n    ```typescript\n    import { Component, Input } from '@angular/core';\n\n    @Component({\n      selector: 'app-todo-list',\n      templateUrl: './todo-list.component.html',\n      styleUrls: ['./todo-list.component.css']\n    })\n    export class TodoListComponent {\n      @Input() todoList: any;\n      constructor() { }\n    }\n    ```\n\n4. 在 todo-list.component.html 中把獲得的 todo 數據顯示在畫面中\n\n    ```html\n    <div *ngFor=\"let todo of todoList\" class=\"todo-content\">\n        <div class=\"todo-item\">\n            <div class=\"title\">Title: {{ todo.title }}</div>\n            <div class=\"desc\">Description: {{ todo.description }}</div>\n        </div>\n        <div class=\"optionBtn\">\n            <button type=\"button\" class=\"btn btn-success\">E</button>\n            <button type=\"button\" class=\"btn btn-danger\">X</button>\n        </div>\n    </div>\n    ```\n\n    這邊先新增了兩個 `<button>` 用於對單一 todo item 進行刪除或更改\n\n5. 在 todo-form.component.html 中使用 todo-list 的 select 並使用 property binding 綁定 todo 數據\n\n    ```html\n    <div class=\"todo-list\">\n      <app-todo-list [todoList]=\"todoList\"></app-todo-list>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/EgXMfKL.gif)\n\n## Delete todo item\n\n在畫面中可以順利看到傳遞給 server 的數據後，接著要對這些數據進行刪除\n\n1. 將 todo-list.component.ts 中新增一個 `@Output` 用於將點擊刪除事件傳遞給父層，這邊我的設計是將所有 http 動作都放在同一個 component 中\n\n    ```typescript\n    import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n    @Component({\n      selector: 'app-todo-list',\n      templateUrl: './todo-list.component.html',\n      styleUrls: ['./todo-list.component.css']\n    })\n    export class TodoListComponent {\n      @Input() todoList: any;\n      @Output() deleteEvent = new EventEmitter<number>();\n      constructor() { }\n\n      onDelete(todoItem: any) {\n        this.deleteEvent.emit(todoItem.id);\n      }\n    }\n    ```\n\n    這邊向父層傳遞被選中的 todo item 的 id，用於刪除指定 id 的數據\n\n2. 在 todo-form.component.ts 中新增 onDelete() method 用於調用 `HttpClient.delete` method\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      httpOptions = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        }),\n      };\n\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n    \t// ...\n    \t\n      onDelete(id: number) {\n        this.http\n          .delete(`http://localhost:3000/todo/${id}`, this.httpOptions)\n          .subscribe((todo: any) => this.todoList = todo);\n      }\n\n    \t// ...\n     }\n    ```\n\n    將被選中的 todo item 的 id 做為參數加在 url 上，讓 server 端可以獲得指定的 Id 並對刪除指定的 todo item。\n\n3. 在 todo-form.component.html 中綁定 `@Output()` 事件\n\n    ```html\n    <div class=\"todo-list\">\n      <app-todo-list \n    \t\t[todoList]=\"todoList\" \n    \t\t(deleteEvent)=\"onDelete($event)\"\n    \t></app-todo-list>\n    </div>\n    ```\n    \n![img](https://i.imgur.com/K8lTVkw.gif)\n\n## Put todo data to update server\n\n完成刪除功能後，接著要利用 `HttpClient.put` method 更改 server 中的 todo 數據，不過要做到這一點首先要先建立一個畫面，用來顯示目前的 todo 內容，對他的內容更改後才能送出 PUT 更新 server 中的數據\n\n1. 利用 Angular CLI 創建一個 component 用於顯示被選中的 todo item 內容\n\n    ```bash\n    ng generate component edit-panel\n    ```\n\n2. 在 edit-panel.component.ts 中建立 Todo 的 form model\n\n    ```typescript\n    import { Component, OnInit, Input } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-edit-panel',\n      templateUrl: './edit-panel.component.html',\n      styleUrls: ['./edit-panel.component.css']\n    })\n    export class EditPanelComponent implements OnInit {\n      myForm = this.fb.group({\n        id: [''],\n        title: ['', Validators.required],\n        description: ['', Validators.required]\n      })\n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {}\n    }\n    ```\n\n3. 在 todo-list.component.ts 中建立 onEdit() method，他和 onDelete() 一樣傳遞被選中的 Todo id 給父層\n\n    ```typescript\n    import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n    @Component({\n      selector: 'app-todo-list',\n      templateUrl: './todo-list.component.html',\n      styleUrls: ['./todo-list.component.css']\n    })\n    export class TodoListComponent {\n      @Input() todoList: any;\n      @Output() openPanelEvent = new EventEmitter<number>();\n      constructor() { }\n    \t//... \n    \t\n      onEdit(todoItem: any) {\n        this.openPanelEvent.emit(todoItem.id);\n      }\n    }\n    ```\n\n4. 在 todo-form.component.ts 中建立 onOpenEditPanel() method，這邊使用 `HttpClient.get` 獲取被選中的 todo item 數據，這邊多加入一個 property 用於決定是否開啟 edit-panel 畫面\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      todoItem: any;                                          // (1)\n      isEditPanelOpen = false;                                // (2)\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n    \t// ...\n      \n      onOpenEditPanel(id: number) {                           // (3)\n        this.http.get(`http://localhost:3000/todo/${id}`)\n        .subscribe((todo: any) => {\n          this.todoItem = todo;\n          this.isEditPanelOpen = true;\n        });\n      }\n    }\n    ```\n\n    - (1): 新增一個 property 用於獲得指定的 todo item 數據\n    - (2): 新增一個 property 用於決定是否開啟 edit-panel 畫面\n    - (3): 新增一個 method 用於調用 `HttpClient.get`，這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數回傳指定 id 的數據\n\n    這邊記得要在 todo-form.component.html 中將 Output event 綁定\n\n    ```html\n    <div class=\"todo-list\">\n      <app-todo-list \n    \t\t[todoList]=\"todoList\" \n    \t\t(deleteEvent)=\"onDelete($event)\" \n    \t\t(openPanelEvent)=\"onOpenEditPanel($event)\"\n    \t></app-todo-list>\n    </div>\n    ```\n\n5. 將獲得的 todo 數據透過 property binding 綁定給 edit-panel \n\n    ```html\n    <div *ngIf=\"isEditPanelOpen && todoItem\" class=\"edit-panel\">\n        <app-edit-panel [todoItem]=\"todoItem\"></app-edit-panel>\n    </div>\n    ```\n\n    這邊加上 `*ngIf` 只有在 isEditPanelOpen 為 true 和 todoItem 有數據時才會顯示畫面\n\n6. 由於需要將被選中的 todo 數據顯示在畫面中，所以要在 edit-panel.component.ts 的 ngOnInit() 中使用 `setValue` 設定表單的預設值\n\n    ```typescript\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-edit-panel',\n      templateUrl: './edit-panel.component.html',\n      styleUrls: ['./edit-panel.component.css']\n    })\n    export class EditPanelComponent implements OnInit {\n      @Input() todoItem: any;\n      constructor(private fb: FormBuilder) { }\n\n      ngOnInit(): void {\n        this.myForm.setValue(this.todoItem);\n      }\n    }\n    ```\n    \n![img](https://i.imgur.com/cAovjJr.gif)\n\n1. 和 delete 一樣在 edit-panel.component.ts 中利用 `Output()`  將更改後的數據傳遞給父層\n\n    ```typescript\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n\n    @Component({\n      selector: 'app-edit-panel',\n      templateUrl: './edit-panel.component.html',\n      styleUrls: ['./edit-panel.component.css']\n    })\n    export class EditPanelComponent implements OnInit {\n      @Output() editEvent = new EventEmitter<any>();\n      \n      constructor(private fb: FormBuilder) { }\n\n    \t// ...\n      onSubmit() {\n        this.editEvent.emit(this.myForm.value);\n      }  \n    }\n    ```\n\n2. 在 todo-form.component.ts 中新增一個 method 用於調用 `HttpClient.put` 將更新的數據傳遞給 server 更新數據\n\n    ```typescript\n    import { Component, OnInit } from '@angular/core';\n    import { FormBuilder, Validators } from '@angular/forms';\n    import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n    @Component({\n      selector: 'app-todo-form',\n      templateUrl: './todo-form.component.html',\n      styleUrls: ['./todo-form.component.css']\n    })\n    export class TodoFormComponent implements OnInit {\n      isEditPanelOpen = false;\n\n      constructor(private fb: FormBuilder, private http: HttpClient) { }\n\n    \t// ...\n      onEdit(todoItem: any) {\n        this.http.put(`http://localhost:3000/todo/${todoItem.id}`, todoItem, this.httpOptions)\n        .subscribe((todo: any) => {\n          this.todoList = todo;\n          this.isEditPanelOpen = false;\n        });\n      }\n    }\n    ```\n\n    這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數更改指定的數據內容\n    \n![img](https://i.imgur.com/qOsOT8n.gif)\n\n\n# 結論\n\n本章介紹了基本的 HTTP 概念與 HTTP method 這是 client 與 server 溝通的方法，可以使用 get 從 server 端獲得數據、可以使用 post 將 client 端的數據傳給 server、可以使用 delete 刪除 server 的數據也可以使用 Put 更改 server 的數據。\n\n最後介紹了如何利用 Angular 提供的 HttpClient 達成上面提到的所有功能，由於上面提到的範例與官方文檔的不一樣，我是自己寫 back-end server，所以有些地方可能會比較複雜，如果有看不懂的問題可以在下面留言問我喔！\n\nAngular 的 HTTP 因為篇章也比較長，所以也會拆成兩部分講解，所以明天還會介紹 Angular Http 的一些其他功能與細節，那就明天見吧！\n\n\n# Reference\n\n- [Angular.io - Communicating with backend services using HTTP](https://angular.io/guide/http#adding-and-updating-headers)\n- [An overview of HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)\n- [HTTP request methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods)","slug":"Angular/angular-33","published":1,"updated":"2022-02-16T07:00:57.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6be4001k95w32vqc8pql","content":"<p>在現代的網頁中絕大部分會需要與 server 互相溝通，無論是從 server 獲取商品的資料用於顯示在畫面中，還是畫面中的設定要儲存回 server 的設定都需與後端 server 互相溝通，Angular 提供了一個 client 端的 HTTP API，那便是 <code>@angular/common/http</code> 中的 <code>HttpClient</code> service class，該怎麼使用就繼續往下看吧!</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"An-overview-of-HTTP\"><a href=\"#An-overview-of-HTTP\" class=\"headerlink\" title=\"An overview of HTTP\"></a>An overview of HTTP</h1><p>HTTP 是一種允許<code>獲得數據</code>（例如 HTML 文檔）的協議，他是一種 client 端與 server 端的協議是數據交換的基礎，這意味著通常 request 是由接收方（ client 端）發起的，從而獲得不同的數據或檔案，從 client 發送的消息稱為 <code>request</code> 而 server 端回傳的數據稱為 <code>response</code>。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png\"></p>\n<h2 id=\"HTTP-request-methods\"><a href=\"#HTTP-request-methods\" class=\"headerlink\" title=\"HTTP request methods\"></a>HTTP request methods</h2><p>HTTP 定義了一組 request method 用於 client 端對 server 端的所有操作，他們分別是</p>\n<ul>\n<li><strong>GET</strong>：GET request 用於<code>請求數據</code></li>\n<li><strong>HEAD</strong>：和 GET request 一樣用於請求數據，但 response 沒有內容</li>\n<li><strong>POST</strong>：用於向指定 server 提交數據，會導致狀態更改或對 server 產稱副作用（更改數據）</li>\n<li><strong>PUT</strong>：用於將有效的數據替換掉目標資源的當前值</li>\n<li><strong>DELETE</strong>：用於刪除指定資源</li>\n<li><strong>CONNECT</strong>：用於建立到目標資源的 server 通道</li>\n<li><strong>OPTION</strong>：用於描述目標資源的通選項</li>\n</ul>\n<h1 id=\"Setup-for-server-communication\"><a href=\"#Setup-for-server-communication\" class=\"headerlink\" title=\"Setup for server communication\"></a>Setup for server communication</h1><p>大概介紹完 HTTP 與 HTTP method 後，接著回到 Angular 的內容，要在 Angular 中使用 HttpClient 之前需要先導入 <code>HttpClientModule</code>，大多數操作都會將他到入到 AppModule 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClientModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">HttpClientModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [ <span class=\"title class_\">AppComponent</span> ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著可以在需要使用到 httpClient 的地方將它注入到 component 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Requesting-data-from-a-server\"><a href=\"#Requesting-data-from-a-server\" class=\"headerlink\" title=\"Requesting data from a server\"></a>Requesting data from a server</h1><p>首先介紹的是使用 HttpClient.get() method 從 server 中獲取數據，這個同步的 method 會發送一個 HTTP request，並在收到 responses 後會返回一個 <code>Observable</code>，responses 的類型會依據 request 中的 <code>observe</code> 和 <code>responseType</code> 決定，他接收兩個參數，一個是 server 的路徑 url 第二個是用於設置 request 的 option object。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">  headers?: <span class=\"title class_\">HttpHeaders</span> | &#123;[<span class=\"attr\">header</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">string</span>[]&#125;,</span><br><span class=\"line\">  observe?: <span class=\"string\">&#x27;body&#x27;</span> | <span class=\"string\">&#x27;events&#x27;</span> | <span class=\"string\">&#x27;response&#x27;</span>,</span><br><span class=\"line\">  params?: <span class=\"title class_\">HttpParams</span>|&#123;[<span class=\"attr\">param</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span> | <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span>&gt;&#125;,</span><br><span class=\"line\">  reportProgress?: <span class=\"built_in\">boolean</span>,</span><br><span class=\"line\">  responseType?: <span class=\"string\">&#x27;arraybuffer&#x27;</span>|<span class=\"string\">&#x27;blob&#x27;</span>|<span class=\"string\">&#x27;json&#x27;</span>|<span class=\"string\">&#x27;text&#x27;</span>,</span><br><span class=\"line\">  withCredentials?: <span class=\"built_in\">boolean</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中重要的是 <code>observe</code> 與 <code>responseType</code>，<code>observe</code> 會決定要返回多少 response，<code>responseType</code> 會指定返回 response 的格式。</p>\n<p>所以如果要接收一個 JSON 形式的數據的話，需要將 <code>get()</code> 的 option 設置為 <code>&#123; observe: &#39;body&#39;, responseType: &#39;json&#39; &#125;</code> ，不過這些選項是預設值就算不加也會傳遞一樣的設置，下面來舉個例子，目標是獲得這一組數據</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;heroesUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;api/heroes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;textfile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets/textfile.txt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2021-09-03&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>在 app.component.ts 中注入 HttpClient service</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  heros!: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 app.component.ts 的 <code>ngOnInit()</code> 中使用 get 獲取數據，這邊我是有建一個 server，如果不想建的話也可以跟官方文檔一樣把假數據放在專案的別的位置</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  heros!: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 template 中把獲得的數據顯示在上面</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>HeroUrl: &#123;&#123;heros.herosUrl&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>textFile: &#123;&#123;heros.textFile&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>date: &#123;&#123;heros.date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png\"></p>\n<h2 id=\"Requesting-a-typed-response\"><a href=\"#Requesting-a-typed-response\" class=\"headerlink\" title=\"Requesting a typed response\"></a>Requesting a typed response</h2><p>可以構造 HttpClient request 來聲明獲得的 reponse 數據類型，可以更好的對獲得的數據進行處理，收先先定義 responses 的資料型態</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">heroesUrl</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">textfile</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">date</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>將這個資料型態定義給 HttpClient.get() </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">Config</span>[]&gt;(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reading-the-full-response\"><a href=\"#Reading-the-full-response\" class=\"headerlink\" title=\"Reading the full response\"></a>Reading the full response</h2><p>在前面的範例中沒有設定 HttpClient.get() 的 option object，因為他預設就會獲得 <code>JSON</code> 格式的資料，不過有時候 server 會返回特殊的 header 或狀態用於指定某些特殊的條件，可以使用 <code>observe</code> 設定需要獲取完整的數據</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">    .<span class=\"property\">get</span>&lt;<span class=\"title class_\">Config</span>[]&gt;(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>, &#123; <span class=\"attr\">observe</span>: <span class=\"string\">&#x27;response&#x27;</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要獲取完整數據的話，就會連 header, status…. 都會獲得</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png\"></p>\n<h2 id=\"Requesting-non-JSON-data\"><a href=\"#Requesting-non-JSON-data\" class=\"headerlink\" title=\"Requesting non-JSON data\"></a>Requesting non-JSON data</h2><p>除了向上面一樣 get 一組 <code>JSON</code> 型態的檔案之外，還可以隨著後端 server 回傳的數據類型不同 get 的 option 進行操作，比如今天後端傳遞的是一個 <code>string</code> 類型的數據，如果不去設定 request 的 option 的話就會出錯，因為預設你是會獲得 <code>JSON</code> 格式的數據但實際上拿到的卻是 <code>String</code>，這時就需要更改 option</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heroName&#x27;</span>, &#123; <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;text&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res));</span><br></pre></td></tr></table></figure>\n\n<p>將 <code>responseType</code> 更改為 <code>text</code> 代表獲得的 responses 會是 string 形式。</p>\n<h1 id=\"Handling-request-errors\"><a href=\"#Handling-request-errors\" class=\"headerlink\" title=\"Handling request errors\"></a>Handling request errors</h1><p>向 server 發送 request 的行為一定不會每一次都成功，所以當 request 失敗的話 HttpClient 將會返回一個 <code>error object</code> 而不是成功的 response，所以在我們撰寫處理 response 的 method 時也應該要同時加入<code>處理錯誤</code>的動作，所以當發生錯誤時可以獲得<code>失敗的原因</code>，這一方面可以讓我們開發者知道哪裡出了問題，也可以通知使用者發生了錯誤而不是空白畫面給他，甚至某些情況下還得再次發送 request 等等的錯誤處理。</p>\n<h2 id=\"Getting-error-details\"><a href=\"#Getting-error-details\" class=\"headerlink\" title=\"Getting error details\"></a>Getting error details</h2><p>當 request 數據失敗的話，應用程式應該向使用者提供有用的反饋告入使用這發生了什麼事，是不是操作不當或是系統有問題等等，通常必較常會發生兩種錯誤：</p>\n<ul>\n<li>Server 後端可能會拒絕 client 的 request，這時會返回帶有<code>狀態</code> 的代碼（ 404, 500… ）的 HTTP response，這就是 error response</li>\n<li>Client 端可能會出錯，比如說阻止 request 完成的網路錯誤或 RxJS 拋出的錯誤，這屬於前端的錯誤，這類型的錯誤狀態會是 <code>0</code>，error obejct 的 property 會包含一個 <code>ProgressEvent</code>，他可以提供更多的錯誤信息。</li>\n</ul>\n<p>HttpClient 在其 HttpErrorResponse 中會捕獲這兩種錯誤，可以檢查錯誤的原因，所以將剛剛的 get() 加上錯誤處理</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>, &#123; <span class=\"attr\">observe</span>: <span class=\"string\">&#x27;response&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>)</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res.<span class=\"property\">body</span>[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleError</span>(<span class=\"params\">error: HttpErrorResponse</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error.<span class=\"property\">status</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;An error occurred&#x27;</span>, error.<span class=\"property\">error</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`Back-end returned code <span class=\"subst\">$&#123;error.status&#125;</span>, body was: <span class=\"subst\">$&#123;error.error&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> throwError (<span class=\"string\">&#x27;Something bad happened; Please try again later.&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Retrying-a-failed-request\"><a href=\"#Retrying-a-failed-request\" class=\"headerlink\" title=\"Retrying a failed request\"></a>Retrying a failed request</h2><p>有時候遇到 response 錯誤只是暫時的，可以再試一次說不定就會恢復正常，例如網路中斷就會導致 request 失敗，但是一但網路回歸正常後便可以再次 request，這時就可以使用 RxJS 提供的重試操作符 <code>retry()</code> 將會自動重新 request，次數可以隨意設定</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>, &#123; <span class=\"attr\">observe</span>: <span class=\"string\">&#x27;response&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>),</span><br><span class=\"line\">    <span class=\"title function_\">retry</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res.<span class=\"property\">body</span>[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Sending-data-to-a-server\"><a href=\"#Sending-data-to-a-server\" class=\"headerlink\" title=\"Sending data to a server\"></a>Sending data to a server</h1><p>除了從 server 獲得數據之外，HttpClinet 還支持其他 HTTP method，比如 PUT, POST 和 DELETE，可以使用它們來修改 server 的數據，下面將會做一個 Todo 的範例，UI 會填入代辦事項並將待辦事項寫入 server 中，也可以對他進行更改與刪除。</p>\n<h2 id=\"Post-todo-data-to-server\"><a href=\"#Post-todo-data-to-server\" class=\"headerlink\" title=\"Post todo data to server\"></a>Post todo data to server</h2><p>第一步要建立一個 Todo 的畫面並將在畫面中輸入的內容利用 <code>HttpClient.post</code> 傳遞給 server</p>\n<ol>\n<li><p>首先利用 Angular CLI 創建一個 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component todo-form</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-form.component.ts 中建立 todo 的 form model（記得要在 AppModule 中添加 <code>ReactiveFormsModule</code> 喔）</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  myForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">description</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 todo-form.component.html 中添加輸入元件並綁定 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;myForm&quot;</span> (<span class=\"attr\">submit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-area&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>Title <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;title&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-area&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;description&quot;</span>&gt;</span>Description <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;description&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Add Todo<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png\"></p>\n<ol>\n<li><p>在 todo-form.component.ts 中注入 HttpClient 並新增 post method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  myForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">description</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  id = <span class=\"number\">0</span>;</span><br><span class=\"line\">  httpOptions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">id</span>,</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"property\">value</span>.<span class=\"property\">title</span>,</span><br><span class=\"line\">      <span class=\"attr\">description</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"property\">value</span>.<span class=\"property\">description</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">      .<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;http://localhost:3000/todo&#x27;</span>, body, <span class=\"variable language_\">this</span>.<span class=\"property\">httpOptions</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span>++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 在 onSubmit() 中添加 <code>HttpClient.post</code> method，將 Todo 中的數據傳遞給 Server，這邊新增了一個 property <code>id</code>，用於後面要指定更改或刪除哪一個 todo item，現在點擊畫面中的 Add todo 不會有任何動作，不過可以打開瀏覽器的 Network 確實可以看到有一個 POST 的 method。</p>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png\"></p>\n<h2 id=\"Get-todo-list-from-server\"><a href=\"#Get-todo-list-from-server\" class=\"headerlink\" title=\"Get todo list from server\"></a>Get todo list from server</h2><p>要確認是否確實有將數據傳送給 server，可以使用上面介紹的 <code>HttpClient.get</code> method 取得 todo 的資料</p>\n<ol>\n<li><p>在 todo-form.component.ts 中的 OnInit() 中使用 HttpClient.get 獲得數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>[] = [];                                    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/todo&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo;                                <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於存放從 server 獲得的數據</li>\n<li>(2): 在 ngOnInit 中使用 HttpClient.get 獲得 server 數據並存放在 todoList 中</li>\n</ul>\n</li>\n<li><p>使用 Angular CLI 創建一個 component 用於顯示獲得的 todo 數據</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component todo-list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-list.component.ts 中使用 <code>@Input()</code> 裝飾 property 代表從父層傳遞的數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-list.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-list.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoListComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-list.component.html 中把獲得的 todo 數據顯示在畫面中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let todo of todoList&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-item&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>Title: &#123;&#123; todo.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;desc&quot;</span>&gt;</span>Description: &#123;&#123; todo.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;optionBtn&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>E<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊先新增了兩個 <code>&lt;button&gt;</code> 用於對單一 todo item 進行刪除或更改</p>\n</li>\n<li><p>在 todo-form.component.html 中使用 todo-list 的 select 並使用 property binding 綁定 todo 數據</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-todo-list</span> [<span class=\"attr\">todoList</span>]=<span class=\"string\">&quot;todoList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-todo-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/EgXMfKL.gif\" alt=\"img\"></p>\n<h2 id=\"Delete-todo-item\"><a href=\"#Delete-todo-item\" class=\"headerlink\" title=\"Delete todo item\"></a>Delete todo item</h2><p>在畫面中可以順利看到傳遞給 server 的數據後，接著要對這些數據進行刪除</p>\n<ol>\n<li><p>將 todo-list.component.ts 中新增一個 <code>@Output</code> 用於將點擊刪除事件傳遞給父層，這邊我的設計是將所有 http 動作都放在同一個 component 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-list.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-list.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoListComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() deleteEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onDelete</span>(<span class=\"params\">todoItem: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deleteEvent</span>.<span class=\"title function_\">emit</span>(todoItem.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 這邊向父層傳遞被選中的 todo item 的 id，用於刪除指定 id 的數據</p>\n</li>\n<li><p>在 todo-form.component.ts 中新增 onDelete() method 用於調用 <code>HttpClient.delete</code> method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  httpOptions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"title function_\">onDelete</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">      .<span class=\"title function_\">delete</span>(<span class=\"string\">`http://localhost:3000/todo/<span class=\"subst\">$&#123;id&#125;</span>`</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">httpOptions</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 將被選中的 todo item 的 id 做為參數加在 url 上，讓 server 端可以獲得指定的 Id 並對刪除指定的 todo item。</p>\n</li>\n<li><p>在 todo-form.component.html 中綁定 <code>@Output()</code> 事件</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-todo-list</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t[<span class=\"attr\">todoList</span>]=<span class=\"string\">&quot;todoList&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t(<span class=\"attr\">deleteEvent</span>)=<span class=\"string\">&quot;onDelete($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-todo-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/K8lTVkw.gif\" alt=\"img\"></p>\n<h2 id=\"Put-todo-data-to-update-server\"><a href=\"#Put-todo-data-to-update-server\" class=\"headerlink\" title=\"Put todo data to update server\"></a>Put todo data to update server</h2><p>完成刪除功能後，接著要利用 <code>HttpClient.put</code> method 更改 server 中的 todo 數據，不過要做到這一點首先要先建立一個畫面，用來顯示目前的 todo 內容，對他的內容更改後才能送出 PUT 更新 server 中的數據</p>\n<ol>\n<li><p>利用 Angular CLI 創建一個 component 用於顯示被選中的 todo item 內容</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component edit-panel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 edit-panel.component.ts 中建立 Todo 的 form model</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-edit-panel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./edit-panel.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./edit-panel.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EditPanelComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  myForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">title</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">description</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-list.component.ts 中建立 onEdit() method，他和 onDelete() 一樣傳遞被選中的 Todo id 給父層</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-list.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-list.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoListComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() openPanelEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//... </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"title function_\">onEdit</span>(<span class=\"params\">todoItem: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">openPanelEvent</span>.<span class=\"title function_\">emit</span>(todoItem.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-form.component.ts 中建立 onOpenEditPanel() method，這邊使用 <code>HttpClient.get</code> 獲取被選中的 todo item 數據，這邊多加入一個 property 用於決定是否開啟 edit-panel 畫面</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">todoItem</span>: <span class=\"built_in\">any</span>;                                          <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  isEditPanelOpen = <span class=\"literal\">false</span>;                                <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">onOpenEditPanel</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;                           <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">`http://localhost:3000/todo/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todoItem</span> = todo;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isEditPanelOpen</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於獲得指定的 todo item 數據</li>\n<li>(2): 新增一個 property 用於決定是否開啟 edit-panel 畫面</li>\n<li>(3): 新增一個 method 用於調用 <code>HttpClient.get</code>，這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數回傳指定 id 的數據</li>\n</ul>\n<p> 這邊記得要在 todo-form.component.html 中將 Output event 綁定</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-todo-list</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t[<span class=\"attr\">todoList</span>]=<span class=\"string\">&quot;todoList&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t(<span class=\"attr\">deleteEvent</span>)=<span class=\"string\">&quot;onDelete($event)&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t(<span class=\"attr\">openPanelEvent</span>)=<span class=\"string\">&quot;onOpenEditPanel($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-todo-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>將獲得的 todo 數據透過 property binding 綁定給 edit-panel </p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isEditPanelOpen &amp;&amp; todoItem&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;edit-panel&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-edit-panel</span> [<span class=\"attr\">todoItem</span>]=<span class=\"string\">&quot;todoItem&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-edit-panel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊加上 <code>*ngIf</code> 只有在 isEditPanelOpen 為 true 和 todoItem 有數據時才會顯示畫面</p>\n</li>\n<li><p>由於需要將被選中的 todo 數據顯示在畫面中，所以要在 edit-panel.component.ts 的 ngOnInit() 中使用 <code>setValue</code> 設定表單的預設值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-edit-panel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./edit-panel.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./edit-panel.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EditPanelComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoItem</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"title function_\">setValue</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">todoItem</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/cAovjJr.gif\" alt=\"img\"></p>\n<ol>\n<li><p>和 delete 一樣在 edit-panel.component.ts 中利用 <code>Output()</code>  將更改後的數據傳遞給父層</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-edit-panel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./edit-panel.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./edit-panel.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EditPanelComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() editEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">editEvent</span>.<span class=\"title function_\">emit</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-form.component.ts 中新增一個 method 用於調用 <code>HttpClient.put</code> 將更新的數據傳遞給 server 更新數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  isEditPanelOpen = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">onEdit</span>(<span class=\"params\">todoItem: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">put</span>(<span class=\"string\">`http://localhost:3000/todo/<span class=\"subst\">$&#123;todoItem.id&#125;</span>`</span>, todoItem, <span class=\"variable language_\">this</span>.<span class=\"property\">httpOptions</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isEditPanelOpen</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數更改指定的數據內容</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/qOsOT8n.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了基本的 HTTP 概念與 HTTP method 這是 client 與 server 溝通的方法，可以使用 get 從 server 端獲得數據、可以使用 post 將 client 端的數據傳給 server、可以使用 delete 刪除 server 的數據也可以使用 Put 更改 server 的數據。</p>\n<p>最後介紹了如何利用 Angular 提供的 HttpClient 達成上面提到的所有功能，由於上面提到的範例與官方文檔的不一樣，我是自己寫 back-end server，所以有些地方可能會比較複雜，如果有看不懂的問題可以在下面留言問我喔！</p>\n<p>Angular 的 HTTP 因為篇章也比較長，所以也會拆成兩部分講解，所以明天還會介紹 Angular Http 的一些其他功能與細節，那就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/http#adding-and-updating-headers\">Angular.io - Communicating with backend services using HTTP</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">An overview of HTTP</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">HTTP request methods</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在現代的網頁中絕大部分會需要與 server 互相溝通，無論是從 server 獲取商品的資料用於顯示在畫面中，還是畫面中的設定要儲存回 server 的設定都需與後端 server 互相溝通，Angular 提供了一個 client 端的 HTTP API，那便是 <code>@angular/common/http</code> 中的 <code>HttpClient</code> service class，該怎麼使用就繼續往下看吧!</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/201247675b7AjP33Yf.jpg\"></p>","more":"<h1 id=\"An-overview-of-HTTP\"><a href=\"#An-overview-of-HTTP\" class=\"headerlink\" title=\"An overview of HTTP\"></a>An overview of HTTP</h1><p>HTTP 是一種允許<code>獲得數據</code>（例如 HTML 文檔）的協議，他是一種 client 端與 server 端的協議是數據交換的基礎，這意味著通常 request 是由接收方（ client 端）發起的，從而獲得不同的數據或檔案，從 client 發送的消息稱為 <code>request</code> 而 server 端回傳的數據稱為 <code>response</code>。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767FRlBCLRtNR.png\"></p>\n<h2 id=\"HTTP-request-methods\"><a href=\"#HTTP-request-methods\" class=\"headerlink\" title=\"HTTP request methods\"></a>HTTP request methods</h2><p>HTTP 定義了一組 request method 用於 client 端對 server 端的所有操作，他們分別是</p>\n<ul>\n<li><strong>GET</strong>：GET request 用於<code>請求數據</code></li>\n<li><strong>HEAD</strong>：和 GET request 一樣用於請求數據，但 response 沒有內容</li>\n<li><strong>POST</strong>：用於向指定 server 提交數據，會導致狀態更改或對 server 產稱副作用（更改數據）</li>\n<li><strong>PUT</strong>：用於將有效的數據替換掉目標資源的當前值</li>\n<li><strong>DELETE</strong>：用於刪除指定資源</li>\n<li><strong>CONNECT</strong>：用於建立到目標資源的 server 通道</li>\n<li><strong>OPTION</strong>：用於描述目標資源的通選項</li>\n</ul>\n<h1 id=\"Setup-for-server-communication\"><a href=\"#Setup-for-server-communication\" class=\"headerlink\" title=\"Setup for server communication\"></a>Setup for server communication</h1><p>大概介紹完 HTTP 與 HTTP method 後，接著回到 Angular 的內容，要在 Angular 中使用 HttpClient 之前需要先導入 <code>HttpClientModule</code>，大多數操作都會將他到入到 AppModule 中。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClientModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">HttpClientModule</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [ <span class=\"title class_\">AppComponent</span> ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著可以在需要使用到 httpClient 的地方將它注入到 component 中</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Requesting-data-from-a-server\"><a href=\"#Requesting-data-from-a-server\" class=\"headerlink\" title=\"Requesting data from a server\"></a>Requesting data from a server</h1><p>首先介紹的是使用 HttpClient.get() method 從 server 中獲取數據，這個同步的 method 會發送一個 HTTP request，並在收到 responses 後會返回一個 <code>Observable</code>，responses 的類型會依據 request 中的 <code>observe</code> 和 <code>responseType</code> 決定，他接收兩個參數，一個是 server 的路徑 url 第二個是用於設置 request 的 option object。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">  headers?: <span class=\"title class_\">HttpHeaders</span> | &#123;[<span class=\"attr\">header</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">string</span>[]&#125;,</span><br><span class=\"line\">  observe?: <span class=\"string\">&#x27;body&#x27;</span> | <span class=\"string\">&#x27;events&#x27;</span> | <span class=\"string\">&#x27;response&#x27;</span>,</span><br><span class=\"line\">  params?: <span class=\"title class_\">HttpParams</span>|&#123;[<span class=\"attr\">param</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span> | <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span>&gt;&#125;,</span><br><span class=\"line\">  reportProgress?: <span class=\"built_in\">boolean</span>,</span><br><span class=\"line\">  responseType?: <span class=\"string\">&#x27;arraybuffer&#x27;</span>|<span class=\"string\">&#x27;blob&#x27;</span>|<span class=\"string\">&#x27;json&#x27;</span>|<span class=\"string\">&#x27;text&#x27;</span>,</span><br><span class=\"line\">  withCredentials?: <span class=\"built_in\">boolean</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中重要的是 <code>observe</code> 與 <code>responseType</code>，<code>observe</code> 會決定要返回多少 response，<code>responseType</code> 會指定返回 response 的格式。</p>\n<p>所以如果要接收一個 JSON 形式的數據的話，需要將 <code>get()</code> 的 option 設置為 <code>&#123; observe: &#39;body&#39;, responseType: &#39;json&#39; &#125;</code> ，不過這些選項是預設值就算不加也會傳遞一樣的設置，下面來舉個例子，目標是獲得這一組數據</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;heroesUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;api/heroes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;textfile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets/textfile.txt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2021-09-03&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>在 app.component.ts 中注入 HttpClient service</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  heros!: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 app.component.ts 的 <code>ngOnInit()</code> 中使用 get 獲取數據，這邊我是有建一個 server，如果不想建的話也可以跟官方文檔一樣把假數據放在專案的別的位置</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./app.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  heros!: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 template 中把獲得的數據顯示在上面</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>HeroUrl: &#123;&#123;heros.herosUrl&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>textFile: &#123;&#123;heros.textFile&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>date: &#123;&#123;heros.date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767SQIcmtqBlD.png\"></p>\n<h2 id=\"Requesting-a-typed-response\"><a href=\"#Requesting-a-typed-response\" class=\"headerlink\" title=\"Requesting a typed response\"></a>Requesting a typed response</h2><p>可以構造 HttpClient request 來聲明獲得的 reponse 數據類型，可以更好的對獲得的數據進行處理，收先先定義 responses 的資料型態</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">heroesUrl</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">textfile</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">date</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>將這個資料型態定義給 HttpClient.get() </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">Config</span>[]&gt;(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reading-the-full-response\"><a href=\"#Reading-the-full-response\" class=\"headerlink\" title=\"Reading the full response\"></a>Reading the full response</h2><p>在前面的範例中沒有設定 HttpClient.get() 的 option object，因為他預設就會獲得 <code>JSON</code> 格式的資料，不過有時候 server 會返回特殊的 header 或狀態用於指定某些特殊的條件，可以使用 <code>observe</code> 設定需要獲取完整的數據</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">    .<span class=\"property\">get</span>&lt;<span class=\"title class_\">Config</span>[]&gt;(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>, &#123; <span class=\"attr\">observe</span>: <span class=\"string\">&#x27;response&#x27;</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要獲取完整數據的話，就會連 header, status…. 都會獲得</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767Bqun7G1JtE.png\"></p>\n<h2 id=\"Requesting-non-JSON-data\"><a href=\"#Requesting-non-JSON-data\" class=\"headerlink\" title=\"Requesting non-JSON data\"></a>Requesting non-JSON data</h2><p>除了向上面一樣 get 一組 <code>JSON</code> 型態的檔案之外，還可以隨著後端 server 回傳的數據類型不同 get 的 option 進行操作，比如今天後端傳遞的是一個 <code>string</code> 類型的數據，如果不去設定 request 的 option 的話就會出錯，因為預設你是會獲得 <code>JSON</code> 格式的數據但實際上拿到的卻是 <code>String</code>，這時就需要更改 option</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heroName&#x27;</span>, &#123; <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;text&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res));</span><br></pre></td></tr></table></figure>\n\n<p>將 <code>responseType</code> 更改為 <code>text</code> 代表獲得的 responses 會是 string 形式。</p>\n<h1 id=\"Handling-request-errors\"><a href=\"#Handling-request-errors\" class=\"headerlink\" title=\"Handling request errors\"></a>Handling request errors</h1><p>向 server 發送 request 的行為一定不會每一次都成功，所以當 request 失敗的話 HttpClient 將會返回一個 <code>error object</code> 而不是成功的 response，所以在我們撰寫處理 response 的 method 時也應該要同時加入<code>處理錯誤</code>的動作，所以當發生錯誤時可以獲得<code>失敗的原因</code>，這一方面可以讓我們開發者知道哪裡出了問題，也可以通知使用者發生了錯誤而不是空白畫面給他，甚至某些情況下還得再次發送 request 等等的錯誤處理。</p>\n<h2 id=\"Getting-error-details\"><a href=\"#Getting-error-details\" class=\"headerlink\" title=\"Getting error details\"></a>Getting error details</h2><p>當 request 數據失敗的話，應用程式應該向使用者提供有用的反饋告入使用這發生了什麼事，是不是操作不當或是系統有問題等等，通常必較常會發生兩種錯誤：</p>\n<ul>\n<li>Server 後端可能會拒絕 client 的 request，這時會返回帶有<code>狀態</code> 的代碼（ 404, 500… ）的 HTTP response，這就是 error response</li>\n<li>Client 端可能會出錯，比如說阻止 request 完成的網路錯誤或 RxJS 拋出的錯誤，這屬於前端的錯誤，這類型的錯誤狀態會是 <code>0</code>，error obejct 的 property 會包含一個 <code>ProgressEvent</code>，他可以提供更多的錯誤信息。</li>\n</ul>\n<p>HttpClient 在其 HttpErrorResponse 中會捕獲這兩種錯誤，可以檢查錯誤的原因，所以將剛剛的 get() 加上錯誤處理</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>, &#123; <span class=\"attr\">observe</span>: <span class=\"string\">&#x27;response&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>)</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res.<span class=\"property\">body</span>[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleError</span>(<span class=\"params\">error: HttpErrorResponse</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error.<span class=\"property\">status</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;An error occurred&#x27;</span>, error.<span class=\"property\">error</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`Back-end returned code <span class=\"subst\">$&#123;error.status&#125;</span>, body was: <span class=\"subst\">$&#123;error.error&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> throwError (<span class=\"string\">&#x27;Something bad happened; Please try again later.&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Retrying-a-failed-request\"><a href=\"#Retrying-a-failed-request\" class=\"headerlink\" title=\"Retrying a failed request\"></a>Retrying a failed request</h2><p>有時候遇到 response 錯誤只是暫時的，可以再試一次說不定就會恢復正常，例如網路中斷就會導致 request 失敗，但是一但網路回歸正常後便可以再次 request，這時就可以使用 RxJS 提供的重試操作符 <code>retry()</code> 將會自動重新 request，次數可以隨意設定</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/heros&#x27;</span>, &#123; <span class=\"attr\">observe</span>: <span class=\"string\">&#x27;response&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>),</span><br><span class=\"line\">    <span class=\"title function_\">retry</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">res: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heros</span> = res.<span class=\"property\">body</span>[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Sending-data-to-a-server\"><a href=\"#Sending-data-to-a-server\" class=\"headerlink\" title=\"Sending data to a server\"></a>Sending data to a server</h1><p>除了從 server 獲得數據之外，HttpClinet 還支持其他 HTTP method，比如 PUT, POST 和 DELETE，可以使用它們來修改 server 的數據，下面將會做一個 Todo 的範例，UI 會填入代辦事項並將待辦事項寫入 server 中，也可以對他進行更改與刪除。</p>\n<h2 id=\"Post-todo-data-to-server\"><a href=\"#Post-todo-data-to-server\" class=\"headerlink\" title=\"Post todo data to server\"></a>Post todo data to server</h2><p>第一步要建立一個 Todo 的畫面並將在畫面中輸入的內容利用 <code>HttpClient.post</code> 傳遞給 server</p>\n<ol>\n<li><p>首先利用 Angular CLI 創建一個 component</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component todo-form</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-form.component.ts 中建立 todo 的 form model（記得要在 AppModule 中添加 <code>ReactiveFormsModule</code> 喔）</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  myForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">description</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接著在 todo-form.component.html 中添加輸入元件並綁定 FormControl</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;myForm&quot;</span> (<span class=\"attr\">submit</span>)=<span class=\"string\">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-area&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>Title <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;title&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-area&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;description&quot;</span>&gt;</span>Description <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;description&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Add Todo<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767NnxhXx7B2g.png\"></p>\n<ol>\n<li><p>在 todo-form.component.ts 中注入 HttpClient 並新增 post method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  myForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">description</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  id = <span class=\"number\">0</span>;</span><br><span class=\"line\">  httpOptions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">id</span>,</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"property\">value</span>.<span class=\"property\">title</span>,</span><br><span class=\"line\">      <span class=\"attr\">description</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"property\">value</span>.<span class=\"property\">description</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">      .<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;http://localhost:3000/todo&#x27;</span>, body, <span class=\"variable language_\">this</span>.<span class=\"property\">httpOptions</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span>++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 在 onSubmit() 中添加 <code>HttpClient.post</code> method，將 Todo 中的數據傳遞給 Server，這邊新增了一個 property <code>id</code>，用於後面要指定更改或刪除哪一個 todo item，現在點擊畫面中的 Add todo 不會有任何動作，不過可以打開瀏覽器的 Network 確實可以看到有一個 POST 的 method。</p>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20210905/20124767AVDHOaTtMH.png\"></p>\n<h2 id=\"Get-todo-list-from-server\"><a href=\"#Get-todo-list-from-server\" class=\"headerlink\" title=\"Get todo list from server\"></a>Get todo list from server</h2><p>要確認是否確實有將數據傳送給 server，可以使用上面介紹的 <code>HttpClient.get</code> method 取得 todo 的資料</p>\n<ol>\n<li><p>在 todo-form.component.ts 中的 OnInit() 中使用 HttpClient.get 獲得數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>[] = [];                                    <span class=\"comment\">// (1)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:3000/todo&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo;                                <span class=\"comment\">// (2)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於存放從 server 獲得的數據</li>\n<li>(2): 在 ngOnInit 中使用 HttpClient.get 獲得 server 數據並存放在 todoList 中</li>\n</ul>\n</li>\n<li><p>使用 Angular CLI 創建一個 component 用於顯示獲得的 todo 數據</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component todo-list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-list.component.ts 中使用 <code>@Input()</code> 裝飾 property 代表從父層傳遞的數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-list.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-list.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoListComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-list.component.html 中把獲得的 todo 數據顯示在畫面中</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let todo of todoList&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-item&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>Title: &#123;&#123; todo.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;desc&quot;</span>&gt;</span>Description: &#123;&#123; todo.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;optionBtn&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>E<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊先新增了兩個 <code>&lt;button&gt;</code> 用於對單一 todo item 進行刪除或更改</p>\n</li>\n<li><p>在 todo-form.component.html 中使用 todo-list 的 select 並使用 property binding 綁定 todo 數據</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-todo-list</span> [<span class=\"attr\">todoList</span>]=<span class=\"string\">&quot;todoList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-todo-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/EgXMfKL.gif\" alt=\"img\"></p>\n<h2 id=\"Delete-todo-item\"><a href=\"#Delete-todo-item\" class=\"headerlink\" title=\"Delete todo item\"></a>Delete todo item</h2><p>在畫面中可以順利看到傳遞給 server 的數據後，接著要對這些數據進行刪除</p>\n<ol>\n<li><p>將 todo-list.component.ts 中新增一個 <code>@Output</code> 用於將點擊刪除事件傳遞給父層，這邊我的設計是將所有 http 動作都放在同一個 component 中</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-list.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-list.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoListComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() deleteEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onDelete</span>(<span class=\"params\">todoItem: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deleteEvent</span>.<span class=\"title function_\">emit</span>(todoItem.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 這邊向父層傳遞被選中的 todo item 的 id，用於刪除指定 id 的數據</p>\n</li>\n<li><p>在 todo-form.component.ts 中新增 onDelete() method 用於調用 <code>HttpClient.delete</code> method</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  httpOptions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"title function_\">onDelete</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span></span><br><span class=\"line\">      .<span class=\"title function_\">delete</span>(<span class=\"string\">`http://localhost:3000/todo/<span class=\"subst\">$&#123;id&#125;</span>`</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">httpOptions</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 將被選中的 todo item 的 id 做為參數加在 url 上，讓 server 端可以獲得指定的 Id 並對刪除指定的 todo item。</p>\n</li>\n<li><p>在 todo-form.component.html 中綁定 <code>@Output()</code> 事件</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-todo-list</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t[<span class=\"attr\">todoList</span>]=<span class=\"string\">&quot;todoList&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t(<span class=\"attr\">deleteEvent</span>)=<span class=\"string\">&quot;onDelete($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-todo-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/K8lTVkw.gif\" alt=\"img\"></p>\n<h2 id=\"Put-todo-data-to-update-server\"><a href=\"#Put-todo-data-to-update-server\" class=\"headerlink\" title=\"Put todo data to update server\"></a>Put todo data to update server</h2><p>完成刪除功能後，接著要利用 <code>HttpClient.put</code> method 更改 server 中的 todo 數據，不過要做到這一點首先要先建立一個畫面，用來顯示目前的 todo 內容，對他的內容更改後才能送出 PUT 更新 server 中的數據</p>\n<ol>\n<li><p>利用 Angular CLI 創建一個 component 用於顯示被選中的 todo item 內容</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component edit-panel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 edit-panel.component.ts 中建立 Todo 的 form model</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-edit-panel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./edit-panel.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./edit-panel.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EditPanelComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  myForm = <span class=\"variable language_\">this</span>.<span class=\"property\">fb</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: [<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">title</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">description</span>: [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-list.component.ts 中建立 onEdit() method，他和 onDelete() 一樣傳遞被選中的 Todo id 給父層</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-list.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-list.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoListComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoList</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() openPanelEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//... </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"title function_\">onEdit</span>(<span class=\"params\">todoItem: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">openPanelEvent</span>.<span class=\"title function_\">emit</span>(todoItem.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-form.component.ts 中建立 onOpenEditPanel() method，這邊使用 <code>HttpClient.get</code> 獲取被選中的 todo item 數據，這邊多加入一個 property 用於決定是否開啟 edit-panel 畫面</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">todoItem</span>: <span class=\"built_in\">any</span>;                                          <span class=\"comment\">// (1)</span></span><br><span class=\"line\">  isEditPanelOpen = <span class=\"literal\">false</span>;                                <span class=\"comment\">// (2)</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">onOpenEditPanel</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;                           <span class=\"comment\">// (3)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">`http://localhost:3000/todo/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todoItem</span> = todo;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isEditPanelOpen</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(1): 新增一個 property 用於獲得指定的 todo item 數據</li>\n<li>(2): 新增一個 property 用於決定是否開啟 edit-panel 畫面</li>\n<li>(3): 新增一個 method 用於調用 <code>HttpClient.get</code>，這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數回傳指定 id 的數據</li>\n</ul>\n<p> 這邊記得要在 todo-form.component.html 中將 Output event 綁定</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;todo-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-todo-list</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t[<span class=\"attr\">todoList</span>]=<span class=\"string\">&quot;todoList&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t(<span class=\"attr\">deleteEvent</span>)=<span class=\"string\">&quot;onDelete($event)&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t(<span class=\"attr\">openPanelEvent</span>)=<span class=\"string\">&quot;onOpenEditPanel($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-todo-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>將獲得的 todo 數據透過 property binding 綁定給 edit-panel </p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;isEditPanelOpen &amp;&amp; todoItem&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;edit-panel&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-edit-panel</span> [<span class=\"attr\">todoItem</span>]=<span class=\"string\">&quot;todoItem&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-edit-panel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 這邊加上 <code>*ngIf</code> 只有在 isEditPanelOpen 為 true 和 todoItem 有數據時才會顯示畫面</p>\n</li>\n<li><p>由於需要將被選中的 todo 數據顯示在畫面中，所以要在 edit-panel.component.ts 的 ngOnInit() 中使用 <code>setValue</code> 設定表單的預設值</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-edit-panel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./edit-panel.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./edit-panel.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EditPanelComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">todoItem</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"title function_\">setValue</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">todoItem</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://i.imgur.com/cAovjJr.gif\" alt=\"img\"></p>\n<ol>\n<li><p>和 delete 一樣在 edit-panel.component.ts 中利用 <code>Output()</code>  將更改後的數據傳遞給父層</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span>, <span class=\"title class_\">Input</span>, <span class=\"title class_\">Output</span>, <span class=\"title class_\">EventEmitter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-edit-panel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./edit-panel.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./edit-panel.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EditPanelComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() editEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">onSubmit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">editEvent</span>.<span class=\"title function_\">emit</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myForm</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 todo-form.component.ts 中新增一個 method 用於調用 <code>HttpClient.put</code> 將更新的數據傳遞給 server 更新數據</p>\n <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormBuilder</span>, <span class=\"title class_\">Validators</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span>, <span class=\"title class_\">HttpHeaders</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-todo-form&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./todo-form.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./todo-form.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoFormComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  isEditPanelOpen = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb: FormBuilder, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">onEdit</span>(<span class=\"params\">todoItem: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"title function_\">put</span>(<span class=\"string\">`http://localhost:3000/todo/<span class=\"subst\">$&#123;todoItem.id&#125;</span>`</span>, todoItem, <span class=\"variable language_\">this</span>.<span class=\"property\">httpOptions</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">todo: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todoList</span> = todo;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isEditPanelOpen</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 這邊和 delete 一樣將 id 傳遞給 url 做為參數，server 會利用 url 的參數更改指定的數據內容</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/qOsOT8n.gif\" alt=\"img\"></p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了基本的 HTTP 概念與 HTTP method 這是 client 與 server 溝通的方法，可以使用 get 從 server 端獲得數據、可以使用 post 將 client 端的數據傳給 server、可以使用 delete 刪除 server 的數據也可以使用 Put 更改 server 的數據。</p>\n<p>最後介紹了如何利用 Angular 提供的 HttpClient 達成上面提到的所有功能，由於上面提到的範例與官方文檔的不一樣，我是自己寫 back-end server，所以有些地方可能會比較複雜，如果有看不懂的問題可以在下面留言問我喔！</p>\n<p>Angular 的 HTTP 因為篇章也比較長，所以也會拆成兩部分講解，所以明天還會介紹 Angular Http 的一些其他功能與細節，那就明天見吧！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://angular.io/guide/http#adding-and-updating-headers\">Angular.io - Communicating with backend services using HTTP</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">An overview of HTTP</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">HTTP request methods</a></li>\n</ul>"},{"title":"番外篇：What is Dependency Injection?","date":"2021-09-18T06:53:32.000Z","_content":"\n在 Angular 中 Dependency Injection 是個非常大的特點，Dependency Injection 是一種設計模式，主要是用於將相關的程式由`外部注入進 component 中`而不是在 component 中創建以實現`解耦`的目的，可以有效地減低維護的複雜度。\n\n![img](https://medicalweightlosscentersofamerica.com/wp-content/uploads/2021/06/HowLongDoVitaminB12InjectionsLast.jpg)\n\n<!-- more -->\n\n\n# What is Coupling(藕合)\nCoupling(藕合) 又可以稱為 Dependency(依賴)，簡單來說就是程式與程式之間互相具有依賴性，在一個專案中如果彼此的依賴性越高則代表`越難維護`。\n\n一般在開發專案時會將功能相關的部分結合起來作為一個 Class 以提供給其他地方使用，當某個地方需要使用到這個 Class 實則需要再對應的地方使用關鍵字 `new` 產生一個新的物件，這樣才可以使用到裡面的 `method` 或 `property`，來舉個例子某一個國小的教室 (ClassRoom) 需要一個老師，老師的功能有 `Teaching`, `Test`, `QA` 這三種功能。\n```javascript\nclass MathTeacher {\n  constructor() { }\n\n  Teaching() {\n    console.log('Teach Math');\n  }\n\n  Test() {\n    console.log('Test 1 + 1 = 2');\n  }\n\n  QA() {\n    console.log('QA Time');\n  }\n}\n```\n而現在的情境是在這個教室中有一個數學老師在執行這三種功能並執行它\n```javascript\nclass ClassRoom {\n  mathTeach = new MathTeacher();\n\n  ClassTeaching() {\n    this.mathTeach.Teaching();\n  }\n\n  ClassTest() {\n    this.mathTeach.Test();\n  }\n\n  ClassQA() {\n    this.mathTeach.QA();\n  }\n}\n\nroom = new ClassRoom();\nroom.ClassTeaching();\nroom.ClassTest();\nroom.ClassQA();\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png)\n\n雖然這種寫法可以完成目標但如果今天需要將數學老師變為英文老師的話，那就需要將 `mathTeach = new MathTeacher();` 這邊更改為 `englishTeacher = new EnglishTeacher();`，這種因為一個程式變動而導致另一個程式也需要隨之修改的行為就稱為`高藕合(Coupling)`，如果專案很大的話這種高耦合會讓專案的維護與開發變得越來越困難。\n\n# Dependency Injection (依賴注入)\n為了減輕每個程式中互相的依賴，這時就誕生了 Dependency Injection 這種設計模式，他主要的目的是通過將有關連的程式利用注入的方式由外部注入至需要的程式，而不是像過去一樣在內部創建，而達成 DI 有兩種方法\n##  使用建構子 (Contructor) \n首先跟剛剛一樣，新增一個Teacher 的 class (老師類別)，將老師的技能 (Methods) 寫入，可以隨需求更改教學的內容。\n```typescript\nclass Teacher {\n  constructor() { }\n\n  Teaching() {\n    console.log('Teach Math');\n  }\n\n  Test() {\n    console.log('Test 1 + 1 = 2');\n  }\n\n  QA() {\n    console.log('QA Time');\n  }\n}\n```\n接著對 ClassRoom Class 中修改 constructor 讓需要授課的老師 class 由外部注入進來\n```typescript\nclass ClassRoom {\n  constructor(private teacher: Teacher) {}  // (1)\n\n  ClassTeaching() {\n    this.teacher.Teaching();\n  }\n\n  ClassTest() {\n    this.teacher.Test();\n  }\n\n  ClassQA() {\n    this.teacher.QA();\n  }\n}\n```\n- (1): 利用 constructor 將原先依賴的程式注入進來\n\n接著使用這個新的 Room Class\n```typescript\nconst teach = new Teacher();         // (1)\nconst room = new ClassRoom(teach);   // (2)\n\nroom.ClassTeaching();\nroom.ClassTest();\nroom.ClassQA();\n```\n- (1): 在外部創建需要的 Class\n- (2): 將需要的 Class 作為參數傳入 ClassRoom Class 中（注入）\n\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png)\n\n## 使用 Setter\n除了在 constructor 中宣告注入的 Class 之外，還可以利用 `setter` 做到相同的功能。\n```typescript\nclass ClassRoom {\n    private _teacher!: Teacher\n    constructor() {}\n\n    set setTeacher(teacher: Teacher) {   // (1)\n        this._teacher = teacher;\n    }\n\n    ClassTeaching() {\n        this._teacher.Teaching();\n    }\n\n    ClassTest() {\n        this._teacher.Test();\n    }\n\n    ClassQA() {\n        this._teacher.QA();\n    }\n}\n```\n- (1): 創建一個 `setter` 用於將外部依賴的 Class 注入進來\n\n```typescript\nconst teach = new Teacher();     // (1)\nconst room = new ClassRoom();    // (2)\nroom.setTeacher = teach;         // (3)\n\nroom.ClassTeaching();\nroom.ClassTest();\nroom.ClassQA();\n```\n- (1): 在外部創建需要的 Class\n- (2): 創建需要的 Class\n- (3): 利用 `ClassRoom` 中的 `setter` 將外部依賴的 Class (Teacher) 注入\n\n當使用了 Dependency Injection 這種設計模式後，你想要從數學老師變更為英文老師的話，只需要在 `Teacher` Class 中更改教學方式就好，其他都不用變就可以達到目的，可以打幅度的減低維護的成本\n\n```typescript\nclass Teacher {\n  constructor() {}\n\n  Teaching() {\n    console.log(\"Teach English\");\n  }\n\n  Test() {\n    console.log(\"Test A, B, C\");\n  }\n\n  QA() {\n    console.log(\"QA English Time\");\n  }\n}\n```\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png)\n\n# Dependency Inversion Principle (依賴反轉)\n> Dependency Inversion Principle：依賴反轉，又稱為依賴反向或依賴倒轉\n\n當專案越來越大的時候，就需要比 Dependency Injection 更有彈性的設計模式的出現，接著我們把上面的例子改一下，現在我們從一間教室變成多間，一位老師也變成多位老師且每個老師都用相同的方法但不同的內容教課，可能想一想就會覺得非常的複雜，不過沒關係我們可以把他整理一下\n1. 有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）\n2. 雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\n3. 將每位老師分配到不同的教室中\n4. 每間教室的老師都用著相同的教學模式\n\n## 有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）\n要每一個 Class 都有著相同的格式的最好方法就是建立一個 interface 去規定需要哪些教學方式（ method ）\n```typescript\ninterface NormalSchool {\n    Teaching: () => void;  // 教學\n    Test: () => void;      // 考試\n    QA: () => void;        // 提問\n}\n```\n\n## 雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\n可以建立多個不同老師 ( Class )，透過 `implements` 將 `interface` 讓每個老師 ( Class ) 有相同的教學模式 ( methods )。\n1. 數學老師\n```typescript\nclass MathTeacher implements NormalSchool {\n    Teaching() {\n        console.log('Teach Math');\n    }\n\n    Test() {\n        console.log('Test 1 + 1 = 2');\n    }\n\n    QA() {\n        console.log('Math QA Time!')\n    }\n}\n```\n2. 英文老師\n```typescript\nclass EnglishTeacher implements NormalSchool {\n    Teaching() {\n        console.log('Teach English');\n    }\n\n    Test() {\n        console.log('Test A, B, C, D');\n    }\n\n    QA() {\n        console.log('English QA Time!')\n    }\n}\n```\n3. Javascript 老師\n```typescript\nclass JavascriptTeacher implements NormalSchool {\n    Teaching() {\n        console.log('Teach Javascript');\n    }\n\n    Test() {\n        console.log('Test program');\n    }\n\n    QA() {\n        console.log('program QA Time!')\n    }\n}\n```\n\n## 將每位老師分配到不同的教室中\n修改 ClassRoom 我們把外部注入的對象這定為只接受去過師範大學的老師才可以進入這個教室\n```typescript\nclass ClassRoom {\n    constructor(private _teacher: NormalSchool) {}   // 外部注入的對象必須是 NormalSchool\n\n    classTeaching() {\n        this._teacher.Teaching();\n    }\n\n    classTest() {\n        this._teacher.Test();\n    }\n\n    classQA() {\n        this._teacher.QA();\n    }\n}\n```\n\n## 將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\n3間教室指定老師使用師範大學的教學方式，去教自己專業科目的內容。\n\n```typescript  \nconst mathTeacher = new MathTeacher();                 // Create math teacher\nconst englishTeacher = new EnglishTeacher();           // Create english teacher\nconst javascriptTeacher = new JavascriptTeacher();     // Create javascript teacher\n\nconst room1 = new ClassRoom(mathTeacher);              // 將數學老師放入教室 1\nconst room2 = new ClassRoom(englishTeacher);           // 將英文老師放入教室 2\nconst room3 = new ClassRoom(javascriptTeacher);        // 將 Javascript 老師放入教室 3\n\nroom1.classTeaching();\nroom2.classTest();\nroom3.classQA();\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png)\n\n上面的結果可以發現每間教室可以接受不同的老師，只要是從師範大學中出來的 ( implements NormalSchool ) 就可已放入，並且每個不同的老師都有著相同的教學方式 ( methods ) 但教授的內容卻是不同的，之後如果某個教室需要更換老師或是需要新增一個新的老師，其他部分就不需要更改也不會受到影響，這就是 `Dependency Inversion Principle`。\n\n# 結論\n本章介紹了什麼是 Dependency Injection 的概念與在 Typescript 中如何實現，在我剛接觸 Angular 的時候對於 Dependency Injection 來說可以說是一頭霧水，只知道只要在 Constructor 裡面宣告就可以用了，但根本不知道這麼做的目的是什麼，直到我去看了 Jun 大大對於 Dependency Injection 的一些概念與舉例所以才比較明白是什麼，不過 Jun 大大的文章是用 Java 寫的，所以本章算是把 Jun 大大的文轉換為 Typescript 做個紀錄，大家可以去看 Jun 大大原本的文章或是其他文章，都寫得非常好！\n\n# Reference\n- [淺談Coupling 耦合, Dependency Injection 依賴注入及Dependency Inversion Principle 依賴反轉。](https://medium.com/appxtech/%E6%B7%BA%E8%AB%87coupling-%E8%80%A6%E5%90%88-dependency-injection-%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5%E5%8F%8Adependency-inversion-principle-%E4%BE%9D%E8%B3%B4%E5%8F%8D%E8%BD%89-b2ae7f746383)\n- [Top 5 TypeScript dependency injection containers](https://blog.logrocket.com/top-five-typescript-dependency-injection-containers/)","source":"_posts/Angular/angular-dependencyInjection.md","raw":"---\ntitle: 番外篇：What is Dependency Injection?\ndate: 2021-09-18 14:53:32\ntags:\n- Angular\n- Front-end\n- Typescript\n- Dependency Injection\n\ncategories:\n- 2021 鐵人賽\n---\n\n在 Angular 中 Dependency Injection 是個非常大的特點，Dependency Injection 是一種設計模式，主要是用於將相關的程式由`外部注入進 component 中`而不是在 component 中創建以實現`解耦`的目的，可以有效地減低維護的複雜度。\n\n![img](https://medicalweightlosscentersofamerica.com/wp-content/uploads/2021/06/HowLongDoVitaminB12InjectionsLast.jpg)\n\n<!-- more -->\n\n\n# What is Coupling(藕合)\nCoupling(藕合) 又可以稱為 Dependency(依賴)，簡單來說就是程式與程式之間互相具有依賴性，在一個專案中如果彼此的依賴性越高則代表`越難維護`。\n\n一般在開發專案時會將功能相關的部分結合起來作為一個 Class 以提供給其他地方使用，當某個地方需要使用到這個 Class 實則需要再對應的地方使用關鍵字 `new` 產生一個新的物件，這樣才可以使用到裡面的 `method` 或 `property`，來舉個例子某一個國小的教室 (ClassRoom) 需要一個老師，老師的功能有 `Teaching`, `Test`, `QA` 這三種功能。\n```javascript\nclass MathTeacher {\n  constructor() { }\n\n  Teaching() {\n    console.log('Teach Math');\n  }\n\n  Test() {\n    console.log('Test 1 + 1 = 2');\n  }\n\n  QA() {\n    console.log('QA Time');\n  }\n}\n```\n而現在的情境是在這個教室中有一個數學老師在執行這三種功能並執行它\n```javascript\nclass ClassRoom {\n  mathTeach = new MathTeacher();\n\n  ClassTeaching() {\n    this.mathTeach.Teaching();\n  }\n\n  ClassTest() {\n    this.mathTeach.Test();\n  }\n\n  ClassQA() {\n    this.mathTeach.QA();\n  }\n}\n\nroom = new ClassRoom();\nroom.ClassTeaching();\nroom.ClassTest();\nroom.ClassQA();\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png)\n\n雖然這種寫法可以完成目標但如果今天需要將數學老師變為英文老師的話，那就需要將 `mathTeach = new MathTeacher();` 這邊更改為 `englishTeacher = new EnglishTeacher();`，這種因為一個程式變動而導致另一個程式也需要隨之修改的行為就稱為`高藕合(Coupling)`，如果專案很大的話這種高耦合會讓專案的維護與開發變得越來越困難。\n\n# Dependency Injection (依賴注入)\n為了減輕每個程式中互相的依賴，這時就誕生了 Dependency Injection 這種設計模式，他主要的目的是通過將有關連的程式利用注入的方式由外部注入至需要的程式，而不是像過去一樣在內部創建，而達成 DI 有兩種方法\n##  使用建構子 (Contructor) \n首先跟剛剛一樣，新增一個Teacher 的 class (老師類別)，將老師的技能 (Methods) 寫入，可以隨需求更改教學的內容。\n```typescript\nclass Teacher {\n  constructor() { }\n\n  Teaching() {\n    console.log('Teach Math');\n  }\n\n  Test() {\n    console.log('Test 1 + 1 = 2');\n  }\n\n  QA() {\n    console.log('QA Time');\n  }\n}\n```\n接著對 ClassRoom Class 中修改 constructor 讓需要授課的老師 class 由外部注入進來\n```typescript\nclass ClassRoom {\n  constructor(private teacher: Teacher) {}  // (1)\n\n  ClassTeaching() {\n    this.teacher.Teaching();\n  }\n\n  ClassTest() {\n    this.teacher.Test();\n  }\n\n  ClassQA() {\n    this.teacher.QA();\n  }\n}\n```\n- (1): 利用 constructor 將原先依賴的程式注入進來\n\n接著使用這個新的 Room Class\n```typescript\nconst teach = new Teacher();         // (1)\nconst room = new ClassRoom(teach);   // (2)\n\nroom.ClassTeaching();\nroom.ClassTest();\nroom.ClassQA();\n```\n- (1): 在外部創建需要的 Class\n- (2): 將需要的 Class 作為參數傳入 ClassRoom Class 中（注入）\n\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png)\n\n## 使用 Setter\n除了在 constructor 中宣告注入的 Class 之外，還可以利用 `setter` 做到相同的功能。\n```typescript\nclass ClassRoom {\n    private _teacher!: Teacher\n    constructor() {}\n\n    set setTeacher(teacher: Teacher) {   // (1)\n        this._teacher = teacher;\n    }\n\n    ClassTeaching() {\n        this._teacher.Teaching();\n    }\n\n    ClassTest() {\n        this._teacher.Test();\n    }\n\n    ClassQA() {\n        this._teacher.QA();\n    }\n}\n```\n- (1): 創建一個 `setter` 用於將外部依賴的 Class 注入進來\n\n```typescript\nconst teach = new Teacher();     // (1)\nconst room = new ClassRoom();    // (2)\nroom.setTeacher = teach;         // (3)\n\nroom.ClassTeaching();\nroom.ClassTest();\nroom.ClassQA();\n```\n- (1): 在外部創建需要的 Class\n- (2): 創建需要的 Class\n- (3): 利用 `ClassRoom` 中的 `setter` 將外部依賴的 Class (Teacher) 注入\n\n當使用了 Dependency Injection 這種設計模式後，你想要從數學老師變更為英文老師的話，只需要在 `Teacher` Class 中更改教學方式就好，其他都不用變就可以達到目的，可以打幅度的減低維護的成本\n\n```typescript\nclass Teacher {\n  constructor() {}\n\n  Teaching() {\n    console.log(\"Teach English\");\n  }\n\n  Test() {\n    console.log(\"Test A, B, C\");\n  }\n\n  QA() {\n    console.log(\"QA English Time\");\n  }\n}\n```\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png)\n\n# Dependency Inversion Principle (依賴反轉)\n> Dependency Inversion Principle：依賴反轉，又稱為依賴反向或依賴倒轉\n\n當專案越來越大的時候，就需要比 Dependency Injection 更有彈性的設計模式的出現，接著我們把上面的例子改一下，現在我們從一間教室變成多間，一位老師也變成多位老師且每個老師都用相同的方法但不同的內容教課，可能想一想就會覺得非常的複雜，不過沒關係我們可以把他整理一下\n1. 有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）\n2. 雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\n3. 將每位老師分配到不同的教室中\n4. 每間教室的老師都用著相同的教學模式\n\n## 有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）\n要每一個 Class 都有著相同的格式的最好方法就是建立一個 interface 去規定需要哪些教學方式（ method ）\n```typescript\ninterface NormalSchool {\n    Teaching: () => void;  // 教學\n    Test: () => void;      // 考試\n    QA: () => void;        // 提問\n}\n```\n\n## 雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\n可以建立多個不同老師 ( Class )，透過 `implements` 將 `interface` 讓每個老師 ( Class ) 有相同的教學模式 ( methods )。\n1. 數學老師\n```typescript\nclass MathTeacher implements NormalSchool {\n    Teaching() {\n        console.log('Teach Math');\n    }\n\n    Test() {\n        console.log('Test 1 + 1 = 2');\n    }\n\n    QA() {\n        console.log('Math QA Time!')\n    }\n}\n```\n2. 英文老師\n```typescript\nclass EnglishTeacher implements NormalSchool {\n    Teaching() {\n        console.log('Teach English');\n    }\n\n    Test() {\n        console.log('Test A, B, C, D');\n    }\n\n    QA() {\n        console.log('English QA Time!')\n    }\n}\n```\n3. Javascript 老師\n```typescript\nclass JavascriptTeacher implements NormalSchool {\n    Teaching() {\n        console.log('Teach Javascript');\n    }\n\n    Test() {\n        console.log('Test program');\n    }\n\n    QA() {\n        console.log('program QA Time!')\n    }\n}\n```\n\n## 將每位老師分配到不同的教室中\n修改 ClassRoom 我們把外部注入的對象這定為只接受去過師範大學的老師才可以進入這個教室\n```typescript\nclass ClassRoom {\n    constructor(private _teacher: NormalSchool) {}   // 外部注入的對象必須是 NormalSchool\n\n    classTeaching() {\n        this._teacher.Teaching();\n    }\n\n    classTest() {\n        this._teacher.Test();\n    }\n\n    classQA() {\n        this._teacher.QA();\n    }\n}\n```\n\n## 將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\n3間教室指定老師使用師範大學的教學方式，去教自己專業科目的內容。\n\n```typescript  \nconst mathTeacher = new MathTeacher();                 // Create math teacher\nconst englishTeacher = new EnglishTeacher();           // Create english teacher\nconst javascriptTeacher = new JavascriptTeacher();     // Create javascript teacher\n\nconst room1 = new ClassRoom(mathTeacher);              // 將數學老師放入教室 1\nconst room2 = new ClassRoom(englishTeacher);           // 將英文老師放入教室 2\nconst room3 = new ClassRoom(javascriptTeacher);        // 將 Javascript 老師放入教室 3\n\nroom1.classTeaching();\nroom2.classTest();\nroom3.classQA();\n```\n\n![https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png](https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png)\n\n上面的結果可以發現每間教室可以接受不同的老師，只要是從師範大學中出來的 ( implements NormalSchool ) 就可已放入，並且每個不同的老師都有著相同的教學方式 ( methods ) 但教授的內容卻是不同的，之後如果某個教室需要更換老師或是需要新增一個新的老師，其他部分就不需要更改也不會受到影響，這就是 `Dependency Inversion Principle`。\n\n# 結論\n本章介紹了什麼是 Dependency Injection 的概念與在 Typescript 中如何實現，在我剛接觸 Angular 的時候對於 Dependency Injection 來說可以說是一頭霧水，只知道只要在 Constructor 裡面宣告就可以用了，但根本不知道這麼做的目的是什麼，直到我去看了 Jun 大大對於 Dependency Injection 的一些概念與舉例所以才比較明白是什麼，不過 Jun 大大的文章是用 Java 寫的，所以本章算是把 Jun 大大的文轉換為 Typescript 做個紀錄，大家可以去看 Jun 大大原本的文章或是其他文章，都寫得非常好！\n\n# Reference\n- [淺談Coupling 耦合, Dependency Injection 依賴注入及Dependency Inversion Principle 依賴反轉。](https://medium.com/appxtech/%E6%B7%BA%E8%AB%87coupling-%E8%80%A6%E5%90%88-dependency-injection-%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5%E5%8F%8Adependency-inversion-principle-%E4%BE%9D%E8%B3%B4%E5%8F%8D%E8%BD%89-b2ae7f746383)\n- [Top 5 TypeScript dependency injection containers](https://blog.logrocket.com/top-five-typescript-dependency-injection-containers/)","slug":"Angular/angular-dependencyInjection","published":1,"updated":"2022-02-16T03:30:02.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzqs6be4001n95w3hv4u1auk","content":"<p>在 Angular 中 Dependency Injection 是個非常大的特點，Dependency Injection 是一種設計模式，主要是用於將相關的程式由<code>外部注入進 component 中</code>而不是在 component 中創建以實現<code>解耦</code>的目的，可以有效地減低維護的複雜度。</p>\n<p><img src=\"https://medicalweightlosscentersofamerica.com/wp-content/uploads/2021/06/HowLongDoVitaminB12InjectionsLast.jpg\" alt=\"img\"></p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"What-is-Coupling-藕合\"><a href=\"#What-is-Coupling-藕合\" class=\"headerlink\" title=\"What is Coupling(藕合)\"></a>What is Coupling(藕合)</h1><p>Coupling(藕合) 又可以稱為 Dependency(依賴)，簡單來說就是程式與程式之間互相具有依賴性，在一個專案中如果彼此的依賴性越高則代表<code>越難維護</code>。</p>\n<p>一般在開發專案時會將功能相關的部分結合起來作為一個 Class 以提供給其他地方使用，當某個地方需要使用到這個 Class 實則需要再對應的地方使用關鍵字 <code>new</code> 產生一個新的物件，這樣才可以使用到裡面的 <code>method</code> 或 <code>property</code>，來舉個例子某一個國小的教室 (ClassRoom) 需要一個老師，老師的功能有 <code>Teaching</code>, <code>Test</code>, <code>QA</code> 這三種功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MathTeacher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Math&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test 1 + 1 = 2&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;QA Time&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而現在的情境是在這個教室中有一個數學老師在執行這三種功能並執行它</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">  mathTeach = <span class=\"keyword\">new</span> <span class=\"title class_\">MathTeacher</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTeaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mathTeach</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTest</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mathTeach</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassQA</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mathTeach</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">room = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTeaching</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTest</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassQA</span>();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\"></p>\n<p>雖然這種寫法可以完成目標但如果今天需要將數學老師變為英文老師的話，那就需要將 <code>mathTeach = new MathTeacher();</code> 這邊更改為 <code>englishTeacher = new EnglishTeacher();</code>，這種因為一個程式變動而導致另一個程式也需要隨之修改的行為就稱為<code>高藕合(Coupling)</code>，如果專案很大的話這種高耦合會讓專案的維護與開發變得越來越困難。</p>\n<h1 id=\"Dependency-Injection-依賴注入\"><a href=\"#Dependency-Injection-依賴注入\" class=\"headerlink\" title=\"Dependency Injection (依賴注入)\"></a>Dependency Injection (依賴注入)</h1><p>為了減輕每個程式中互相的依賴，這時就誕生了 Dependency Injection 這種設計模式，他主要的目的是通過將有關連的程式利用注入的方式由外部注入至需要的程式，而不是像過去一樣在內部創建，而達成 DI 有兩種方法</p>\n<h2 id=\"使用建構子-Contructor\"><a href=\"#使用建構子-Contructor\" class=\"headerlink\" title=\"使用建構子 (Contructor)\"></a>使用建構子 (Contructor)</h2><p>首先跟剛剛一樣，新增一個Teacher 的 class (老師類別)，將老師的技能 (Methods) 寫入，可以隨需求更改教學的內容。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Math&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test 1 + 1 = 2&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;QA Time&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著對 ClassRoom Class 中修改 constructor 讓需要授課的老師 class 由外部注入進來</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> teacher: Teacher</span>) &#123;&#125;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTeaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">teacher</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTest</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">teacher</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassQA</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">teacher</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 利用 constructor 將原先依賴的程式注入進來</li>\n</ul>\n<p>接著使用這個新的 Room Class</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> teach = <span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>();         <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(teach);   <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">room.<span class=\"title class_\">ClassTeaching</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTest</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassQA</span>();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 在外部創建需要的 Class</li>\n<li>(2): 將需要的 Class 作為參數傳入 ClassRoom Class 中（注入）</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\"></p>\n<h2 id=\"使用-Setter\"><a href=\"#使用-Setter\" class=\"headerlink\" title=\"使用 Setter\"></a>使用 Setter</h2><p>除了在 constructor 中宣告注入的 Class 之外，還可以利用 <code>setter</code> 做到相同的功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> _teacher!: <span class=\"title class_\">Teacher</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">setTeacher</span>(<span class=\"params\">teacher: Teacher</span>) &#123;   <span class=\"comment\">// (1)</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span> = teacher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">ClassTeaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">ClassTest</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">ClassQA</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 創建一個 <code>setter</code> 用於將外部依賴的 Class 注入進來</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> teach = <span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>();     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>();    <span class=\"comment\">// (2)</span></span><br><span class=\"line\">room.<span class=\"property\">setTeacher</span> = teach;         <span class=\"comment\">// (3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">room.<span class=\"title class_\">ClassTeaching</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTest</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassQA</span>();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 在外部創建需要的 Class</li>\n<li>(2): 創建需要的 Class</li>\n<li>(3): 利用 <code>ClassRoom</code> 中的 <code>setter</code> 將外部依賴的 Class (Teacher) 注入</li>\n</ul>\n<p>當使用了 Dependency Injection 這種設計模式後，你想要從數學老師變更為英文老師的話，只需要在 <code>Teacher</code> Class 中更改教學方式就好，其他都不用變就可以達到目的，可以打幅度的減低維護的成本</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Teach English&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Test A, B, C&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;QA English Time&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png\"></p>\n<h1 id=\"Dependency-Inversion-Principle-依賴反轉\"><a href=\"#Dependency-Inversion-Principle-依賴反轉\" class=\"headerlink\" title=\"Dependency Inversion Principle (依賴反轉)\"></a>Dependency Inversion Principle (依賴反轉)</h1><blockquote>\n<p>Dependency Inversion Principle：依賴反轉，又稱為依賴反向或依賴倒轉</p>\n</blockquote>\n<p>當專案越來越大的時候，就需要比 Dependency Injection 更有彈性的設計模式的出現，接著我們把上面的例子改一下，現在我們從一間教室變成多間，一位老師也變成多位老師且每個老師都用相同的方法但不同的內容教課，可能想一想就會覺得非常的複雜，不過沒關係我們可以把他整理一下</p>\n<ol>\n<li>有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）</li>\n<li>雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣</li>\n<li>將每位老師分配到不同的教室中</li>\n<li>每間教室的老師都用著相同的教學模式</li>\n</ol>\n<h2 id=\"有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣-（-每個-Class-中有著相同的-method-）\"><a href=\"#有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣-（-每個-Class-中有著相同的-method-）\" class=\"headerlink\" title=\"有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）\"></a>有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）</h2><p>要每一個 Class 都有著相同的格式的最好方法就是建立一個 interface 去規定需要哪些教學方式（ method ）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;  <span class=\"comment\">// 教學</span></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;      <span class=\"comment\">// 考試</span></span><br><span class=\"line\">    <span class=\"attr\">QA</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;        <span class=\"comment\">// 提問</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\"><a href=\"#雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\" class=\"headerlink\" title=\"雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\"></a>雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣</h2><p>可以建立多個不同老師 ( Class )，透過 <code>implements</code> 將 <code>interface</code> 讓每個老師 ( Class ) 有相同的教學模式 ( methods )。</p>\n<ol>\n<li>數學老師<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MathTeacher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Math&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test 1 + 1 = 2&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Math QA Time!&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>英文老師<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EnglishTeacher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach English&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test A, B, C, D&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;English QA Time!&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Javascript 老師<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JavascriptTeacher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Javascript&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test program&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;program QA Time!&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"將每位老師分配到不同的教室中\"><a href=\"#將每位老師分配到不同的教室中\" class=\"headerlink\" title=\"將每位老師分配到不同的教室中\"></a>將每位老師分配到不同的教室中</h2><p>修改 ClassRoom 我們把外部注入的對象這定為只接受去過師範大學的老師才可以進入這個教室</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> _teacher: NormalSchool</span>) &#123;&#125;   <span class=\"comment\">// 外部注入的對象必須是 NormalSchool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">classTeaching</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">classTest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">classQA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\"><a href=\"#將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\" class=\"headerlink\" title=\"將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\"></a>將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目</h2><p>3間教室指定老師使用師範大學的教學方式，去教自己專業科目的內容。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mathTeacher = <span class=\"keyword\">new</span> <span class=\"title class_\">MathTeacher</span>();                 <span class=\"comment\">// Create math teacher</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> englishTeacher = <span class=\"keyword\">new</span> <span class=\"title class_\">EnglishTeacher</span>();           <span class=\"comment\">// Create english teacher</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> javascriptTeacher = <span class=\"keyword\">new</span> <span class=\"title class_\">JavascriptTeacher</span>();     <span class=\"comment\">// Create javascript teacher</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> room1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(mathTeacher);              <span class=\"comment\">// 將數學老師放入教室 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(englishTeacher);           <span class=\"comment\">// 將英文老師放入教室 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room3 = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(javascriptTeacher);        <span class=\"comment\">// 將 Javascript 老師放入教室 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">room1.<span class=\"title function_\">classTeaching</span>();</span><br><span class=\"line\">room2.<span class=\"title function_\">classTest</span>();</span><br><span class=\"line\">room3.<span class=\"title function_\">classQA</span>();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png\"></p>\n<p>上面的結果可以發現每間教室可以接受不同的老師，只要是從師範大學中出來的 ( implements NormalSchool ) 就可已放入，並且每個不同的老師都有著相同的教學方式 ( methods ) 但教授的內容卻是不同的，之後如果某個教室需要更換老師或是需要新增一個新的老師，其他部分就不需要更改也不會受到影響，這就是 <code>Dependency Inversion Principle</code>。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了什麼是 Dependency Injection 的概念與在 Typescript 中如何實現，在我剛接觸 Angular 的時候對於 Dependency Injection 來說可以說是一頭霧水，只知道只要在 Constructor 裡面宣告就可以用了，但根本不知道這麼做的目的是什麼，直到我去看了 Jun 大大對於 Dependency Injection 的一些概念與舉例所以才比較明白是什麼，不過 Jun 大大的文章是用 Java 寫的，所以本章算是把 Jun 大大的文轉換為 Typescript 做個紀錄，大家可以去看 Jun 大大原本的文章或是其他文章，都寫得非常好！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://medium.com/appxtech/%E6%B7%BA%E8%AB%87coupling-%E8%80%A6%E5%90%88-dependency-injection-%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5%E5%8F%8Adependency-inversion-principle-%E4%BE%9D%E8%B3%B4%E5%8F%8D%E8%BD%89-b2ae7f746383\">淺談Coupling 耦合, Dependency Injection 依賴注入及Dependency Inversion Principle 依賴反轉。</a></li>\n<li><a href=\"https://blog.logrocket.com/top-five-typescript-dependency-injection-containers/\">Top 5 TypeScript dependency injection containers</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在 Angular 中 Dependency Injection 是個非常大的特點，Dependency Injection 是一種設計模式，主要是用於將相關的程式由<code>外部注入進 component 中</code>而不是在 component 中創建以實現<code>解耦</code>的目的，可以有效地減低維護的複雜度。</p>\n<p><img src=\"https://medicalweightlosscentersofamerica.com/wp-content/uploads/2021/06/HowLongDoVitaminB12InjectionsLast.jpg\" alt=\"img\"></p>","more":"<h1 id=\"What-is-Coupling-藕合\"><a href=\"#What-is-Coupling-藕合\" class=\"headerlink\" title=\"What is Coupling(藕合)\"></a>What is Coupling(藕合)</h1><p>Coupling(藕合) 又可以稱為 Dependency(依賴)，簡單來說就是程式與程式之間互相具有依賴性，在一個專案中如果彼此的依賴性越高則代表<code>越難維護</code>。</p>\n<p>一般在開發專案時會將功能相關的部分結合起來作為一個 Class 以提供給其他地方使用，當某個地方需要使用到這個 Class 實則需要再對應的地方使用關鍵字 <code>new</code> 產生一個新的物件，這樣才可以使用到裡面的 <code>method</code> 或 <code>property</code>，來舉個例子某一個國小的教室 (ClassRoom) 需要一個老師，老師的功能有 <code>Teaching</code>, <code>Test</code>, <code>QA</code> 這三種功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MathTeacher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Math&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test 1 + 1 = 2&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;QA Time&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而現在的情境是在這個教室中有一個數學老師在執行這三種功能並執行它</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">  mathTeach = <span class=\"keyword\">new</span> <span class=\"title class_\">MathTeacher</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTeaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mathTeach</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTest</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mathTeach</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassQA</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mathTeach</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">room = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTeaching</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTest</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassQA</span>();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\"></p>\n<p>雖然這種寫法可以完成目標但如果今天需要將數學老師變為英文老師的話，那就需要將 <code>mathTeach = new MathTeacher();</code> 這邊更改為 <code>englishTeacher = new EnglishTeacher();</code>，這種因為一個程式變動而導致另一個程式也需要隨之修改的行為就稱為<code>高藕合(Coupling)</code>，如果專案很大的話這種高耦合會讓專案的維護與開發變得越來越困難。</p>\n<h1 id=\"Dependency-Injection-依賴注入\"><a href=\"#Dependency-Injection-依賴注入\" class=\"headerlink\" title=\"Dependency Injection (依賴注入)\"></a>Dependency Injection (依賴注入)</h1><p>為了減輕每個程式中互相的依賴，這時就誕生了 Dependency Injection 這種設計模式，他主要的目的是通過將有關連的程式利用注入的方式由外部注入至需要的程式，而不是像過去一樣在內部創建，而達成 DI 有兩種方法</p>\n<h2 id=\"使用建構子-Contructor\"><a href=\"#使用建構子-Contructor\" class=\"headerlink\" title=\"使用建構子 (Contructor)\"></a>使用建構子 (Contructor)</h2><p>首先跟剛剛一樣，新增一個Teacher 的 class (老師類別)，將老師的技能 (Methods) 寫入，可以隨需求更改教學的內容。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Math&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test 1 + 1 = 2&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;QA Time&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著對 ClassRoom Class 中修改 constructor 讓需要授課的老師 class 由外部注入進來</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> teacher: Teacher</span>) &#123;&#125;  <span class=\"comment\">// (1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTeaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">teacher</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassTest</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">teacher</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">ClassQA</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">teacher</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 利用 constructor 將原先依賴的程式注入進來</li>\n</ul>\n<p>接著使用這個新的 Room Class</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> teach = <span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>();         <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(teach);   <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">room.<span class=\"title class_\">ClassTeaching</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTest</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassQA</span>();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 在外部創建需要的 Class</li>\n<li>(2): 將需要的 Class 作為參數傳入 ClassRoom Class 中（注入）</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767IBMhMMKCLW.png\"></p>\n<h2 id=\"使用-Setter\"><a href=\"#使用-Setter\" class=\"headerlink\" title=\"使用 Setter\"></a>使用 Setter</h2><p>除了在 constructor 中宣告注入的 Class 之外，還可以利用 <code>setter</code> 做到相同的功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> _teacher!: <span class=\"title class_\">Teacher</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">setTeacher</span>(<span class=\"params\">teacher: Teacher</span>) &#123;   <span class=\"comment\">// (1)</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span> = teacher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">ClassTeaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">ClassTest</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">ClassQA</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 創建一個 <code>setter</code> 用於將外部依賴的 Class 注入進來</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> teach = <span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>();     <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>();    <span class=\"comment\">// (2)</span></span><br><span class=\"line\">room.<span class=\"property\">setTeacher</span> = teach;         <span class=\"comment\">// (3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">room.<span class=\"title class_\">ClassTeaching</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassTest</span>();</span><br><span class=\"line\">room.<span class=\"title class_\">ClassQA</span>();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(1): 在外部創建需要的 Class</li>\n<li>(2): 創建需要的 Class</li>\n<li>(3): 利用 <code>ClassRoom</code> 中的 <code>setter</code> 將外部依賴的 Class (Teacher) 注入</li>\n</ul>\n<p>當使用了 Dependency Injection 這種設計模式後，你想要從數學老師變更為英文老師的話，只需要在 <code>Teacher</code> Class 中更改教學方式就好，其他都不用變就可以達到目的，可以打幅度的減低維護的成本</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Teach English&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Test A, B, C&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;QA English Time&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767hWndZPGwti.png\"></p>\n<h1 id=\"Dependency-Inversion-Principle-依賴反轉\"><a href=\"#Dependency-Inversion-Principle-依賴反轉\" class=\"headerlink\" title=\"Dependency Inversion Principle (依賴反轉)\"></a>Dependency Inversion Principle (依賴反轉)</h1><blockquote>\n<p>Dependency Inversion Principle：依賴反轉，又稱為依賴反向或依賴倒轉</p>\n</blockquote>\n<p>當專案越來越大的時候，就需要比 Dependency Injection 更有彈性的設計模式的出現，接著我們把上面的例子改一下，現在我們從一間教室變成多間，一位老師也變成多位老師且每個老師都用相同的方法但不同的內容教課，可能想一想就會覺得非常的複雜，不過沒關係我們可以把他整理一下</p>\n<ol>\n<li>有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）</li>\n<li>雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣</li>\n<li>將每位老師分配到不同的教室中</li>\n<li>每間教室的老師都用著相同的教學模式</li>\n</ol>\n<h2 id=\"有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣-（-每個-Class-中有著相同的-method-）\"><a href=\"#有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣-（-每個-Class-中有著相同的-method-）\" class=\"headerlink\" title=\"有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）\"></a>有一個地方專門培訓老師，所以教導出來的老師教學模式都一樣 （ 每個 Class 中有著相同的 method ）</h2><p>要每一個 Class 都有著相同的格式的最好方法就是建立一個 interface 去規定需要哪些教學方式（ method ）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;  <span class=\"comment\">// 教學</span></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;      <span class=\"comment\">// 考試</span></span><br><span class=\"line\">    <span class=\"attr\">QA</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;        <span class=\"comment\">// 提問</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\"><a href=\"#雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\" class=\"headerlink\" title=\"雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣\"></a>雖然教學模式一樣，但因為每個老師有不同的專業，所以教學的內容都不一樣</h2><p>可以建立多個不同老師 ( Class )，透過 <code>implements</code> 將 <code>interface</code> 讓每個老師 ( Class ) 有相同的教學模式 ( methods )。</p>\n<ol>\n<li>數學老師<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MathTeacher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Math&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test 1 + 1 = 2&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Math QA Time!&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>英文老師<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EnglishTeacher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach English&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test A, B, C, D&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;English QA Time!&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Javascript 老師<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JavascriptTeacher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NormalSchool</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Teaching</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Teach Javascript&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Test</span>() &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Test program&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">QA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;program QA Time!&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"將每位老師分配到不同的教室中\"><a href=\"#將每位老師分配到不同的教室中\" class=\"headerlink\" title=\"將每位老師分配到不同的教室中\"></a>將每位老師分配到不同的教室中</h2><p>修改 ClassRoom 我們把外部注入的對象這定為只接受去過師範大學的老師才可以進入這個教室</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassRoom</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> _teacher: NormalSchool</span>) &#123;&#125;   <span class=\"comment\">// 外部注入的對象必須是 NormalSchool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">classTeaching</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Teaching</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">classTest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title class_\">Test</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">classQA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_teacher</span>.<span class=\"title function_\">QA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\"><a href=\"#將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\" class=\"headerlink\" title=\"將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目\"></a>將每位老師放入教室中並使用著相同的教育方式但教授的是不同的科目</h2><p>3間教室指定老師使用師範大學的教學方式，去教自己專業科目的內容。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mathTeacher = <span class=\"keyword\">new</span> <span class=\"title class_\">MathTeacher</span>();                 <span class=\"comment\">// Create math teacher</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> englishTeacher = <span class=\"keyword\">new</span> <span class=\"title class_\">EnglishTeacher</span>();           <span class=\"comment\">// Create english teacher</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> javascriptTeacher = <span class=\"keyword\">new</span> <span class=\"title class_\">JavascriptTeacher</span>();     <span class=\"comment\">// Create javascript teacher</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> room1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(mathTeacher);              <span class=\"comment\">// 將數學老師放入教室 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(englishTeacher);           <span class=\"comment\">// 將英文老師放入教室 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> room3 = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassRoom</span>(javascriptTeacher);        <span class=\"comment\">// 將 Javascript 老師放入教室 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">room1.<span class=\"title function_\">classTeaching</span>();</span><br><span class=\"line\">room2.<span class=\"title function_\">classTest</span>();</span><br><span class=\"line\">room3.<span class=\"title function_\">classQA</span>();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220216/20124767OuZTlaSPi3.png\"></p>\n<p>上面的結果可以發現每間教室可以接受不同的老師，只要是從師範大學中出來的 ( implements NormalSchool ) 就可已放入，並且每個不同的老師都有著相同的教學方式 ( methods ) 但教授的內容卻是不同的，之後如果某個教室需要更換老師或是需要新增一個新的老師，其他部分就不需要更改也不會受到影響，這就是 <code>Dependency Inversion Principle</code>。</p>\n<h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>本章介紹了什麼是 Dependency Injection 的概念與在 Typescript 中如何實現，在我剛接觸 Angular 的時候對於 Dependency Injection 來說可以說是一頭霧水，只知道只要在 Constructor 裡面宣告就可以用了，但根本不知道這麼做的目的是什麼，直到我去看了 Jun 大大對於 Dependency Injection 的一些概念與舉例所以才比較明白是什麼，不過 Jun 大大的文章是用 Java 寫的，所以本章算是把 Jun 大大的文轉換為 Typescript 做個紀錄，大家可以去看 Jun 大大原本的文章或是其他文章，都寫得非常好！</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://medium.com/appxtech/%E6%B7%BA%E8%AB%87coupling-%E8%80%A6%E5%90%88-dependency-injection-%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5%E5%8F%8Adependency-inversion-principle-%E4%BE%9D%E8%B3%B4%E5%8F%8D%E8%BD%89-b2ae7f746383\">淺談Coupling 耦合, Dependency Injection 依賴注入及Dependency Inversion Principle 依賴反轉。</a></li>\n<li><a href=\"https://blog.logrocket.com/top-five-typescript-dependency-injection-containers/\">Top 5 TypeScript dependency injection containers</a></li>\n</ul>"},{"title":"計算機概論 - 資料處理 Data manipulation","date":"2022-02-17T09:24:40.000Z","_content":"\n本章是對計算機概論的`資料處理`做一個整理與筆記，主要是介紹電腦是如何處理資料並且與週邊裝置進行溝通，會探索一些計算機架構的基本原理，也會使用機械語言指令進行一些程式設計。\n\n<img src=\"https://images.idgesg.net/images/article/2018/03/blue-mother-board_circuitry_computer-chip_processor_harddrive-100751586-large.jpg?auto=webp&quality=85,70\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# 計算機架構\n電腦控制茲了的電路稱為`中央處理單元 (Central processing unit)` 或 `CPU (處理器)`。\n\n## CPU 的基本原理\nCPU 包含三個主要部份\n1. **算數 / 邏輯元件 (arithmetic/logic unit)**: 負責處理資料運算的電路，比如加減法的運算。\n2. **控制元件 (control unit)**: 負責協調機器內部運作的電路。\n3. **暫存器元件 (register unit)**: 負責儲存資料的地方，類似於主記憶體的儲存單元，稱為 `Registers` 主要是將資料暫存在 CPU 中。\n\n為了傳送位元字串，CPU 與主記憶體之間由一條稱為`匯流排`的線路連接。\n\n如果要將儲存在記憶體的數值進行加總，好型以下的步驟：\n1. 將要加總的數值從記憶體中取出並存入暫存器中\n2. 把要加總的另一個數也從記憶體中取出存放在另一個暫存器\n3. 啟動`加法電路`將剛取出的兩個值進行加總，將輸出結果存放在另一個暫存器中\n4. 將結果存回記憶體\n\n> 快取記憶體 (Cache memory): 讓資料傳輸變成是在暫存器與快取記憶體之間，任何資料的變動都先存放在快取記憶體中，等待適當的時機再一起存回主記憶體，可以讓 CPU 更快速地執行計算，避免與主記憶體進行溝通而造成時間上的延遲。 \n\n# 機械語言\n能夠對 CPU 進行操作的指令以及編碼系統稱為機械語言 (machine language)，機械指令可以分為三類：\n## 資料傳輸\n要求資料從一個地方移動到另一個地方的指令，資料在移動的時候很少會刪除原有位置上的資料，傳輸指令比較像是`複製資料`而非移動資料。\n\n- 以某記憶體儲存單位元內的資料移動到某個暫存器的指令稱為 `LOAD`\n- 以某暫存器內資料移動到某記憶體儲存單位元的指令稱為 `STORE`\n\n資料傳輸指令中有一組很重要的指令群，用來與 CPU 和主記憶體之外的裝置進行通訊命令，比如鍵盤, 螢幕...，這些稱為`輸入輸出指令 (I/O instructions)`。\n## 運算邏輯\n顧名思義負責執行各種運算，包含`基本運算`、`布林運算 (AND, OR, XOR...)`、`資料位移運算 (SHIFT, ROTATE...)`\n## 控制\n包含一些引導程式執行的指令，比如 `JUMP`, `BRANCH` 是用來引導 CPU 去執行指令清單的任何一個指令，\n\n# 程式執行\n除存在記憶體中的程式會複製到所需要的指令到 CPU 中，一但到了 CPU 就會將每個指令進行`解碼`並確實執行，除非有 `JUMP` 這個指令，否則都是按照儲存在記憶體中的順序執行。\n\nCPU 中有兩個專用的暫存器: `指令暫存器 (instrucvtion register)` 和 `程式計數器 (program counter)`，指令暫存器用於儲存正在執行的指令，程式計數器儲存下一個指令的位置。\n\n而 CPU 會不斷重複的執行三個步驟，這三個步驟就是所謂的`機械週期 (machine cycle)`，這三個步驟分別為`提取`, `解碼`, `執行`。\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767HkSZwb5Hkr.png\" alt=\"drawing\" width=\"800\"/>\n\n> 電腦時脈 (clock): 稱為振盪器電路，會產生`脈衝`以協調電腦內部的運作，脈衝越快電腦執行一個機械週期的時間也越快。\n\n- **提取**: 會讀取兩個記憶體的內容，CPU 將收到的指令存入指令暫存器中，接著把程式計數器增加為 2，使得程式計數器保有下一個指令在記憶體中的位置。\n- **解碼**: 指令存入指令暫存器中後，CPU 就會開始解碼\n- **執行**: CPU 會啟動適當的電路來執行解碼後的指令\n\n# 算數 / 邏輯指令\n邏輯運算是有 `AND`, `OR`, `XOR` 他們有各自不同的功用。\n\n主要的用途在能夠將某個位元字串放入 0 而不影響另一個位元字串，這種 AND 運算的用途就是`遮罩運算 (masking)`，遮罩運算的其中一組運算元稱為`遮罩(mask)`，用於決定另一組運算元中的那些位元會對結果有影響。\n\n`AND` 運算也可以用來複製位元字串，其中非複製的部分為 `0`，除了 AND 之外 `OR` 也可以用來產生一個位元字串的複製，只是非複製的部分要放置 `1`，`XOR` 運算主要用於產生任何位元字串的`補數`，任何位元組與`全為 1`的遮罩進行 XOR 就能產生該位元組的補數\n\n```\n     11111111\nXOR  10101010\n--------------\n     01010101\n```\n\n所以 XOR 可以用來反轉 RGB 點陣圖圖像的所有位元，產生一個顏色反轉的彩色圖像，明亮的地方變深色反之亦然。\n\n## 循環與位移運算式\n循環與位移的運算提供了在暫存器中移動位元的方法，常用來解決`排比 (alignment)` 問題，假設一個暫存器含有一位元組的空間，如果要將該位元組往右移動一個位元，可以想像最右端的位元從邊緣掉落，這樣最左邊就多了一個空位，那麼如何處理掉落的那個位元呢？有一種方式是將最右邊掉落的位元補在左邊空出的位置，這種方式稱`循環位移 (circular shift)` 也稱為 `循環 (rotation)`，所以如果同一個位元組往右移動 8 次，其結果就是原是的位元字串。\n\n另一種方式是把掉落的位元捨棄，把最左邊空位補上 `0`，這種方式稱為`邏輯位移 (logical shift)`，不管哪種位移方式都要注意保留正負號位元，能夠保留著正負號位元不變的位移有時候稱為`算數位移 (arithmetic shifts)`。\n\n## 算數運算式\n雖然運算式中有`加法`, `減法`, `乘法`, `除法`，但減法可以藉由`加法`和`取補數`來模擬，此外乘法是重複的加法而除法則是重複的減法，所以有些小型的 CPU 只設計了加法或是只設計加法與減法。\n\n# 主設備之間的通訊\n主記憶體和 CPU 是電腦的核心，本章將探討電腦的核心該如何與週邊設備 (大容量儲存裝置、鍵盤、滑鼠...) 進行溝通，甚至是如何與其他電腦進行溝通\n\n## 控制器的作用\n電腦與其他裝置的通訊一般是經由一個`中介裝置`來控制，這個裝置稱為`控制器 (controller)`，控制器透過電線連接到電腦內部的裝置或透過電腦後面的`連接阜 (port)` 與電腦外部的裝置相連，控制器可將電腦與週邊設備的訊息和資料進行轉譯在來回傳遞，每個控制器與電腦的通訊都是通過匯流排連接，與 CPU 和主記憶體之間所連接的匯流排一樣。\n\n在某些電腦的設計中，CPU 和主記憶體溝通用的 `LOAD` 和 `STORE` 指令，也可以直接用在控制器的資料傳輸與接受上面，在這種情況控制器會對應到一組`唯一的地址`，並主記憶體會刻意跳過這個地址，因次當 CPU 通過匯流排要 STORE 一個位元字串到一個指定給控制器的地址時，該位元字串會被寫到`控制器`而不是記憶體中，同樣的如果 CPU 要讀取這個位置的資料的話，會 LOAD 控制器從而接收資料而非記憶體，這種通訊方式稱為`記憶體對映輸入輸出 (memory-mapped I/O)`。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767nruwCQ2Y2X.png\" alt=\"drawing\" width=\"800\"/>\n\n\n## 直接記憶體存取\n由於控制器連接到電腦的匯流排上，他可以在 CPU 沒有使用到匯流排的毫微秒空擋與記憶體進行通訊，這種能存取主記憶體的能力稱為`記憶體存取 (direct memory access, DMA)`，比如要從磁碟中讀取資料，CPU 可以傳送編碼過的位元字串到磁碟連接的控制器上並要求控制器讀取磁碟中的資料在存入指定的記憶體區域，所以當控制器在處理資料的儲存時 CPU 就可以趁這個空擋執行其他工作，可以不必為了等待速度較慢的資料傳輸而浪費計算資源。\n\n不過使用 `DMA` 也會有缺點，如果 CPU 和控制器都需要使用到匯流排，那們他們之間的競爭會使匯流排成為效能上的一個障礙，稱為`范紐曼瓶頸 (von Neumann bottleneek)`。\n\n## 交握\n當兩個設備要進行雙向溝同時，不能由其中一個設備盲目的傳送資料給另一個設備，這樣會讓資料遺失的機率大幅增加，因次兩個設備互相溝通需要有`交握 (handshaking)` 的過程，這是電腦與周圍設備交換關於設備狀況的資訊並協調彼此的運作，交握通常包含著一個`狀態字 (status word)`，是由週邊設備產生出來的位元字串並傳送給控制器，狀態字是反映出這個週邊設備的狀態。\n\n## 通訊媒介\n計算機設備通訊留兩種路徑處理：`平行`, `串列`，這兩種方法是指訊號是經由什麼分式傳輸\n1. **平行傳輸 (parallel communication)**: 數個訊號會被同時傳送，每個訊號都經由`不同的線路`，這種方式可以快速的傳送資料但需要相對複雜的通訊路徑。\n2. **串列通訊 ()**: 使用`單一線路`連接傳送訊號，相較於平行傳輸只需要簡單的路徑。\n\n## 通訊速率\n位元字串的傳輸速率是以`每秒位元 (bits per second, bps)` 來衡量，在英文縮寫裡小寫 b 代表`位元`大寫 B 代表`元組`。\n\n最高傳輸速率取決於通訊路徑的類別和應用的技術，最高傳輸速率通常相當於通訊路徑的`頻寬`，雖然頻寬也有容量的定義但當提到一個通訊路徑有很高的頻寬或提供`寬頻服務`時，意味著該通訊路徑能提供高速的位元傳輸速率，同時也能負載大量的資訊。\n\n# Reference\n- [computer science - AN OVERVIEW](https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf)","source":"_posts/計算機概論/data-processing.md","raw":"---\ntitle: 計算機概論 - 資料處理 Data manipulation\ndate: 2022-02-17 17:24:40\ntags:\n- 計算機概論\n\ncategories:\n- CS\n---\n\n本章是對計算機概論的`資料處理`做一個整理與筆記，主要是介紹電腦是如何處理資料並且與週邊裝置進行溝通，會探索一些計算機架構的基本原理，也會使用機械語言指令進行一些程式設計。\n\n<img src=\"https://images.idgesg.net/images/article/2018/03/blue-mother-board_circuitry_computer-chip_processor_harddrive-100751586-large.jpg?auto=webp&quality=85,70\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# 計算機架構\n電腦控制茲了的電路稱為`中央處理單元 (Central processing unit)` 或 `CPU (處理器)`。\n\n## CPU 的基本原理\nCPU 包含三個主要部份\n1. **算數 / 邏輯元件 (arithmetic/logic unit)**: 負責處理資料運算的電路，比如加減法的運算。\n2. **控制元件 (control unit)**: 負責協調機器內部運作的電路。\n3. **暫存器元件 (register unit)**: 負責儲存資料的地方，類似於主記憶體的儲存單元，稱為 `Registers` 主要是將資料暫存在 CPU 中。\n\n為了傳送位元字串，CPU 與主記憶體之間由一條稱為`匯流排`的線路連接。\n\n如果要將儲存在記憶體的數值進行加總，好型以下的步驟：\n1. 將要加總的數值從記憶體中取出並存入暫存器中\n2. 把要加總的另一個數也從記憶體中取出存放在另一個暫存器\n3. 啟動`加法電路`將剛取出的兩個值進行加總，將輸出結果存放在另一個暫存器中\n4. 將結果存回記憶體\n\n> 快取記憶體 (Cache memory): 讓資料傳輸變成是在暫存器與快取記憶體之間，任何資料的變動都先存放在快取記憶體中，等待適當的時機再一起存回主記憶體，可以讓 CPU 更快速地執行計算，避免與主記憶體進行溝通而造成時間上的延遲。 \n\n# 機械語言\n能夠對 CPU 進行操作的指令以及編碼系統稱為機械語言 (machine language)，機械指令可以分為三類：\n## 資料傳輸\n要求資料從一個地方移動到另一個地方的指令，資料在移動的時候很少會刪除原有位置上的資料，傳輸指令比較像是`複製資料`而非移動資料。\n\n- 以某記憶體儲存單位元內的資料移動到某個暫存器的指令稱為 `LOAD`\n- 以某暫存器內資料移動到某記憶體儲存單位元的指令稱為 `STORE`\n\n資料傳輸指令中有一組很重要的指令群，用來與 CPU 和主記憶體之外的裝置進行通訊命令，比如鍵盤, 螢幕...，這些稱為`輸入輸出指令 (I/O instructions)`。\n## 運算邏輯\n顧名思義負責執行各種運算，包含`基本運算`、`布林運算 (AND, OR, XOR...)`、`資料位移運算 (SHIFT, ROTATE...)`\n## 控制\n包含一些引導程式執行的指令，比如 `JUMP`, `BRANCH` 是用來引導 CPU 去執行指令清單的任何一個指令，\n\n# 程式執行\n除存在記憶體中的程式會複製到所需要的指令到 CPU 中，一但到了 CPU 就會將每個指令進行`解碼`並確實執行，除非有 `JUMP` 這個指令，否則都是按照儲存在記憶體中的順序執行。\n\nCPU 中有兩個專用的暫存器: `指令暫存器 (instrucvtion register)` 和 `程式計數器 (program counter)`，指令暫存器用於儲存正在執行的指令，程式計數器儲存下一個指令的位置。\n\n而 CPU 會不斷重複的執行三個步驟，這三個步驟就是所謂的`機械週期 (machine cycle)`，這三個步驟分別為`提取`, `解碼`, `執行`。\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767HkSZwb5Hkr.png\" alt=\"drawing\" width=\"800\"/>\n\n> 電腦時脈 (clock): 稱為振盪器電路，會產生`脈衝`以協調電腦內部的運作，脈衝越快電腦執行一個機械週期的時間也越快。\n\n- **提取**: 會讀取兩個記憶體的內容，CPU 將收到的指令存入指令暫存器中，接著把程式計數器增加為 2，使得程式計數器保有下一個指令在記憶體中的位置。\n- **解碼**: 指令存入指令暫存器中後，CPU 就會開始解碼\n- **執行**: CPU 會啟動適當的電路來執行解碼後的指令\n\n# 算數 / 邏輯指令\n邏輯運算是有 `AND`, `OR`, `XOR` 他們有各自不同的功用。\n\n主要的用途在能夠將某個位元字串放入 0 而不影響另一個位元字串，這種 AND 運算的用途就是`遮罩運算 (masking)`，遮罩運算的其中一組運算元稱為`遮罩(mask)`，用於決定另一組運算元中的那些位元會對結果有影響。\n\n`AND` 運算也可以用來複製位元字串，其中非複製的部分為 `0`，除了 AND 之外 `OR` 也可以用來產生一個位元字串的複製，只是非複製的部分要放置 `1`，`XOR` 運算主要用於產生任何位元字串的`補數`，任何位元組與`全為 1`的遮罩進行 XOR 就能產生該位元組的補數\n\n```\n     11111111\nXOR  10101010\n--------------\n     01010101\n```\n\n所以 XOR 可以用來反轉 RGB 點陣圖圖像的所有位元，產生一個顏色反轉的彩色圖像，明亮的地方變深色反之亦然。\n\n## 循環與位移運算式\n循環與位移的運算提供了在暫存器中移動位元的方法，常用來解決`排比 (alignment)` 問題，假設一個暫存器含有一位元組的空間，如果要將該位元組往右移動一個位元，可以想像最右端的位元從邊緣掉落，這樣最左邊就多了一個空位，那麼如何處理掉落的那個位元呢？有一種方式是將最右邊掉落的位元補在左邊空出的位置，這種方式稱`循環位移 (circular shift)` 也稱為 `循環 (rotation)`，所以如果同一個位元組往右移動 8 次，其結果就是原是的位元字串。\n\n另一種方式是把掉落的位元捨棄，把最左邊空位補上 `0`，這種方式稱為`邏輯位移 (logical shift)`，不管哪種位移方式都要注意保留正負號位元，能夠保留著正負號位元不變的位移有時候稱為`算數位移 (arithmetic shifts)`。\n\n## 算數運算式\n雖然運算式中有`加法`, `減法`, `乘法`, `除法`，但減法可以藉由`加法`和`取補數`來模擬，此外乘法是重複的加法而除法則是重複的減法，所以有些小型的 CPU 只設計了加法或是只設計加法與減法。\n\n# 主設備之間的通訊\n主記憶體和 CPU 是電腦的核心，本章將探討電腦的核心該如何與週邊設備 (大容量儲存裝置、鍵盤、滑鼠...) 進行溝通，甚至是如何與其他電腦進行溝通\n\n## 控制器的作用\n電腦與其他裝置的通訊一般是經由一個`中介裝置`來控制，這個裝置稱為`控制器 (controller)`，控制器透過電線連接到電腦內部的裝置或透過電腦後面的`連接阜 (port)` 與電腦外部的裝置相連，控制器可將電腦與週邊設備的訊息和資料進行轉譯在來回傳遞，每個控制器與電腦的通訊都是通過匯流排連接，與 CPU 和主記憶體之間所連接的匯流排一樣。\n\n在某些電腦的設計中，CPU 和主記憶體溝通用的 `LOAD` 和 `STORE` 指令，也可以直接用在控制器的資料傳輸與接受上面，在這種情況控制器會對應到一組`唯一的地址`，並主記憶體會刻意跳過這個地址，因次當 CPU 通過匯流排要 STORE 一個位元字串到一個指定給控制器的地址時，該位元字串會被寫到`控制器`而不是記憶體中，同樣的如果 CPU 要讀取這個位置的資料的話，會 LOAD 控制器從而接收資料而非記憶體，這種通訊方式稱為`記憶體對映輸入輸出 (memory-mapped I/O)`。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767nruwCQ2Y2X.png\" alt=\"drawing\" width=\"800\"/>\n\n\n## 直接記憶體存取\n由於控制器連接到電腦的匯流排上，他可以在 CPU 沒有使用到匯流排的毫微秒空擋與記憶體進行通訊，這種能存取主記憶體的能力稱為`記憶體存取 (direct memory access, DMA)`，比如要從磁碟中讀取資料，CPU 可以傳送編碼過的位元字串到磁碟連接的控制器上並要求控制器讀取磁碟中的資料在存入指定的記憶體區域，所以當控制器在處理資料的儲存時 CPU 就可以趁這個空擋執行其他工作，可以不必為了等待速度較慢的資料傳輸而浪費計算資源。\n\n不過使用 `DMA` 也會有缺點，如果 CPU 和控制器都需要使用到匯流排，那們他們之間的競爭會使匯流排成為效能上的一個障礙，稱為`范紐曼瓶頸 (von Neumann bottleneek)`。\n\n## 交握\n當兩個設備要進行雙向溝同時，不能由其中一個設備盲目的傳送資料給另一個設備，這樣會讓資料遺失的機率大幅增加，因次兩個設備互相溝通需要有`交握 (handshaking)` 的過程，這是電腦與周圍設備交換關於設備狀況的資訊並協調彼此的運作，交握通常包含著一個`狀態字 (status word)`，是由週邊設備產生出來的位元字串並傳送給控制器，狀態字是反映出這個週邊設備的狀態。\n\n## 通訊媒介\n計算機設備通訊留兩種路徑處理：`平行`, `串列`，這兩種方法是指訊號是經由什麼分式傳輸\n1. **平行傳輸 (parallel communication)**: 數個訊號會被同時傳送，每個訊號都經由`不同的線路`，這種方式可以快速的傳送資料但需要相對複雜的通訊路徑。\n2. **串列通訊 ()**: 使用`單一線路`連接傳送訊號，相較於平行傳輸只需要簡單的路徑。\n\n## 通訊速率\n位元字串的傳輸速率是以`每秒位元 (bits per second, bps)` 來衡量，在英文縮寫裡小寫 b 代表`位元`大寫 B 代表`元組`。\n\n最高傳輸速率取決於通訊路徑的類別和應用的技術，最高傳輸速率通常相當於通訊路徑的`頻寬`，雖然頻寬也有容量的定義但當提到一個通訊路徑有很高的頻寬或提供`寬頻服務`時，意味著該通訊路徑能提供高速的位元傳輸速率，同時也能負載大量的資訊。\n\n# Reference\n- [computer science - AN OVERVIEW](https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf)","slug":"計算機概論/data-processing","published":1,"updated":"2022-02-21T09:06:49.620Z","_id":"ckzqs6be6001q95w3b7mua85w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本章是對計算機概論的<code>資料處理</code>做一個整理與筆記，主要是介紹電腦是如何處理資料並且與週邊裝置進行溝通，會探索一些計算機架構的基本原理，也會使用機械語言指令進行一些程式設計。</p>\n<img src=\"https://images.idgesg.net/images/article/2018/03/blue-mother-board_circuitry_computer-chip_processor_harddrive-100751586-large.jpg?auto=webp&quality=85,70\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>\n\n<h1 id=\"計算機架構\"><a href=\"#計算機架構\" class=\"headerlink\" title=\"計算機架構\"></a>計算機架構</h1><p>電腦控制茲了的電路稱為<code>中央處理單元 (Central processing unit)</code> 或 <code>CPU (處理器)</code>。</p>\n<h2 id=\"CPU-的基本原理\"><a href=\"#CPU-的基本原理\" class=\"headerlink\" title=\"CPU 的基本原理\"></a>CPU 的基本原理</h2><p>CPU 包含三個主要部份</p>\n<ol>\n<li><strong>算數 &#x2F; 邏輯元件 (arithmetic&#x2F;logic unit)</strong>: 負責處理資料運算的電路，比如加減法的運算。</li>\n<li><strong>控制元件 (control unit)</strong>: 負責協調機器內部運作的電路。</li>\n<li><strong>暫存器元件 (register unit)</strong>: 負責儲存資料的地方，類似於主記憶體的儲存單元，稱為 <code>Registers</code> 主要是將資料暫存在 CPU 中。</li>\n</ol>\n<p>為了傳送位元字串，CPU 與主記憶體之間由一條稱為<code>匯流排</code>的線路連接。</p>\n<p>如果要將儲存在記憶體的數值進行加總，好型以下的步驟：</p>\n<ol>\n<li>將要加總的數值從記憶體中取出並存入暫存器中</li>\n<li>把要加總的另一個數也從記憶體中取出存放在另一個暫存器</li>\n<li>啟動<code>加法電路</code>將剛取出的兩個值進行加總，將輸出結果存放在另一個暫存器中</li>\n<li>將結果存回記憶體</li>\n</ol>\n<blockquote>\n<p>快取記憶體 (Cache memory): 讓資料傳輸變成是在暫存器與快取記憶體之間，任何資料的變動都先存放在快取記憶體中，等待適當的時機再一起存回主記憶體，可以讓 CPU 更快速地執行計算，避免與主記憶體進行溝通而造成時間上的延遲。 </p>\n</blockquote>\n<h1 id=\"機械語言\"><a href=\"#機械語言\" class=\"headerlink\" title=\"機械語言\"></a>機械語言</h1><p>能夠對 CPU 進行操作的指令以及編碼系統稱為機械語言 (machine language)，機械指令可以分為三類：</p>\n<h2 id=\"資料傳輸\"><a href=\"#資料傳輸\" class=\"headerlink\" title=\"資料傳輸\"></a>資料傳輸</h2><p>要求資料從一個地方移動到另一個地方的指令，資料在移動的時候很少會刪除原有位置上的資料，傳輸指令比較像是<code>複製資料</code>而非移動資料。</p>\n<ul>\n<li>以某記憶體儲存單位元內的資料移動到某個暫存器的指令稱為 <code>LOAD</code></li>\n<li>以某暫存器內資料移動到某記憶體儲存單位元的指令稱為 <code>STORE</code></li>\n</ul>\n<p>資料傳輸指令中有一組很重要的指令群，用來與 CPU 和主記憶體之外的裝置進行通訊命令，比如鍵盤, 螢幕…，這些稱為<code>輸入輸出指令 (I/O instructions)</code>。</p>\n<h2 id=\"運算邏輯\"><a href=\"#運算邏輯\" class=\"headerlink\" title=\"運算邏輯\"></a>運算邏輯</h2><p>顧名思義負責執行各種運算，包含<code>基本運算</code>、<code>布林運算 (AND, OR, XOR...)</code>、<code>資料位移運算 (SHIFT, ROTATE...)</code></p>\n<h2 id=\"控制\"><a href=\"#控制\" class=\"headerlink\" title=\"控制\"></a>控制</h2><p>包含一些引導程式執行的指令，比如 <code>JUMP</code>, <code>BRANCH</code> 是用來引導 CPU 去執行指令清單的任何一個指令，</p>\n<h1 id=\"程式執行\"><a href=\"#程式執行\" class=\"headerlink\" title=\"程式執行\"></a>程式執行</h1><p>除存在記憶體中的程式會複製到所需要的指令到 CPU 中，一但到了 CPU 就會將每個指令進行<code>解碼</code>並確實執行，除非有 <code>JUMP</code> 這個指令，否則都是按照儲存在記憶體中的順序執行。</p>\n<p>CPU 中有兩個專用的暫存器: <code>指令暫存器 (instrucvtion register)</code> 和 <code>程式計數器 (program counter)</code>，指令暫存器用於儲存正在執行的指令，程式計數器儲存下一個指令的位置。</p>\n<p>而 CPU 會不斷重複的執行三個步驟，這三個步驟就是所謂的<code>機械週期 (machine cycle)</code>，這三個步驟分別為<code>提取</code>, <code>解碼</code>, <code>執行</code>。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767HkSZwb5Hkr.png\" alt=\"drawing\" width=\"800\"/></p>\n<blockquote>\n<p>電腦時脈 (clock): 稱為振盪器電路，會產生<code>脈衝</code>以協調電腦內部的運作，脈衝越快電腦執行一個機械週期的時間也越快。</p>\n</blockquote>\n<ul>\n<li><strong>提取</strong>: 會讀取兩個記憶體的內容，CPU 將收到的指令存入指令暫存器中，接著把程式計數器增加為 2，使得程式計數器保有下一個指令在記憶體中的位置。</li>\n<li><strong>解碼</strong>: 指令存入指令暫存器中後，CPU 就會開始解碼</li>\n<li><strong>執行</strong>: CPU 會啟動適當的電路來執行解碼後的指令</li>\n</ul>\n<h1 id=\"算數-x2F-邏輯指令\"><a href=\"#算數-x2F-邏輯指令\" class=\"headerlink\" title=\"算數 &#x2F; 邏輯指令\"></a>算數 &#x2F; 邏輯指令</h1><p>邏輯運算是有 <code>AND</code>, <code>OR</code>, <code>XOR</code> 他們有各自不同的功用。</p>\n<p>主要的用途在能夠將某個位元字串放入 0 而不影響另一個位元字串，這種 AND 運算的用途就是<code>遮罩運算 (masking)</code>，遮罩運算的其中一組運算元稱為<code>遮罩(mask)</code>，用於決定另一組運算元中的那些位元會對結果有影響。</p>\n<p><code>AND</code> 運算也可以用來複製位元字串，其中非複製的部分為 <code>0</code>，除了 AND 之外 <code>OR</code> 也可以用來產生一個位元字串的複製，只是非複製的部分要放置 <code>1</code>，<code>XOR</code> 運算主要用於產生任何位元字串的<code>補數</code>，任何位元組與<code>全為 1</code>的遮罩進行 XOR 就能產生該位元組的補數</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     11111111</span><br><span class=\"line\">XOR  10101010</span><br><span class=\"line\">--------------</span><br><span class=\"line\">     01010101</span><br></pre></td></tr></table></figure>\n\n<p>所以 XOR 可以用來反轉 RGB 點陣圖圖像的所有位元，產生一個顏色反轉的彩色圖像，明亮的地方變深色反之亦然。</p>\n<h2 id=\"循環與位移運算式\"><a href=\"#循環與位移運算式\" class=\"headerlink\" title=\"循環與位移運算式\"></a>循環與位移運算式</h2><p>循環與位移的運算提供了在暫存器中移動位元的方法，常用來解決<code>排比 (alignment)</code> 問題，假設一個暫存器含有一位元組的空間，如果要將該位元組往右移動一個位元，可以想像最右端的位元從邊緣掉落，這樣最左邊就多了一個空位，那麼如何處理掉落的那個位元呢？有一種方式是將最右邊掉落的位元補在左邊空出的位置，這種方式稱<code>循環位移 (circular shift)</code> 也稱為 <code>循環 (rotation)</code>，所以如果同一個位元組往右移動 8 次，其結果就是原是的位元字串。</p>\n<p>另一種方式是把掉落的位元捨棄，把最左邊空位補上 <code>0</code>，這種方式稱為<code>邏輯位移 (logical shift)</code>，不管哪種位移方式都要注意保留正負號位元，能夠保留著正負號位元不變的位移有時候稱為<code>算數位移 (arithmetic shifts)</code>。</p>\n<h2 id=\"算數運算式\"><a href=\"#算數運算式\" class=\"headerlink\" title=\"算數運算式\"></a>算數運算式</h2><p>雖然運算式中有<code>加法</code>, <code>減法</code>, <code>乘法</code>, <code>除法</code>，但減法可以藉由<code>加法</code>和<code>取補數</code>來模擬，此外乘法是重複的加法而除法則是重複的減法，所以有些小型的 CPU 只設計了加法或是只設計加法與減法。</p>\n<h1 id=\"主設備之間的通訊\"><a href=\"#主設備之間的通訊\" class=\"headerlink\" title=\"主設備之間的通訊\"></a>主設備之間的通訊</h1><p>主記憶體和 CPU 是電腦的核心，本章將探討電腦的核心該如何與週邊設備 (大容量儲存裝置、鍵盤、滑鼠…) 進行溝通，甚至是如何與其他電腦進行溝通</p>\n<h2 id=\"控制器的作用\"><a href=\"#控制器的作用\" class=\"headerlink\" title=\"控制器的作用\"></a>控制器的作用</h2><p>電腦與其他裝置的通訊一般是經由一個<code>中介裝置</code>來控制，這個裝置稱為<code>控制器 (controller)</code>，控制器透過電線連接到電腦內部的裝置或透過電腦後面的<code>連接阜 (port)</code> 與電腦外部的裝置相連，控制器可將電腦與週邊設備的訊息和資料進行轉譯在來回傳遞，每個控制器與電腦的通訊都是通過匯流排連接，與 CPU 和主記憶體之間所連接的匯流排一樣。</p>\n<p>在某些電腦的設計中，CPU 和主記憶體溝通用的 <code>LOAD</code> 和 <code>STORE</code> 指令，也可以直接用在控制器的資料傳輸與接受上面，在這種情況控制器會對應到一組<code>唯一的地址</code>，並主記憶體會刻意跳過這個地址，因次當 CPU 通過匯流排要 STORE 一個位元字串到一個指定給控制器的地址時，該位元字串會被寫到<code>控制器</code>而不是記憶體中，同樣的如果 CPU 要讀取這個位置的資料的話，會 LOAD 控制器從而接收資料而非記憶體，這種通訊方式稱為<code>記憶體對映輸入輸出 (memory-mapped I/O)</code>。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767nruwCQ2Y2X.png\" alt=\"drawing\" width=\"800\"/>\n\n\n<h2 id=\"直接記憶體存取\"><a href=\"#直接記憶體存取\" class=\"headerlink\" title=\"直接記憶體存取\"></a>直接記憶體存取</h2><p>由於控制器連接到電腦的匯流排上，他可以在 CPU 沒有使用到匯流排的毫微秒空擋與記憶體進行通訊，這種能存取主記憶體的能力稱為<code>記憶體存取 (direct memory access, DMA)</code>，比如要從磁碟中讀取資料，CPU 可以傳送編碼過的位元字串到磁碟連接的控制器上並要求控制器讀取磁碟中的資料在存入指定的記憶體區域，所以當控制器在處理資料的儲存時 CPU 就可以趁這個空擋執行其他工作，可以不必為了等待速度較慢的資料傳輸而浪費計算資源。</p>\n<p>不過使用 <code>DMA</code> 也會有缺點，如果 CPU 和控制器都需要使用到匯流排，那們他們之間的競爭會使匯流排成為效能上的一個障礙，稱為<code>范紐曼瓶頸 (von Neumann bottleneek)</code>。</p>\n<h2 id=\"交握\"><a href=\"#交握\" class=\"headerlink\" title=\"交握\"></a>交握</h2><p>當兩個設備要進行雙向溝同時，不能由其中一個設備盲目的傳送資料給另一個設備，這樣會讓資料遺失的機率大幅增加，因次兩個設備互相溝通需要有<code>交握 (handshaking)</code> 的過程，這是電腦與周圍設備交換關於設備狀況的資訊並協調彼此的運作，交握通常包含著一個<code>狀態字 (status word)</code>，是由週邊設備產生出來的位元字串並傳送給控制器，狀態字是反映出這個週邊設備的狀態。</p>\n<h2 id=\"通訊媒介\"><a href=\"#通訊媒介\" class=\"headerlink\" title=\"通訊媒介\"></a>通訊媒介</h2><p>計算機設備通訊留兩種路徑處理：<code>平行</code>, <code>串列</code>，這兩種方法是指訊號是經由什麼分式傳輸</p>\n<ol>\n<li><strong>平行傳輸 (parallel communication)</strong>: 數個訊號會被同時傳送，每個訊號都經由<code>不同的線路</code>，這種方式可以快速的傳送資料但需要相對複雜的通訊路徑。</li>\n<li><strong>串列通訊 ()</strong>: 使用<code>單一線路</code>連接傳送訊號，相較於平行傳輸只需要簡單的路徑。</li>\n</ol>\n<h2 id=\"通訊速率\"><a href=\"#通訊速率\" class=\"headerlink\" title=\"通訊速率\"></a>通訊速率</h2><p>位元字串的傳輸速率是以<code>每秒位元 (bits per second, bps)</code> 來衡量，在英文縮寫裡小寫 b 代表<code>位元</code>大寫 B 代表<code>元組</code>。</p>\n<p>最高傳輸速率取決於通訊路徑的類別和應用的技術，最高傳輸速率通常相當於通訊路徑的<code>頻寬</code>，雖然頻寬也有容量的定義但當提到一個通訊路徑有很高的頻寬或提供<code>寬頻服務</code>時，意味著該通訊路徑能提供高速的位元傳輸速率，同時也能負載大量的資訊。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf\">computer science - AN OVERVIEW</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本章是對計算機概論的<code>資料處理</code>做一個整理與筆記，主要是介紹電腦是如何處理資料並且與週邊裝置進行溝通，會探索一些計算機架構的基本原理，也會使用機械語言指令進行一些程式設計。</p>\n<img src=\"https://images.idgesg.net/images/article/2018/03/blue-mother-board_circuitry_computer-chip_processor_harddrive-100751586-large.jpg?auto=webp&quality=85,70\" alt=\"drawing\" width=\"860\"/>","more":"<h1 id=\"計算機架構\"><a href=\"#計算機架構\" class=\"headerlink\" title=\"計算機架構\"></a>計算機架構</h1><p>電腦控制茲了的電路稱為<code>中央處理單元 (Central processing unit)</code> 或 <code>CPU (處理器)</code>。</p>\n<h2 id=\"CPU-的基本原理\"><a href=\"#CPU-的基本原理\" class=\"headerlink\" title=\"CPU 的基本原理\"></a>CPU 的基本原理</h2><p>CPU 包含三個主要部份</p>\n<ol>\n<li><strong>算數 &#x2F; 邏輯元件 (arithmetic&#x2F;logic unit)</strong>: 負責處理資料運算的電路，比如加減法的運算。</li>\n<li><strong>控制元件 (control unit)</strong>: 負責協調機器內部運作的電路。</li>\n<li><strong>暫存器元件 (register unit)</strong>: 負責儲存資料的地方，類似於主記憶體的儲存單元，稱為 <code>Registers</code> 主要是將資料暫存在 CPU 中。</li>\n</ol>\n<p>為了傳送位元字串，CPU 與主記憶體之間由一條稱為<code>匯流排</code>的線路連接。</p>\n<p>如果要將儲存在記憶體的數值進行加總，好型以下的步驟：</p>\n<ol>\n<li>將要加總的數值從記憶體中取出並存入暫存器中</li>\n<li>把要加總的另一個數也從記憶體中取出存放在另一個暫存器</li>\n<li>啟動<code>加法電路</code>將剛取出的兩個值進行加總，將輸出結果存放在另一個暫存器中</li>\n<li>將結果存回記憶體</li>\n</ol>\n<blockquote>\n<p>快取記憶體 (Cache memory): 讓資料傳輸變成是在暫存器與快取記憶體之間，任何資料的變動都先存放在快取記憶體中，等待適當的時機再一起存回主記憶體，可以讓 CPU 更快速地執行計算，避免與主記憶體進行溝通而造成時間上的延遲。 </p>\n</blockquote>\n<h1 id=\"機械語言\"><a href=\"#機械語言\" class=\"headerlink\" title=\"機械語言\"></a>機械語言</h1><p>能夠對 CPU 進行操作的指令以及編碼系統稱為機械語言 (machine language)，機械指令可以分為三類：</p>\n<h2 id=\"資料傳輸\"><a href=\"#資料傳輸\" class=\"headerlink\" title=\"資料傳輸\"></a>資料傳輸</h2><p>要求資料從一個地方移動到另一個地方的指令，資料在移動的時候很少會刪除原有位置上的資料，傳輸指令比較像是<code>複製資料</code>而非移動資料。</p>\n<ul>\n<li>以某記憶體儲存單位元內的資料移動到某個暫存器的指令稱為 <code>LOAD</code></li>\n<li>以某暫存器內資料移動到某記憶體儲存單位元的指令稱為 <code>STORE</code></li>\n</ul>\n<p>資料傳輸指令中有一組很重要的指令群，用來與 CPU 和主記憶體之外的裝置進行通訊命令，比如鍵盤, 螢幕…，這些稱為<code>輸入輸出指令 (I/O instructions)</code>。</p>\n<h2 id=\"運算邏輯\"><a href=\"#運算邏輯\" class=\"headerlink\" title=\"運算邏輯\"></a>運算邏輯</h2><p>顧名思義負責執行各種運算，包含<code>基本運算</code>、<code>布林運算 (AND, OR, XOR...)</code>、<code>資料位移運算 (SHIFT, ROTATE...)</code></p>\n<h2 id=\"控制\"><a href=\"#控制\" class=\"headerlink\" title=\"控制\"></a>控制</h2><p>包含一些引導程式執行的指令，比如 <code>JUMP</code>, <code>BRANCH</code> 是用來引導 CPU 去執行指令清單的任何一個指令，</p>\n<h1 id=\"程式執行\"><a href=\"#程式執行\" class=\"headerlink\" title=\"程式執行\"></a>程式執行</h1><p>除存在記憶體中的程式會複製到所需要的指令到 CPU 中，一但到了 CPU 就會將每個指令進行<code>解碼</code>並確實執行，除非有 <code>JUMP</code> 這個指令，否則都是按照儲存在記憶體中的順序執行。</p>\n<p>CPU 中有兩個專用的暫存器: <code>指令暫存器 (instrucvtion register)</code> 和 <code>程式計數器 (program counter)</code>，指令暫存器用於儲存正在執行的指令，程式計數器儲存下一個指令的位置。</p>\n<p>而 CPU 會不斷重複的執行三個步驟，這三個步驟就是所謂的<code>機械週期 (machine cycle)</code>，這三個步驟分別為<code>提取</code>, <code>解碼</code>, <code>執行</code>。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767HkSZwb5Hkr.png\" alt=\"drawing\" width=\"800\"/></p>\n<blockquote>\n<p>電腦時脈 (clock): 稱為振盪器電路，會產生<code>脈衝</code>以協調電腦內部的運作，脈衝越快電腦執行一個機械週期的時間也越快。</p>\n</blockquote>\n<ul>\n<li><strong>提取</strong>: 會讀取兩個記憶體的內容，CPU 將收到的指令存入指令暫存器中，接著把程式計數器增加為 2，使得程式計數器保有下一個指令在記憶體中的位置。</li>\n<li><strong>解碼</strong>: 指令存入指令暫存器中後，CPU 就會開始解碼</li>\n<li><strong>執行</strong>: CPU 會啟動適當的電路來執行解碼後的指令</li>\n</ul>\n<h1 id=\"算數-x2F-邏輯指令\"><a href=\"#算數-x2F-邏輯指令\" class=\"headerlink\" title=\"算數 &#x2F; 邏輯指令\"></a>算數 &#x2F; 邏輯指令</h1><p>邏輯運算是有 <code>AND</code>, <code>OR</code>, <code>XOR</code> 他們有各自不同的功用。</p>\n<p>主要的用途在能夠將某個位元字串放入 0 而不影響另一個位元字串，這種 AND 運算的用途就是<code>遮罩運算 (masking)</code>，遮罩運算的其中一組運算元稱為<code>遮罩(mask)</code>，用於決定另一組運算元中的那些位元會對結果有影響。</p>\n<p><code>AND</code> 運算也可以用來複製位元字串，其中非複製的部分為 <code>0</code>，除了 AND 之外 <code>OR</code> 也可以用來產生一個位元字串的複製，只是非複製的部分要放置 <code>1</code>，<code>XOR</code> 運算主要用於產生任何位元字串的<code>補數</code>，任何位元組與<code>全為 1</code>的遮罩進行 XOR 就能產生該位元組的補數</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     11111111</span><br><span class=\"line\">XOR  10101010</span><br><span class=\"line\">--------------</span><br><span class=\"line\">     01010101</span><br></pre></td></tr></table></figure>\n\n<p>所以 XOR 可以用來反轉 RGB 點陣圖圖像的所有位元，產生一個顏色反轉的彩色圖像，明亮的地方變深色反之亦然。</p>\n<h2 id=\"循環與位移運算式\"><a href=\"#循環與位移運算式\" class=\"headerlink\" title=\"循環與位移運算式\"></a>循環與位移運算式</h2><p>循環與位移的運算提供了在暫存器中移動位元的方法，常用來解決<code>排比 (alignment)</code> 問題，假設一個暫存器含有一位元組的空間，如果要將該位元組往右移動一個位元，可以想像最右端的位元從邊緣掉落，這樣最左邊就多了一個空位，那麼如何處理掉落的那個位元呢？有一種方式是將最右邊掉落的位元補在左邊空出的位置，這種方式稱<code>循環位移 (circular shift)</code> 也稱為 <code>循環 (rotation)</code>，所以如果同一個位元組往右移動 8 次，其結果就是原是的位元字串。</p>\n<p>另一種方式是把掉落的位元捨棄，把最左邊空位補上 <code>0</code>，這種方式稱為<code>邏輯位移 (logical shift)</code>，不管哪種位移方式都要注意保留正負號位元，能夠保留著正負號位元不變的位移有時候稱為<code>算數位移 (arithmetic shifts)</code>。</p>\n<h2 id=\"算數運算式\"><a href=\"#算數運算式\" class=\"headerlink\" title=\"算數運算式\"></a>算數運算式</h2><p>雖然運算式中有<code>加法</code>, <code>減法</code>, <code>乘法</code>, <code>除法</code>，但減法可以藉由<code>加法</code>和<code>取補數</code>來模擬，此外乘法是重複的加法而除法則是重複的減法，所以有些小型的 CPU 只設計了加法或是只設計加法與減法。</p>\n<h1 id=\"主設備之間的通訊\"><a href=\"#主設備之間的通訊\" class=\"headerlink\" title=\"主設備之間的通訊\"></a>主設備之間的通訊</h1><p>主記憶體和 CPU 是電腦的核心，本章將探討電腦的核心該如何與週邊設備 (大容量儲存裝置、鍵盤、滑鼠…) 進行溝通，甚至是如何與其他電腦進行溝通</p>\n<h2 id=\"控制器的作用\"><a href=\"#控制器的作用\" class=\"headerlink\" title=\"控制器的作用\"></a>控制器的作用</h2><p>電腦與其他裝置的通訊一般是經由一個<code>中介裝置</code>來控制，這個裝置稱為<code>控制器 (controller)</code>，控制器透過電線連接到電腦內部的裝置或透過電腦後面的<code>連接阜 (port)</code> 與電腦外部的裝置相連，控制器可將電腦與週邊設備的訊息和資料進行轉譯在來回傳遞，每個控制器與電腦的通訊都是通過匯流排連接，與 CPU 和主記憶體之間所連接的匯流排一樣。</p>\n<p>在某些電腦的設計中，CPU 和主記憶體溝通用的 <code>LOAD</code> 和 <code>STORE</code> 指令，也可以直接用在控制器的資料傳輸與接受上面，在這種情況控制器會對應到一組<code>唯一的地址</code>，並主記憶體會刻意跳過這個地址，因次當 CPU 通過匯流排要 STORE 一個位元字串到一個指定給控制器的地址時，該位元字串會被寫到<code>控制器</code>而不是記憶體中，同樣的如果 CPU 要讀取這個位置的資料的話，會 LOAD 控制器從而接收資料而非記憶體，這種通訊方式稱為<code>記憶體對映輸入輸出 (memory-mapped I/O)</code>。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767nruwCQ2Y2X.png\" alt=\"drawing\" width=\"800\"/>\n\n\n<h2 id=\"直接記憶體存取\"><a href=\"#直接記憶體存取\" class=\"headerlink\" title=\"直接記憶體存取\"></a>直接記憶體存取</h2><p>由於控制器連接到電腦的匯流排上，他可以在 CPU 沒有使用到匯流排的毫微秒空擋與記憶體進行通訊，這種能存取主記憶體的能力稱為<code>記憶體存取 (direct memory access, DMA)</code>，比如要從磁碟中讀取資料，CPU 可以傳送編碼過的位元字串到磁碟連接的控制器上並要求控制器讀取磁碟中的資料在存入指定的記憶體區域，所以當控制器在處理資料的儲存時 CPU 就可以趁這個空擋執行其他工作，可以不必為了等待速度較慢的資料傳輸而浪費計算資源。</p>\n<p>不過使用 <code>DMA</code> 也會有缺點，如果 CPU 和控制器都需要使用到匯流排，那們他們之間的競爭會使匯流排成為效能上的一個障礙，稱為<code>范紐曼瓶頸 (von Neumann bottleneek)</code>。</p>\n<h2 id=\"交握\"><a href=\"#交握\" class=\"headerlink\" title=\"交握\"></a>交握</h2><p>當兩個設備要進行雙向溝同時，不能由其中一個設備盲目的傳送資料給另一個設備，這樣會讓資料遺失的機率大幅增加，因次兩個設備互相溝通需要有<code>交握 (handshaking)</code> 的過程，這是電腦與周圍設備交換關於設備狀況的資訊並協調彼此的運作，交握通常包含著一個<code>狀態字 (status word)</code>，是由週邊設備產生出來的位元字串並傳送給控制器，狀態字是反映出這個週邊設備的狀態。</p>\n<h2 id=\"通訊媒介\"><a href=\"#通訊媒介\" class=\"headerlink\" title=\"通訊媒介\"></a>通訊媒介</h2><p>計算機設備通訊留兩種路徑處理：<code>平行</code>, <code>串列</code>，這兩種方法是指訊號是經由什麼分式傳輸</p>\n<ol>\n<li><strong>平行傳輸 (parallel communication)</strong>: 數個訊號會被同時傳送，每個訊號都經由<code>不同的線路</code>，這種方式可以快速的傳送資料但需要相對複雜的通訊路徑。</li>\n<li><strong>串列通訊 ()</strong>: 使用<code>單一線路</code>連接傳送訊號，相較於平行傳輸只需要簡單的路徑。</li>\n</ol>\n<h2 id=\"通訊速率\"><a href=\"#通訊速率\" class=\"headerlink\" title=\"通訊速率\"></a>通訊速率</h2><p>位元字串的傳輸速率是以<code>每秒位元 (bits per second, bps)</code> 來衡量，在英文縮寫裡小寫 b 代表<code>位元</code>大寫 B 代表<code>元組</code>。</p>\n<p>最高傳輸速率取決於通訊路徑的類別和應用的技術，最高傳輸速率通常相當於通訊路徑的<code>頻寬</code>，雖然頻寬也有容量的定義但當提到一個通訊路徑有很高的頻寬或提供<code>寬頻服務</code>時，意味著該通訊路徑能提供高速的位元傳輸速率，同時也能負載大量的資訊。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf\">computer science - AN OVERVIEW</a></li>\n</ul>"},{"title":"計算機概論 - 作業系統 Operating systems","date":"2022-02-18T07:26:14.000Z","_content":"\n作業系統 (operating system) 是控制電腦整體運作的軟體，提供使用者儲存和讀取檔案的路徑、提供介面讓使用能執行程式和提供程式執行所需要的環境。\n\n最著名的作業系統是微軟開發的 `Windows` 他廣泛地用在個人電腦中，另一個享有盛名的是 `UNIX` 廣泛用於大型電腦系統或個人電腦，UNIX 也是兩個很受歡迎的作業系統的核心，`Mac OS` 是 Apple 開發的作業系統，還有還有一種作業在大型電腦系統或個人電腦中常見的 `Linux` 是由一群電腦愛好者所開發的非商業性作業系統。\n\n<img src=\"https://www.wikigain.com/wp-content/uploads/2015/11/Various-kinds-of-Operating-Systems.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# 作業系統的歷史\n初期的作業系統僅只是為為簡化程式設定和精簡工作過度流程，早期的作業系統是將`使用者`與`設備`分離開來以減少人員進出電腦室的次數，要達到此目的就需要電腦操作人員來操作電腦，想要執行程式的人將程式和所需要的資料及程式執行所需要的說明提交操作人員，操作人員把程式和資料在載入到電腦的儲存設備中，接著作業程序的城市會讀取並執行這些程式，每次只執行一個這也就是所謂的`批次處理 (batch processing)`，亦即先把所有要執行的工作集合成一批在一個一個的處理，期間使用者將不會進行電腦的操作。\n\n在批次處理的作業系統中，位於儲存設備中的設備在工作的`工作佇列 (job queue)` 中等著被執行，`佇列 (queue)` 是一個儲存系統，遵照著`先進先出 (first-in, first-out FIFO)` 的順序執行。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ndaedXbpCA.png\" alt=\"drawing\" width=\"860\"/>\n\n但實際上大部分的工作並沒有嚴格的執行 FIFO 的順序，因為大多數的作業系統考量到工作的優先權，因為較高優先權的工作可以擠掉在工作佇列中等待執行的工作。\n\n在早期批次處理的作業系統中每個工作都盼隨著一組指令，用於說明電腦執行該程式時需要做的準備工作，這些指令是經過編碼以系統所知的`工作控制語言 (job control language, JCL)` 撰寫，並與工作一起儲存在工作佇列中，當程式要執行時作業系統會命令印表機影印出這些指令讓操作人員可以照這些指令進行操作。\n\n使用批次處理的作業系統的缺點就是一但將工作交給操作人員後就無法與他們的工作有互動，所以為了顧及互動的需求於是開發了新的作業系統，允許程式在執行時可以讓的使用者透過遠程終端機與程式進行互動，這種功能稱為`交談式處理 (interactive processing)`。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247678rA1CjIdMn.png\" alt=\"drawing\" width=\"860\"/>\n\n交談式處理的成功要素就是需要動作夠快，所以電腦比需要在某個時間前將工作執行完畢，因次所謂的`及時處理 (real-time processing)` 的程序就是指需要及時完成的程序，若電腦能夠即時執行某個工作表示該電腦能很快的在時限內完成該動作，但交談式系統`一次只能服務一個使用者`，所以無法解決需要滿足多人使用的功能。\n\n這個問題的解決辦法就是設計能夠`同時服務多人的作業系統`: 系統要有`分時 (time-sharing)`的特性，有一種實踐分時概念的方法稱為`多程式化 (multiprogramming)`，亦即時間被切割取多區域而`每個工作只允許執行一個區段的時間`，在區段時間結束時正在執行的工作就會暫時放在一邊，另一個工作會在下一個時間區段執行，藉由這種快速交錯執行可以產生許多工作同時執行的錯覺。\n\n到了現代作業系統地不斷演進，多處理器電腦的發展讓作業系統能夠藉由支配不同工作給不同處理器的方式而有`分時/多工`處理的能力，這類的作業系統必須處理像`負載平衡 (load balancing)` 和 `分割 (scaling)`這類的問題，負載平衡是只能夠`動態分配工作到不同處理器`，使得所有處理器都能有效率的被利用到，而分割是指`將工作分割為數個小工作`，讓所有處理器可以同時處理。\n\n# 作業系統架構\n為了瞭解一般作業系統架構，先來看看一般電腦系統中的軟體類型\n## 軟體概觀\n電腦軟體區分為兩大類: `應用軟體 (application software)` 和 `系統軟體 (system software)`，應用軟體包含`特定用途`的軟體比如`資料庫系統`, `排版系統`, `會計系統`...。 \n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767i0HxjtCZ3Z.png\" alt=\"drawing\" width=\"800\"/>\n\n而系統軟體一般用於電腦共通的工作上，系統軟體提供了應用軟體所需要的`基礎環境`，而系統軟體又可以分為兩類，一類是`作業系統本身`另一類是`公共軟體 (utility software)`，多數公共軟體用於`電腦基礎硬體設備的運作`上但不包含作業系統，從某種意義上來說公共軟體所包含的軟體是用於擴充作業系統的效能。\n\n## 作業系統的元件\n為了執行電腦使用者所要求的工作，作業系統必須要能夠與使用者進行溝通，而作業系統處以溝通的元件稱為`使用這介面 (user interface)`，舊得使用者介面稱為`外殼 (shells)` 是利用`鍵盤`和`螢幕`透過`文字訊息`的方式與使用者進行溝通; 而較新的系統使用`圖形使用者介面 (graphocal user interface, GUI)` 則是利用物件的方式來處理和使用者的溝通，雖然作業系統的使用者介面扮演著重要的角色，但也僅是作為使用者與作業系統之間的中介者。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767z0tsY7LnV5.png\" alt=\"drawing\" width=\"800\"/>\n\n相對於作業系統的使用者介面，作業系統內部稱為`核心 (kernel)`，它包含著哪些負責執行電腦基本功能的軟體。\n\n作業系統的核心元件是`裝置驅動程式 (device drivers)`，也就是用來溝通控制器的軟體元件，讓連接於電腦的周邊設備能夠正常運作，而每個裝置驅動程式都是針對`特定`型態的裝置所設計的，並將電腦裝置的操作請求轉呈裝置內部的特定程序。\n\n作業系統的另一個核心元件是`記憶體管理員 (memory manager)` 負責協調主記憶體的使用，在多人多工的還境下電腦在同一時間需要服務多人或執行多個程式，這種情況下記憶體管理員就非常重要了，多個程式和資料區塊同時存在主記憶體中，因此主記憶體必須要為了這些程式和資料只配記憶體空間並確保每個程式的運作都只局限在各自分配到的記憶體空間中，隨著程式和資料的來來去去，記憶體管理員就必須追蹤這些記憶體的使用狀況。\n\n若是主記憶體所需要的空間超過電腦實際的空間的話，記憶體管理員就會將程式和資料在主記憶體和儲存裝置中來回搬動以製造還有額外記憶體的假象，這種技術稱為`分頁處裡 (paging)`，分頁技術所製造出來的虛假記憶體空間稱為`虛擬記憶體 (virtual memory)`。\n\n## 啟動作業系統\n作業系統的啟動是透過`開機程序 (boot strapping)` 來完成簡單來說就是`開機 (booting)`，每當電腦打開後就會自動執行，這是將作業系統從硬體或其他儲存裝置載入到主記憶體中(當電腦打開時，主記憶體並未儲存任何內容)，當電腦第一次開啟時記憶體內需要有一個程式，但每當電腦關閉時儲存在記憶體的內容就會跟著消失，為了解決這個問題 CPU 會從電腦主記憶體的某個區塊讀取初始程式，這個初始程式放置於種`特殊非揮發`的記憶體中稱為`唯讀記憶體 (read-only memory, ROM)`。\n\n一般電腦中有個`啟動載入器 (boot loader)` 的程式儲存於 `ROM` 中，他就是當電腦第一次開啟時的初始程式，會引導 CPU 將作業洗桶從預先設定好的位置仔入到記憶體中，新式的啟動載入器可以從任何位置將作業系統載入到主記憶體中，所以執行`啟動載入器`和啟動`作業系統`就稱為電腦的`開機 (booting)`。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247673MDlDzZQwg.png\" alt=\"drawing\" width=\"860\"/>\n\n# 協調電腦的內部運作\n本章要介紹作業系統如何協調應用軟體、公共軟體以及作業洗桶元件之間的執行工作。\n## 處理程序的概念\n現代作業系統最基本的概念之一是程式與執行程式的區別，程式是靜態的指令集合，執行程式是動態的運作，程式的執行是在`作業系統的控制下運作`稱為`處理程序 (process)`，與處理程序相關連的是該程式執行的狀態稱為`處理狀態 (process state)`，一般分時多工的電腦會執行許多處理程序，所有的處理程序會彼此競爭電腦資源，所以作業系統會負責管理這些處理程序，讓每個處理程序能夠得到它需要的資源。\n\n## 處理程序管理\n協調處理程序的工作是由作業系統核心內的`排程器 (scheduler)` 和`調度器 (dispatcher)` 負責。\n### 排程器 (scheduler)\n排程器 (scheduler) 紀錄著電腦執行中的所有處理程序，並加入新的處理程序或移除已完成的處理程序，排程器為了要追蹤所有處理程序就需要在主記憶體中佔用一塊區域，稱之為`處理程序表 (process table)`，每當有程式要求執行就會在這裡新增一個項目以加入到新的程序中，如果是可以執行的狀態則該程序會定義為`就緒 (ready)`，如果需要延遲則定義為 `等待中 (watiting)`。\n\n### 調度器 (dispatcher)\n調度器 (dispatcher) 是作業系統核心元件之一，主要負責監控已排成的處理程序，在多時多工的系統中透過`多程式化 (multiprogramming)` 還處理已排程的程序，換句話說就是把時間分割為小片段，每個片段稱為`時間片段 (time slice)` 可以讓 CPU 在不同處理程序間轉換，每個處理程序只能執行一個時間片段，CPU 在處理程序之間切換的動作稱為`處理程序交換 (process seitch)` 或`數據交換 (context switch)`。\n\n每個調度器給予一個處理程序一個時間片段就會啟動一個計時器電路，他在時間片斷結束時會送出一個訊號稱為`中斷 (interrupt)`，CPU 收到後會暫停目前進行的工作並記錄工作中的階段以便稍後可以返回該進度然後再處理中斷的事情，所以當 CPU 收到中斷訊號會先完成目前的機械週期，保存狀態最後才執行`中斷處置氣 (interrupt handler)` 的程式，因此中斷訊號造成的效應是將`目前執行的處理程序暫停`，然後將控制轉給調度器此時調度器會從處理程序表中選擇一個`最高優先權且已就緒`的處理程序讓他執行。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ugLlYsRZlx.png\" alt=\"drawing\" width=\"900\"/>\n\n# 執行程序間的競爭關係\n作業系統的一項重要工作就是配置電腦資源給系統中的處理程序。\n## 信號標\n當作業系統需要追蹤某設備是否已經被使用，有一種方法是使用`旗標`，他是指記憶體上某個位元，狀態通成為`有 (set)` 和 `無 (clear)`，一個無旗標代表設備可以使用反之代表有設備正在被使用，但這種檢查和設定旗標可能需要數個機械指令來完成，因此可能在偵測到無旗標後以及設定旗標值之前產生一個中斷訊號，比如說要使用某個設備前檢測他的旗標發現是無，正要使用這個設備時他的時間片斷到期時，換了一個處理程序但他也是要使用該設備，所以他也會監測到此設備的旗標為無，所以就會開始使用這個設備，但當他的時間週期也結束切回一開始的處理程序時，他會遵照剛剛收到某設備旗標為無的結果使用該設備，這樣就會導致兩個不同的處理程序同時使用同一個設備。\n\n解決辦法就是堅持不讓檢查與設置旗標的工作被中斷，有兩種方法：\n1. **使用機械語言的指令**: 使用多數機械語言提供的`中斷去能 (interrupt disable)` 和`中斷賦能 (interrupt enable)` 兩個指令，若作業系統開始旗標值檢查會啟動中斷去能指令以防止動作被中斷，當檢查完後就會使用中斷賦能重新讓中斷功能恢復。\n2. **使用測試及設定指令 (test-and-set)**: 引導 CPU 去讀取旗標值接收到旗標值後設置旗標值，這些動作可以在一個機器指令中完成，好處是 CPU 會在收到中斷訊號前完成整個指令。\n\n## 死結 (deadlock)\n資運配置會遇到另一個問題就是`死結 (deadlock)`，當兩個以上的處理程序由於彼此都在等待一個已配置給對方資源而無從取得進展，比如說一個處理程序已獲得設備 A 的存取權限但在等待設備 B 的存取權限，但另一個處理程序則是獲得了設備 B 的存取權限但在等待設備 A 的存取權限，這樣就會造成死結 (deadlock)，要符合三種情況才可能發生死結：\n1. 競爭不可共用的資源\n2. 只要求部分的資源配置，亦即處理程序在配置某些資源後經過一段時間才要求存去其他資源\n3. 一但資源被配置就不能強迫收回\n\n`死結偵測與修正法會`偵測死結是否發生並`強制取回某些以配置的資源`已修正死結問題，例如使用這可以使用 `kill` 強制刪除某些處理程序，`死結避免法`則是讓每個處理程序一次請求所有的資源或是將不可共用的資源轉換為可共用資源，簡單來說就是將某個資源的請求全部同意並存放在一個位置中先保留起來等時機成熟後再輸出，這種技巧稱為`排存 (spooling)`。\n\n> 多核心作業系統: 傳統分時多工系統利用人力無法察覺的切換速度達到可以處理多個處理程序的錯覺，但現在的多核處理器則是真正能做到同時處理多個處理程序的功能，所唷對一個多核心的作業系統來說，排程器與調度器比須安排那個處理程序在哪個核心就會變得更複雜。\n\n# 安全性\n由於作業系統會監控電腦中發生的任何事件，所以很自然的也要維護著電腦的安全性。\n## 外部攻擊\n作業系統的一項重要任務就是防止電腦資源被未授權者進行存取，再多人共用的情況下，通常會對使用者建立`使用者帳號 (account)`，所以在系統中每個帳號其實都是一筆紀錄，包含了使用者名稱、密碼和使用者權限等等，這樣作業系統就可以依據帳號內容掌控使用者對系統的存取。\n\n這些使用這帳號通常是由`超級使用者 (super user)` 或`管理員 (administrator)` 所建立，他們擁有整個系統的最高權限，一但登錄系統就可以修改作業系統的設定值、變更重要軟體元件、調整使用者權限和執行許多系統維護工作，這些是一般使用者無權執行的。\n\n所以身為系統的最高權限者也可以監控系統中的所有事件，以找出任何破外系統的行為，所以為了輔助這些安全性的監控，所以發展出許多`多稽查軟體 (aduiting software)`，能夠紀錄並分析電腦系統所發生的事件，簡單來說他可以偵測使用不正確密碼登錄的行為也可以找出使用者與平常活動不相符的行為，比如說某個使用者常常只會用文書軟體或試算表，但某天突然開始使用高技術性的應用工具等等。\n\n## 內部攻擊\n一但入侵者得到的系統的權限，就會開始取得想要的資訊或是破壞系統的設置，如果是一般的使用者被入侵就必須要騙過系統以獲取更高的權限，但現今的 CPU 都經過強化可以阻擋類似的攻擊，比如處理程序被嚴格限制僅能存取記憶體管理員所配置的記憶體區塊，若沒有這樣的限制則處理程序就可以存記憶體刪除整個作業系統進而控制整個電腦。\n\n多程式化系統的 CPU 會在兩種`特權等級 (privilege level)` 其中之一運作，一種是`特權模式`另一種是`非特權模式`，在特權模式下 CPU 能夠執行所有機械語言下達的指令，相反的非特權模式中就只能執行有限的指令。\n\n能在特權模式下執行的指令稱為`特權指令 (privileged instructions)`，當 CPU 在非特權模式下運行時，如果嘗試執行一個特權指令的話會導致一個`中斷程序`，他會將 CPU 的運行模式轉換為`特權模式`並且將控制權交給作業程序裡的中斷處置器。\n\n當電腦開啟時 CPU 會處於特權模式，因此在開機程序後啟動作業程序時所有指令都能執行，然而每次作業系統允許處理程序使用其時間片段時，他會執行`變更特權模式`將 CPU 轉為非特權模式，這樣的好處是如果這個處理程序想要執行一個特權指令時，系統就會被告知。 \n\n# Reference\n- [computer science - AN OVERVIEW](https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf)","source":"_posts/計算機概論/operating-systems.md","raw":"---\ntitle: 計算機概論 - 作業系統 Operating systems\ndate: 2022-02-18 15:26:14\ntags:\n- 計算機概論\n\ncategories:\n- CS\n---\n\n作業系統 (operating system) 是控制電腦整體運作的軟體，提供使用者儲存和讀取檔案的路徑、提供介面讓使用能執行程式和提供程式執行所需要的環境。\n\n最著名的作業系統是微軟開發的 `Windows` 他廣泛地用在個人電腦中，另一個享有盛名的是 `UNIX` 廣泛用於大型電腦系統或個人電腦，UNIX 也是兩個很受歡迎的作業系統的核心，`Mac OS` 是 Apple 開發的作業系統，還有還有一種作業在大型電腦系統或個人電腦中常見的 `Linux` 是由一群電腦愛好者所開發的非商業性作業系統。\n\n<img src=\"https://www.wikigain.com/wp-content/uploads/2015/11/Various-kinds-of-Operating-Systems.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# 作業系統的歷史\n初期的作業系統僅只是為為簡化程式設定和精簡工作過度流程，早期的作業系統是將`使用者`與`設備`分離開來以減少人員進出電腦室的次數，要達到此目的就需要電腦操作人員來操作電腦，想要執行程式的人將程式和所需要的資料及程式執行所需要的說明提交操作人員，操作人員把程式和資料在載入到電腦的儲存設備中，接著作業程序的城市會讀取並執行這些程式，每次只執行一個這也就是所謂的`批次處理 (batch processing)`，亦即先把所有要執行的工作集合成一批在一個一個的處理，期間使用者將不會進行電腦的操作。\n\n在批次處理的作業系統中，位於儲存設備中的設備在工作的`工作佇列 (job queue)` 中等著被執行，`佇列 (queue)` 是一個儲存系統，遵照著`先進先出 (first-in, first-out FIFO)` 的順序執行。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ndaedXbpCA.png\" alt=\"drawing\" width=\"860\"/>\n\n但實際上大部分的工作並沒有嚴格的執行 FIFO 的順序，因為大多數的作業系統考量到工作的優先權，因為較高優先權的工作可以擠掉在工作佇列中等待執行的工作。\n\n在早期批次處理的作業系統中每個工作都盼隨著一組指令，用於說明電腦執行該程式時需要做的準備工作，這些指令是經過編碼以系統所知的`工作控制語言 (job control language, JCL)` 撰寫，並與工作一起儲存在工作佇列中，當程式要執行時作業系統會命令印表機影印出這些指令讓操作人員可以照這些指令進行操作。\n\n使用批次處理的作業系統的缺點就是一但將工作交給操作人員後就無法與他們的工作有互動，所以為了顧及互動的需求於是開發了新的作業系統，允許程式在執行時可以讓的使用者透過遠程終端機與程式進行互動，這種功能稱為`交談式處理 (interactive processing)`。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247678rA1CjIdMn.png\" alt=\"drawing\" width=\"860\"/>\n\n交談式處理的成功要素就是需要動作夠快，所以電腦比需要在某個時間前將工作執行完畢，因次所謂的`及時處理 (real-time processing)` 的程序就是指需要及時完成的程序，若電腦能夠即時執行某個工作表示該電腦能很快的在時限內完成該動作，但交談式系統`一次只能服務一個使用者`，所以無法解決需要滿足多人使用的功能。\n\n這個問題的解決辦法就是設計能夠`同時服務多人的作業系統`: 系統要有`分時 (time-sharing)`的特性，有一種實踐分時概念的方法稱為`多程式化 (multiprogramming)`，亦即時間被切割取多區域而`每個工作只允許執行一個區段的時間`，在區段時間結束時正在執行的工作就會暫時放在一邊，另一個工作會在下一個時間區段執行，藉由這種快速交錯執行可以產生許多工作同時執行的錯覺。\n\n到了現代作業系統地不斷演進，多處理器電腦的發展讓作業系統能夠藉由支配不同工作給不同處理器的方式而有`分時/多工`處理的能力，這類的作業系統必須處理像`負載平衡 (load balancing)` 和 `分割 (scaling)`這類的問題，負載平衡是只能夠`動態分配工作到不同處理器`，使得所有處理器都能有效率的被利用到，而分割是指`將工作分割為數個小工作`，讓所有處理器可以同時處理。\n\n# 作業系統架構\n為了瞭解一般作業系統架構，先來看看一般電腦系統中的軟體類型\n## 軟體概觀\n電腦軟體區分為兩大類: `應用軟體 (application software)` 和 `系統軟體 (system software)`，應用軟體包含`特定用途`的軟體比如`資料庫系統`, `排版系統`, `會計系統`...。 \n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767i0HxjtCZ3Z.png\" alt=\"drawing\" width=\"800\"/>\n\n而系統軟體一般用於電腦共通的工作上，系統軟體提供了應用軟體所需要的`基礎環境`，而系統軟體又可以分為兩類，一類是`作業系統本身`另一類是`公共軟體 (utility software)`，多數公共軟體用於`電腦基礎硬體設備的運作`上但不包含作業系統，從某種意義上來說公共軟體所包含的軟體是用於擴充作業系統的效能。\n\n## 作業系統的元件\n為了執行電腦使用者所要求的工作，作業系統必須要能夠與使用者進行溝通，而作業系統處以溝通的元件稱為`使用這介面 (user interface)`，舊得使用者介面稱為`外殼 (shells)` 是利用`鍵盤`和`螢幕`透過`文字訊息`的方式與使用者進行溝通; 而較新的系統使用`圖形使用者介面 (graphocal user interface, GUI)` 則是利用物件的方式來處理和使用者的溝通，雖然作業系統的使用者介面扮演著重要的角色，但也僅是作為使用者與作業系統之間的中介者。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767z0tsY7LnV5.png\" alt=\"drawing\" width=\"800\"/>\n\n相對於作業系統的使用者介面，作業系統內部稱為`核心 (kernel)`，它包含著哪些負責執行電腦基本功能的軟體。\n\n作業系統的核心元件是`裝置驅動程式 (device drivers)`，也就是用來溝通控制器的軟體元件，讓連接於電腦的周邊設備能夠正常運作，而每個裝置驅動程式都是針對`特定`型態的裝置所設計的，並將電腦裝置的操作請求轉呈裝置內部的特定程序。\n\n作業系統的另一個核心元件是`記憶體管理員 (memory manager)` 負責協調主記憶體的使用，在多人多工的還境下電腦在同一時間需要服務多人或執行多個程式，這種情況下記憶體管理員就非常重要了，多個程式和資料區塊同時存在主記憶體中，因此主記憶體必須要為了這些程式和資料只配記憶體空間並確保每個程式的運作都只局限在各自分配到的記憶體空間中，隨著程式和資料的來來去去，記憶體管理員就必須追蹤這些記憶體的使用狀況。\n\n若是主記憶體所需要的空間超過電腦實際的空間的話，記憶體管理員就會將程式和資料在主記憶體和儲存裝置中來回搬動以製造還有額外記憶體的假象，這種技術稱為`分頁處裡 (paging)`，分頁技術所製造出來的虛假記憶體空間稱為`虛擬記憶體 (virtual memory)`。\n\n## 啟動作業系統\n作業系統的啟動是透過`開機程序 (boot strapping)` 來完成簡單來說就是`開機 (booting)`，每當電腦打開後就會自動執行，這是將作業系統從硬體或其他儲存裝置載入到主記憶體中(當電腦打開時，主記憶體並未儲存任何內容)，當電腦第一次開啟時記憶體內需要有一個程式，但每當電腦關閉時儲存在記憶體的內容就會跟著消失，為了解決這個問題 CPU 會從電腦主記憶體的某個區塊讀取初始程式，這個初始程式放置於種`特殊非揮發`的記憶體中稱為`唯讀記憶體 (read-only memory, ROM)`。\n\n一般電腦中有個`啟動載入器 (boot loader)` 的程式儲存於 `ROM` 中，他就是當電腦第一次開啟時的初始程式，會引導 CPU 將作業洗桶從預先設定好的位置仔入到記憶體中，新式的啟動載入器可以從任何位置將作業系統載入到主記憶體中，所以執行`啟動載入器`和啟動`作業系統`就稱為電腦的`開機 (booting)`。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247673MDlDzZQwg.png\" alt=\"drawing\" width=\"860\"/>\n\n# 協調電腦的內部運作\n本章要介紹作業系統如何協調應用軟體、公共軟體以及作業洗桶元件之間的執行工作。\n## 處理程序的概念\n現代作業系統最基本的概念之一是程式與執行程式的區別，程式是靜態的指令集合，執行程式是動態的運作，程式的執行是在`作業系統的控制下運作`稱為`處理程序 (process)`，與處理程序相關連的是該程式執行的狀態稱為`處理狀態 (process state)`，一般分時多工的電腦會執行許多處理程序，所有的處理程序會彼此競爭電腦資源，所以作業系統會負責管理這些處理程序，讓每個處理程序能夠得到它需要的資源。\n\n## 處理程序管理\n協調處理程序的工作是由作業系統核心內的`排程器 (scheduler)` 和`調度器 (dispatcher)` 負責。\n### 排程器 (scheduler)\n排程器 (scheduler) 紀錄著電腦執行中的所有處理程序，並加入新的處理程序或移除已完成的處理程序，排程器為了要追蹤所有處理程序就需要在主記憶體中佔用一塊區域，稱之為`處理程序表 (process table)`，每當有程式要求執行就會在這裡新增一個項目以加入到新的程序中，如果是可以執行的狀態則該程序會定義為`就緒 (ready)`，如果需要延遲則定義為 `等待中 (watiting)`。\n\n### 調度器 (dispatcher)\n調度器 (dispatcher) 是作業系統核心元件之一，主要負責監控已排成的處理程序，在多時多工的系統中透過`多程式化 (multiprogramming)` 還處理已排程的程序，換句話說就是把時間分割為小片段，每個片段稱為`時間片段 (time slice)` 可以讓 CPU 在不同處理程序間轉換，每個處理程序只能執行一個時間片段，CPU 在處理程序之間切換的動作稱為`處理程序交換 (process seitch)` 或`數據交換 (context switch)`。\n\n每個調度器給予一個處理程序一個時間片段就會啟動一個計時器電路，他在時間片斷結束時會送出一個訊號稱為`中斷 (interrupt)`，CPU 收到後會暫停目前進行的工作並記錄工作中的階段以便稍後可以返回該進度然後再處理中斷的事情，所以當 CPU 收到中斷訊號會先完成目前的機械週期，保存狀態最後才執行`中斷處置氣 (interrupt handler)` 的程式，因此中斷訊號造成的效應是將`目前執行的處理程序暫停`，然後將控制轉給調度器此時調度器會從處理程序表中選擇一個`最高優先權且已就緒`的處理程序讓他執行。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ugLlYsRZlx.png\" alt=\"drawing\" width=\"900\"/>\n\n# 執行程序間的競爭關係\n作業系統的一項重要工作就是配置電腦資源給系統中的處理程序。\n## 信號標\n當作業系統需要追蹤某設備是否已經被使用，有一種方法是使用`旗標`，他是指記憶體上某個位元，狀態通成為`有 (set)` 和 `無 (clear)`，一個無旗標代表設備可以使用反之代表有設備正在被使用，但這種檢查和設定旗標可能需要數個機械指令來完成，因此可能在偵測到無旗標後以及設定旗標值之前產生一個中斷訊號，比如說要使用某個設備前檢測他的旗標發現是無，正要使用這個設備時他的時間片斷到期時，換了一個處理程序但他也是要使用該設備，所以他也會監測到此設備的旗標為無，所以就會開始使用這個設備，但當他的時間週期也結束切回一開始的處理程序時，他會遵照剛剛收到某設備旗標為無的結果使用該設備，這樣就會導致兩個不同的處理程序同時使用同一個設備。\n\n解決辦法就是堅持不讓檢查與設置旗標的工作被中斷，有兩種方法：\n1. **使用機械語言的指令**: 使用多數機械語言提供的`中斷去能 (interrupt disable)` 和`中斷賦能 (interrupt enable)` 兩個指令，若作業系統開始旗標值檢查會啟動中斷去能指令以防止動作被中斷，當檢查完後就會使用中斷賦能重新讓中斷功能恢復。\n2. **使用測試及設定指令 (test-and-set)**: 引導 CPU 去讀取旗標值接收到旗標值後設置旗標值，這些動作可以在一個機器指令中完成，好處是 CPU 會在收到中斷訊號前完成整個指令。\n\n## 死結 (deadlock)\n資運配置會遇到另一個問題就是`死結 (deadlock)`，當兩個以上的處理程序由於彼此都在等待一個已配置給對方資源而無從取得進展，比如說一個處理程序已獲得設備 A 的存取權限但在等待設備 B 的存取權限，但另一個處理程序則是獲得了設備 B 的存取權限但在等待設備 A 的存取權限，這樣就會造成死結 (deadlock)，要符合三種情況才可能發生死結：\n1. 競爭不可共用的資源\n2. 只要求部分的資源配置，亦即處理程序在配置某些資源後經過一段時間才要求存去其他資源\n3. 一但資源被配置就不能強迫收回\n\n`死結偵測與修正法會`偵測死結是否發生並`強制取回某些以配置的資源`已修正死結問題，例如使用這可以使用 `kill` 強制刪除某些處理程序，`死結避免法`則是讓每個處理程序一次請求所有的資源或是將不可共用的資源轉換為可共用資源，簡單來說就是將某個資源的請求全部同意並存放在一個位置中先保留起來等時機成熟後再輸出，這種技巧稱為`排存 (spooling)`。\n\n> 多核心作業系統: 傳統分時多工系統利用人力無法察覺的切換速度達到可以處理多個處理程序的錯覺，但現在的多核處理器則是真正能做到同時處理多個處理程序的功能，所唷對一個多核心的作業系統來說，排程器與調度器比須安排那個處理程序在哪個核心就會變得更複雜。\n\n# 安全性\n由於作業系統會監控電腦中發生的任何事件，所以很自然的也要維護著電腦的安全性。\n## 外部攻擊\n作業系統的一項重要任務就是防止電腦資源被未授權者進行存取，再多人共用的情況下，通常會對使用者建立`使用者帳號 (account)`，所以在系統中每個帳號其實都是一筆紀錄，包含了使用者名稱、密碼和使用者權限等等，這樣作業系統就可以依據帳號內容掌控使用者對系統的存取。\n\n這些使用這帳號通常是由`超級使用者 (super user)` 或`管理員 (administrator)` 所建立，他們擁有整個系統的最高權限，一但登錄系統就可以修改作業系統的設定值、變更重要軟體元件、調整使用者權限和執行許多系統維護工作，這些是一般使用者無權執行的。\n\n所以身為系統的最高權限者也可以監控系統中的所有事件，以找出任何破外系統的行為，所以為了輔助這些安全性的監控，所以發展出許多`多稽查軟體 (aduiting software)`，能夠紀錄並分析電腦系統所發生的事件，簡單來說他可以偵測使用不正確密碼登錄的行為也可以找出使用者與平常活動不相符的行為，比如說某個使用者常常只會用文書軟體或試算表，但某天突然開始使用高技術性的應用工具等等。\n\n## 內部攻擊\n一但入侵者得到的系統的權限，就會開始取得想要的資訊或是破壞系統的設置，如果是一般的使用者被入侵就必須要騙過系統以獲取更高的權限，但現今的 CPU 都經過強化可以阻擋類似的攻擊，比如處理程序被嚴格限制僅能存取記憶體管理員所配置的記憶體區塊，若沒有這樣的限制則處理程序就可以存記憶體刪除整個作業系統進而控制整個電腦。\n\n多程式化系統的 CPU 會在兩種`特權等級 (privilege level)` 其中之一運作，一種是`特權模式`另一種是`非特權模式`，在特權模式下 CPU 能夠執行所有機械語言下達的指令，相反的非特權模式中就只能執行有限的指令。\n\n能在特權模式下執行的指令稱為`特權指令 (privileged instructions)`，當 CPU 在非特權模式下運行時，如果嘗試執行一個特權指令的話會導致一個`中斷程序`，他會將 CPU 的運行模式轉換為`特權模式`並且將控制權交給作業程序裡的中斷處置器。\n\n當電腦開啟時 CPU 會處於特權模式，因此在開機程序後啟動作業程序時所有指令都能執行，然而每次作業系統允許處理程序使用其時間片段時，他會執行`變更特權模式`將 CPU 轉為非特權模式，這樣的好處是如果這個處理程序想要執行一個特權指令時，系統就會被告知。 \n\n# Reference\n- [computer science - AN OVERVIEW](https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf)","slug":"計算機概論/operating-systems","published":1,"updated":"2022-02-21T09:06:01.038Z","_id":"ckzwf368y0000v2w39q5l92m2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作業系統 (operating system) 是控制電腦整體運作的軟體，提供使用者儲存和讀取檔案的路徑、提供介面讓使用能執行程式和提供程式執行所需要的環境。</p>\n<p>最著名的作業系統是微軟開發的 <code>Windows</code> 他廣泛地用在個人電腦中，另一個享有盛名的是 <code>UNIX</code> 廣泛用於大型電腦系統或個人電腦，UNIX 也是兩個很受歡迎的作業系統的核心，<code>Mac OS</code> 是 Apple 開發的作業系統，還有還有一種作業在大型電腦系統或個人電腦中常見的 <code>Linux</code> 是由一群電腦愛好者所開發的非商業性作業系統。</p>\n<img src=\"https://www.wikigain.com/wp-content/uploads/2015/11/Various-kinds-of-Operating-Systems.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>\n\n<h1 id=\"作業系統的歷史\"><a href=\"#作業系統的歷史\" class=\"headerlink\" title=\"作業系統的歷史\"></a>作業系統的歷史</h1><p>初期的作業系統僅只是為為簡化程式設定和精簡工作過度流程，早期的作業系統是將<code>使用者</code>與<code>設備</code>分離開來以減少人員進出電腦室的次數，要達到此目的就需要電腦操作人員來操作電腦，想要執行程式的人將程式和所需要的資料及程式執行所需要的說明提交操作人員，操作人員把程式和資料在載入到電腦的儲存設備中，接著作業程序的城市會讀取並執行這些程式，每次只執行一個這也就是所謂的<code>批次處理 (batch processing)</code>，亦即先把所有要執行的工作集合成一批在一個一個的處理，期間使用者將不會進行電腦的操作。</p>\n<p>在批次處理的作業系統中，位於儲存設備中的設備在工作的<code>工作佇列 (job queue)</code> 中等著被執行，<code>佇列 (queue)</code> 是一個儲存系統，遵照著<code>先進先出 (first-in, first-out FIFO)</code> 的順序執行。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ndaedXbpCA.png\" alt=\"drawing\" width=\"860\"/>\n\n<p>但實際上大部分的工作並沒有嚴格的執行 FIFO 的順序，因為大多數的作業系統考量到工作的優先權，因為較高優先權的工作可以擠掉在工作佇列中等待執行的工作。</p>\n<p>在早期批次處理的作業系統中每個工作都盼隨著一組指令，用於說明電腦執行該程式時需要做的準備工作，這些指令是經過編碼以系統所知的<code>工作控制語言 (job control language, JCL)</code> 撰寫，並與工作一起儲存在工作佇列中，當程式要執行時作業系統會命令印表機影印出這些指令讓操作人員可以照這些指令進行操作。</p>\n<p>使用批次處理的作業系統的缺點就是一但將工作交給操作人員後就無法與他們的工作有互動，所以為了顧及互動的需求於是開發了新的作業系統，允許程式在執行時可以讓的使用者透過遠程終端機與程式進行互動，這種功能稱為<code>交談式處理 (interactive processing)</code>。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247678rA1CjIdMn.png\" alt=\"drawing\" width=\"860\"/>\n\n<p>交談式處理的成功要素就是需要動作夠快，所以電腦比需要在某個時間前將工作執行完畢，因次所謂的<code>及時處理 (real-time processing)</code> 的程序就是指需要及時完成的程序，若電腦能夠即時執行某個工作表示該電腦能很快的在時限內完成該動作，但交談式系統<code>一次只能服務一個使用者</code>，所以無法解決需要滿足多人使用的功能。</p>\n<p>這個問題的解決辦法就是設計能夠<code>同時服務多人的作業系統</code>: 系統要有<code>分時 (time-sharing)</code>的特性，有一種實踐分時概念的方法稱為<code>多程式化 (multiprogramming)</code>，亦即時間被切割取多區域而<code>每個工作只允許執行一個區段的時間</code>，在區段時間結束時正在執行的工作就會暫時放在一邊，另一個工作會在下一個時間區段執行，藉由這種快速交錯執行可以產生許多工作同時執行的錯覺。</p>\n<p>到了現代作業系統地不斷演進，多處理器電腦的發展讓作業系統能夠藉由支配不同工作給不同處理器的方式而有<code>分時/多工</code>處理的能力，這類的作業系統必須處理像<code>負載平衡 (load balancing)</code> 和 <code>分割 (scaling)</code>這類的問題，負載平衡是只能夠<code>動態分配工作到不同處理器</code>，使得所有處理器都能有效率的被利用到，而分割是指<code>將工作分割為數個小工作</code>，讓所有處理器可以同時處理。</p>\n<h1 id=\"作業系統架構\"><a href=\"#作業系統架構\" class=\"headerlink\" title=\"作業系統架構\"></a>作業系統架構</h1><p>為了瞭解一般作業系統架構，先來看看一般電腦系統中的軟體類型</p>\n<h2 id=\"軟體概觀\"><a href=\"#軟體概觀\" class=\"headerlink\" title=\"軟體概觀\"></a>軟體概觀</h2><p>電腦軟體區分為兩大類: <code>應用軟體 (application software)</code> 和 <code>系統軟體 (system software)</code>，應用軟體包含<code>特定用途</code>的軟體比如<code>資料庫系統</code>, <code>排版系統</code>, <code>會計系統</code>…。 </p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767i0HxjtCZ3Z.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>而系統軟體一般用於電腦共通的工作上，系統軟體提供了應用軟體所需要的<code>基礎環境</code>，而系統軟體又可以分為兩類，一類是<code>作業系統本身</code>另一類是<code>公共軟體 (utility software)</code>，多數公共軟體用於<code>電腦基礎硬體設備的運作</code>上但不包含作業系統，從某種意義上來說公共軟體所包含的軟體是用於擴充作業系統的效能。</p>\n<h2 id=\"作業系統的元件\"><a href=\"#作業系統的元件\" class=\"headerlink\" title=\"作業系統的元件\"></a>作業系統的元件</h2><p>為了執行電腦使用者所要求的工作，作業系統必須要能夠與使用者進行溝通，而作業系統處以溝通的元件稱為<code>使用這介面 (user interface)</code>，舊得使用者介面稱為<code>外殼 (shells)</code> 是利用<code>鍵盤</code>和<code>螢幕</code>透過<code>文字訊息</code>的方式與使用者進行溝通; 而較新的系統使用<code>圖形使用者介面 (graphocal user interface, GUI)</code> 則是利用物件的方式來處理和使用者的溝通，雖然作業系統的使用者介面扮演著重要的角色，但也僅是作為使用者與作業系統之間的中介者。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767z0tsY7LnV5.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>相對於作業系統的使用者介面，作業系統內部稱為<code>核心 (kernel)</code>，它包含著哪些負責執行電腦基本功能的軟體。</p>\n<p>作業系統的核心元件是<code>裝置驅動程式 (device drivers)</code>，也就是用來溝通控制器的軟體元件，讓連接於電腦的周邊設備能夠正常運作，而每個裝置驅動程式都是針對<code>特定</code>型態的裝置所設計的，並將電腦裝置的操作請求轉呈裝置內部的特定程序。</p>\n<p>作業系統的另一個核心元件是<code>記憶體管理員 (memory manager)</code> 負責協調主記憶體的使用，在多人多工的還境下電腦在同一時間需要服務多人或執行多個程式，這種情況下記憶體管理員就非常重要了，多個程式和資料區塊同時存在主記憶體中，因此主記憶體必須要為了這些程式和資料只配記憶體空間並確保每個程式的運作都只局限在各自分配到的記憶體空間中，隨著程式和資料的來來去去，記憶體管理員就必須追蹤這些記憶體的使用狀況。</p>\n<p>若是主記憶體所需要的空間超過電腦實際的空間的話，記憶體管理員就會將程式和資料在主記憶體和儲存裝置中來回搬動以製造還有額外記憶體的假象，這種技術稱為<code>分頁處裡 (paging)</code>，分頁技術所製造出來的虛假記憶體空間稱為<code>虛擬記憶體 (virtual memory)</code>。</p>\n<h2 id=\"啟動作業系統\"><a href=\"#啟動作業系統\" class=\"headerlink\" title=\"啟動作業系統\"></a>啟動作業系統</h2><p>作業系統的啟動是透過<code>開機程序 (boot strapping)</code> 來完成簡單來說就是<code>開機 (booting)</code>，每當電腦打開後就會自動執行，這是將作業系統從硬體或其他儲存裝置載入到主記憶體中(當電腦打開時，主記憶體並未儲存任何內容)，當電腦第一次開啟時記憶體內需要有一個程式，但每當電腦關閉時儲存在記憶體的內容就會跟著消失，為了解決這個問題 CPU 會從電腦主記憶體的某個區塊讀取初始程式，這個初始程式放置於種<code>特殊非揮發</code>的記憶體中稱為<code>唯讀記憶體 (read-only memory, ROM)</code>。</p>\n<p>一般電腦中有個<code>啟動載入器 (boot loader)</code> 的程式儲存於 <code>ROM</code> 中，他就是當電腦第一次開啟時的初始程式，會引導 CPU 將作業洗桶從預先設定好的位置仔入到記憶體中，新式的啟動載入器可以從任何位置將作業系統載入到主記憶體中，所以執行<code>啟動載入器</code>和啟動<code>作業系統</code>就稱為電腦的<code>開機 (booting)</code>。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247673MDlDzZQwg.png\" alt=\"drawing\" width=\"860\"/>\n\n<h1 id=\"協調電腦的內部運作\"><a href=\"#協調電腦的內部運作\" class=\"headerlink\" title=\"協調電腦的內部運作\"></a>協調電腦的內部運作</h1><p>本章要介紹作業系統如何協調應用軟體、公共軟體以及作業洗桶元件之間的執行工作。</p>\n<h2 id=\"處理程序的概念\"><a href=\"#處理程序的概念\" class=\"headerlink\" title=\"處理程序的概念\"></a>處理程序的概念</h2><p>現代作業系統最基本的概念之一是程式與執行程式的區別，程式是靜態的指令集合，執行程式是動態的運作，程式的執行是在<code>作業系統的控制下運作</code>稱為<code>處理程序 (process)</code>，與處理程序相關連的是該程式執行的狀態稱為<code>處理狀態 (process state)</code>，一般分時多工的電腦會執行許多處理程序，所有的處理程序會彼此競爭電腦資源，所以作業系統會負責管理這些處理程序，讓每個處理程序能夠得到它需要的資源。</p>\n<h2 id=\"處理程序管理\"><a href=\"#處理程序管理\" class=\"headerlink\" title=\"處理程序管理\"></a>處理程序管理</h2><p>協調處理程序的工作是由作業系統核心內的<code>排程器 (scheduler)</code> 和<code>調度器 (dispatcher)</code> 負責。</p>\n<h3 id=\"排程器-scheduler\"><a href=\"#排程器-scheduler\" class=\"headerlink\" title=\"排程器 (scheduler)\"></a>排程器 (scheduler)</h3><p>排程器 (scheduler) 紀錄著電腦執行中的所有處理程序，並加入新的處理程序或移除已完成的處理程序，排程器為了要追蹤所有處理程序就需要在主記憶體中佔用一塊區域，稱之為<code>處理程序表 (process table)</code>，每當有程式要求執行就會在這裡新增一個項目以加入到新的程序中，如果是可以執行的狀態則該程序會定義為<code>就緒 (ready)</code>，如果需要延遲則定義為 <code>等待中 (watiting)</code>。</p>\n<h3 id=\"調度器-dispatcher\"><a href=\"#調度器-dispatcher\" class=\"headerlink\" title=\"調度器 (dispatcher)\"></a>調度器 (dispatcher)</h3><p>調度器 (dispatcher) 是作業系統核心元件之一，主要負責監控已排成的處理程序，在多時多工的系統中透過<code>多程式化 (multiprogramming)</code> 還處理已排程的程序，換句話說就是把時間分割為小片段，每個片段稱為<code>時間片段 (time slice)</code> 可以讓 CPU 在不同處理程序間轉換，每個處理程序只能執行一個時間片段，CPU 在處理程序之間切換的動作稱為<code>處理程序交換 (process seitch)</code> 或<code>數據交換 (context switch)</code>。</p>\n<p>每個調度器給予一個處理程序一個時間片段就會啟動一個計時器電路，他在時間片斷結束時會送出一個訊號稱為<code>中斷 (interrupt)</code>，CPU 收到後會暫停目前進行的工作並記錄工作中的階段以便稍後可以返回該進度然後再處理中斷的事情，所以當 CPU 收到中斷訊號會先完成目前的機械週期，保存狀態最後才執行<code>中斷處置氣 (interrupt handler)</code> 的程式，因此中斷訊號造成的效應是將<code>目前執行的處理程序暫停</code>，然後將控制轉給調度器此時調度器會從處理程序表中選擇一個<code>最高優先權且已就緒</code>的處理程序讓他執行。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ugLlYsRZlx.png\" alt=\"drawing\" width=\"900\"/>\n\n<h1 id=\"執行程序間的競爭關係\"><a href=\"#執行程序間的競爭關係\" class=\"headerlink\" title=\"執行程序間的競爭關係\"></a>執行程序間的競爭關係</h1><p>作業系統的一項重要工作就是配置電腦資源給系統中的處理程序。</p>\n<h2 id=\"信號標\"><a href=\"#信號標\" class=\"headerlink\" title=\"信號標\"></a>信號標</h2><p>當作業系統需要追蹤某設備是否已經被使用，有一種方法是使用<code>旗標</code>，他是指記憶體上某個位元，狀態通成為<code>有 (set)</code> 和 <code>無 (clear)</code>，一個無旗標代表設備可以使用反之代表有設備正在被使用，但這種檢查和設定旗標可能需要數個機械指令來完成，因此可能在偵測到無旗標後以及設定旗標值之前產生一個中斷訊號，比如說要使用某個設備前檢測他的旗標發現是無，正要使用這個設備時他的時間片斷到期時，換了一個處理程序但他也是要使用該設備，所以他也會監測到此設備的旗標為無，所以就會開始使用這個設備，但當他的時間週期也結束切回一開始的處理程序時，他會遵照剛剛收到某設備旗標為無的結果使用該設備，這樣就會導致兩個不同的處理程序同時使用同一個設備。</p>\n<p>解決辦法就是堅持不讓檢查與設置旗標的工作被中斷，有兩種方法：</p>\n<ol>\n<li><strong>使用機械語言的指令</strong>: 使用多數機械語言提供的<code>中斷去能 (interrupt disable)</code> 和<code>中斷賦能 (interrupt enable)</code> 兩個指令，若作業系統開始旗標值檢查會啟動中斷去能指令以防止動作被中斷，當檢查完後就會使用中斷賦能重新讓中斷功能恢復。</li>\n<li><strong>使用測試及設定指令 (test-and-set)</strong>: 引導 CPU 去讀取旗標值接收到旗標值後設置旗標值，這些動作可以在一個機器指令中完成，好處是 CPU 會在收到中斷訊號前完成整個指令。</li>\n</ol>\n<h2 id=\"死結-deadlock\"><a href=\"#死結-deadlock\" class=\"headerlink\" title=\"死結 (deadlock)\"></a>死結 (deadlock)</h2><p>資運配置會遇到另一個問題就是<code>死結 (deadlock)</code>，當兩個以上的處理程序由於彼此都在等待一個已配置給對方資源而無從取得進展，比如說一個處理程序已獲得設備 A 的存取權限但在等待設備 B 的存取權限，但另一個處理程序則是獲得了設備 B 的存取權限但在等待設備 A 的存取權限，這樣就會造成死結 (deadlock)，要符合三種情況才可能發生死結：</p>\n<ol>\n<li>競爭不可共用的資源</li>\n<li>只要求部分的資源配置，亦即處理程序在配置某些資源後經過一段時間才要求存去其他資源</li>\n<li>一但資源被配置就不能強迫收回</li>\n</ol>\n<p><code>死結偵測與修正法會</code>偵測死結是否發生並<code>強制取回某些以配置的資源</code>已修正死結問題，例如使用這可以使用 <code>kill</code> 強制刪除某些處理程序，<code>死結避免法</code>則是讓每個處理程序一次請求所有的資源或是將不可共用的資源轉換為可共用資源，簡單來說就是將某個資源的請求全部同意並存放在一個位置中先保留起來等時機成熟後再輸出，這種技巧稱為<code>排存 (spooling)</code>。</p>\n<blockquote>\n<p>多核心作業系統: 傳統分時多工系統利用人力無法察覺的切換速度達到可以處理多個處理程序的錯覺，但現在的多核處理器則是真正能做到同時處理多個處理程序的功能，所唷對一個多核心的作業系統來說，排程器與調度器比須安排那個處理程序在哪個核心就會變得更複雜。</p>\n</blockquote>\n<h1 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h1><p>由於作業系統會監控電腦中發生的任何事件，所以很自然的也要維護著電腦的安全性。</p>\n<h2 id=\"外部攻擊\"><a href=\"#外部攻擊\" class=\"headerlink\" title=\"外部攻擊\"></a>外部攻擊</h2><p>作業系統的一項重要任務就是防止電腦資源被未授權者進行存取，再多人共用的情況下，通常會對使用者建立<code>使用者帳號 (account)</code>，所以在系統中每個帳號其實都是一筆紀錄，包含了使用者名稱、密碼和使用者權限等等，這樣作業系統就可以依據帳號內容掌控使用者對系統的存取。</p>\n<p>這些使用這帳號通常是由<code>超級使用者 (super user)</code> 或<code>管理員 (administrator)</code> 所建立，他們擁有整個系統的最高權限，一但登錄系統就可以修改作業系統的設定值、變更重要軟體元件、調整使用者權限和執行許多系統維護工作，這些是一般使用者無權執行的。</p>\n<p>所以身為系統的最高權限者也可以監控系統中的所有事件，以找出任何破外系統的行為，所以為了輔助這些安全性的監控，所以發展出許多<code>多稽查軟體 (aduiting software)</code>，能夠紀錄並分析電腦系統所發生的事件，簡單來說他可以偵測使用不正確密碼登錄的行為也可以找出使用者與平常活動不相符的行為，比如說某個使用者常常只會用文書軟體或試算表，但某天突然開始使用高技術性的應用工具等等。</p>\n<h2 id=\"內部攻擊\"><a href=\"#內部攻擊\" class=\"headerlink\" title=\"內部攻擊\"></a>內部攻擊</h2><p>一但入侵者得到的系統的權限，就會開始取得想要的資訊或是破壞系統的設置，如果是一般的使用者被入侵就必須要騙過系統以獲取更高的權限，但現今的 CPU 都經過強化可以阻擋類似的攻擊，比如處理程序被嚴格限制僅能存取記憶體管理員所配置的記憶體區塊，若沒有這樣的限制則處理程序就可以存記憶體刪除整個作業系統進而控制整個電腦。</p>\n<p>多程式化系統的 CPU 會在兩種<code>特權等級 (privilege level)</code> 其中之一運作，一種是<code>特權模式</code>另一種是<code>非特權模式</code>，在特權模式下 CPU 能夠執行所有機械語言下達的指令，相反的非特權模式中就只能執行有限的指令。</p>\n<p>能在特權模式下執行的指令稱為<code>特權指令 (privileged instructions)</code>，當 CPU 在非特權模式下運行時，如果嘗試執行一個特權指令的話會導致一個<code>中斷程序</code>，他會將 CPU 的運行模式轉換為<code>特權模式</code>並且將控制權交給作業程序裡的中斷處置器。</p>\n<p>當電腦開啟時 CPU 會處於特權模式，因此在開機程序後啟動作業程序時所有指令都能執行，然而每次作業系統允許處理程序使用其時間片段時，他會執行<code>變更特權模式</code>將 CPU 轉為非特權模式，這樣的好處是如果這個處理程序想要執行一個特權指令時，系統就會被告知。 </p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf\">computer science - AN OVERVIEW</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>作業系統 (operating system) 是控制電腦整體運作的軟體，提供使用者儲存和讀取檔案的路徑、提供介面讓使用能執行程式和提供程式執行所需要的環境。</p>\n<p>最著名的作業系統是微軟開發的 <code>Windows</code> 他廣泛地用在個人電腦中，另一個享有盛名的是 <code>UNIX</code> 廣泛用於大型電腦系統或個人電腦，UNIX 也是兩個很受歡迎的作業系統的核心，<code>Mac OS</code> 是 Apple 開發的作業系統，還有還有一種作業在大型電腦系統或個人電腦中常見的 <code>Linux</code> 是由一群電腦愛好者所開發的非商業性作業系統。</p>\n<img src=\"https://www.wikigain.com/wp-content/uploads/2015/11/Various-kinds-of-Operating-Systems.jpg\" alt=\"drawing\" width=\"860\"/>","more":"<h1 id=\"作業系統的歷史\"><a href=\"#作業系統的歷史\" class=\"headerlink\" title=\"作業系統的歷史\"></a>作業系統的歷史</h1><p>初期的作業系統僅只是為為簡化程式設定和精簡工作過度流程，早期的作業系統是將<code>使用者</code>與<code>設備</code>分離開來以減少人員進出電腦室的次數，要達到此目的就需要電腦操作人員來操作電腦，想要執行程式的人將程式和所需要的資料及程式執行所需要的說明提交操作人員，操作人員把程式和資料在載入到電腦的儲存設備中，接著作業程序的城市會讀取並執行這些程式，每次只執行一個這也就是所謂的<code>批次處理 (batch processing)</code>，亦即先把所有要執行的工作集合成一批在一個一個的處理，期間使用者將不會進行電腦的操作。</p>\n<p>在批次處理的作業系統中，位於儲存設備中的設備在工作的<code>工作佇列 (job queue)</code> 中等著被執行，<code>佇列 (queue)</code> 是一個儲存系統，遵照著<code>先進先出 (first-in, first-out FIFO)</code> 的順序執行。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ndaedXbpCA.png\" alt=\"drawing\" width=\"860\"/>\n\n<p>但實際上大部分的工作並沒有嚴格的執行 FIFO 的順序，因為大多數的作業系統考量到工作的優先權，因為較高優先權的工作可以擠掉在工作佇列中等待執行的工作。</p>\n<p>在早期批次處理的作業系統中每個工作都盼隨著一組指令，用於說明電腦執行該程式時需要做的準備工作，這些指令是經過編碼以系統所知的<code>工作控制語言 (job control language, JCL)</code> 撰寫，並與工作一起儲存在工作佇列中，當程式要執行時作業系統會命令印表機影印出這些指令讓操作人員可以照這些指令進行操作。</p>\n<p>使用批次處理的作業系統的缺點就是一但將工作交給操作人員後就無法與他們的工作有互動，所以為了顧及互動的需求於是開發了新的作業系統，允許程式在執行時可以讓的使用者透過遠程終端機與程式進行互動，這種功能稱為<code>交談式處理 (interactive processing)</code>。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247678rA1CjIdMn.png\" alt=\"drawing\" width=\"860\"/>\n\n<p>交談式處理的成功要素就是需要動作夠快，所以電腦比需要在某個時間前將工作執行完畢，因次所謂的<code>及時處理 (real-time processing)</code> 的程序就是指需要及時完成的程序，若電腦能夠即時執行某個工作表示該電腦能很快的在時限內完成該動作，但交談式系統<code>一次只能服務一個使用者</code>，所以無法解決需要滿足多人使用的功能。</p>\n<p>這個問題的解決辦法就是設計能夠<code>同時服務多人的作業系統</code>: 系統要有<code>分時 (time-sharing)</code>的特性，有一種實踐分時概念的方法稱為<code>多程式化 (multiprogramming)</code>，亦即時間被切割取多區域而<code>每個工作只允許執行一個區段的時間</code>，在區段時間結束時正在執行的工作就會暫時放在一邊，另一個工作會在下一個時間區段執行，藉由這種快速交錯執行可以產生許多工作同時執行的錯覺。</p>\n<p>到了現代作業系統地不斷演進，多處理器電腦的發展讓作業系統能夠藉由支配不同工作給不同處理器的方式而有<code>分時/多工</code>處理的能力，這類的作業系統必須處理像<code>負載平衡 (load balancing)</code> 和 <code>分割 (scaling)</code>這類的問題，負載平衡是只能夠<code>動態分配工作到不同處理器</code>，使得所有處理器都能有效率的被利用到，而分割是指<code>將工作分割為數個小工作</code>，讓所有處理器可以同時處理。</p>\n<h1 id=\"作業系統架構\"><a href=\"#作業系統架構\" class=\"headerlink\" title=\"作業系統架構\"></a>作業系統架構</h1><p>為了瞭解一般作業系統架構，先來看看一般電腦系統中的軟體類型</p>\n<h2 id=\"軟體概觀\"><a href=\"#軟體概觀\" class=\"headerlink\" title=\"軟體概觀\"></a>軟體概觀</h2><p>電腦軟體區分為兩大類: <code>應用軟體 (application software)</code> 和 <code>系統軟體 (system software)</code>，應用軟體包含<code>特定用途</code>的軟體比如<code>資料庫系統</code>, <code>排版系統</code>, <code>會計系統</code>…。 </p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767i0HxjtCZ3Z.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>而系統軟體一般用於電腦共通的工作上，系統軟體提供了應用軟體所需要的<code>基礎環境</code>，而系統軟體又可以分為兩類，一類是<code>作業系統本身</code>另一類是<code>公共軟體 (utility software)</code>，多數公共軟體用於<code>電腦基礎硬體設備的運作</code>上但不包含作業系統，從某種意義上來說公共軟體所包含的軟體是用於擴充作業系統的效能。</p>\n<h2 id=\"作業系統的元件\"><a href=\"#作業系統的元件\" class=\"headerlink\" title=\"作業系統的元件\"></a>作業系統的元件</h2><p>為了執行電腦使用者所要求的工作，作業系統必須要能夠與使用者進行溝通，而作業系統處以溝通的元件稱為<code>使用這介面 (user interface)</code>，舊得使用者介面稱為<code>外殼 (shells)</code> 是利用<code>鍵盤</code>和<code>螢幕</code>透過<code>文字訊息</code>的方式與使用者進行溝通; 而較新的系統使用<code>圖形使用者介面 (graphocal user interface, GUI)</code> 則是利用物件的方式來處理和使用者的溝通，雖然作業系統的使用者介面扮演著重要的角色，但也僅是作為使用者與作業系統之間的中介者。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767z0tsY7LnV5.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>相對於作業系統的使用者介面，作業系統內部稱為<code>核心 (kernel)</code>，它包含著哪些負責執行電腦基本功能的軟體。</p>\n<p>作業系統的核心元件是<code>裝置驅動程式 (device drivers)</code>，也就是用來溝通控制器的軟體元件，讓連接於電腦的周邊設備能夠正常運作，而每個裝置驅動程式都是針對<code>特定</code>型態的裝置所設計的，並將電腦裝置的操作請求轉呈裝置內部的特定程序。</p>\n<p>作業系統的另一個核心元件是<code>記憶體管理員 (memory manager)</code> 負責協調主記憶體的使用，在多人多工的還境下電腦在同一時間需要服務多人或執行多個程式，這種情況下記憶體管理員就非常重要了，多個程式和資料區塊同時存在主記憶體中，因此主記憶體必須要為了這些程式和資料只配記憶體空間並確保每個程式的運作都只局限在各自分配到的記憶體空間中，隨著程式和資料的來來去去，記憶體管理員就必須追蹤這些記憶體的使用狀況。</p>\n<p>若是主記憶體所需要的空間超過電腦實際的空間的話，記憶體管理員就會將程式和資料在主記憶體和儲存裝置中來回搬動以製造還有額外記憶體的假象，這種技術稱為<code>分頁處裡 (paging)</code>，分頁技術所製造出來的虛假記憶體空間稱為<code>虛擬記憶體 (virtual memory)</code>。</p>\n<h2 id=\"啟動作業系統\"><a href=\"#啟動作業系統\" class=\"headerlink\" title=\"啟動作業系統\"></a>啟動作業系統</h2><p>作業系統的啟動是透過<code>開機程序 (boot strapping)</code> 來完成簡單來說就是<code>開機 (booting)</code>，每當電腦打開後就會自動執行，這是將作業系統從硬體或其他儲存裝置載入到主記憶體中(當電腦打開時，主記憶體並未儲存任何內容)，當電腦第一次開啟時記憶體內需要有一個程式，但每當電腦關閉時儲存在記憶體的內容就會跟著消失，為了解決這個問題 CPU 會從電腦主記憶體的某個區塊讀取初始程式，這個初始程式放置於種<code>特殊非揮發</code>的記憶體中稱為<code>唯讀記憶體 (read-only memory, ROM)</code>。</p>\n<p>一般電腦中有個<code>啟動載入器 (boot loader)</code> 的程式儲存於 <code>ROM</code> 中，他就是當電腦第一次開啟時的初始程式，會引導 CPU 將作業洗桶從預先設定好的位置仔入到記憶體中，新式的啟動載入器可以從任何位置將作業系統載入到主記憶體中，所以執行<code>啟動載入器</code>和啟動<code>作業系統</code>就稱為電腦的<code>開機 (booting)</code>。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/201247673MDlDzZQwg.png\" alt=\"drawing\" width=\"860\"/>\n\n<h1 id=\"協調電腦的內部運作\"><a href=\"#協調電腦的內部運作\" class=\"headerlink\" title=\"協調電腦的內部運作\"></a>協調電腦的內部運作</h1><p>本章要介紹作業系統如何協調應用軟體、公共軟體以及作業洗桶元件之間的執行工作。</p>\n<h2 id=\"處理程序的概念\"><a href=\"#處理程序的概念\" class=\"headerlink\" title=\"處理程序的概念\"></a>處理程序的概念</h2><p>現代作業系統最基本的概念之一是程式與執行程式的區別，程式是靜態的指令集合，執行程式是動態的運作，程式的執行是在<code>作業系統的控制下運作</code>稱為<code>處理程序 (process)</code>，與處理程序相關連的是該程式執行的狀態稱為<code>處理狀態 (process state)</code>，一般分時多工的電腦會執行許多處理程序，所有的處理程序會彼此競爭電腦資源，所以作業系統會負責管理這些處理程序，讓每個處理程序能夠得到它需要的資源。</p>\n<h2 id=\"處理程序管理\"><a href=\"#處理程序管理\" class=\"headerlink\" title=\"處理程序管理\"></a>處理程序管理</h2><p>協調處理程序的工作是由作業系統核心內的<code>排程器 (scheduler)</code> 和<code>調度器 (dispatcher)</code> 負責。</p>\n<h3 id=\"排程器-scheduler\"><a href=\"#排程器-scheduler\" class=\"headerlink\" title=\"排程器 (scheduler)\"></a>排程器 (scheduler)</h3><p>排程器 (scheduler) 紀錄著電腦執行中的所有處理程序，並加入新的處理程序或移除已完成的處理程序，排程器為了要追蹤所有處理程序就需要在主記憶體中佔用一塊區域，稱之為<code>處理程序表 (process table)</code>，每當有程式要求執行就會在這裡新增一個項目以加入到新的程序中，如果是可以執行的狀態則該程序會定義為<code>就緒 (ready)</code>，如果需要延遲則定義為 <code>等待中 (watiting)</code>。</p>\n<h3 id=\"調度器-dispatcher\"><a href=\"#調度器-dispatcher\" class=\"headerlink\" title=\"調度器 (dispatcher)\"></a>調度器 (dispatcher)</h3><p>調度器 (dispatcher) 是作業系統核心元件之一，主要負責監控已排成的處理程序，在多時多工的系統中透過<code>多程式化 (multiprogramming)</code> 還處理已排程的程序，換句話說就是把時間分割為小片段，每個片段稱為<code>時間片段 (time slice)</code> 可以讓 CPU 在不同處理程序間轉換，每個處理程序只能執行一個時間片段，CPU 在處理程序之間切換的動作稱為<code>處理程序交換 (process seitch)</code> 或<code>數據交換 (context switch)</code>。</p>\n<p>每個調度器給予一個處理程序一個時間片段就會啟動一個計時器電路，他在時間片斷結束時會送出一個訊號稱為<code>中斷 (interrupt)</code>，CPU 收到後會暫停目前進行的工作並記錄工作中的階段以便稍後可以返回該進度然後再處理中斷的事情，所以當 CPU 收到中斷訊號會先完成目前的機械週期，保存狀態最後才執行<code>中斷處置氣 (interrupt handler)</code> 的程式，因此中斷訊號造成的效應是將<code>目前執行的處理程序暫停</code>，然後將控制轉給調度器此時調度器會從處理程序表中選擇一個<code>最高優先權且已就緒</code>的處理程序讓他執行。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220218/20124767ugLlYsRZlx.png\" alt=\"drawing\" width=\"900\"/>\n\n<h1 id=\"執行程序間的競爭關係\"><a href=\"#執行程序間的競爭關係\" class=\"headerlink\" title=\"執行程序間的競爭關係\"></a>執行程序間的競爭關係</h1><p>作業系統的一項重要工作就是配置電腦資源給系統中的處理程序。</p>\n<h2 id=\"信號標\"><a href=\"#信號標\" class=\"headerlink\" title=\"信號標\"></a>信號標</h2><p>當作業系統需要追蹤某設備是否已經被使用，有一種方法是使用<code>旗標</code>，他是指記憶體上某個位元，狀態通成為<code>有 (set)</code> 和 <code>無 (clear)</code>，一個無旗標代表設備可以使用反之代表有設備正在被使用，但這種檢查和設定旗標可能需要數個機械指令來完成，因此可能在偵測到無旗標後以及設定旗標值之前產生一個中斷訊號，比如說要使用某個設備前檢測他的旗標發現是無，正要使用這個設備時他的時間片斷到期時，換了一個處理程序但他也是要使用該設備，所以他也會監測到此設備的旗標為無，所以就會開始使用這個設備，但當他的時間週期也結束切回一開始的處理程序時，他會遵照剛剛收到某設備旗標為無的結果使用該設備，這樣就會導致兩個不同的處理程序同時使用同一個設備。</p>\n<p>解決辦法就是堅持不讓檢查與設置旗標的工作被中斷，有兩種方法：</p>\n<ol>\n<li><strong>使用機械語言的指令</strong>: 使用多數機械語言提供的<code>中斷去能 (interrupt disable)</code> 和<code>中斷賦能 (interrupt enable)</code> 兩個指令，若作業系統開始旗標值檢查會啟動中斷去能指令以防止動作被中斷，當檢查完後就會使用中斷賦能重新讓中斷功能恢復。</li>\n<li><strong>使用測試及設定指令 (test-and-set)</strong>: 引導 CPU 去讀取旗標值接收到旗標值後設置旗標值，這些動作可以在一個機器指令中完成，好處是 CPU 會在收到中斷訊號前完成整個指令。</li>\n</ol>\n<h2 id=\"死結-deadlock\"><a href=\"#死結-deadlock\" class=\"headerlink\" title=\"死結 (deadlock)\"></a>死結 (deadlock)</h2><p>資運配置會遇到另一個問題就是<code>死結 (deadlock)</code>，當兩個以上的處理程序由於彼此都在等待一個已配置給對方資源而無從取得進展，比如說一個處理程序已獲得設備 A 的存取權限但在等待設備 B 的存取權限，但另一個處理程序則是獲得了設備 B 的存取權限但在等待設備 A 的存取權限，這樣就會造成死結 (deadlock)，要符合三種情況才可能發生死結：</p>\n<ol>\n<li>競爭不可共用的資源</li>\n<li>只要求部分的資源配置，亦即處理程序在配置某些資源後經過一段時間才要求存去其他資源</li>\n<li>一但資源被配置就不能強迫收回</li>\n</ol>\n<p><code>死結偵測與修正法會</code>偵測死結是否發生並<code>強制取回某些以配置的資源</code>已修正死結問題，例如使用這可以使用 <code>kill</code> 強制刪除某些處理程序，<code>死結避免法</code>則是讓每個處理程序一次請求所有的資源或是將不可共用的資源轉換為可共用資源，簡單來說就是將某個資源的請求全部同意並存放在一個位置中先保留起來等時機成熟後再輸出，這種技巧稱為<code>排存 (spooling)</code>。</p>\n<blockquote>\n<p>多核心作業系統: 傳統分時多工系統利用人力無法察覺的切換速度達到可以處理多個處理程序的錯覺，但現在的多核處理器則是真正能做到同時處理多個處理程序的功能，所唷對一個多核心的作業系統來說，排程器與調度器比須安排那個處理程序在哪個核心就會變得更複雜。</p>\n</blockquote>\n<h1 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h1><p>由於作業系統會監控電腦中發生的任何事件，所以很自然的也要維護著電腦的安全性。</p>\n<h2 id=\"外部攻擊\"><a href=\"#外部攻擊\" class=\"headerlink\" title=\"外部攻擊\"></a>外部攻擊</h2><p>作業系統的一項重要任務就是防止電腦資源被未授權者進行存取，再多人共用的情況下，通常會對使用者建立<code>使用者帳號 (account)</code>，所以在系統中每個帳號其實都是一筆紀錄，包含了使用者名稱、密碼和使用者權限等等，這樣作業系統就可以依據帳號內容掌控使用者對系統的存取。</p>\n<p>這些使用這帳號通常是由<code>超級使用者 (super user)</code> 或<code>管理員 (administrator)</code> 所建立，他們擁有整個系統的最高權限，一但登錄系統就可以修改作業系統的設定值、變更重要軟體元件、調整使用者權限和執行許多系統維護工作，這些是一般使用者無權執行的。</p>\n<p>所以身為系統的最高權限者也可以監控系統中的所有事件，以找出任何破外系統的行為，所以為了輔助這些安全性的監控，所以發展出許多<code>多稽查軟體 (aduiting software)</code>，能夠紀錄並分析電腦系統所發生的事件，簡單來說他可以偵測使用不正確密碼登錄的行為也可以找出使用者與平常活動不相符的行為，比如說某個使用者常常只會用文書軟體或試算表，但某天突然開始使用高技術性的應用工具等等。</p>\n<h2 id=\"內部攻擊\"><a href=\"#內部攻擊\" class=\"headerlink\" title=\"內部攻擊\"></a>內部攻擊</h2><p>一但入侵者得到的系統的權限，就會開始取得想要的資訊或是破壞系統的設置，如果是一般的使用者被入侵就必須要騙過系統以獲取更高的權限，但現今的 CPU 都經過強化可以阻擋類似的攻擊，比如處理程序被嚴格限制僅能存取記憶體管理員所配置的記憶體區塊，若沒有這樣的限制則處理程序就可以存記憶體刪除整個作業系統進而控制整個電腦。</p>\n<p>多程式化系統的 CPU 會在兩種<code>特權等級 (privilege level)</code> 其中之一運作，一種是<code>特權模式</code>另一種是<code>非特權模式</code>，在特權模式下 CPU 能夠執行所有機械語言下達的指令，相反的非特權模式中就只能執行有限的指令。</p>\n<p>能在特權模式下執行的指令稱為<code>特權指令 (privileged instructions)</code>，當 CPU 在非特權模式下運行時，如果嘗試執行一個特權指令的話會導致一個<code>中斷程序</code>，他會將 CPU 的運行模式轉換為<code>特權模式</code>並且將控制權交給作業程序裡的中斷處置器。</p>\n<p>當電腦開啟時 CPU 會處於特權模式，因此在開機程序後啟動作業程序時所有指令都能執行，然而每次作業系統允許處理程序使用其時間片段時，他會執行<code>變更特權模式</code>將 CPU 轉為非特權模式，這樣的好處是如果這個處理程序想要執行一個特權指令時，系統就會被告知。 </p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf\">computer science - AN OVERVIEW</a></li>\n</ul>"},{"title":"You Don't Know JavaScript [Scope & Closures] - Lexical Scope","date":"2020-10-08T13:26:16.000Z","_content":"\n了作用域它主宰著 JS 引擎該如何在作用域或包含它的任意嵌套作用域中查詢一個變量，我們也證明了 JS 的 scope 是在編譯時決定的，而這種範圍的術語稱為 `Lexical Scope`。\n\n`Lexcal Scope` 的關鍵思想就是它完全由 `function`, `block`, `變量宣告`的放置位置來控制，如果你的宣告變數放置在 function 中，則編譯器在解析的時候會將該變數與 function 的範圍作連接;若是放置在 block(let/const)，則它會與最近的封閉block`{...}`相連。\n\n必須將變量定義在可以引用的範圍之一，否則它會被定義為 `undefined`，如果在當前作用域中沒有找到這個變量則會往下一個(外部)的作用域去尋找，持續找到匹配的變量或是退到全域作用域，若到全域作用域都沒有找得則會值出一個錯誤。\n\n<img src=\"https://lotschool.nl/wp-content/uploads/2020/09/Brain-comparison-article-Copyright-Getty-1.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# Marbles, and Vuckets, and bubbles\n```javascript\n// outer/global scope: RED\n\nvar students = [\n    { id: 14, name: \"Kyle\" },\n    { id: 73, name: \"Suzy\" },\n    { id: 112, name: \"Frank\" },\n    { id: 6, name: \"Sarah\" }\n];\n\nfunction getStudentName(studentID) {\n    // function scope: BLUE\n\n    for (let student of students) {\n        // loop scope: GREEN\n\n        if (student.id == studentID) {\n            return student.name;\n        }\n    }\n}\n\nvar nextStudent = getStudentName(73);\nconsole.log(nextStudent);   // Suzy\n```\n標記了三種顏色以代表三個作用域：\n- **RED** : global scope\n- **BLUE** : function `getStudentName(...)`\n- **GREEN** : `for...in` loop\n![https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png](https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png)\n(圖片來源 : [You Don't Know JavaScript 2nd](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md)\n\nScope 的範圍是在編譯期間根據 function/blocks 的位置與彼此之間嵌套關係做決定的，每個作用域一定會被包含在一個父層作用域中，絕對不會有一個作用域分別位於兩個不同的作用域中。\n\n而綠色作用域幾乎在藍色作用域中，而藍色作用域也幾乎都在紅色作用域中，這代表作用域可以相互嵌套並且根據需求嵌套任何深度，你可以使用自身或上層作用域中所宣告的變量但是不能使用下一層作用域的變量。\n\n而當我們要尋找一個變量的時候，若在自身作用域中沒有找到那麼他就會往上層作用域尋找直到全域作用域，舉個例子我們在 for...of 中使用了 `students` 這個變量，但他並不是在藍色作用域中宣告個，所以他會往上一層作用域（綠色作用域）中尋找，若也沒有便會在往上一層（紅色作用域），在這裡便可以成功照到students這個變量的宣告。\n\n\n# Lookup Failures\n當作用域在不斷的往上層尋找變量，直到來到了全域作用域後任然沒有找到指定的變量，那麼便會擲出一個錯誤，但是這個錯誤的處理方式會根據變量的作用或程式的運行模式各有不同。\n\n## Undefined Mess\n若是變量是source，若是往上尋找發現這是一個沒有被宣告的變數，那們JS引擎就會擲出一個ReferenceError;若變量是target並且在嚴格模式下運行，則也會擲出一個ReferenceError。\n\n在大部分的情況下，JS 的錯誤訊息都會是 `\"Reference Error : XYZ is not defined.\"`，雖然在英文中 `not defined` 與 `undefined` 都是未定義的，但是在程式中是完全不一樣概念。\n- **not defined** : 它意味著在詞法的範圍中並沒有一個可以匹配的變量。\n- **undefined** : undefined代表在詞法範圍中有一個這個變量，但是他卻沒有值。\n\n## Global....What?\n若我們在非嚴格模式下使用了一個為定義的 target，則會發生一個奇怪的事情，而這其中最麻煩的便是他會自動在`全域`變數中創建一個符合的變數。\n\n```javascript\nfunction getStudentName() {\n    // assignment to an undeclared variable :(\n    nextStudent = \"Suzy\";\n}\n\ngetStudentName();\n\nconsole.log(nextStudent);\n// \"Suzy\" -- oops, an accidental-global variable!\n```\n當 getStudentName(...) 中使用了一個未被定義的 target 變數，因為在自身作用域中沒有找到這個變量的宣告，所以會到上一層尋找`（全域）`，而在全域中也沒有找到，那麼他會先檢查是否是處於嚴格模式下，若不是JS會自動在全域中創建一個符合的變量。\n\n若是處於嚴格模式下，當檢查到全域作用域中發現沒有這個變量，那麼便會擲出一個 `ReferenceError`。\n\n參考文獻：\n[you Don't Know JavaScript 2nd](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md)","source":"_posts/Javascript/ydk-javascript-04.md","raw":"---\ntitle: You Don't Know JavaScript [Scope & Closures] - Lexical Scope\ndate: 2020-10-08 21:26:16\ntags:\n- Javascript\n- Front-end\n\ncategories:\n- You Don't Know JavaScript\n---\n\n了作用域它主宰著 JS 引擎該如何在作用域或包含它的任意嵌套作用域中查詢一個變量，我們也證明了 JS 的 scope 是在編譯時決定的，而這種範圍的術語稱為 `Lexical Scope`。\n\n`Lexcal Scope` 的關鍵思想就是它完全由 `function`, `block`, `變量宣告`的放置位置來控制，如果你的宣告變數放置在 function 中，則編譯器在解析的時候會將該變數與 function 的範圍作連接;若是放置在 block(let/const)，則它會與最近的封閉block`{...}`相連。\n\n必須將變量定義在可以引用的範圍之一，否則它會被定義為 `undefined`，如果在當前作用域中沒有找到這個變量則會往下一個(外部)的作用域去尋找，持續找到匹配的變量或是退到全域作用域，若到全域作用域都沒有找得則會值出一個錯誤。\n\n<img src=\"https://lotschool.nl/wp-content/uploads/2020/09/Brain-comparison-article-Copyright-Getty-1.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# Marbles, and Vuckets, and bubbles\n```javascript\n// outer/global scope: RED\n\nvar students = [\n    { id: 14, name: \"Kyle\" },\n    { id: 73, name: \"Suzy\" },\n    { id: 112, name: \"Frank\" },\n    { id: 6, name: \"Sarah\" }\n];\n\nfunction getStudentName(studentID) {\n    // function scope: BLUE\n\n    for (let student of students) {\n        // loop scope: GREEN\n\n        if (student.id == studentID) {\n            return student.name;\n        }\n    }\n}\n\nvar nextStudent = getStudentName(73);\nconsole.log(nextStudent);   // Suzy\n```\n標記了三種顏色以代表三個作用域：\n- **RED** : global scope\n- **BLUE** : function `getStudentName(...)`\n- **GREEN** : `for...in` loop\n![https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png](https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png)\n(圖片來源 : [You Don't Know JavaScript 2nd](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md)\n\nScope 的範圍是在編譯期間根據 function/blocks 的位置與彼此之間嵌套關係做決定的，每個作用域一定會被包含在一個父層作用域中，絕對不會有一個作用域分別位於兩個不同的作用域中。\n\n而綠色作用域幾乎在藍色作用域中，而藍色作用域也幾乎都在紅色作用域中，這代表作用域可以相互嵌套並且根據需求嵌套任何深度，你可以使用自身或上層作用域中所宣告的變量但是不能使用下一層作用域的變量。\n\n而當我們要尋找一個變量的時候，若在自身作用域中沒有找到那麼他就會往上層作用域尋找直到全域作用域，舉個例子我們在 for...of 中使用了 `students` 這個變量，但他並不是在藍色作用域中宣告個，所以他會往上一層作用域（綠色作用域）中尋找，若也沒有便會在往上一層（紅色作用域），在這裡便可以成功照到students這個變量的宣告。\n\n\n# Lookup Failures\n當作用域在不斷的往上層尋找變量，直到來到了全域作用域後任然沒有找到指定的變量，那麼便會擲出一個錯誤，但是這個錯誤的處理方式會根據變量的作用或程式的運行模式各有不同。\n\n## Undefined Mess\n若是變量是source，若是往上尋找發現這是一個沒有被宣告的變數，那們JS引擎就會擲出一個ReferenceError;若變量是target並且在嚴格模式下運行，則也會擲出一個ReferenceError。\n\n在大部分的情況下，JS 的錯誤訊息都會是 `\"Reference Error : XYZ is not defined.\"`，雖然在英文中 `not defined` 與 `undefined` 都是未定義的，但是在程式中是完全不一樣概念。\n- **not defined** : 它意味著在詞法的範圍中並沒有一個可以匹配的變量。\n- **undefined** : undefined代表在詞法範圍中有一個這個變量，但是他卻沒有值。\n\n## Global....What?\n若我們在非嚴格模式下使用了一個為定義的 target，則會發生一個奇怪的事情，而這其中最麻煩的便是他會自動在`全域`變數中創建一個符合的變數。\n\n```javascript\nfunction getStudentName() {\n    // assignment to an undeclared variable :(\n    nextStudent = \"Suzy\";\n}\n\ngetStudentName();\n\nconsole.log(nextStudent);\n// \"Suzy\" -- oops, an accidental-global variable!\n```\n當 getStudentName(...) 中使用了一個未被定義的 target 變數，因為在自身作用域中沒有找到這個變量的宣告，所以會到上一層尋找`（全域）`，而在全域中也沒有找到，那麼他會先檢查是否是處於嚴格模式下，若不是JS會自動在全域中創建一個符合的變量。\n\n若是處於嚴格模式下，當檢查到全域作用域中發現沒有這個變量，那麼便會擲出一個 `ReferenceError`。\n\n參考文獻：\n[you Don't Know JavaScript 2nd](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md)","slug":"Javascript/ydk-javascript-04","published":1,"updated":"2022-02-22T07:06:18.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxw5c4100009gw3el5tdo4x","content":"<p>了作用域它主宰著 JS 引擎該如何在作用域或包含它的任意嵌套作用域中查詢一個變量，我們也證明了 JS 的 scope 是在編譯時決定的，而這種範圍的術語稱為 <code>Lexical Scope</code>。</p>\n<p><code>Lexcal Scope</code> 的關鍵思想就是它完全由 <code>function</code>, <code>block</code>, <code>變量宣告</code>的放置位置來控制，如果你的宣告變數放置在 function 中，則編譯器在解析的時候會將該變數與 function 的範圍作連接;若是放置在 block(let&#x2F;const)，則它會與最近的封閉block<code>&#123;...&#125;</code>相連。</p>\n<p>必須將變量定義在可以引用的範圍之一，否則它會被定義為 <code>undefined</code>，如果在當前作用域中沒有找到這個變量則會往下一個(外部)的作用域去尋找，持續找到匹配的變量或是退到全域作用域，若到全域作用域都沒有找得則會值出一個錯誤。</p>\n<img src=\"https://lotschool.nl/wp-content/uploads/2020/09/Brain-comparison-article-Copyright-Getty-1.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>\n\n<h1 id=\"Marbles-and-Vuckets-and-bubbles\"><a href=\"#Marbles-and-Vuckets-and-bubbles\" class=\"headerlink\" title=\"Marbles, and Vuckets, and bubbles\"></a>Marbles, and Vuckets, and bubbles</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// outer/global scope: RED</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> students = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Kyle&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">73</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Suzy&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">112</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Frank&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Sarah&quot;</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStudentName</span>(<span class=\"params\">studentID</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// function scope: BLUE</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// loop scope: GREEN</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (student.<span class=\"property\">id</span> == studentID) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> student.<span class=\"property\">name</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextStudent = <span class=\"title function_\">getStudentName</span>(<span class=\"number\">73</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextStudent);   <span class=\"comment\">// Suzy</span></span><br></pre></td></tr></table></figure>\n<p>標記了三種顏色以代表三個作用域：</p>\n<ul>\n<li><strong>RED</strong> : global scope</li>\n<li><strong>BLUE</strong> : function <code>getStudentName(...)</code></li>\n<li><strong>GREEN</strong> : <code>for...in</code> loop<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png\"><br>(圖片來源 : <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md\">You Don’t Know JavaScript 2nd</a></li>\n</ul>\n<p>Scope 的範圍是在編譯期間根據 function&#x2F;blocks 的位置與彼此之間嵌套關係做決定的，每個作用域一定會被包含在一個父層作用域中，絕對不會有一個作用域分別位於兩個不同的作用域中。</p>\n<p>而綠色作用域幾乎在藍色作用域中，而藍色作用域也幾乎都在紅色作用域中，這代表作用域可以相互嵌套並且根據需求嵌套任何深度，你可以使用自身或上層作用域中所宣告的變量但是不能使用下一層作用域的變量。</p>\n<p>而當我們要尋找一個變量的時候，若在自身作用域中沒有找到那麼他就會往上層作用域尋找直到全域作用域，舉個例子我們在 for…of 中使用了 <code>students</code> 這個變量，但他並不是在藍色作用域中宣告個，所以他會往上一層作用域（綠色作用域）中尋找，若也沒有便會在往上一層（紅色作用域），在這裡便可以成功照到students這個變量的宣告。</p>\n<h1 id=\"Lookup-Failures\"><a href=\"#Lookup-Failures\" class=\"headerlink\" title=\"Lookup Failures\"></a>Lookup Failures</h1><p>當作用域在不斷的往上層尋找變量，直到來到了全域作用域後任然沒有找到指定的變量，那麼便會擲出一個錯誤，但是這個錯誤的處理方式會根據變量的作用或程式的運行模式各有不同。</p>\n<h2 id=\"Undefined-Mess\"><a href=\"#Undefined-Mess\" class=\"headerlink\" title=\"Undefined Mess\"></a>Undefined Mess</h2><p>若是變量是source，若是往上尋找發現這是一個沒有被宣告的變數，那們JS引擎就會擲出一個ReferenceError;若變量是target並且在嚴格模式下運行，則也會擲出一個ReferenceError。</p>\n<p>在大部分的情況下，JS 的錯誤訊息都會是 <code>&quot;Reference Error : XYZ is not defined.&quot;</code>，雖然在英文中 <code>not defined</code> 與 <code>undefined</code> 都是未定義的，但是在程式中是完全不一樣概念。</p>\n<ul>\n<li><strong>not defined</strong> : 它意味著在詞法的範圍中並沒有一個可以匹配的變量。</li>\n<li><strong>undefined</strong> : undefined代表在詞法範圍中有一個這個變量，但是他卻沒有值。</li>\n</ul>\n<h2 id=\"Global…-What\"><a href=\"#Global…-What\" class=\"headerlink\" title=\"Global….What?\"></a>Global….What?</h2><p>若我們在非嚴格模式下使用了一個為定義的 target，則會發生一個奇怪的事情，而這其中最麻煩的便是他會自動在<code>全域</code>變數中創建一個符合的變數。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStudentName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// assignment to an undeclared variable :(</span></span><br><span class=\"line\">    nextStudent = <span class=\"string\">&quot;Suzy&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getStudentName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextStudent);</span><br><span class=\"line\"><span class=\"comment\">// &quot;Suzy&quot; -- oops, an accidental-global variable!</span></span><br></pre></td></tr></table></figure>\n<p>當 getStudentName(…) 中使用了一個未被定義的 target 變數，因為在自身作用域中沒有找到這個變量的宣告，所以會到上一層尋找<code>（全域）</code>，而在全域中也沒有找到，那麼他會先檢查是否是處於嚴格模式下，若不是JS會自動在全域中創建一個符合的變量。</p>\n<p>若是處於嚴格模式下，當檢查到全域作用域中發現沒有這個變量，那麼便會擲出一個 <code>ReferenceError</code>。</p>\n<p>參考文獻：<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md\">you Don’t Know JavaScript 2nd</a></p>\n","site":{"data":{}},"excerpt":"<p>了作用域它主宰著 JS 引擎該如何在作用域或包含它的任意嵌套作用域中查詢一個變量，我們也證明了 JS 的 scope 是在編譯時決定的，而這種範圍的術語稱為 <code>Lexical Scope</code>。</p>\n<p><code>Lexcal Scope</code> 的關鍵思想就是它完全由 <code>function</code>, <code>block</code>, <code>變量宣告</code>的放置位置來控制，如果你的宣告變數放置在 function 中，則編譯器在解析的時候會將該變數與 function 的範圍作連接;若是放置在 block(let&#x2F;const)，則它會與最近的封閉block<code>&#123;...&#125;</code>相連。</p>\n<p>必須將變量定義在可以引用的範圍之一，否則它會被定義為 <code>undefined</code>，如果在當前作用域中沒有找到這個變量則會往下一個(外部)的作用域去尋找，持續找到匹配的變量或是退到全域作用域，若到全域作用域都沒有找得則會值出一個錯誤。</p>\n<img src=\"https://lotschool.nl/wp-content/uploads/2020/09/Brain-comparison-article-Copyright-Getty-1.jpg\" alt=\"drawing\" width=\"860\"/>","more":"<h1 id=\"Marbles-and-Vuckets-and-bubbles\"><a href=\"#Marbles-and-Vuckets-and-bubbles\" class=\"headerlink\" title=\"Marbles, and Vuckets, and bubbles\"></a>Marbles, and Vuckets, and bubbles</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// outer/global scope: RED</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> students = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Kyle&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">73</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Suzy&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">112</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Frank&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Sarah&quot;</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStudentName</span>(<span class=\"params\">studentID</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// function scope: BLUE</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// loop scope: GREEN</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (student.<span class=\"property\">id</span> == studentID) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> student.<span class=\"property\">name</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextStudent = <span class=\"title function_\">getStudentName</span>(<span class=\"number\">73</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextStudent);   <span class=\"comment\">// Suzy</span></span><br></pre></td></tr></table></figure>\n<p>標記了三種顏色以代表三個作用域：</p>\n<ul>\n<li><strong>RED</strong> : global scope</li>\n<li><strong>BLUE</strong> : function <code>getStudentName(...)</code></li>\n<li><strong>GREEN</strong> : <code>for...in</code> loop<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201008/20124767K5alkLKbYA.png\"><br>(圖片來源 : <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md\">You Don’t Know JavaScript 2nd</a></li>\n</ul>\n<p>Scope 的範圍是在編譯期間根據 function&#x2F;blocks 的位置與彼此之間嵌套關係做決定的，每個作用域一定會被包含在一個父層作用域中，絕對不會有一個作用域分別位於兩個不同的作用域中。</p>\n<p>而綠色作用域幾乎在藍色作用域中，而藍色作用域也幾乎都在紅色作用域中，這代表作用域可以相互嵌套並且根據需求嵌套任何深度，你可以使用自身或上層作用域中所宣告的變量但是不能使用下一層作用域的變量。</p>\n<p>而當我們要尋找一個變量的時候，若在自身作用域中沒有找到那麼他就會往上層作用域尋找直到全域作用域，舉個例子我們在 for…of 中使用了 <code>students</code> 這個變量，但他並不是在藍色作用域中宣告個，所以他會往上一層作用域（綠色作用域）中尋找，若也沒有便會在往上一層（紅色作用域），在這裡便可以成功照到students這個變量的宣告。</p>\n<h1 id=\"Lookup-Failures\"><a href=\"#Lookup-Failures\" class=\"headerlink\" title=\"Lookup Failures\"></a>Lookup Failures</h1><p>當作用域在不斷的往上層尋找變量，直到來到了全域作用域後任然沒有找到指定的變量，那麼便會擲出一個錯誤，但是這個錯誤的處理方式會根據變量的作用或程式的運行模式各有不同。</p>\n<h2 id=\"Undefined-Mess\"><a href=\"#Undefined-Mess\" class=\"headerlink\" title=\"Undefined Mess\"></a>Undefined Mess</h2><p>若是變量是source，若是往上尋找發現這是一個沒有被宣告的變數，那們JS引擎就會擲出一個ReferenceError;若變量是target並且在嚴格模式下運行，則也會擲出一個ReferenceError。</p>\n<p>在大部分的情況下，JS 的錯誤訊息都會是 <code>&quot;Reference Error : XYZ is not defined.&quot;</code>，雖然在英文中 <code>not defined</code> 與 <code>undefined</code> 都是未定義的，但是在程式中是完全不一樣概念。</p>\n<ul>\n<li><strong>not defined</strong> : 它意味著在詞法的範圍中並沒有一個可以匹配的變量。</li>\n<li><strong>undefined</strong> : undefined代表在詞法範圍中有一個這個變量，但是他卻沒有值。</li>\n</ul>\n<h2 id=\"Global…-What\"><a href=\"#Global…-What\" class=\"headerlink\" title=\"Global….What?\"></a>Global….What?</h2><p>若我們在非嚴格模式下使用了一個為定義的 target，則會發生一個奇怪的事情，而這其中最麻煩的便是他會自動在<code>全域</code>變數中創建一個符合的變數。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStudentName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// assignment to an undeclared variable :(</span></span><br><span class=\"line\">    nextStudent = <span class=\"string\">&quot;Suzy&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getStudentName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextStudent);</span><br><span class=\"line\"><span class=\"comment\">// &quot;Suzy&quot; -- oops, an accidental-global variable!</span></span><br></pre></td></tr></table></figure>\n<p>當 getStudentName(…) 中使用了一個未被定義的 target 變數，因為在自身作用域中沒有找到這個變量的宣告，所以會到上一層尋找<code>（全域）</code>，而在全域中也沒有找到，那麼他會先檢查是否是處於嚴格模式下，若不是JS會自動在全域中創建一個符合的變量。</p>\n<p>若是處於嚴格模式下，當檢查到全域作用域中發現沒有這個變量，那麼便會擲出一個 <code>ReferenceError</code>。</p>\n<p>參考文獻：<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch2.md\">you Don’t Know JavaScript 2nd</a></p>"},{"title":"You Don't Know JavaScript[Get Started] - what is JavaScript?","date":"2020-10-03T13:21:16.000Z","_content":"\n在今年 9 月順利轉職成為前端工程師，在準備面試的時候有稍微學習一些關於 Javascript 的知識，不過等到真的成為前端工程師後，遇到了很多問題是以前準備的知識中無法解決的，所以透過公司前輩推薦來 Studying 這本書，希望能夠對於JS有更深入的了解，並做一個筆記。\n\n<img src=\"https://www.pragimtech.com/wp-content/uploads/2019/03/java-script.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# Backwards & Forwards\nJS的最基本原則之一是保持`向後兼容`，很多人會將它與`向前兼容`搞混，向後兼容的意思代表著一但某一個代碼接受它是有效的 JS 代碼，那們無論到什麼時候或是更改什麼版本，這個代碼都還是有效的(EX:一個1995年寫的JS代碼到至今都還是能夠成功運行)這就是JS的向後兼容。\n\n而向前兼容則代表你可以在較舊的JS引擎中使用比較新的JS語法，在使用新的與JS語法不會導致舊的JS代碼(舊的JS引擎)程序中斷或錯誤。\n\n雖然很多人希望JS可以這麼做，`但是JS並沒有辦法進行向前兼容。`\n\n相比之下HTML與CSS都是向前兼容的，代表著如果你是無法將10幾年前的HTML或CSS代碼再次運行的，但是如果你在2010年之後的瀏覽啟中使用2019的最新功能，它是可以正常處理的，這就是HTML與CSS的向前兼容。\n\n## Jumping the Gaps\n由於JS的不向前兼容性，這代表著你不能再2016的引擎中使用ES2019的功能，如果是使用新的語法，會完全無法編譯和運行，如果是API則程序可能會運行到一定程度後就拋出異常停止。\n\n由於JS的開發者常常會面臨到版本不對的問題，這時候編譯器便可以很好的解決這個問題(常見的是Babel)，它可以等效的將你較新的JS語法轉換為較舊的語法來解決問題，而JS希望開發者能夠使用最新版本的JS進行開發，以便讓代碼乾淨且有效地傳遞編成思想，而兼容問題便可以交給編譯器來解決。\n\n---\n\n# What's in an Interpretation?\n對於JS來說有一個長期的爭議，那就是JS到底是編譯程式還是腳本語言? 這就得先解釋這兩者的差異。\n\n## 腳本語言\n腳本語言是一種編成語言，它只在被調用的時候進行解釋或編譯，它是為了縮短傳統的`編寫-編譯-連接-運行`而創造出來的電腦編程語言。\n\n### 特點\n- 腳本語言是一種解釋性語言，他不向C/C++可以編譯成二進為代碼，它不需要編譯便可以直接使用，由`解釋器`來負責解釋。\n- 腳本語言一般都是以文本形式存在。\n- 相對於編譯型電腦編程語言，用腳本語言開發的程式在執行時，由其所對應的解釋器（或稱虛擬機）解釋並執行。\n- 腳本語言通常都有簡單、易學、易用的特性，目的就是希望能讓程式設計師快速完成程式的編寫工作。\n\n## 編譯語言\n編譯語言是一種程式語言了類型，通過`編譯器`來實作，先將程式碼編譯為`機械碼`後再加以執行。\n\n### 特點 \n- 執行速度較直譯是語言快，因為在編譯期就已經先編譯成機械碼可以直接執行，不用像直譯語言一樣，還要多一道直譯程式。\n- 編譯語言的程式開發速度以及除錯時間較長。\n\n--- \n為了清楚的了解JS是編譯語言還是直譯語言的真正原因在於錯誤的處理方式。\n\n在腳本語言或是直譯語言中，通常是由上而下的執行方式，所以有可能前面4行都是正常的，但是當執行到第5行的時候才發現錯誤，而這個錯誤可能是因為上文的執行錯誤導致，也有可能是它本身的語法錯誤，這種需要根據上下文來定義錯誤的方式(錯誤推遲)是不期望的。\n\n而JS會在執行之前解析，因為他要求在代碼開始執行前確定整個代碼沒有錯誤(例如重複的參數名稱)，若不事先分析代碼則無法識別這些錯誤。\n\n所以JS是一種直譯語言，但是JS在被解析後會轉化為 optimized (binary)之後再執行，簡單來說，JS將程式碼編譯成各種二進制字節然後再交給JS虛擬機執行，而整個JS的程序源流程 : \n1. 開發人員編輯好程序後交給Babel進行編譯，編譯完成後交給JS引擎。\n2. JS引擎將代碼解析為AST(Abstract Syntax Tree)。\n3. 之後再將AST轉換為字節代碼，然後通過優化的JIT編譯器(即時編譯器)進行細部轉換。\n4. 最後由JS VM(virtual machine)執行。\n\n由上面的流程看來JS的處理方式比較像在處理直譯語言，但是JS會經過編譯，讓我們能夠在代碼執行之前收到靜態錯誤，這種行為更像是編譯語言。\n\n# Strictly Speaking\n在2009發布的ES5中就有添加了`嚴格模式`，但是雖然嚴格模式有許多好處，但是卻會造成舊語法的錯誤，所以到現在為止，嚴格模式仍然處於選擇性的功能。\n\n而嚴格模式的好處可以讓JS有更佳的優化和高效率的運行代碼，也可以讓大型開發的團隊避免一些錯誤。\n\n參考文獻 : \n[You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md)\n[腳本語言](https://wiki.mbalib.com/zh-tw/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80#.E4.BB.80.E4.B9.88.E6.98.AF.E8.84.9A.E6.9C.AC.E8.AF.AD.E8.A8.80)\n\n","source":"_posts/Javascript/ydk-javascript-01.md","raw":"---\ntitle: You Don't Know JavaScript[Get Started] - what is JavaScript?\ndate: 2020-10-03 21:21:16\ntags:\n- Javascript\n- Front-end\n\ncategories:\n- You Don't Know JavaScript\n---\n\n在今年 9 月順利轉職成為前端工程師，在準備面試的時候有稍微學習一些關於 Javascript 的知識，不過等到真的成為前端工程師後，遇到了很多問題是以前準備的知識中無法解決的，所以透過公司前輩推薦來 Studying 這本書，希望能夠對於JS有更深入的了解，並做一個筆記。\n\n<img src=\"https://www.pragimtech.com/wp-content/uploads/2019/03/java-script.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# Backwards & Forwards\nJS的最基本原則之一是保持`向後兼容`，很多人會將它與`向前兼容`搞混，向後兼容的意思代表著一但某一個代碼接受它是有效的 JS 代碼，那們無論到什麼時候或是更改什麼版本，這個代碼都還是有效的(EX:一個1995年寫的JS代碼到至今都還是能夠成功運行)這就是JS的向後兼容。\n\n而向前兼容則代表你可以在較舊的JS引擎中使用比較新的JS語法，在使用新的與JS語法不會導致舊的JS代碼(舊的JS引擎)程序中斷或錯誤。\n\n雖然很多人希望JS可以這麼做，`但是JS並沒有辦法進行向前兼容。`\n\n相比之下HTML與CSS都是向前兼容的，代表著如果你是無法將10幾年前的HTML或CSS代碼再次運行的，但是如果你在2010年之後的瀏覽啟中使用2019的最新功能，它是可以正常處理的，這就是HTML與CSS的向前兼容。\n\n## Jumping the Gaps\n由於JS的不向前兼容性，這代表著你不能再2016的引擎中使用ES2019的功能，如果是使用新的語法，會完全無法編譯和運行，如果是API則程序可能會運行到一定程度後就拋出異常停止。\n\n由於JS的開發者常常會面臨到版本不對的問題，這時候編譯器便可以很好的解決這個問題(常見的是Babel)，它可以等效的將你較新的JS語法轉換為較舊的語法來解決問題，而JS希望開發者能夠使用最新版本的JS進行開發，以便讓代碼乾淨且有效地傳遞編成思想，而兼容問題便可以交給編譯器來解決。\n\n---\n\n# What's in an Interpretation?\n對於JS來說有一個長期的爭議，那就是JS到底是編譯程式還是腳本語言? 這就得先解釋這兩者的差異。\n\n## 腳本語言\n腳本語言是一種編成語言，它只在被調用的時候進行解釋或編譯，它是為了縮短傳統的`編寫-編譯-連接-運行`而創造出來的電腦編程語言。\n\n### 特點\n- 腳本語言是一種解釋性語言，他不向C/C++可以編譯成二進為代碼，它不需要編譯便可以直接使用，由`解釋器`來負責解釋。\n- 腳本語言一般都是以文本形式存在。\n- 相對於編譯型電腦編程語言，用腳本語言開發的程式在執行時，由其所對應的解釋器（或稱虛擬機）解釋並執行。\n- 腳本語言通常都有簡單、易學、易用的特性，目的就是希望能讓程式設計師快速完成程式的編寫工作。\n\n## 編譯語言\n編譯語言是一種程式語言了類型，通過`編譯器`來實作，先將程式碼編譯為`機械碼`後再加以執行。\n\n### 特點 \n- 執行速度較直譯是語言快，因為在編譯期就已經先編譯成機械碼可以直接執行，不用像直譯語言一樣，還要多一道直譯程式。\n- 編譯語言的程式開發速度以及除錯時間較長。\n\n--- \n為了清楚的了解JS是編譯語言還是直譯語言的真正原因在於錯誤的處理方式。\n\n在腳本語言或是直譯語言中，通常是由上而下的執行方式，所以有可能前面4行都是正常的，但是當執行到第5行的時候才發現錯誤，而這個錯誤可能是因為上文的執行錯誤導致，也有可能是它本身的語法錯誤，這種需要根據上下文來定義錯誤的方式(錯誤推遲)是不期望的。\n\n而JS會在執行之前解析，因為他要求在代碼開始執行前確定整個代碼沒有錯誤(例如重複的參數名稱)，若不事先分析代碼則無法識別這些錯誤。\n\n所以JS是一種直譯語言，但是JS在被解析後會轉化為 optimized (binary)之後再執行，簡單來說，JS將程式碼編譯成各種二進制字節然後再交給JS虛擬機執行，而整個JS的程序源流程 : \n1. 開發人員編輯好程序後交給Babel進行編譯，編譯完成後交給JS引擎。\n2. JS引擎將代碼解析為AST(Abstract Syntax Tree)。\n3. 之後再將AST轉換為字節代碼，然後通過優化的JIT編譯器(即時編譯器)進行細部轉換。\n4. 最後由JS VM(virtual machine)執行。\n\n由上面的流程看來JS的處理方式比較像在處理直譯語言，但是JS會經過編譯，讓我們能夠在代碼執行之前收到靜態錯誤，這種行為更像是編譯語言。\n\n# Strictly Speaking\n在2009發布的ES5中就有添加了`嚴格模式`，但是雖然嚴格模式有許多好處，但是卻會造成舊語法的錯誤，所以到現在為止，嚴格模式仍然處於選擇性的功能。\n\n而嚴格模式的好處可以讓JS有更佳的優化和高效率的運行代碼，也可以讓大型開發的團隊避免一些錯誤。\n\n參考文獻 : \n[You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md)\n[腳本語言](https://wiki.mbalib.com/zh-tw/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80#.E4.BB.80.E4.B9.88.E6.98.AF.E8.84.9A.E6.9C.AC.E8.AF.AD.E8.A8.80)\n\n","slug":"Javascript/ydk-javascript-01","published":1,"updated":"2022-02-22T06:45:59.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxw5c4700019gw3hsfba6dz","content":"<p>在今年 9 月順利轉職成為前端工程師，在準備面試的時候有稍微學習一些關於 Javascript 的知識，不過等到真的成為前端工程師後，遇到了很多問題是以前準備的知識中無法解決的，所以透過公司前輩推薦來 Studying 這本書，希望能夠對於JS有更深入的了解，並做一個筆記。</p>\n<img src=\"https://www.pragimtech.com/wp-content/uploads/2019/03/java-script.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>\n\n<h1 id=\"Backwards-amp-Forwards\"><a href=\"#Backwards-amp-Forwards\" class=\"headerlink\" title=\"Backwards &amp; Forwards\"></a>Backwards &amp; Forwards</h1><p>JS的最基本原則之一是保持<code>向後兼容</code>，很多人會將它與<code>向前兼容</code>搞混，向後兼容的意思代表著一但某一個代碼接受它是有效的 JS 代碼，那們無論到什麼時候或是更改什麼版本，這個代碼都還是有效的(EX:一個1995年寫的JS代碼到至今都還是能夠成功運行)這就是JS的向後兼容。</p>\n<p>而向前兼容則代表你可以在較舊的JS引擎中使用比較新的JS語法，在使用新的與JS語法不會導致舊的JS代碼(舊的JS引擎)程序中斷或錯誤。</p>\n<p>雖然很多人希望JS可以這麼做，<code>但是JS並沒有辦法進行向前兼容。</code></p>\n<p>相比之下HTML與CSS都是向前兼容的，代表著如果你是無法將10幾年前的HTML或CSS代碼再次運行的，但是如果你在2010年之後的瀏覽啟中使用2019的最新功能，它是可以正常處理的，這就是HTML與CSS的向前兼容。</p>\n<h2 id=\"Jumping-the-Gaps\"><a href=\"#Jumping-the-Gaps\" class=\"headerlink\" title=\"Jumping the Gaps\"></a>Jumping the Gaps</h2><p>由於JS的不向前兼容性，這代表著你不能再2016的引擎中使用ES2019的功能，如果是使用新的語法，會完全無法編譯和運行，如果是API則程序可能會運行到一定程度後就拋出異常停止。</p>\n<p>由於JS的開發者常常會面臨到版本不對的問題，這時候編譯器便可以很好的解決這個問題(常見的是Babel)，它可以等效的將你較新的JS語法轉換為較舊的語法來解決問題，而JS希望開發者能夠使用最新版本的JS進行開發，以便讓代碼乾淨且有效地傳遞編成思想，而兼容問題便可以交給編譯器來解決。</p>\n<hr>\n<h1 id=\"What’s-in-an-Interpretation\"><a href=\"#What’s-in-an-Interpretation\" class=\"headerlink\" title=\"What’s in an Interpretation?\"></a>What’s in an Interpretation?</h1><p>對於JS來說有一個長期的爭議，那就是JS到底是編譯程式還是腳本語言? 這就得先解釋這兩者的差異。</p>\n<h2 id=\"腳本語言\"><a href=\"#腳本語言\" class=\"headerlink\" title=\"腳本語言\"></a>腳本語言</h2><p>腳本語言是一種編成語言，它只在被調用的時候進行解釋或編譯，它是為了縮短傳統的<code>編寫-編譯-連接-運行</code>而創造出來的電腦編程語言。</p>\n<h3 id=\"特點\"><a href=\"#特點\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ul>\n<li>腳本語言是一種解釋性語言，他不向C&#x2F;C++可以編譯成二進為代碼，它不需要編譯便可以直接使用，由<code>解釋器</code>來負責解釋。</li>\n<li>腳本語言一般都是以文本形式存在。</li>\n<li>相對於編譯型電腦編程語言，用腳本語言開發的程式在執行時，由其所對應的解釋器（或稱虛擬機）解釋並執行。</li>\n<li>腳本語言通常都有簡單、易學、易用的特性，目的就是希望能讓程式設計師快速完成程式的編寫工作。</li>\n</ul>\n<h2 id=\"編譯語言\"><a href=\"#編譯語言\" class=\"headerlink\" title=\"編譯語言\"></a>編譯語言</h2><p>編譯語言是一種程式語言了類型，通過<code>編譯器</code>來實作，先將程式碼編譯為<code>機械碼</code>後再加以執行。</p>\n<h3 id=\"特點-1\"><a href=\"#特點-1\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ul>\n<li>執行速度較直譯是語言快，因為在編譯期就已經先編譯成機械碼可以直接執行，不用像直譯語言一樣，還要多一道直譯程式。</li>\n<li>編譯語言的程式開發速度以及除錯時間較長。</li>\n</ul>\n<hr>\n<p>為了清楚的了解JS是編譯語言還是直譯語言的真正原因在於錯誤的處理方式。</p>\n<p>在腳本語言或是直譯語言中，通常是由上而下的執行方式，所以有可能前面4行都是正常的，但是當執行到第5行的時候才發現錯誤，而這個錯誤可能是因為上文的執行錯誤導致，也有可能是它本身的語法錯誤，這種需要根據上下文來定義錯誤的方式(錯誤推遲)是不期望的。</p>\n<p>而JS會在執行之前解析，因為他要求在代碼開始執行前確定整個代碼沒有錯誤(例如重複的參數名稱)，若不事先分析代碼則無法識別這些錯誤。</p>\n<p>所以JS是一種直譯語言，但是JS在被解析後會轉化為 optimized (binary)之後再執行，簡單來說，JS將程式碼編譯成各種二進制字節然後再交給JS虛擬機執行，而整個JS的程序源流程 : </p>\n<ol>\n<li>開發人員編輯好程序後交給Babel進行編譯，編譯完成後交給JS引擎。</li>\n<li>JS引擎將代碼解析為AST(Abstract Syntax Tree)。</li>\n<li>之後再將AST轉換為字節代碼，然後通過優化的JIT編譯器(即時編譯器)進行細部轉換。</li>\n<li>最後由JS VM(virtual machine)執行。</li>\n</ol>\n<p>由上面的流程看來JS的處理方式比較像在處理直譯語言，但是JS會經過編譯，讓我們能夠在代碼執行之前收到靜態錯誤，這種行為更像是編譯語言。</p>\n<h1 id=\"Strictly-Speaking\"><a href=\"#Strictly-Speaking\" class=\"headerlink\" title=\"Strictly Speaking\"></a>Strictly Speaking</h1><p>在2009發布的ES5中就有添加了<code>嚴格模式</code>，但是雖然嚴格模式有許多好處，但是卻會造成舊語法的錯誤，所以到現在為止，嚴格模式仍然處於選擇性的功能。</p>\n<p>而嚴格模式的好處可以讓JS有更佳的優化和高效率的運行代碼，也可以讓大型開發的團隊避免一些錯誤。</p>\n<p>參考文獻 :<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md\">You Don’t Know JavaScript</a><br><a href=\"https://wiki.mbalib.com/zh-tw/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80#.E4.BB.80.E4.B9.88.E6.98.AF.E8.84.9A.E6.9C.AC.E8.AF.AD.E8.A8.80\">腳本語言</a></p>\n","site":{"data":{}},"excerpt":"<p>在今年 9 月順利轉職成為前端工程師，在準備面試的時候有稍微學習一些關於 Javascript 的知識，不過等到真的成為前端工程師後，遇到了很多問題是以前準備的知識中無法解決的，所以透過公司前輩推薦來 Studying 這本書，希望能夠對於JS有更深入的了解，並做一個筆記。</p>\n<img src=\"https://www.pragimtech.com/wp-content/uploads/2019/03/java-script.jpg\" alt=\"drawing\" width=\"860\"/>","more":"<h1 id=\"Backwards-amp-Forwards\"><a href=\"#Backwards-amp-Forwards\" class=\"headerlink\" title=\"Backwards &amp; Forwards\"></a>Backwards &amp; Forwards</h1><p>JS的最基本原則之一是保持<code>向後兼容</code>，很多人會將它與<code>向前兼容</code>搞混，向後兼容的意思代表著一但某一個代碼接受它是有效的 JS 代碼，那們無論到什麼時候或是更改什麼版本，這個代碼都還是有效的(EX:一個1995年寫的JS代碼到至今都還是能夠成功運行)這就是JS的向後兼容。</p>\n<p>而向前兼容則代表你可以在較舊的JS引擎中使用比較新的JS語法，在使用新的與JS語法不會導致舊的JS代碼(舊的JS引擎)程序中斷或錯誤。</p>\n<p>雖然很多人希望JS可以這麼做，<code>但是JS並沒有辦法進行向前兼容。</code></p>\n<p>相比之下HTML與CSS都是向前兼容的，代表著如果你是無法將10幾年前的HTML或CSS代碼再次運行的，但是如果你在2010年之後的瀏覽啟中使用2019的最新功能，它是可以正常處理的，這就是HTML與CSS的向前兼容。</p>\n<h2 id=\"Jumping-the-Gaps\"><a href=\"#Jumping-the-Gaps\" class=\"headerlink\" title=\"Jumping the Gaps\"></a>Jumping the Gaps</h2><p>由於JS的不向前兼容性，這代表著你不能再2016的引擎中使用ES2019的功能，如果是使用新的語法，會完全無法編譯和運行，如果是API則程序可能會運行到一定程度後就拋出異常停止。</p>\n<p>由於JS的開發者常常會面臨到版本不對的問題，這時候編譯器便可以很好的解決這個問題(常見的是Babel)，它可以等效的將你較新的JS語法轉換為較舊的語法來解決問題，而JS希望開發者能夠使用最新版本的JS進行開發，以便讓代碼乾淨且有效地傳遞編成思想，而兼容問題便可以交給編譯器來解決。</p>\n<hr>\n<h1 id=\"What’s-in-an-Interpretation\"><a href=\"#What’s-in-an-Interpretation\" class=\"headerlink\" title=\"What’s in an Interpretation?\"></a>What’s in an Interpretation?</h1><p>對於JS來說有一個長期的爭議，那就是JS到底是編譯程式還是腳本語言? 這就得先解釋這兩者的差異。</p>\n<h2 id=\"腳本語言\"><a href=\"#腳本語言\" class=\"headerlink\" title=\"腳本語言\"></a>腳本語言</h2><p>腳本語言是一種編成語言，它只在被調用的時候進行解釋或編譯，它是為了縮短傳統的<code>編寫-編譯-連接-運行</code>而創造出來的電腦編程語言。</p>\n<h3 id=\"特點\"><a href=\"#特點\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ul>\n<li>腳本語言是一種解釋性語言，他不向C&#x2F;C++可以編譯成二進為代碼，它不需要編譯便可以直接使用，由<code>解釋器</code>來負責解釋。</li>\n<li>腳本語言一般都是以文本形式存在。</li>\n<li>相對於編譯型電腦編程語言，用腳本語言開發的程式在執行時，由其所對應的解釋器（或稱虛擬機）解釋並執行。</li>\n<li>腳本語言通常都有簡單、易學、易用的特性，目的就是希望能讓程式設計師快速完成程式的編寫工作。</li>\n</ul>\n<h2 id=\"編譯語言\"><a href=\"#編譯語言\" class=\"headerlink\" title=\"編譯語言\"></a>編譯語言</h2><p>編譯語言是一種程式語言了類型，通過<code>編譯器</code>來實作，先將程式碼編譯為<code>機械碼</code>後再加以執行。</p>\n<h3 id=\"特點-1\"><a href=\"#特點-1\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ul>\n<li>執行速度較直譯是語言快，因為在編譯期就已經先編譯成機械碼可以直接執行，不用像直譯語言一樣，還要多一道直譯程式。</li>\n<li>編譯語言的程式開發速度以及除錯時間較長。</li>\n</ul>\n<hr>\n<p>為了清楚的了解JS是編譯語言還是直譯語言的真正原因在於錯誤的處理方式。</p>\n<p>在腳本語言或是直譯語言中，通常是由上而下的執行方式，所以有可能前面4行都是正常的，但是當執行到第5行的時候才發現錯誤，而這個錯誤可能是因為上文的執行錯誤導致，也有可能是它本身的語法錯誤，這種需要根據上下文來定義錯誤的方式(錯誤推遲)是不期望的。</p>\n<p>而JS會在執行之前解析，因為他要求在代碼開始執行前確定整個代碼沒有錯誤(例如重複的參數名稱)，若不事先分析代碼則無法識別這些錯誤。</p>\n<p>所以JS是一種直譯語言，但是JS在被解析後會轉化為 optimized (binary)之後再執行，簡單來說，JS將程式碼編譯成各種二進制字節然後再交給JS虛擬機執行，而整個JS的程序源流程 : </p>\n<ol>\n<li>開發人員編輯好程序後交給Babel進行編譯，編譯完成後交給JS引擎。</li>\n<li>JS引擎將代碼解析為AST(Abstract Syntax Tree)。</li>\n<li>之後再將AST轉換為字節代碼，然後通過優化的JIT編譯器(即時編譯器)進行細部轉換。</li>\n<li>最後由JS VM(virtual machine)執行。</li>\n</ol>\n<p>由上面的流程看來JS的處理方式比較像在處理直譯語言，但是JS會經過編譯，讓我們能夠在代碼執行之前收到靜態錯誤，這種行為更像是編譯語言。</p>\n<h1 id=\"Strictly-Speaking\"><a href=\"#Strictly-Speaking\" class=\"headerlink\" title=\"Strictly Speaking\"></a>Strictly Speaking</h1><p>在2009發布的ES5中就有添加了<code>嚴格模式</code>，但是雖然嚴格模式有許多好處，但是卻會造成舊語法的錯誤，所以到現在為止，嚴格模式仍然處於選擇性的功能。</p>\n<p>而嚴格模式的好處可以讓JS有更佳的優化和高效率的運行代碼，也可以讓大型開發的團隊避免一些錯誤。</p>\n<p>參考文獻 :<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md\">You Don’t Know JavaScript</a><br><a href=\"https://wiki.mbalib.com/zh-tw/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80#.E4.BB.80.E4.B9.88.E6.98.AF.E8.84.9A.E6.9C.AC.E8.AF.AD.E8.A8.80\">腳本語言</a></p>"},{"title":"計算機概論 - 網路通訊與網際網路 Networking and the internet (上)","date":"2022-02-21T08:11:08.000Z","_content":"\n在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為`網路 (networks)`，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域。\n\n<img src=\"https://www.euractiv.com/wp-content/uploads/sites/2/2017/07/shutterstock_443216956_small-800x450.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# 網路的基本概念\n首先先介紹各種基本的網路通訊概念\n## 網路類型\n電腦網路分為`個人區域網路 (persional area network, PAN)`, `區域網路 (local area network, LAN)`, `都會區域網路 (metropolitan area network, MAN)` 和`廣域網路 (wide area network, WAN)`。\n\n1. **個人區域網路 (persional area network, PAN)**: 大多用於`短距離通訊`大約數公尺的範圍，無線耳機與智慧型手機之間的連線、無線滑鼠與電腦之間的連線等等。\n2. **區域網路 (local area network, LAN)**: 一般是由通一棟樓的數台電腦所組成的網路，例如大學內部的電腦所組成的網路。\n3. **都會區域網路 (metropolitan area network, MAN)**: 是中型網路，比如社區內部的電腦形成的網路。\n4. **廣域網路 (wide area network, WAN)**: 可連結遠距離的電腦，可連結到別的城市或是地球另一端的電腦。\n\n另一種網路的分類是利用`網路內部運作`的模式進行分類，一種是基於`公共領域`的設計，另一種是基於`特定團體 (公司或個人)`所掌控的私人獨創模式，前者稱為`開放式網路 (open networl)` 後者稱為 `封閉式網路 (closed network)` 也可以稱為 `專屬網路 (proprietary network)`。\n\n還有一種基於拓墣結構的網路分類法，亦即根據電腦連接的形式分類，比較廣為使用的拓墣結構有兩種，一種是`匯流排式`也就是所有電腦透過同一條線路(及匯流排)相連接，另一種是星形有就是一部電腦作為中心點而其他電腦都連向中心點。\n\n隨著個人電腦的普及，現今星型架構普遍用於`無線網路`，無線網路是以無線電傳播的放是進行通訊，中央點稱為`存取點 (access point, AP)` 其作為所有通訊連接的中心點。\n\n匯流排網路與星型網路之間的差異在於網路中個電腦是由一條共用的匯流排直接連接還是由一個作為中介的中央電腦間接連接，有時匯流排式網路的每個電腦會透過很長的線路連接到一個中心位置的某個設備，他稱之為`集線器 (hub)`，他不只是一個很短的匯流排，他會將收到的訊號轉送給所有相連接的電腦，這樣網路看起來是星狀網路但實際上是匯流排式網路。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767rhstcBnAt4.png\" alt=\"drawing\" width=\"800\"/>\n\n## 網路協議\n網路若要穩定的運作就需要定義一些運作上的規則，這樣的規則稱之為`協議 (protocols)`，舉個例子，在一個基於乙太網路標準的匯流排式網路中，傳輸訊息的權限是由 `CSMA/CD (Carrier Sense, Multiple Access with Collision Detection)` 協議所控制，這個協議需要發送到匯流排上的所有電腦，當某個電腦要傳輸訊息時會等到匯流排上完全沒有任何訊息，同時也會持續監看匯流排，若有其他電腦也開始傳送訊息的話，兩邊就會偵測到資訊衝突繼而暫停一個短暫的時間後再次傳送。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767eAaveT7To8.png\" alt=\"drawing\" width=\"800\"/>\n\n但要注意的是雖然碰撞避免協議是設計來避免發生資訊碰撞的但不能完全做到不碰撞，一但發生了就需要將訊息重新傳送，避免碰撞的最常見方法是授與電腦優先權，讓等待傳送機會已久的電腦有較高的優先權。\n\n## 網路連結\n有時候需要將數個現存的網路連接起來已形成更廣域的通訊系統，如果他們是同一形式的則可以將這些網路連起來，比如乙太網路協議下的匯流排網路，可以將他們連結成一個單一長距離的匯流排網路，透過`中繼器`或`交換器`就可以做到這點。\n\n`中繼器 (repeater)` 可以在兩個原始的匯流排網路之間來回傳遞訊息 (中繼器能強化網路訊號)，不管信息的意義為何。\n\n`橋接器 (brudge)`  很像中繼器不過比較複雜，他會連接兩個匯流排式網路，不過他不會傳遞所有經過他的訊號，若訊號的目的是另一區網路的電腦他才會幫忙傳遞，所以同區域的兩部電腦互相傳遞並不會干擾到另一區網路，所以比起中繼器他可以有更好的效能。\n\n`交換器 (switch)` 本質就是有多重連接的橋接器，可以連接數個匯流排式網路，如同橋接器他也會檢查訊息的目的地且每只傳送不同區的訊息，此外訊息傳輸也只會透過最恰當的中繼點，可以讓每個區域網路之間的傳遞消耗較小的能量。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767GwcDwJYp0q.png\" alt=\"drawing\" width=\"800\"/>\n\n但如果與到不相容的網路時，連接的方式就需要經由 `internet` 的模式，讓每個網路保有其特性且可以作為獨立的網路繼續運作，在 Internet 中的網路連接是透過`路由器 (routers)`，他是一種專用型電腦主要用來傳遞訊息，他與剛剛介紹的中繼器, 橋接器都不同，路由器主要是提供`不同網路間的連結`且讓每個子網路保有其內部性質。\n\n路由器是用來傳送訊息到適當的方向，轉送的過程是根據 internet 的全球定位系統，讓 internet 中所有電腦或設備都被指派一個唯一的地址，若某電腦想傳送訊息給另一個電腦的話，會將該目標電腦的 internet 位置附加在信息中，然後將他傳送給本地的路由器，而這個訊息就會被傳送到適合的方向，每個路由器都有一個`轉送表 (forwarding table)`，其中就包含目標位置的轉送方向等等的相關訊息。\n\n每個子網路與 internet 連接的那個 「點」稱為`閘道 (gateway)`，因為他是作為該網路與外界之間的通道。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767QJHwVpeMea.png\" alt=\"drawing\" width=\"800\"/>\n\n## 通訊處理方法\n在網路中相異電腦所執行的任務會經常互相通訊以協調彼此之間的運作，像這種處理程序之間的通訊稱為`處理程序間通訊 (interprocess communication)`，一種慣用的處理程序間通訊協議稱為`主從 (clinet/server)` 模式，在這種模式中一種是像其他處理程序提出請求的`客戶端 (client)`，另一種是回應客戶端請求的`伺服器端 (server)`。\n\n現今的主從模式廣泛的運用在網路通訊中，但主從模式並不是處理程序間通訊的唯一協定，另一種模式是`點對點 (peer-to-peer, P2P)`，主從模式是一的處理程序(伺服器端)對許多客戶端進行服務，點對點則是一個處理程序提供服務另一個處理程序接收服務，此外伺服器必須持續運行以隨時準備服務客戶端，但點對點的處理程序執行只是暫時的。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767oI34lJa7x0.png\" alt=\"drawing\" width=\"800\"/>\n\n在檔案分享上面 P2P 模式漸漸取代了主從模式，其中一個原是是他使用更多的點來分散檔案服務任務，而非使用一台電腦當作伺服器，這種`去中心化`的運作模式可以有比較好的效能，但是由於沒有中央服務器就導致了著作權難以強制執行。\n\n## 分散式系統\n隨著網路科技的成功，電腦之間透過網路底互動已經變得相當普遍且多元，許多現在軟體系統都被設計成`分散式系統 (distributed systems)` 亦即他們是由不同點腦中執行的軟體元件所構成的系統。\n\n### 叢集計算 (Cluster computing)\n`叢集計算 (Cluster computing)` 所描述的分散式系統是指`多個獨立電腦密切合作來提供等同於大型電腦的計算能力`，個別電腦的成本加上連結高速網路的費用也比大型電腦便宜得多，但大型電腦有較好的穩定性與較低的維護成本，但這種這種分散式系統可以提供`高可用度 (high-availability)`，因為即使叢集中有部分電腦發生故障或暫時無法使用，但還有其他電腦可以進行使用，另外這種分散式系統也可以用來提供`負載平衡 (load balancing)`，因為電腦工作量能夠從負擔比較重的電腦轉移給負擔較輕的電腦。\n\n### 網格運算 (Grid computing)\n`網格運算 (Grid computing)` 與叢集電腦比起來連結方式較為鬆散，但還是可以合力完成大型工作，他利用特製軟體可以以更輕易的將資料和演算法分散到所有參與網格運算電腦。\n\n### 雲端計算 (Cloud computing)\n`雲端計算 (Cloud computing)` 配置網路上龐大數量的共享電腦給有需由的客戶使用，是分散式系統最新的趨勢。\n\n# 網際網路\n網路中最直得注意的就是`網際網路 (Internet)`，其目標是發展能夠連結不同電腦的網路技術，使這些網路可以如相連結的系統進行運作且不會受到個別網路災害的影響。\n## 網際網路架構\n網際網路是許多網路的連結，這些網路是由所謂的`網際網路服務提供者 (Internet Service Providers, ISP)` 的機構所建構與維護的，習慣上都會使用 ISP 稱呼他們所提供的網路，因此如果說連接到某個 ISP 則代表`連接到該 ISP 所提供的網路`。\n\nISP 所營運的網路系統可以根據他們在網際網路整體結構中所扮演的角色階層進行分類，最上層是相對比較少的`第一層 ISP (tier-1 ISP)`，是由`高送高容量的國際型 WAN` 所組成，一般由大型通訊公司經營。\n\n連接到第一層 ISP 的是`第二層 ISP (tier-2 ISP)`，一般屬於`區域性規模且影響力較小`，同樣的這些網路也是一般通訊公司所經營。\n\n第一層與第二層基本上是由一群`路由器`組成的網路，主要提供網際網路的基本通訊設施，路由器之間可產生許多通訊路徑，這些路徑是網際網路`備援 (redundancy)` 的核心，即使第一層路由器發生故障也可以讓整個網路還是保持廉潔的狀態，網路核心的連結通常是由稱為`街口 ISP (access ISP)` 或`第三層 ISP (tier-3 ISP)` 的中介者所提供，一個接口 ISP 本質上是個`獨立的網路系統`有時也稱為`內部網路 (intranet)`，是由單一機構所營運，提供住家和店家網際網路的接口。\n\n最後個人用戶連結到接口 ISP 的設備稱為`終端系統 (end system)` 或`主機 (host)`，這些終端可能是筆電或是個人桌上電腦，也可能是電話, 攝影機, 汽車等等的，終端連接到網路的技術也非常多樣，成長最迅速的是基於 `WiFi` 的`無線網路連接`，其技術是連接 AP 到某個接口 ISP 再經由這個 ISP 提供的網際網路接口給 AP 服務範圍內的終端系統，AP 或一組 AP 能提供的服務範圍稱為`熱點 (hot spot)`。\n\n網際網路能夠提供通訊服務，連結許多不同的裝置和技術，這樣的設計使網際網路成為一個`端對端架構 (end-to-end architecture)`，儘管終端設備只有少少的基礎預設條件，但當新的網路系統和裝置變得普及時，網際網路仍然可以快速的支援這些網路系統及裝置。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767eFz8ccoOhW.png\" alt=\"drawing\" width=\"800\"/>\n\n\n## 網際網路地址\n在前面有提到網路需要網路用的地址，每個網路上的電腦都會配置一個`唯一的地址`，這些地址就是所謂的`IP 位置 (IP address)`，起初 IP address 是一組`32 位元的字串`但為了提供更多位置，所以正轉變為使用`128 位元的字串`，一組連續的 IP address 由`網際網路名稱與數字地址分配機構 (Internet Corporation for Assigned Names and Numbers, ICANN)` 發配給 ISP。\n\n位元字串形式的地址法不利於人們使用，因此網際網路提供了另一種地址法，他就是`網域 (domain)` 的概念，網域相當於網際網路中的區域，每個網域都需要向 ICANN 註冊，網域註冊過程需要中鄧一個易於記憶的`網域名稱 (domain name)`，網域名稱與 IP address 一樣都是獨一無二的。\n\n在網域名稱中可以添加`尾綴字`，這些尾綴字稱為`定層網域 (top-level domains, TLD)`，有包含代表商務機構的`.com`、代表美國政府的`.gov`、非營利組織的`.org`、軍事單位的`.mil` 和起出給 ISP 使用的 `.net`，但隨網路快速過展到全世界，因此也產生了兩個字母組成的 TLD 用來代表國家 (`國碼 TLD, country-code TLD`)。\n\n一旦網域名稱註冊後就可以在這個網域內加上易於記憶的名稱來辨識個別機器，要注意的是階層是網域名稱是往`左延伸並以句號隔開`，再多延伸的情況下通常會使用`子網域 (subdomain)` 來表示網域下的某個組織，子網域常用於表示同一個網域範圍中的不同子網路，比如 Yoyodyne 公司使用的網域名稱 `yoyodyne.com` 則該公司內部的某台電腦可能就是 `overthruster.propulsion.yoyodyne,con` 這樣的網域名稱。\n\n雖然易於記憶的位置可便於人們使用，但訊息在網路上的傳播還是以 IP address 的方式進行，所以如果要傳送訊息給遠方的電腦並使用易於記憶的名稱位置時，負責傳輸訊息的軟體比需要傳送訊息之前將`該位置轉換為 IP address`，，這個轉換是透過一個名叫`名稱伺服器 (name server)` 的伺服器所幫助，他的本質與電話簿一樣提供了位置轉譯服務，這些作為網際網路的電話簿系統稱為`網域名稱系統 (domain name system, DNS)`，使用 DNS 進行名稱轉譯的過程稱為 `DNS 查詢 (DNS lookup)`。 \n\n## 網際網路的應用\n在早期的網際網路中，多數應用都是`個別`且`簡單`的程式，他們只會遵循某個網路協定，比如`網路新聞傳輸協定 (Network News Trasfer Protocol, NNTP)` 的新聞閱讀器或使用`檔案傳輸協定 (File Transger Protocol, FTP)` 的程式，但隨著網站與瀏覽器越來越複雜，越來越多這些傳通的網路應用都透過強大的`超文本傳輸協定 (Hyper Text Transfer Protocol, HTTP)` 以網頁的方式來處理。\n\n### 網路多媒體的資料串流\n目前網際網路中很大一部分的流量是用於即時的語音和影片傳輸，也就是所謂的`串流 (streaming)`，串流的有分兩種方式，第一種是`N 點傳播`更精確的說是`單點傳播 (unicast)`，指的是一對一的傳播，而 N 點傳播指的是一對多的傳播，N 點傳播有個缺點就是`會帶給傳播站伺服器很大的負擔`，同樣也會給伺服器附近共用網路的主機帶來嚴重的影響，而多數 N 點傳輸的許多替代方案都試圖在緩解這個問題，其中一種是使用 `P2P 模式`，類似於檔案分享的模式，也就是一但某一點已接收到資料後，他就開始向其他還在等待的資料點傳播該資料，亦即由原本的`單一資料來源負責傳播資料轉而由多點傳播`。\n\n另一種替代方案稱為`多點傳播 (multicast)`，將傳播問題移動到網際網路的`路由器`，使用多點傳播時一台伺服器傳送訊息到多個客戶的方式是告知某個位置並仰賴網路上所有路由器解析該位置的特殊性進而複製多筆資訊再轉送到正確的目的地，但要注意這種多點傳播的軟體需要借用到路由器發揮超呼他原本的職責，所以他沒辦法延伸到整個全球網路。\n\n為了讓串流模式擴大到同時服務數千至上百萬人，每個人都有自己個人的串流，因此有必要將串流內容複製到許多不同的伺服器上，大型的串流服務都利用`內容傳遞網路 (content delivery networks, CDN)`，這是一大群伺服器經過規劃後分布在整個網際網路，用來服務鄰近網路的使用者，CDN 機器可能放置於某個接口 ISP 網路中，讓該網路的客戶可以從近的伺服器享受到高速的多媒體串流服務，比存取遠端的中心串列服務伺服器要快速許多，有一種稱為`任意傳送法 (anycast)` 的網路傳輸技術讓使用者從一群規劃好的伺服器中自動連接最近的伺服器，這樣可以讓 CDN 更切實可行。\n\n# 全球資訊網\n全球資訊網中的重要元件就是`超文件格式`，包含連結到其他文件的`嵌式超連結 (hyperlinks)` 傳送超文件的網路協定與處理使用者所要求的超文件資料的伺服器，一切都從這些開始，他們讓全球資訊網快速的成長。\n## 網站建置\n讓使用者在網際網路上存取超文件的套裝軟體分為兩大類，`瀏覽器 (browser)` 和`網站伺服器 (webserver)`，瀏覽器負責讀取使用者所需要的資料柄有組織的方式呈現資料內容，網站伺服器負責提供使用者(瀏覽器)所要求得超文件存取，而超文件一班都透過所謂的`超文件傳輸協定 (Hypertext Transfer Protocol, HTTP)` 來傳送。\n\n為了能夠定位及擷取網站的文件，所以每個文件都被賦予一個唯一的地址，稱為`網址 (Uniform Resource Locator, URL)`，它包含瀏覽器所需要的資訊，可以讓瀏覽器知道要連接哪一個伺服器以及要獲取哪些資源。\n\n一個典型的 URL 需要有四個部分:\n1. 用來溝通網站伺服器的協議名稱\n2. 易於記憶的網站名稱\n3. 網頁的目錄路徑\n4. 網頁的名稱\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767US5MIPgeDU.png\" alt=\"drawing\" width=\"800\"/>\n\n\n可以參考 [What is a URL?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL) 這篇有詳細的介紹什麼是 URL, 格式與各自代表的內容。\n\n## HTML\n傳統超文件與一般文字檔案相似，也是使用 ASCII 或 Unicode 編碼，差別在於超文件有一種特殊符號也稱為`標籤 (tag)` 用來描述文件資料要如何顯示在螢幕上，這種標籤系統稱為`超文件標示語言 (Hypertext Markup Language, HTML)`，因此為了讓瀏覽器顯示網頁於使用者螢幕上並且連接相關文件資料，網頁作者需要使用 HTML 來描述瀏覽器需要的資訊，而瀏覽器則讀取 HTML 的標籤後就知道如何將文件呈現在電腦螢幕上。\n\n### 可延伸標示語言 (eXtensible Markup Language, XML)\n是一種用來設計標記法的標準形式，使其能夠以文字檔的形式表示表示各種資料，鱒照 XML 的標準，標記法(又稱`標示語言 (Markupo Language)`) 已經發展出標示數學、多媒體資料和音樂的格式，實際上 HTML 是基於 XML 標準的標示語言，用來標示網頁資料。\n\nXML 示範了如何制定一個有廣大應用的標準，基於 XML 發展得標記法能發展出標準且通用的標示語言，有這個標準標示語言就能發展各種不同的應用，以這種方式發展的標示語言具備統一的形式，能夠彼此結合以應付更複雜的應用。\n\n## 用戶端與伺服器的運作\n若需要由用戶端(如瀏覽器)進行遭做的行爲稱為`用戶端 (client-side) 動作`，反之若需要由私服器端(網站伺服器)進行的操作就稱為`伺服端 (server-side) 動作`，早期處理伺服端東做的方式是透過`CGI (Common Gateway Interface)` 指令進行，讓使用者能夠要求執行處存在伺服器端的程式，這種方法的一種變通方式是讓用戶啟用稱為 `servlet` 的程式元件在伺服器端運行。\n\n# Reference\n- [computer science - AN OVERVIEW](https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf)\n","source":"_posts/計算機概論/networking-and-the-internet - 1.md","raw":"---\ntitle: 計算機概論 - 網路通訊與網際網路 Networking and the internet (上)\ndate: 2022-02-21 16:11:08\ntags:\n- 計算機概論\n\ncategories:\n- CS\n---\n\n在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為`網路 (networks)`，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域。\n\n<img src=\"https://www.euractiv.com/wp-content/uploads/sites/2/2017/07/shutterstock_443216956_small-800x450.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# 網路的基本概念\n首先先介紹各種基本的網路通訊概念\n## 網路類型\n電腦網路分為`個人區域網路 (persional area network, PAN)`, `區域網路 (local area network, LAN)`, `都會區域網路 (metropolitan area network, MAN)` 和`廣域網路 (wide area network, WAN)`。\n\n1. **個人區域網路 (persional area network, PAN)**: 大多用於`短距離通訊`大約數公尺的範圍，無線耳機與智慧型手機之間的連線、無線滑鼠與電腦之間的連線等等。\n2. **區域網路 (local area network, LAN)**: 一般是由通一棟樓的數台電腦所組成的網路，例如大學內部的電腦所組成的網路。\n3. **都會區域網路 (metropolitan area network, MAN)**: 是中型網路，比如社區內部的電腦形成的網路。\n4. **廣域網路 (wide area network, WAN)**: 可連結遠距離的電腦，可連結到別的城市或是地球另一端的電腦。\n\n另一種網路的分類是利用`網路內部運作`的模式進行分類，一種是基於`公共領域`的設計，另一種是基於`特定團體 (公司或個人)`所掌控的私人獨創模式，前者稱為`開放式網路 (open networl)` 後者稱為 `封閉式網路 (closed network)` 也可以稱為 `專屬網路 (proprietary network)`。\n\n還有一種基於拓墣結構的網路分類法，亦即根據電腦連接的形式分類，比較廣為使用的拓墣結構有兩種，一種是`匯流排式`也就是所有電腦透過同一條線路(及匯流排)相連接，另一種是星形有就是一部電腦作為中心點而其他電腦都連向中心點。\n\n隨著個人電腦的普及，現今星型架構普遍用於`無線網路`，無線網路是以無線電傳播的放是進行通訊，中央點稱為`存取點 (access point, AP)` 其作為所有通訊連接的中心點。\n\n匯流排網路與星型網路之間的差異在於網路中個電腦是由一條共用的匯流排直接連接還是由一個作為中介的中央電腦間接連接，有時匯流排式網路的每個電腦會透過很長的線路連接到一個中心位置的某個設備，他稱之為`集線器 (hub)`，他不只是一個很短的匯流排，他會將收到的訊號轉送給所有相連接的電腦，這樣網路看起來是星狀網路但實際上是匯流排式網路。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767rhstcBnAt4.png\" alt=\"drawing\" width=\"800\"/>\n\n## 網路協議\n網路若要穩定的運作就需要定義一些運作上的規則，這樣的規則稱之為`協議 (protocols)`，舉個例子，在一個基於乙太網路標準的匯流排式網路中，傳輸訊息的權限是由 `CSMA/CD (Carrier Sense, Multiple Access with Collision Detection)` 協議所控制，這個協議需要發送到匯流排上的所有電腦，當某個電腦要傳輸訊息時會等到匯流排上完全沒有任何訊息，同時也會持續監看匯流排，若有其他電腦也開始傳送訊息的話，兩邊就會偵測到資訊衝突繼而暫停一個短暫的時間後再次傳送。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767eAaveT7To8.png\" alt=\"drawing\" width=\"800\"/>\n\n但要注意的是雖然碰撞避免協議是設計來避免發生資訊碰撞的但不能完全做到不碰撞，一但發生了就需要將訊息重新傳送，避免碰撞的最常見方法是授與電腦優先權，讓等待傳送機會已久的電腦有較高的優先權。\n\n## 網路連結\n有時候需要將數個現存的網路連接起來已形成更廣域的通訊系統，如果他們是同一形式的則可以將這些網路連起來，比如乙太網路協議下的匯流排網路，可以將他們連結成一個單一長距離的匯流排網路，透過`中繼器`或`交換器`就可以做到這點。\n\n`中繼器 (repeater)` 可以在兩個原始的匯流排網路之間來回傳遞訊息 (中繼器能強化網路訊號)，不管信息的意義為何。\n\n`橋接器 (brudge)`  很像中繼器不過比較複雜，他會連接兩個匯流排式網路，不過他不會傳遞所有經過他的訊號，若訊號的目的是另一區網路的電腦他才會幫忙傳遞，所以同區域的兩部電腦互相傳遞並不會干擾到另一區網路，所以比起中繼器他可以有更好的效能。\n\n`交換器 (switch)` 本質就是有多重連接的橋接器，可以連接數個匯流排式網路，如同橋接器他也會檢查訊息的目的地且每只傳送不同區的訊息，此外訊息傳輸也只會透過最恰當的中繼點，可以讓每個區域網路之間的傳遞消耗較小的能量。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767GwcDwJYp0q.png\" alt=\"drawing\" width=\"800\"/>\n\n但如果與到不相容的網路時，連接的方式就需要經由 `internet` 的模式，讓每個網路保有其特性且可以作為獨立的網路繼續運作，在 Internet 中的網路連接是透過`路由器 (routers)`，他是一種專用型電腦主要用來傳遞訊息，他與剛剛介紹的中繼器, 橋接器都不同，路由器主要是提供`不同網路間的連結`且讓每個子網路保有其內部性質。\n\n路由器是用來傳送訊息到適當的方向，轉送的過程是根據 internet 的全球定位系統，讓 internet 中所有電腦或設備都被指派一個唯一的地址，若某電腦想傳送訊息給另一個電腦的話，會將該目標電腦的 internet 位置附加在信息中，然後將他傳送給本地的路由器，而這個訊息就會被傳送到適合的方向，每個路由器都有一個`轉送表 (forwarding table)`，其中就包含目標位置的轉送方向等等的相關訊息。\n\n每個子網路與 internet 連接的那個 「點」稱為`閘道 (gateway)`，因為他是作為該網路與外界之間的通道。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767QJHwVpeMea.png\" alt=\"drawing\" width=\"800\"/>\n\n## 通訊處理方法\n在網路中相異電腦所執行的任務會經常互相通訊以協調彼此之間的運作，像這種處理程序之間的通訊稱為`處理程序間通訊 (interprocess communication)`，一種慣用的處理程序間通訊協議稱為`主從 (clinet/server)` 模式，在這種模式中一種是像其他處理程序提出請求的`客戶端 (client)`，另一種是回應客戶端請求的`伺服器端 (server)`。\n\n現今的主從模式廣泛的運用在網路通訊中，但主從模式並不是處理程序間通訊的唯一協定，另一種模式是`點對點 (peer-to-peer, P2P)`，主從模式是一的處理程序(伺服器端)對許多客戶端進行服務，點對點則是一個處理程序提供服務另一個處理程序接收服務，此外伺服器必須持續運行以隨時準備服務客戶端，但點對點的處理程序執行只是暫時的。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767oI34lJa7x0.png\" alt=\"drawing\" width=\"800\"/>\n\n在檔案分享上面 P2P 模式漸漸取代了主從模式，其中一個原是是他使用更多的點來分散檔案服務任務，而非使用一台電腦當作伺服器，這種`去中心化`的運作模式可以有比較好的效能，但是由於沒有中央服務器就導致了著作權難以強制執行。\n\n## 分散式系統\n隨著網路科技的成功，電腦之間透過網路底互動已經變得相當普遍且多元，許多現在軟體系統都被設計成`分散式系統 (distributed systems)` 亦即他們是由不同點腦中執行的軟體元件所構成的系統。\n\n### 叢集計算 (Cluster computing)\n`叢集計算 (Cluster computing)` 所描述的分散式系統是指`多個獨立電腦密切合作來提供等同於大型電腦的計算能力`，個別電腦的成本加上連結高速網路的費用也比大型電腦便宜得多，但大型電腦有較好的穩定性與較低的維護成本，但這種這種分散式系統可以提供`高可用度 (high-availability)`，因為即使叢集中有部分電腦發生故障或暫時無法使用，但還有其他電腦可以進行使用，另外這種分散式系統也可以用來提供`負載平衡 (load balancing)`，因為電腦工作量能夠從負擔比較重的電腦轉移給負擔較輕的電腦。\n\n### 網格運算 (Grid computing)\n`網格運算 (Grid computing)` 與叢集電腦比起來連結方式較為鬆散，但還是可以合力完成大型工作，他利用特製軟體可以以更輕易的將資料和演算法分散到所有參與網格運算電腦。\n\n### 雲端計算 (Cloud computing)\n`雲端計算 (Cloud computing)` 配置網路上龐大數量的共享電腦給有需由的客戶使用，是分散式系統最新的趨勢。\n\n# 網際網路\n網路中最直得注意的就是`網際網路 (Internet)`，其目標是發展能夠連結不同電腦的網路技術，使這些網路可以如相連結的系統進行運作且不會受到個別網路災害的影響。\n## 網際網路架構\n網際網路是許多網路的連結，這些網路是由所謂的`網際網路服務提供者 (Internet Service Providers, ISP)` 的機構所建構與維護的，習慣上都會使用 ISP 稱呼他們所提供的網路，因此如果說連接到某個 ISP 則代表`連接到該 ISP 所提供的網路`。\n\nISP 所營運的網路系統可以根據他們在網際網路整體結構中所扮演的角色階層進行分類，最上層是相對比較少的`第一層 ISP (tier-1 ISP)`，是由`高送高容量的國際型 WAN` 所組成，一般由大型通訊公司經營。\n\n連接到第一層 ISP 的是`第二層 ISP (tier-2 ISP)`，一般屬於`區域性規模且影響力較小`，同樣的這些網路也是一般通訊公司所經營。\n\n第一層與第二層基本上是由一群`路由器`組成的網路，主要提供網際網路的基本通訊設施，路由器之間可產生許多通訊路徑，這些路徑是網際網路`備援 (redundancy)` 的核心，即使第一層路由器發生故障也可以讓整個網路還是保持廉潔的狀態，網路核心的連結通常是由稱為`街口 ISP (access ISP)` 或`第三層 ISP (tier-3 ISP)` 的中介者所提供，一個接口 ISP 本質上是個`獨立的網路系統`有時也稱為`內部網路 (intranet)`，是由單一機構所營運，提供住家和店家網際網路的接口。\n\n最後個人用戶連結到接口 ISP 的設備稱為`終端系統 (end system)` 或`主機 (host)`，這些終端可能是筆電或是個人桌上電腦，也可能是電話, 攝影機, 汽車等等的，終端連接到網路的技術也非常多樣，成長最迅速的是基於 `WiFi` 的`無線網路連接`，其技術是連接 AP 到某個接口 ISP 再經由這個 ISP 提供的網際網路接口給 AP 服務範圍內的終端系統，AP 或一組 AP 能提供的服務範圍稱為`熱點 (hot spot)`。\n\n網際網路能夠提供通訊服務，連結許多不同的裝置和技術，這樣的設計使網際網路成為一個`端對端架構 (end-to-end architecture)`，儘管終端設備只有少少的基礎預設條件，但當新的網路系統和裝置變得普及時，網際網路仍然可以快速的支援這些網路系統及裝置。\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767eFz8ccoOhW.png\" alt=\"drawing\" width=\"800\"/>\n\n\n## 網際網路地址\n在前面有提到網路需要網路用的地址，每個網路上的電腦都會配置一個`唯一的地址`，這些地址就是所謂的`IP 位置 (IP address)`，起初 IP address 是一組`32 位元的字串`但為了提供更多位置，所以正轉變為使用`128 位元的字串`，一組連續的 IP address 由`網際網路名稱與數字地址分配機構 (Internet Corporation for Assigned Names and Numbers, ICANN)` 發配給 ISP。\n\n位元字串形式的地址法不利於人們使用，因此網際網路提供了另一種地址法，他就是`網域 (domain)` 的概念，網域相當於網際網路中的區域，每個網域都需要向 ICANN 註冊，網域註冊過程需要中鄧一個易於記憶的`網域名稱 (domain name)`，網域名稱與 IP address 一樣都是獨一無二的。\n\n在網域名稱中可以添加`尾綴字`，這些尾綴字稱為`定層網域 (top-level domains, TLD)`，有包含代表商務機構的`.com`、代表美國政府的`.gov`、非營利組織的`.org`、軍事單位的`.mil` 和起出給 ISP 使用的 `.net`，但隨網路快速過展到全世界，因此也產生了兩個字母組成的 TLD 用來代表國家 (`國碼 TLD, country-code TLD`)。\n\n一旦網域名稱註冊後就可以在這個網域內加上易於記憶的名稱來辨識個別機器，要注意的是階層是網域名稱是往`左延伸並以句號隔開`，再多延伸的情況下通常會使用`子網域 (subdomain)` 來表示網域下的某個組織，子網域常用於表示同一個網域範圍中的不同子網路，比如 Yoyodyne 公司使用的網域名稱 `yoyodyne.com` 則該公司內部的某台電腦可能就是 `overthruster.propulsion.yoyodyne,con` 這樣的網域名稱。\n\n雖然易於記憶的位置可便於人們使用，但訊息在網路上的傳播還是以 IP address 的方式進行，所以如果要傳送訊息給遠方的電腦並使用易於記憶的名稱位置時，負責傳輸訊息的軟體比需要傳送訊息之前將`該位置轉換為 IP address`，，這個轉換是透過一個名叫`名稱伺服器 (name server)` 的伺服器所幫助，他的本質與電話簿一樣提供了位置轉譯服務，這些作為網際網路的電話簿系統稱為`網域名稱系統 (domain name system, DNS)`，使用 DNS 進行名稱轉譯的過程稱為 `DNS 查詢 (DNS lookup)`。 \n\n## 網際網路的應用\n在早期的網際網路中，多數應用都是`個別`且`簡單`的程式，他們只會遵循某個網路協定，比如`網路新聞傳輸協定 (Network News Trasfer Protocol, NNTP)` 的新聞閱讀器或使用`檔案傳輸協定 (File Transger Protocol, FTP)` 的程式，但隨著網站與瀏覽器越來越複雜，越來越多這些傳通的網路應用都透過強大的`超文本傳輸協定 (Hyper Text Transfer Protocol, HTTP)` 以網頁的方式來處理。\n\n### 網路多媒體的資料串流\n目前網際網路中很大一部分的流量是用於即時的語音和影片傳輸，也就是所謂的`串流 (streaming)`，串流的有分兩種方式，第一種是`N 點傳播`更精確的說是`單點傳播 (unicast)`，指的是一對一的傳播，而 N 點傳播指的是一對多的傳播，N 點傳播有個缺點就是`會帶給傳播站伺服器很大的負擔`，同樣也會給伺服器附近共用網路的主機帶來嚴重的影響，而多數 N 點傳輸的許多替代方案都試圖在緩解這個問題，其中一種是使用 `P2P 模式`，類似於檔案分享的模式，也就是一但某一點已接收到資料後，他就開始向其他還在等待的資料點傳播該資料，亦即由原本的`單一資料來源負責傳播資料轉而由多點傳播`。\n\n另一種替代方案稱為`多點傳播 (multicast)`，將傳播問題移動到網際網路的`路由器`，使用多點傳播時一台伺服器傳送訊息到多個客戶的方式是告知某個位置並仰賴網路上所有路由器解析該位置的特殊性進而複製多筆資訊再轉送到正確的目的地，但要注意這種多點傳播的軟體需要借用到路由器發揮超呼他原本的職責，所以他沒辦法延伸到整個全球網路。\n\n為了讓串流模式擴大到同時服務數千至上百萬人，每個人都有自己個人的串流，因此有必要將串流內容複製到許多不同的伺服器上，大型的串流服務都利用`內容傳遞網路 (content delivery networks, CDN)`，這是一大群伺服器經過規劃後分布在整個網際網路，用來服務鄰近網路的使用者，CDN 機器可能放置於某個接口 ISP 網路中，讓該網路的客戶可以從近的伺服器享受到高速的多媒體串流服務，比存取遠端的中心串列服務伺服器要快速許多，有一種稱為`任意傳送法 (anycast)` 的網路傳輸技術讓使用者從一群規劃好的伺服器中自動連接最近的伺服器，這樣可以讓 CDN 更切實可行。\n\n# 全球資訊網\n全球資訊網中的重要元件就是`超文件格式`，包含連結到其他文件的`嵌式超連結 (hyperlinks)` 傳送超文件的網路協定與處理使用者所要求的超文件資料的伺服器，一切都從這些開始，他們讓全球資訊網快速的成長。\n## 網站建置\n讓使用者在網際網路上存取超文件的套裝軟體分為兩大類，`瀏覽器 (browser)` 和`網站伺服器 (webserver)`，瀏覽器負責讀取使用者所需要的資料柄有組織的方式呈現資料內容，網站伺服器負責提供使用者(瀏覽器)所要求得超文件存取，而超文件一班都透過所謂的`超文件傳輸協定 (Hypertext Transfer Protocol, HTTP)` 來傳送。\n\n為了能夠定位及擷取網站的文件，所以每個文件都被賦予一個唯一的地址，稱為`網址 (Uniform Resource Locator, URL)`，它包含瀏覽器所需要的資訊，可以讓瀏覽器知道要連接哪一個伺服器以及要獲取哪些資源。\n\n一個典型的 URL 需要有四個部分:\n1. 用來溝通網站伺服器的協議名稱\n2. 易於記憶的網站名稱\n3. 網頁的目錄路徑\n4. 網頁的名稱\n\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767US5MIPgeDU.png\" alt=\"drawing\" width=\"800\"/>\n\n\n可以參考 [What is a URL?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL) 這篇有詳細的介紹什麼是 URL, 格式與各自代表的內容。\n\n## HTML\n傳統超文件與一般文字檔案相似，也是使用 ASCII 或 Unicode 編碼，差別在於超文件有一種特殊符號也稱為`標籤 (tag)` 用來描述文件資料要如何顯示在螢幕上，這種標籤系統稱為`超文件標示語言 (Hypertext Markup Language, HTML)`，因此為了讓瀏覽器顯示網頁於使用者螢幕上並且連接相關文件資料，網頁作者需要使用 HTML 來描述瀏覽器需要的資訊，而瀏覽器則讀取 HTML 的標籤後就知道如何將文件呈現在電腦螢幕上。\n\n### 可延伸標示語言 (eXtensible Markup Language, XML)\n是一種用來設計標記法的標準形式，使其能夠以文字檔的形式表示表示各種資料，鱒照 XML 的標準，標記法(又稱`標示語言 (Markupo Language)`) 已經發展出標示數學、多媒體資料和音樂的格式，實際上 HTML 是基於 XML 標準的標示語言，用來標示網頁資料。\n\nXML 示範了如何制定一個有廣大應用的標準，基於 XML 發展得標記法能發展出標準且通用的標示語言，有這個標準標示語言就能發展各種不同的應用，以這種方式發展的標示語言具備統一的形式，能夠彼此結合以應付更複雜的應用。\n\n## 用戶端與伺服器的運作\n若需要由用戶端(如瀏覽器)進行遭做的行爲稱為`用戶端 (client-side) 動作`，反之若需要由私服器端(網站伺服器)進行的操作就稱為`伺服端 (server-side) 動作`，早期處理伺服端東做的方式是透過`CGI (Common Gateway Interface)` 指令進行，讓使用者能夠要求執行處存在伺服器端的程式，這種方法的一種變通方式是讓用戶啟用稱為 `servlet` 的程式元件在伺服器端運行。\n\n# Reference\n- [computer science - AN OVERVIEW](https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf)\n","slug":"計算機概論/networking-and-the-internet - 1","published":1,"updated":"2022-02-22T06:37:01.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxw5c4k00049gw34rtp3ll2","content":"<p>在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為<code>網路 (networks)</code>，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域。</p>\n<img src=\"https://www.euractiv.com/wp-content/uploads/sites/2/2017/07/shutterstock_443216956_small-800x450.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>\n\n<h1 id=\"網路的基本概念\"><a href=\"#網路的基本概念\" class=\"headerlink\" title=\"網路的基本概念\"></a>網路的基本概念</h1><p>首先先介紹各種基本的網路通訊概念</p>\n<h2 id=\"網路類型\"><a href=\"#網路類型\" class=\"headerlink\" title=\"網路類型\"></a>網路類型</h2><p>電腦網路分為<code>個人區域網路 (persional area network, PAN)</code>, <code>區域網路 (local area network, LAN)</code>, <code>都會區域網路 (metropolitan area network, MAN)</code> 和<code>廣域網路 (wide area network, WAN)</code>。</p>\n<ol>\n<li><strong>個人區域網路 (persional area network, PAN)</strong>: 大多用於<code>短距離通訊</code>大約數公尺的範圍，無線耳機與智慧型手機之間的連線、無線滑鼠與電腦之間的連線等等。</li>\n<li><strong>區域網路 (local area network, LAN)</strong>: 一般是由通一棟樓的數台電腦所組成的網路，例如大學內部的電腦所組成的網路。</li>\n<li><strong>都會區域網路 (metropolitan area network, MAN)</strong>: 是中型網路，比如社區內部的電腦形成的網路。</li>\n<li><strong>廣域網路 (wide area network, WAN)</strong>: 可連結遠距離的電腦，可連結到別的城市或是地球另一端的電腦。</li>\n</ol>\n<p>另一種網路的分類是利用<code>網路內部運作</code>的模式進行分類，一種是基於<code>公共領域</code>的設計，另一種是基於<code>特定團體 (公司或個人)</code>所掌控的私人獨創模式，前者稱為<code>開放式網路 (open networl)</code> 後者稱為 <code>封閉式網路 (closed network)</code> 也可以稱為 <code>專屬網路 (proprietary network)</code>。</p>\n<p>還有一種基於拓墣結構的網路分類法，亦即根據電腦連接的形式分類，比較廣為使用的拓墣結構有兩種，一種是<code>匯流排式</code>也就是所有電腦透過同一條線路(及匯流排)相連接，另一種是星形有就是一部電腦作為中心點而其他電腦都連向中心點。</p>\n<p>隨著個人電腦的普及，現今星型架構普遍用於<code>無線網路</code>，無線網路是以無線電傳播的放是進行通訊，中央點稱為<code>存取點 (access point, AP)</code> 其作為所有通訊連接的中心點。</p>\n<p>匯流排網路與星型網路之間的差異在於網路中個電腦是由一條共用的匯流排直接連接還是由一個作為中介的中央電腦間接連接，有時匯流排式網路的每個電腦會透過很長的線路連接到一個中心位置的某個設備，他稱之為<code>集線器 (hub)</code>，他不只是一個很短的匯流排，他會將收到的訊號轉送給所有相連接的電腦，這樣網路看起來是星狀網路但實際上是匯流排式網路。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767rhstcBnAt4.png\" alt=\"drawing\" width=\"800\"/>\n\n<h2 id=\"網路協議\"><a href=\"#網路協議\" class=\"headerlink\" title=\"網路協議\"></a>網路協議</h2><p>網路若要穩定的運作就需要定義一些運作上的規則，這樣的規則稱之為<code>協議 (protocols)</code>，舉個例子，在一個基於乙太網路標準的匯流排式網路中，傳輸訊息的權限是由 <code>CSMA/CD (Carrier Sense, Multiple Access with Collision Detection)</code> 協議所控制，這個協議需要發送到匯流排上的所有電腦，當某個電腦要傳輸訊息時會等到匯流排上完全沒有任何訊息，同時也會持續監看匯流排，若有其他電腦也開始傳送訊息的話，兩邊就會偵測到資訊衝突繼而暫停一個短暫的時間後再次傳送。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767eAaveT7To8.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>但要注意的是雖然碰撞避免協議是設計來避免發生資訊碰撞的但不能完全做到不碰撞，一但發生了就需要將訊息重新傳送，避免碰撞的最常見方法是授與電腦優先權，讓等待傳送機會已久的電腦有較高的優先權。</p>\n<h2 id=\"網路連結\"><a href=\"#網路連結\" class=\"headerlink\" title=\"網路連結\"></a>網路連結</h2><p>有時候需要將數個現存的網路連接起來已形成更廣域的通訊系統，如果他們是同一形式的則可以將這些網路連起來，比如乙太網路協議下的匯流排網路，可以將他們連結成一個單一長距離的匯流排網路，透過<code>中繼器</code>或<code>交換器</code>就可以做到這點。</p>\n<p><code>中繼器 (repeater)</code> 可以在兩個原始的匯流排網路之間來回傳遞訊息 (中繼器能強化網路訊號)，不管信息的意義為何。</p>\n<p><code>橋接器 (brudge)</code>  很像中繼器不過比較複雜，他會連接兩個匯流排式網路，不過他不會傳遞所有經過他的訊號，若訊號的目的是另一區網路的電腦他才會幫忙傳遞，所以同區域的兩部電腦互相傳遞並不會干擾到另一區網路，所以比起中繼器他可以有更好的效能。</p>\n<p><code>交換器 (switch)</code> 本質就是有多重連接的橋接器，可以連接數個匯流排式網路，如同橋接器他也會檢查訊息的目的地且每只傳送不同區的訊息，此外訊息傳輸也只會透過最恰當的中繼點，可以讓每個區域網路之間的傳遞消耗較小的能量。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767GwcDwJYp0q.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>但如果與到不相容的網路時，連接的方式就需要經由 <code>internet</code> 的模式，讓每個網路保有其特性且可以作為獨立的網路繼續運作，在 Internet 中的網路連接是透過<code>路由器 (routers)</code>，他是一種專用型電腦主要用來傳遞訊息，他與剛剛介紹的中繼器, 橋接器都不同，路由器主要是提供<code>不同網路間的連結</code>且讓每個子網路保有其內部性質。</p>\n<p>路由器是用來傳送訊息到適當的方向，轉送的過程是根據 internet 的全球定位系統，讓 internet 中所有電腦或設備都被指派一個唯一的地址，若某電腦想傳送訊息給另一個電腦的話，會將該目標電腦的 internet 位置附加在信息中，然後將他傳送給本地的路由器，而這個訊息就會被傳送到適合的方向，每個路由器都有一個<code>轉送表 (forwarding table)</code>，其中就包含目標位置的轉送方向等等的相關訊息。</p>\n<p>每個子網路與 internet 連接的那個 「點」稱為<code>閘道 (gateway)</code>，因為他是作為該網路與外界之間的通道。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767QJHwVpeMea.png\" alt=\"drawing\" width=\"800\"/>\n\n<h2 id=\"通訊處理方法\"><a href=\"#通訊處理方法\" class=\"headerlink\" title=\"通訊處理方法\"></a>通訊處理方法</h2><p>在網路中相異電腦所執行的任務會經常互相通訊以協調彼此之間的運作，像這種處理程序之間的通訊稱為<code>處理程序間通訊 (interprocess communication)</code>，一種慣用的處理程序間通訊協議稱為<code>主從 (clinet/server)</code> 模式，在這種模式中一種是像其他處理程序提出請求的<code>客戶端 (client)</code>，另一種是回應客戶端請求的<code>伺服器端 (server)</code>。</p>\n<p>現今的主從模式廣泛的運用在網路通訊中，但主從模式並不是處理程序間通訊的唯一協定，另一種模式是<code>點對點 (peer-to-peer, P2P)</code>，主從模式是一的處理程序(伺服器端)對許多客戶端進行服務，點對點則是一個處理程序提供服務另一個處理程序接收服務，此外伺服器必須持續運行以隨時準備服務客戶端，但點對點的處理程序執行只是暫時的。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767oI34lJa7x0.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>在檔案分享上面 P2P 模式漸漸取代了主從模式，其中一個原是是他使用更多的點來分散檔案服務任務，而非使用一台電腦當作伺服器，這種<code>去中心化</code>的運作模式可以有比較好的效能，但是由於沒有中央服務器就導致了著作權難以強制執行。</p>\n<h2 id=\"分散式系統\"><a href=\"#分散式系統\" class=\"headerlink\" title=\"分散式系統\"></a>分散式系統</h2><p>隨著網路科技的成功，電腦之間透過網路底互動已經變得相當普遍且多元，許多現在軟體系統都被設計成<code>分散式系統 (distributed systems)</code> 亦即他們是由不同點腦中執行的軟體元件所構成的系統。</p>\n<h3 id=\"叢集計算-Cluster-computing\"><a href=\"#叢集計算-Cluster-computing\" class=\"headerlink\" title=\"叢集計算 (Cluster computing)\"></a>叢集計算 (Cluster computing)</h3><p><code>叢集計算 (Cluster computing)</code> 所描述的分散式系統是指<code>多個獨立電腦密切合作來提供等同於大型電腦的計算能力</code>，個別電腦的成本加上連結高速網路的費用也比大型電腦便宜得多，但大型電腦有較好的穩定性與較低的維護成本，但這種這種分散式系統可以提供<code>高可用度 (high-availability)</code>，因為即使叢集中有部分電腦發生故障或暫時無法使用，但還有其他電腦可以進行使用，另外這種分散式系統也可以用來提供<code>負載平衡 (load balancing)</code>，因為電腦工作量能夠從負擔比較重的電腦轉移給負擔較輕的電腦。</p>\n<h3 id=\"網格運算-Grid-computing\"><a href=\"#網格運算-Grid-computing\" class=\"headerlink\" title=\"網格運算 (Grid computing)\"></a>網格運算 (Grid computing)</h3><p><code>網格運算 (Grid computing)</code> 與叢集電腦比起來連結方式較為鬆散，但還是可以合力完成大型工作，他利用特製軟體可以以更輕易的將資料和演算法分散到所有參與網格運算電腦。</p>\n<h3 id=\"雲端計算-Cloud-computing\"><a href=\"#雲端計算-Cloud-computing\" class=\"headerlink\" title=\"雲端計算 (Cloud computing)\"></a>雲端計算 (Cloud computing)</h3><p><code>雲端計算 (Cloud computing)</code> 配置網路上龐大數量的共享電腦給有需由的客戶使用，是分散式系統最新的趨勢。</p>\n<h1 id=\"網際網路\"><a href=\"#網際網路\" class=\"headerlink\" title=\"網際網路\"></a>網際網路</h1><p>網路中最直得注意的就是<code>網際網路 (Internet)</code>，其目標是發展能夠連結不同電腦的網路技術，使這些網路可以如相連結的系統進行運作且不會受到個別網路災害的影響。</p>\n<h2 id=\"網際網路架構\"><a href=\"#網際網路架構\" class=\"headerlink\" title=\"網際網路架構\"></a>網際網路架構</h2><p>網際網路是許多網路的連結，這些網路是由所謂的<code>網際網路服務提供者 (Internet Service Providers, ISP)</code> 的機構所建構與維護的，習慣上都會使用 ISP 稱呼他們所提供的網路，因此如果說連接到某個 ISP 則代表<code>連接到該 ISP 所提供的網路</code>。</p>\n<p>ISP 所營運的網路系統可以根據他們在網際網路整體結構中所扮演的角色階層進行分類，最上層是相對比較少的<code>第一層 ISP (tier-1 ISP)</code>，是由<code>高送高容量的國際型 WAN</code> 所組成，一般由大型通訊公司經營。</p>\n<p>連接到第一層 ISP 的是<code>第二層 ISP (tier-2 ISP)</code>，一般屬於<code>區域性規模且影響力較小</code>，同樣的這些網路也是一般通訊公司所經營。</p>\n<p>第一層與第二層基本上是由一群<code>路由器</code>組成的網路，主要提供網際網路的基本通訊設施，路由器之間可產生許多通訊路徑，這些路徑是網際網路<code>備援 (redundancy)</code> 的核心，即使第一層路由器發生故障也可以讓整個網路還是保持廉潔的狀態，網路核心的連結通常是由稱為<code>街口 ISP (access ISP)</code> 或<code>第三層 ISP (tier-3 ISP)</code> 的中介者所提供，一個接口 ISP 本質上是個<code>獨立的網路系統</code>有時也稱為<code>內部網路 (intranet)</code>，是由單一機構所營運，提供住家和店家網際網路的接口。</p>\n<p>最後個人用戶連結到接口 ISP 的設備稱為<code>終端系統 (end system)</code> 或<code>主機 (host)</code>，這些終端可能是筆電或是個人桌上電腦，也可能是電話, 攝影機, 汽車等等的，終端連接到網路的技術也非常多樣，成長最迅速的是基於 <code>WiFi</code> 的<code>無線網路連接</code>，其技術是連接 AP 到某個接口 ISP 再經由這個 ISP 提供的網際網路接口給 AP 服務範圍內的終端系統，AP 或一組 AP 能提供的服務範圍稱為<code>熱點 (hot spot)</code>。</p>\n<p>網際網路能夠提供通訊服務，連結許多不同的裝置和技術，這樣的設計使網際網路成為一個<code>端對端架構 (end-to-end architecture)</code>，儘管終端設備只有少少的基礎預設條件，但當新的網路系統和裝置變得普及時，網際網路仍然可以快速的支援這些網路系統及裝置。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767eFz8ccoOhW.png\" alt=\"drawing\" width=\"800\"/>\n\n\n<h2 id=\"網際網路地址\"><a href=\"#網際網路地址\" class=\"headerlink\" title=\"網際網路地址\"></a>網際網路地址</h2><p>在前面有提到網路需要網路用的地址，每個網路上的電腦都會配置一個<code>唯一的地址</code>，這些地址就是所謂的<code>IP 位置 (IP address)</code>，起初 IP address 是一組<code>32 位元的字串</code>但為了提供更多位置，所以正轉變為使用<code>128 位元的字串</code>，一組連續的 IP address 由<code>網際網路名稱與數字地址分配機構 (Internet Corporation for Assigned Names and Numbers, ICANN)</code> 發配給 ISP。</p>\n<p>位元字串形式的地址法不利於人們使用，因此網際網路提供了另一種地址法，他就是<code>網域 (domain)</code> 的概念，網域相當於網際網路中的區域，每個網域都需要向 ICANN 註冊，網域註冊過程需要中鄧一個易於記憶的<code>網域名稱 (domain name)</code>，網域名稱與 IP address 一樣都是獨一無二的。</p>\n<p>在網域名稱中可以添加<code>尾綴字</code>，這些尾綴字稱為<code>定層網域 (top-level domains, TLD)</code>，有包含代表商務機構的<code>.com</code>、代表美國政府的<code>.gov</code>、非營利組織的<code>.org</code>、軍事單位的<code>.mil</code> 和起出給 ISP 使用的 <code>.net</code>，但隨網路快速過展到全世界，因此也產生了兩個字母組成的 TLD 用來代表國家 (<code>國碼 TLD, country-code TLD</code>)。</p>\n<p>一旦網域名稱註冊後就可以在這個網域內加上易於記憶的名稱來辨識個別機器，要注意的是階層是網域名稱是往<code>左延伸並以句號隔開</code>，再多延伸的情況下通常會使用<code>子網域 (subdomain)</code> 來表示網域下的某個組織，子網域常用於表示同一個網域範圍中的不同子網路，比如 Yoyodyne 公司使用的網域名稱 <code>yoyodyne.com</code> 則該公司內部的某台電腦可能就是 <code>overthruster.propulsion.yoyodyne,con</code> 這樣的網域名稱。</p>\n<p>雖然易於記憶的位置可便於人們使用，但訊息在網路上的傳播還是以 IP address 的方式進行，所以如果要傳送訊息給遠方的電腦並使用易於記憶的名稱位置時，負責傳輸訊息的軟體比需要傳送訊息之前將<code>該位置轉換為 IP address</code>，，這個轉換是透過一個名叫<code>名稱伺服器 (name server)</code> 的伺服器所幫助，他的本質與電話簿一樣提供了位置轉譯服務，這些作為網際網路的電話簿系統稱為<code>網域名稱系統 (domain name system, DNS)</code>，使用 DNS 進行名稱轉譯的過程稱為 <code>DNS 查詢 (DNS lookup)</code>。 </p>\n<h2 id=\"網際網路的應用\"><a href=\"#網際網路的應用\" class=\"headerlink\" title=\"網際網路的應用\"></a>網際網路的應用</h2><p>在早期的網際網路中，多數應用都是<code>個別</code>且<code>簡單</code>的程式，他們只會遵循某個網路協定，比如<code>網路新聞傳輸協定 (Network News Trasfer Protocol, NNTP)</code> 的新聞閱讀器或使用<code>檔案傳輸協定 (File Transger Protocol, FTP)</code> 的程式，但隨著網站與瀏覽器越來越複雜，越來越多這些傳通的網路應用都透過強大的<code>超文本傳輸協定 (Hyper Text Transfer Protocol, HTTP)</code> 以網頁的方式來處理。</p>\n<h3 id=\"網路多媒體的資料串流\"><a href=\"#網路多媒體的資料串流\" class=\"headerlink\" title=\"網路多媒體的資料串流\"></a>網路多媒體的資料串流</h3><p>目前網際網路中很大一部分的流量是用於即時的語音和影片傳輸，也就是所謂的<code>串流 (streaming)</code>，串流的有分兩種方式，第一種是<code>N 點傳播</code>更精確的說是<code>單點傳播 (unicast)</code>，指的是一對一的傳播，而 N 點傳播指的是一對多的傳播，N 點傳播有個缺點就是<code>會帶給傳播站伺服器很大的負擔</code>，同樣也會給伺服器附近共用網路的主機帶來嚴重的影響，而多數 N 點傳輸的許多替代方案都試圖在緩解這個問題，其中一種是使用 <code>P2P 模式</code>，類似於檔案分享的模式，也就是一但某一點已接收到資料後，他就開始向其他還在等待的資料點傳播該資料，亦即由原本的<code>單一資料來源負責傳播資料轉而由多點傳播</code>。</p>\n<p>另一種替代方案稱為<code>多點傳播 (multicast)</code>，將傳播問題移動到網際網路的<code>路由器</code>，使用多點傳播時一台伺服器傳送訊息到多個客戶的方式是告知某個位置並仰賴網路上所有路由器解析該位置的特殊性進而複製多筆資訊再轉送到正確的目的地，但要注意這種多點傳播的軟體需要借用到路由器發揮超呼他原本的職責，所以他沒辦法延伸到整個全球網路。</p>\n<p>為了讓串流模式擴大到同時服務數千至上百萬人，每個人都有自己個人的串流，因此有必要將串流內容複製到許多不同的伺服器上，大型的串流服務都利用<code>內容傳遞網路 (content delivery networks, CDN)</code>，這是一大群伺服器經過規劃後分布在整個網際網路，用來服務鄰近網路的使用者，CDN 機器可能放置於某個接口 ISP 網路中，讓該網路的客戶可以從近的伺服器享受到高速的多媒體串流服務，比存取遠端的中心串列服務伺服器要快速許多，有一種稱為<code>任意傳送法 (anycast)</code> 的網路傳輸技術讓使用者從一群規劃好的伺服器中自動連接最近的伺服器，這樣可以讓 CDN 更切實可行。</p>\n<h1 id=\"全球資訊網\"><a href=\"#全球資訊網\" class=\"headerlink\" title=\"全球資訊網\"></a>全球資訊網</h1><p>全球資訊網中的重要元件就是<code>超文件格式</code>，包含連結到其他文件的<code>嵌式超連結 (hyperlinks)</code> 傳送超文件的網路協定與處理使用者所要求的超文件資料的伺服器，一切都從這些開始，他們讓全球資訊網快速的成長。</p>\n<h2 id=\"網站建置\"><a href=\"#網站建置\" class=\"headerlink\" title=\"網站建置\"></a>網站建置</h2><p>讓使用者在網際網路上存取超文件的套裝軟體分為兩大類，<code>瀏覽器 (browser)</code> 和<code>網站伺服器 (webserver)</code>，瀏覽器負責讀取使用者所需要的資料柄有組織的方式呈現資料內容，網站伺服器負責提供使用者(瀏覽器)所要求得超文件存取，而超文件一班都透過所謂的<code>超文件傳輸協定 (Hypertext Transfer Protocol, HTTP)</code> 來傳送。</p>\n<p>為了能夠定位及擷取網站的文件，所以每個文件都被賦予一個唯一的地址，稱為<code>網址 (Uniform Resource Locator, URL)</code>，它包含瀏覽器所需要的資訊，可以讓瀏覽器知道要連接哪一個伺服器以及要獲取哪些資源。</p>\n<p>一個典型的 URL 需要有四個部分:</p>\n<ol>\n<li>用來溝通網站伺服器的協議名稱</li>\n<li>易於記憶的網站名稱</li>\n<li>網頁的目錄路徑</li>\n<li>網頁的名稱</li>\n</ol>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767US5MIPgeDU.png\" alt=\"drawing\" width=\"800\"/>\n\n\n<p>可以參考 <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL\">What is a URL?</a> 這篇有詳細的介紹什麼是 URL, 格式與各自代表的內容。</p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>傳統超文件與一般文字檔案相似，也是使用 ASCII 或 Unicode 編碼，差別在於超文件有一種特殊符號也稱為<code>標籤 (tag)</code> 用來描述文件資料要如何顯示在螢幕上，這種標籤系統稱為<code>超文件標示語言 (Hypertext Markup Language, HTML)</code>，因此為了讓瀏覽器顯示網頁於使用者螢幕上並且連接相關文件資料，網頁作者需要使用 HTML 來描述瀏覽器需要的資訊，而瀏覽器則讀取 HTML 的標籤後就知道如何將文件呈現在電腦螢幕上。</p>\n<h3 id=\"可延伸標示語言-eXtensible-Markup-Language-XML\"><a href=\"#可延伸標示語言-eXtensible-Markup-Language-XML\" class=\"headerlink\" title=\"可延伸標示語言 (eXtensible Markup Language, XML)\"></a>可延伸標示語言 (eXtensible Markup Language, XML)</h3><p>是一種用來設計標記法的標準形式，使其能夠以文字檔的形式表示表示各種資料，鱒照 XML 的標準，標記法(又稱<code>標示語言 (Markupo Language)</code>) 已經發展出標示數學、多媒體資料和音樂的格式，實際上 HTML 是基於 XML 標準的標示語言，用來標示網頁資料。</p>\n<p>XML 示範了如何制定一個有廣大應用的標準，基於 XML 發展得標記法能發展出標準且通用的標示語言，有這個標準標示語言就能發展各種不同的應用，以這種方式發展的標示語言具備統一的形式，能夠彼此結合以應付更複雜的應用。</p>\n<h2 id=\"用戶端與伺服器的運作\"><a href=\"#用戶端與伺服器的運作\" class=\"headerlink\" title=\"用戶端與伺服器的運作\"></a>用戶端與伺服器的運作</h2><p>若需要由用戶端(如瀏覽器)進行遭做的行爲稱為<code>用戶端 (client-side) 動作</code>，反之若需要由私服器端(網站伺服器)進行的操作就稱為<code>伺服端 (server-side) 動作</code>，早期處理伺服端東做的方式是透過<code>CGI (Common Gateway Interface)</code> 指令進行，讓使用者能夠要求執行處存在伺服器端的程式，這種方法的一種變通方式是讓用戶啟用稱為 <code>servlet</code> 的程式元件在伺服器端運行。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf\">computer science - AN OVERVIEW</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為<code>網路 (networks)</code>，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域。</p>\n<img src=\"https://www.euractiv.com/wp-content/uploads/sites/2/2017/07/shutterstock_443216956_small-800x450.jpg\" alt=\"drawing\" width=\"860\"/>","more":"<h1 id=\"網路的基本概念\"><a href=\"#網路的基本概念\" class=\"headerlink\" title=\"網路的基本概念\"></a>網路的基本概念</h1><p>首先先介紹各種基本的網路通訊概念</p>\n<h2 id=\"網路類型\"><a href=\"#網路類型\" class=\"headerlink\" title=\"網路類型\"></a>網路類型</h2><p>電腦網路分為<code>個人區域網路 (persional area network, PAN)</code>, <code>區域網路 (local area network, LAN)</code>, <code>都會區域網路 (metropolitan area network, MAN)</code> 和<code>廣域網路 (wide area network, WAN)</code>。</p>\n<ol>\n<li><strong>個人區域網路 (persional area network, PAN)</strong>: 大多用於<code>短距離通訊</code>大約數公尺的範圍，無線耳機與智慧型手機之間的連線、無線滑鼠與電腦之間的連線等等。</li>\n<li><strong>區域網路 (local area network, LAN)</strong>: 一般是由通一棟樓的數台電腦所組成的網路，例如大學內部的電腦所組成的網路。</li>\n<li><strong>都會區域網路 (metropolitan area network, MAN)</strong>: 是中型網路，比如社區內部的電腦形成的網路。</li>\n<li><strong>廣域網路 (wide area network, WAN)</strong>: 可連結遠距離的電腦，可連結到別的城市或是地球另一端的電腦。</li>\n</ol>\n<p>另一種網路的分類是利用<code>網路內部運作</code>的模式進行分類，一種是基於<code>公共領域</code>的設計，另一種是基於<code>特定團體 (公司或個人)</code>所掌控的私人獨創模式，前者稱為<code>開放式網路 (open networl)</code> 後者稱為 <code>封閉式網路 (closed network)</code> 也可以稱為 <code>專屬網路 (proprietary network)</code>。</p>\n<p>還有一種基於拓墣結構的網路分類法，亦即根據電腦連接的形式分類，比較廣為使用的拓墣結構有兩種，一種是<code>匯流排式</code>也就是所有電腦透過同一條線路(及匯流排)相連接，另一種是星形有就是一部電腦作為中心點而其他電腦都連向中心點。</p>\n<p>隨著個人電腦的普及，現今星型架構普遍用於<code>無線網路</code>，無線網路是以無線電傳播的放是進行通訊，中央點稱為<code>存取點 (access point, AP)</code> 其作為所有通訊連接的中心點。</p>\n<p>匯流排網路與星型網路之間的差異在於網路中個電腦是由一條共用的匯流排直接連接還是由一個作為中介的中央電腦間接連接，有時匯流排式網路的每個電腦會透過很長的線路連接到一個中心位置的某個設備，他稱之為<code>集線器 (hub)</code>，他不只是一個很短的匯流排，他會將收到的訊號轉送給所有相連接的電腦，這樣網路看起來是星狀網路但實際上是匯流排式網路。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767rhstcBnAt4.png\" alt=\"drawing\" width=\"800\"/>\n\n<h2 id=\"網路協議\"><a href=\"#網路協議\" class=\"headerlink\" title=\"網路協議\"></a>網路協議</h2><p>網路若要穩定的運作就需要定義一些運作上的規則，這樣的規則稱之為<code>協議 (protocols)</code>，舉個例子，在一個基於乙太網路標準的匯流排式網路中，傳輸訊息的權限是由 <code>CSMA/CD (Carrier Sense, Multiple Access with Collision Detection)</code> 協議所控制，這個協議需要發送到匯流排上的所有電腦，當某個電腦要傳輸訊息時會等到匯流排上完全沒有任何訊息，同時也會持續監看匯流排，若有其他電腦也開始傳送訊息的話，兩邊就會偵測到資訊衝突繼而暫停一個短暫的時間後再次傳送。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767eAaveT7To8.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>但要注意的是雖然碰撞避免協議是設計來避免發生資訊碰撞的但不能完全做到不碰撞，一但發生了就需要將訊息重新傳送，避免碰撞的最常見方法是授與電腦優先權，讓等待傳送機會已久的電腦有較高的優先權。</p>\n<h2 id=\"網路連結\"><a href=\"#網路連結\" class=\"headerlink\" title=\"網路連結\"></a>網路連結</h2><p>有時候需要將數個現存的網路連接起來已形成更廣域的通訊系統，如果他們是同一形式的則可以將這些網路連起來，比如乙太網路協議下的匯流排網路，可以將他們連結成一個單一長距離的匯流排網路，透過<code>中繼器</code>或<code>交換器</code>就可以做到這點。</p>\n<p><code>中繼器 (repeater)</code> 可以在兩個原始的匯流排網路之間來回傳遞訊息 (中繼器能強化網路訊號)，不管信息的意義為何。</p>\n<p><code>橋接器 (brudge)</code>  很像中繼器不過比較複雜，他會連接兩個匯流排式網路，不過他不會傳遞所有經過他的訊號，若訊號的目的是另一區網路的電腦他才會幫忙傳遞，所以同區域的兩部電腦互相傳遞並不會干擾到另一區網路，所以比起中繼器他可以有更好的效能。</p>\n<p><code>交換器 (switch)</code> 本質就是有多重連接的橋接器，可以連接數個匯流排式網路，如同橋接器他也會檢查訊息的目的地且每只傳送不同區的訊息，此外訊息傳輸也只會透過最恰當的中繼點，可以讓每個區域網路之間的傳遞消耗較小的能量。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767GwcDwJYp0q.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>但如果與到不相容的網路時，連接的方式就需要經由 <code>internet</code> 的模式，讓每個網路保有其特性且可以作為獨立的網路繼續運作，在 Internet 中的網路連接是透過<code>路由器 (routers)</code>，他是一種專用型電腦主要用來傳遞訊息，他與剛剛介紹的中繼器, 橋接器都不同，路由器主要是提供<code>不同網路間的連結</code>且讓每個子網路保有其內部性質。</p>\n<p>路由器是用來傳送訊息到適當的方向，轉送的過程是根據 internet 的全球定位系統，讓 internet 中所有電腦或設備都被指派一個唯一的地址，若某電腦想傳送訊息給另一個電腦的話，會將該目標電腦的 internet 位置附加在信息中，然後將他傳送給本地的路由器，而這個訊息就會被傳送到適合的方向，每個路由器都有一個<code>轉送表 (forwarding table)</code>，其中就包含目標位置的轉送方向等等的相關訊息。</p>\n<p>每個子網路與 internet 連接的那個 「點」稱為<code>閘道 (gateway)</code>，因為他是作為該網路與外界之間的通道。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767QJHwVpeMea.png\" alt=\"drawing\" width=\"800\"/>\n\n<h2 id=\"通訊處理方法\"><a href=\"#通訊處理方法\" class=\"headerlink\" title=\"通訊處理方法\"></a>通訊處理方法</h2><p>在網路中相異電腦所執行的任務會經常互相通訊以協調彼此之間的運作，像這種處理程序之間的通訊稱為<code>處理程序間通訊 (interprocess communication)</code>，一種慣用的處理程序間通訊協議稱為<code>主從 (clinet/server)</code> 模式，在這種模式中一種是像其他處理程序提出請求的<code>客戶端 (client)</code>，另一種是回應客戶端請求的<code>伺服器端 (server)</code>。</p>\n<p>現今的主從模式廣泛的運用在網路通訊中，但主從模式並不是處理程序間通訊的唯一協定，另一種模式是<code>點對點 (peer-to-peer, P2P)</code>，主從模式是一的處理程序(伺服器端)對許多客戶端進行服務，點對點則是一個處理程序提供服務另一個處理程序接收服務，此外伺服器必須持續運行以隨時準備服務客戶端，但點對點的處理程序執行只是暫時的。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220221/20124767oI34lJa7x0.png\" alt=\"drawing\" width=\"800\"/>\n\n<p>在檔案分享上面 P2P 模式漸漸取代了主從模式，其中一個原是是他使用更多的點來分散檔案服務任務，而非使用一台電腦當作伺服器，這種<code>去中心化</code>的運作模式可以有比較好的效能，但是由於沒有中央服務器就導致了著作權難以強制執行。</p>\n<h2 id=\"分散式系統\"><a href=\"#分散式系統\" class=\"headerlink\" title=\"分散式系統\"></a>分散式系統</h2><p>隨著網路科技的成功，電腦之間透過網路底互動已經變得相當普遍且多元，許多現在軟體系統都被設計成<code>分散式系統 (distributed systems)</code> 亦即他們是由不同點腦中執行的軟體元件所構成的系統。</p>\n<h3 id=\"叢集計算-Cluster-computing\"><a href=\"#叢集計算-Cluster-computing\" class=\"headerlink\" title=\"叢集計算 (Cluster computing)\"></a>叢集計算 (Cluster computing)</h3><p><code>叢集計算 (Cluster computing)</code> 所描述的分散式系統是指<code>多個獨立電腦密切合作來提供等同於大型電腦的計算能力</code>，個別電腦的成本加上連結高速網路的費用也比大型電腦便宜得多，但大型電腦有較好的穩定性與較低的維護成本，但這種這種分散式系統可以提供<code>高可用度 (high-availability)</code>，因為即使叢集中有部分電腦發生故障或暫時無法使用，但還有其他電腦可以進行使用，另外這種分散式系統也可以用來提供<code>負載平衡 (load balancing)</code>，因為電腦工作量能夠從負擔比較重的電腦轉移給負擔較輕的電腦。</p>\n<h3 id=\"網格運算-Grid-computing\"><a href=\"#網格運算-Grid-computing\" class=\"headerlink\" title=\"網格運算 (Grid computing)\"></a>網格運算 (Grid computing)</h3><p><code>網格運算 (Grid computing)</code> 與叢集電腦比起來連結方式較為鬆散，但還是可以合力完成大型工作，他利用特製軟體可以以更輕易的將資料和演算法分散到所有參與網格運算電腦。</p>\n<h3 id=\"雲端計算-Cloud-computing\"><a href=\"#雲端計算-Cloud-computing\" class=\"headerlink\" title=\"雲端計算 (Cloud computing)\"></a>雲端計算 (Cloud computing)</h3><p><code>雲端計算 (Cloud computing)</code> 配置網路上龐大數量的共享電腦給有需由的客戶使用，是分散式系統最新的趨勢。</p>\n<h1 id=\"網際網路\"><a href=\"#網際網路\" class=\"headerlink\" title=\"網際網路\"></a>網際網路</h1><p>網路中最直得注意的就是<code>網際網路 (Internet)</code>，其目標是發展能夠連結不同電腦的網路技術，使這些網路可以如相連結的系統進行運作且不會受到個別網路災害的影響。</p>\n<h2 id=\"網際網路架構\"><a href=\"#網際網路架構\" class=\"headerlink\" title=\"網際網路架構\"></a>網際網路架構</h2><p>網際網路是許多網路的連結，這些網路是由所謂的<code>網際網路服務提供者 (Internet Service Providers, ISP)</code> 的機構所建構與維護的，習慣上都會使用 ISP 稱呼他們所提供的網路，因此如果說連接到某個 ISP 則代表<code>連接到該 ISP 所提供的網路</code>。</p>\n<p>ISP 所營運的網路系統可以根據他們在網際網路整體結構中所扮演的角色階層進行分類，最上層是相對比較少的<code>第一層 ISP (tier-1 ISP)</code>，是由<code>高送高容量的國際型 WAN</code> 所組成，一般由大型通訊公司經營。</p>\n<p>連接到第一層 ISP 的是<code>第二層 ISP (tier-2 ISP)</code>，一般屬於<code>區域性規模且影響力較小</code>，同樣的這些網路也是一般通訊公司所經營。</p>\n<p>第一層與第二層基本上是由一群<code>路由器</code>組成的網路，主要提供網際網路的基本通訊設施，路由器之間可產生許多通訊路徑，這些路徑是網際網路<code>備援 (redundancy)</code> 的核心，即使第一層路由器發生故障也可以讓整個網路還是保持廉潔的狀態，網路核心的連結通常是由稱為<code>街口 ISP (access ISP)</code> 或<code>第三層 ISP (tier-3 ISP)</code> 的中介者所提供，一個接口 ISP 本質上是個<code>獨立的網路系統</code>有時也稱為<code>內部網路 (intranet)</code>，是由單一機構所營運，提供住家和店家網際網路的接口。</p>\n<p>最後個人用戶連結到接口 ISP 的設備稱為<code>終端系統 (end system)</code> 或<code>主機 (host)</code>，這些終端可能是筆電或是個人桌上電腦，也可能是電話, 攝影機, 汽車等等的，終端連接到網路的技術也非常多樣，成長最迅速的是基於 <code>WiFi</code> 的<code>無線網路連接</code>，其技術是連接 AP 到某個接口 ISP 再經由這個 ISP 提供的網際網路接口給 AP 服務範圍內的終端系統，AP 或一組 AP 能提供的服務範圍稱為<code>熱點 (hot spot)</code>。</p>\n<p>網際網路能夠提供通訊服務，連結許多不同的裝置和技術，這樣的設計使網際網路成為一個<code>端對端架構 (end-to-end architecture)</code>，儘管終端設備只有少少的基礎預設條件，但當新的網路系統和裝置變得普及時，網際網路仍然可以快速的支援這些網路系統及裝置。</p>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767eFz8ccoOhW.png\" alt=\"drawing\" width=\"800\"/>\n\n\n<h2 id=\"網際網路地址\"><a href=\"#網際網路地址\" class=\"headerlink\" title=\"網際網路地址\"></a>網際網路地址</h2><p>在前面有提到網路需要網路用的地址，每個網路上的電腦都會配置一個<code>唯一的地址</code>，這些地址就是所謂的<code>IP 位置 (IP address)</code>，起初 IP address 是一組<code>32 位元的字串</code>但為了提供更多位置，所以正轉變為使用<code>128 位元的字串</code>，一組連續的 IP address 由<code>網際網路名稱與數字地址分配機構 (Internet Corporation for Assigned Names and Numbers, ICANN)</code> 發配給 ISP。</p>\n<p>位元字串形式的地址法不利於人們使用，因此網際網路提供了另一種地址法，他就是<code>網域 (domain)</code> 的概念，網域相當於網際網路中的區域，每個網域都需要向 ICANN 註冊，網域註冊過程需要中鄧一個易於記憶的<code>網域名稱 (domain name)</code>，網域名稱與 IP address 一樣都是獨一無二的。</p>\n<p>在網域名稱中可以添加<code>尾綴字</code>，這些尾綴字稱為<code>定層網域 (top-level domains, TLD)</code>，有包含代表商務機構的<code>.com</code>、代表美國政府的<code>.gov</code>、非營利組織的<code>.org</code>、軍事單位的<code>.mil</code> 和起出給 ISP 使用的 <code>.net</code>，但隨網路快速過展到全世界，因此也產生了兩個字母組成的 TLD 用來代表國家 (<code>國碼 TLD, country-code TLD</code>)。</p>\n<p>一旦網域名稱註冊後就可以在這個網域內加上易於記憶的名稱來辨識個別機器，要注意的是階層是網域名稱是往<code>左延伸並以句號隔開</code>，再多延伸的情況下通常會使用<code>子網域 (subdomain)</code> 來表示網域下的某個組織，子網域常用於表示同一個網域範圍中的不同子網路，比如 Yoyodyne 公司使用的網域名稱 <code>yoyodyne.com</code> 則該公司內部的某台電腦可能就是 <code>overthruster.propulsion.yoyodyne,con</code> 這樣的網域名稱。</p>\n<p>雖然易於記憶的位置可便於人們使用，但訊息在網路上的傳播還是以 IP address 的方式進行，所以如果要傳送訊息給遠方的電腦並使用易於記憶的名稱位置時，負責傳輸訊息的軟體比需要傳送訊息之前將<code>該位置轉換為 IP address</code>，，這個轉換是透過一個名叫<code>名稱伺服器 (name server)</code> 的伺服器所幫助，他的本質與電話簿一樣提供了位置轉譯服務，這些作為網際網路的電話簿系統稱為<code>網域名稱系統 (domain name system, DNS)</code>，使用 DNS 進行名稱轉譯的過程稱為 <code>DNS 查詢 (DNS lookup)</code>。 </p>\n<h2 id=\"網際網路的應用\"><a href=\"#網際網路的應用\" class=\"headerlink\" title=\"網際網路的應用\"></a>網際網路的應用</h2><p>在早期的網際網路中，多數應用都是<code>個別</code>且<code>簡單</code>的程式，他們只會遵循某個網路協定，比如<code>網路新聞傳輸協定 (Network News Trasfer Protocol, NNTP)</code> 的新聞閱讀器或使用<code>檔案傳輸協定 (File Transger Protocol, FTP)</code> 的程式，但隨著網站與瀏覽器越來越複雜，越來越多這些傳通的網路應用都透過強大的<code>超文本傳輸協定 (Hyper Text Transfer Protocol, HTTP)</code> 以網頁的方式來處理。</p>\n<h3 id=\"網路多媒體的資料串流\"><a href=\"#網路多媒體的資料串流\" class=\"headerlink\" title=\"網路多媒體的資料串流\"></a>網路多媒體的資料串流</h3><p>目前網際網路中很大一部分的流量是用於即時的語音和影片傳輸，也就是所謂的<code>串流 (streaming)</code>，串流的有分兩種方式，第一種是<code>N 點傳播</code>更精確的說是<code>單點傳播 (unicast)</code>，指的是一對一的傳播，而 N 點傳播指的是一對多的傳播，N 點傳播有個缺點就是<code>會帶給傳播站伺服器很大的負擔</code>，同樣也會給伺服器附近共用網路的主機帶來嚴重的影響，而多數 N 點傳輸的許多替代方案都試圖在緩解這個問題，其中一種是使用 <code>P2P 模式</code>，類似於檔案分享的模式，也就是一但某一點已接收到資料後，他就開始向其他還在等待的資料點傳播該資料，亦即由原本的<code>單一資料來源負責傳播資料轉而由多點傳播</code>。</p>\n<p>另一種替代方案稱為<code>多點傳播 (multicast)</code>，將傳播問題移動到網際網路的<code>路由器</code>，使用多點傳播時一台伺服器傳送訊息到多個客戶的方式是告知某個位置並仰賴網路上所有路由器解析該位置的特殊性進而複製多筆資訊再轉送到正確的目的地，但要注意這種多點傳播的軟體需要借用到路由器發揮超呼他原本的職責，所以他沒辦法延伸到整個全球網路。</p>\n<p>為了讓串流模式擴大到同時服務數千至上百萬人，每個人都有自己個人的串流，因此有必要將串流內容複製到許多不同的伺服器上，大型的串流服務都利用<code>內容傳遞網路 (content delivery networks, CDN)</code>，這是一大群伺服器經過規劃後分布在整個網際網路，用來服務鄰近網路的使用者，CDN 機器可能放置於某個接口 ISP 網路中，讓該網路的客戶可以從近的伺服器享受到高速的多媒體串流服務，比存取遠端的中心串列服務伺服器要快速許多，有一種稱為<code>任意傳送法 (anycast)</code> 的網路傳輸技術讓使用者從一群規劃好的伺服器中自動連接最近的伺服器，這樣可以讓 CDN 更切實可行。</p>\n<h1 id=\"全球資訊網\"><a href=\"#全球資訊網\" class=\"headerlink\" title=\"全球資訊網\"></a>全球資訊網</h1><p>全球資訊網中的重要元件就是<code>超文件格式</code>，包含連結到其他文件的<code>嵌式超連結 (hyperlinks)</code> 傳送超文件的網路協定與處理使用者所要求的超文件資料的伺服器，一切都從這些開始，他們讓全球資訊網快速的成長。</p>\n<h2 id=\"網站建置\"><a href=\"#網站建置\" class=\"headerlink\" title=\"網站建置\"></a>網站建置</h2><p>讓使用者在網際網路上存取超文件的套裝軟體分為兩大類，<code>瀏覽器 (browser)</code> 和<code>網站伺服器 (webserver)</code>，瀏覽器負責讀取使用者所需要的資料柄有組織的方式呈現資料內容，網站伺服器負責提供使用者(瀏覽器)所要求得超文件存取，而超文件一班都透過所謂的<code>超文件傳輸協定 (Hypertext Transfer Protocol, HTTP)</code> 來傳送。</p>\n<p>為了能夠定位及擷取網站的文件，所以每個文件都被賦予一個唯一的地址，稱為<code>網址 (Uniform Resource Locator, URL)</code>，它包含瀏覽器所需要的資訊，可以讓瀏覽器知道要連接哪一個伺服器以及要獲取哪些資源。</p>\n<p>一個典型的 URL 需要有四個部分:</p>\n<ol>\n<li>用來溝通網站伺服器的協議名稱</li>\n<li>易於記憶的網站名稱</li>\n<li>網頁的目錄路徑</li>\n<li>網頁的名稱</li>\n</ol>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220222/20124767US5MIPgeDU.png\" alt=\"drawing\" width=\"800\"/>\n\n\n<p>可以參考 <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL\">What is a URL?</a> 這篇有詳細的介紹什麼是 URL, 格式與各自代表的內容。</p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>傳統超文件與一般文字檔案相似，也是使用 ASCII 或 Unicode 編碼，差別在於超文件有一種特殊符號也稱為<code>標籤 (tag)</code> 用來描述文件資料要如何顯示在螢幕上，這種標籤系統稱為<code>超文件標示語言 (Hypertext Markup Language, HTML)</code>，因此為了讓瀏覽器顯示網頁於使用者螢幕上並且連接相關文件資料，網頁作者需要使用 HTML 來描述瀏覽器需要的資訊，而瀏覽器則讀取 HTML 的標籤後就知道如何將文件呈現在電腦螢幕上。</p>\n<h3 id=\"可延伸標示語言-eXtensible-Markup-Language-XML\"><a href=\"#可延伸標示語言-eXtensible-Markup-Language-XML\" class=\"headerlink\" title=\"可延伸標示語言 (eXtensible Markup Language, XML)\"></a>可延伸標示語言 (eXtensible Markup Language, XML)</h3><p>是一種用來設計標記法的標準形式，使其能夠以文字檔的形式表示表示各種資料，鱒照 XML 的標準，標記法(又稱<code>標示語言 (Markupo Language)</code>) 已經發展出標示數學、多媒體資料和音樂的格式，實際上 HTML 是基於 XML 標準的標示語言，用來標示網頁資料。</p>\n<p>XML 示範了如何制定一個有廣大應用的標準，基於 XML 發展得標記法能發展出標準且通用的標示語言，有這個標準標示語言就能發展各種不同的應用，以這種方式發展的標示語言具備統一的形式，能夠彼此結合以應付更複雜的應用。</p>\n<h2 id=\"用戶端與伺服器的運作\"><a href=\"#用戶端與伺服器的運作\" class=\"headerlink\" title=\"用戶端與伺服器的運作\"></a>用戶端與伺服器的運作</h2><p>若需要由用戶端(如瀏覽器)進行遭做的行爲稱為<code>用戶端 (client-side) 動作</code>，反之若需要由私服器端(網站伺服器)進行的操作就稱為<code>伺服端 (server-side) 動作</code>，早期處理伺服端東做的方式是透過<code>CGI (Common Gateway Interface)</code> 指令進行，讓使用者能夠要求執行處存在伺服器端的程式，這種方法的一種變通方式是讓用戶啟用稱為 <code>servlet</code> 的程式元件在伺服器端運行。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://hostnezt.com/cssfiles/computerscience/Computer%20Science%20An%20Overview%2011th%20Ed%20.J%20Glenn%20Brookshear.pdf\">computer science - AN OVERVIEW</a></li>\n</ul>"},{"title":"計算機概論 - 網路通訊與網際網路 Networking and the internet (下)","date":"2022-02-22T06:40:00.000Z","_content":"\n在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為`網路 (networks)`，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域，由於篇章較多所以分為上下兩章介紹。\n\n<img src=\"https://assets-global.website-files.com/5b6df8bb681f89c158b48f6b/5ce426d9a4a48f75aee6f062_what-is-a-computer-network.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->","source":"_posts/計算機概論/networking-and-the-internet - 2.md","raw":"---\ntitle: 計算機概論 - 網路通訊與網際網路 Networking and the internet (下)\ndate: 2022-02-22 14:40:00\ntags:\n- 計算機概論\n\ncategories:\n- CS\n---\n\n在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為`網路 (networks)`，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域，由於篇章較多所以分為上下兩章介紹。\n\n<img src=\"https://assets-global.website-files.com/5b6df8bb681f89c158b48f6b/5ce426d9a4a48f75aee6f062_what-is-a-computer-network.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->","slug":"計算機概論/networking-and-the-internet - 2","published":1,"updated":"2022-02-22T06:41:07.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxw5c4m00059gw34lg0hza3","content":"<p>在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為<code>網路 (networks)</code>，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域，由於篇章較多所以分為上下兩章介紹。</p>\n<img src=\"https://assets-global.website-files.com/5b6df8bb681f89c158b48f6b/5ce426d9a4a48f75aee6f062_what-is-a-computer-network.jpg\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>在不同電腦之間因為有分享資源和資訊的需求而產生彼此連結的電腦系統稱之為<code>網路 (networks)</code>，網路使電腦可以連結彼此讓資量在不同電腦間互相傳遞，本章將介紹這個計算機科學中的延伸領域，由於篇章較多所以分為上下兩章介紹。</p>\n<img src=\"https://assets-global.website-files.com/5b6df8bb681f89c158b48f6b/5ce426d9a4a48f75aee6f062_what-is-a-computer-network.jpg\" alt=\"drawing\" width=\"860\"/>","more":""},{"title":"You Don't Know JavaScript [Scope & Closures] - What is Scope?","date":"2020-10-05T11:44:04.000Z","_content":"\n上面兩章節簡單的介紹了一下什麼是JS與特性，而本章節開始會正式進入到 Javascript 中，而一開始我們先從`作用域`開始介紹，什麼是作用域？作用域就是`一個變數的生存範圍`，一旦超出了這麼範圍就無法存取到這個變數，定義了變量在哪裡存活與我們能在哪裡找到他，這就是作用域。\n\n<img src=\"https://www.math-salamanders.com/image-files/perimeter-area-visual-aid-2.gif\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# Compiling Code\n作用域主要是在編譯的時候定義的，所以需要了解 JS 編譯與執行之間的關係。\n\n在一般的編譯器中，編譯一般分為三個階段 : \n1. **Tokenizing/Lexing**: 將程式碼分解為對JS有意義的token，舉個例子，若有一段程式碼`var a = 2;`那們它將會被分解為`var`、`a`、`=`、`2`和`;`，至於空格則取決於是否有意義而選擇性的轉換。\n2. **Parsing**: 獲取所有的token並將他們轉換為AST(Avstract Syntax Tree)。舉例來若將`var a = 2;`轉換為AST，可以從最頂端的節點`VariableDeclaration`開始，它底下有兩個子節點，一個是代表著變量a的`identifier`與代表擁有數值的`AssignmentExpression`，而代表有數值節點下有一個`NumericLiteral`的子節點代表數值(2)。\n![https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png](https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png)\n3. **Code Generation**: 執行 AST 並將它轉換為可以執行得代碼，這個轉換會因為不同語言而有不同的結果，以 JS 來說它會對 `var a = 2;` 這個程式碼轉換成一組機械指令，將創建一個稱為 a 的變量並將2賦予給這個變量。 \n\n由於 JS 與大部分語言一樣它不會再 build 的時期就提前編譯，而這個動作必須發收生在執行代碼前幾 ms 的時間，為了確保擁有最快的性能，JS 引擎就使用了各種技巧 (JIT,lazy compile...) 這些就不再此處進行討論。\n\n---\n為了簡單的描述 JS 對於程式的處理，可以簡單的分為解析/編譯然後是執行，雖然 JS 沒有明確的要求進行`編譯`，但是它對於程式實質上的行為卻是需要編譯後才能執行的。\n\n我們以下面三個例子來證明這點 : \n\n```javascript\nvar greeting = 'Hello';\nconsole.log(greeting);\ngreeting = .'Hi'; //SyntaxError: unexpected token .\n```\n上面的程式中 `Hello` 並不會被輸出，它擲出了一個 SymtaxError，因為在 Hi 前面有一個非預期的 token，以上面的例子中，若 JS 是由上而下一行一行的編譯的話，那麼應該會先輸出 `Hello` 後才發生錯誤才對，但事實上 JS 引擎能夠知道在第三行中有一個 syntaxError，所以 JS 引擎會在執行前先解析整個程式。\n\n---\n```javascript\nconsole.log(\"Howdy\");\n\nsaySomething(\"Hello\",\"Hi\");\n// Uncaught SyntaxError: Duplicate parameter name not\n// allowed in this context\n\nfunction saySomething(greeting,greeting) {\n    \"use strict\";\n    console.log(greeting);\n}\n```\n上面的例子中也會擲出一個 SyntaxError，因為我們在 saySomething 這個函數中使用了`嚴格模式`，而嚴格模式禁止 function 的參數使用一樣的名子，雖然拋出的錯誤並不是語法錯誤，但是在嚴格模式下這個錯誤會在執行前被擲出並被當成 `early error`。\n\n而這個例子再次證明了 JS 會在執行代碼前對程式完全的解析，因為不這麼做的話它就不會知道 function 中有兩個一樣名子的參數與 funciton 中使用的是嚴格模式。\n\n---\n```javascript\nfunction saySomething() {\n    var greeting = \"Hello\";\n    {\n        greeting = \"Howdy\";  // error comes from here\n        let greeting = \"Hi\";\n        console.log(greeting);\n    }\n}\n\nsaySomething();\n// ReferenceError: Cannot access 'greeting' before\n// initialization\n```\n上面了例子中，因為在 let 宣告 greeting 之前就使用了這個變量 (let不會hoasting) 所以導致了 ReferenceError，這個例子也證明了 JS 是需要先將全部程式編譯後才會執行。\n\n---\n# Compiler Speak\n在了解了 JS 引擎處理程式的兩個階段後，我們再回到 JS 引擎是如何識別便量並確定它在程式中的使用範圍。\n\n為了更深入地理解需要了解更多的編譯器術語，這邊會介紹 `LHS查詢（Left-hand Side` 和` RHS查詢（Right-hand Side`，簡單來說當一個變量出現在賦值的左邊時會進行 LHS 查詢，當一個變量出現在賦值操作的右手邊會進行 RHS 查詢，說得更準確一點：\n- RHS(source) 是簡單地查詢某個變量的值。\n- LHS(target) 是試著找到變量容器以便它可以賦值。\n\n```javascript\nvar students = [\n    { id: 14, name: \"Kyle\" },\n    { id: 73, name: \"Suzy\" },\n    { id: 112, name: \"Frank\" },\n    { id: 6, name: \"Sarah\" }\n];\n\nfunction getStudentName(studentID) {\n    for (let student of students) {\n        if (student.id == studentID) {\n            return student.name;\n        }\n    }\n}\n\nvar nextStudent = getStudentName(73);\nconsole.log(nextStudent); //Suzy\n```\n\n## Targets\n我們先找到上面例子中的 Targets。\n\n```javascript\nstudents = [...]\n```\n這個很顯然是一個 Target，因為 students 被`賦予`了一個陣列的值，它與 `nextStudent = getStudentName(73)` 一樣都是賦值操作。\n\n```javascript\nfor(let student of students)\n```\n這裡是一個比較難發現的 Target，這句程式的意思是將 students 這個陣列迭代給 student 這個變數，所以也是一個賦值(只是不太明顯)。\n\n```javascript\ngetStudentName(73);\n```\n這裡也是一個隱性的 Target，因為它將 73 這個數值賦予給 getStudentName 這個 function 的參數。\n\n## Source\n```javascript\nfor(let student of students)\n```\n上面提到 student 是屬於被賦值的 target，那麼 students 這個陣列便是`給予`數值的 source\n\n```javascript\nif(student.id == studentID)\n```\n在這邊的 student 與 studentID 都是屬於 source reference。\n\n```javascript\nreturn student.name\n```\n這邊的 student 也是屬於 source，因為它提供了可以 retuen 的值。\n\n---\n在舉個簡單的例子：\n```javascript\nfunction foo(a){\n    console.log(a);\n}\nfoo(2);\n```\n上面的例子既有 LHS 也有 RHS，我們仔細地對它進行分析 : \n1. 當程式調用了foo(...)，代表著函數調用要求一個指向 `foo` 的 RHS，它代表著去查詢 foo 的值並將結果交給引擎。\n2. 當值2做作為參數傳遞給 foo 時，2被賦予給了參數a，這邊使用了隱含的參數賦值，所以進行了一個 LHS。\n3. 而當結果被傳遞給 `console.log(...)` 時，它會對 console 這個物件進行一個 RHS 查詢，查詢是否有一個 log 的 mathod。\n4. 最後當值2被傳入 `log(...)` 時，因為2被賦予給了 log 的參數，所以也進行了一次 LHS。\n\n---\n# Nested Scope\n作用域是通過標示福明成查詢變量的規則，但是通常會有多餘一個作用域的問題需要考慮，就像一個程式嵌套在另一個程式碼區域或函數中，作用域也會被嵌套在其他作用域中，所以如果再直接作用域找不到需要的變量，則會`往外層作用域`尋找，如此繼續找到最外層作用域(全域作用域)。\n\n舉個例子 :\n```javascript\nfunction foo(a){\n    console.log(a + b);\n}\n\nvar b = 2;\n\nfoo(2); //4\n```\n\n以上面的例子來說，當JS引擎在直接作用域(函式foo中)找不到b這個變量，那麼它就會訪問外層的作用域(全域作用域)看是否有 b 這個變數可以讓它進行 RHS。\n\n遍歷嵌套作用域的規則很簡單，JS 引擎從當前執行的作用域開始查找變量，如果沒有找到就向上走一級繼續查找，如此類推。如果到了最外層(全局作用域)，`那麼查找就會停止無論它是否找到了變量。`\n\n---\n\n# Errors\n為什麼需要了解 LHS 與 RHS?\n因為在一個變量還沒被宣告的情況下，這兩種類型的查詢做了完全不同的行為。\n\n```javascript\nfunction foo(a){\n    console.log(a + b);\n    b = a;\n}\nfoo(2);\n```\n\n- 當b的第一次 RHS 查詢發生時，因為它是一個沒有被宣告過的變量，所以在作用域中找不到它，因此如果在所有的作用域中都找不到b這個變量的時候，JS引擎會拋出一個 `ReferenceError`。\n- 相比之下若 JS 引擎在做 LHS 查詢，雖然達到了頂層作用域都沒有找到這個變量，若是沒有在 `嚴格模式(strict)` 下，那麼就會在全局作用域中創建一個同名的新變量。\n\n而若一個 RHS 查詢到了需要的變量，但是卻對這個變量做這個值不可能做到的事，比如將這個非函數的值當作函數執行，或是引用 `null` 或 `undefined`，那們 JS 引擎就會拋出種類錯誤`TypeError`。\n\n所以 `ReferenceError` 是對於作用域解析失敗，而 `TypeError` 則是作用域解析成功了但是對對這個解析成功的變量做非法/不可能的操作。\n\n參考文獻 : \n[You Don'y Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20&%20closures/ch1.md)\n[You Don'y Know JavaScript 2nd](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch1.md)","source":"_posts/Javascript/ydk-javascript-03.md","raw":"---\ntitle: You Don't Know JavaScript [Scope & Closures] - What is Scope?\ndate: 2020-10-05 19:44:04\ntags:\n- Javascript\n- Front-end\n\ncategories:\n- You Don't Know JavaScript\n---\n\n上面兩章節簡單的介紹了一下什麼是JS與特性，而本章節開始會正式進入到 Javascript 中，而一開始我們先從`作用域`開始介紹，什麼是作用域？作用域就是`一個變數的生存範圍`，一旦超出了這麼範圍就無法存取到這個變數，定義了變量在哪裡存活與我們能在哪裡找到他，這就是作用域。\n\n<img src=\"https://www.math-salamanders.com/image-files/perimeter-area-visual-aid-2.gif\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n# Compiling Code\n作用域主要是在編譯的時候定義的，所以需要了解 JS 編譯與執行之間的關係。\n\n在一般的編譯器中，編譯一般分為三個階段 : \n1. **Tokenizing/Lexing**: 將程式碼分解為對JS有意義的token，舉個例子，若有一段程式碼`var a = 2;`那們它將會被分解為`var`、`a`、`=`、`2`和`;`，至於空格則取決於是否有意義而選擇性的轉換。\n2. **Parsing**: 獲取所有的token並將他們轉換為AST(Avstract Syntax Tree)。舉例來若將`var a = 2;`轉換為AST，可以從最頂端的節點`VariableDeclaration`開始，它底下有兩個子節點，一個是代表著變量a的`identifier`與代表擁有數值的`AssignmentExpression`，而代表有數值節點下有一個`NumericLiteral`的子節點代表數值(2)。\n![https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png](https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png)\n3. **Code Generation**: 執行 AST 並將它轉換為可以執行得代碼，這個轉換會因為不同語言而有不同的結果，以 JS 來說它會對 `var a = 2;` 這個程式碼轉換成一組機械指令，將創建一個稱為 a 的變量並將2賦予給這個變量。 \n\n由於 JS 與大部分語言一樣它不會再 build 的時期就提前編譯，而這個動作必須發收生在執行代碼前幾 ms 的時間，為了確保擁有最快的性能，JS 引擎就使用了各種技巧 (JIT,lazy compile...) 這些就不再此處進行討論。\n\n---\n為了簡單的描述 JS 對於程式的處理，可以簡單的分為解析/編譯然後是執行，雖然 JS 沒有明確的要求進行`編譯`，但是它對於程式實質上的行為卻是需要編譯後才能執行的。\n\n我們以下面三個例子來證明這點 : \n\n```javascript\nvar greeting = 'Hello';\nconsole.log(greeting);\ngreeting = .'Hi'; //SyntaxError: unexpected token .\n```\n上面的程式中 `Hello` 並不會被輸出，它擲出了一個 SymtaxError，因為在 Hi 前面有一個非預期的 token，以上面的例子中，若 JS 是由上而下一行一行的編譯的話，那麼應該會先輸出 `Hello` 後才發生錯誤才對，但事實上 JS 引擎能夠知道在第三行中有一個 syntaxError，所以 JS 引擎會在執行前先解析整個程式。\n\n---\n```javascript\nconsole.log(\"Howdy\");\n\nsaySomething(\"Hello\",\"Hi\");\n// Uncaught SyntaxError: Duplicate parameter name not\n// allowed in this context\n\nfunction saySomething(greeting,greeting) {\n    \"use strict\";\n    console.log(greeting);\n}\n```\n上面的例子中也會擲出一個 SyntaxError，因為我們在 saySomething 這個函數中使用了`嚴格模式`，而嚴格模式禁止 function 的參數使用一樣的名子，雖然拋出的錯誤並不是語法錯誤，但是在嚴格模式下這個錯誤會在執行前被擲出並被當成 `early error`。\n\n而這個例子再次證明了 JS 會在執行代碼前對程式完全的解析，因為不這麼做的話它就不會知道 function 中有兩個一樣名子的參數與 funciton 中使用的是嚴格模式。\n\n---\n```javascript\nfunction saySomething() {\n    var greeting = \"Hello\";\n    {\n        greeting = \"Howdy\";  // error comes from here\n        let greeting = \"Hi\";\n        console.log(greeting);\n    }\n}\n\nsaySomething();\n// ReferenceError: Cannot access 'greeting' before\n// initialization\n```\n上面了例子中，因為在 let 宣告 greeting 之前就使用了這個變量 (let不會hoasting) 所以導致了 ReferenceError，這個例子也證明了 JS 是需要先將全部程式編譯後才會執行。\n\n---\n# Compiler Speak\n在了解了 JS 引擎處理程式的兩個階段後，我們再回到 JS 引擎是如何識別便量並確定它在程式中的使用範圍。\n\n為了更深入地理解需要了解更多的編譯器術語，這邊會介紹 `LHS查詢（Left-hand Side` 和` RHS查詢（Right-hand Side`，簡單來說當一個變量出現在賦值的左邊時會進行 LHS 查詢，當一個變量出現在賦值操作的右手邊會進行 RHS 查詢，說得更準確一點：\n- RHS(source) 是簡單地查詢某個變量的值。\n- LHS(target) 是試著找到變量容器以便它可以賦值。\n\n```javascript\nvar students = [\n    { id: 14, name: \"Kyle\" },\n    { id: 73, name: \"Suzy\" },\n    { id: 112, name: \"Frank\" },\n    { id: 6, name: \"Sarah\" }\n];\n\nfunction getStudentName(studentID) {\n    for (let student of students) {\n        if (student.id == studentID) {\n            return student.name;\n        }\n    }\n}\n\nvar nextStudent = getStudentName(73);\nconsole.log(nextStudent); //Suzy\n```\n\n## Targets\n我們先找到上面例子中的 Targets。\n\n```javascript\nstudents = [...]\n```\n這個很顯然是一個 Target，因為 students 被`賦予`了一個陣列的值，它與 `nextStudent = getStudentName(73)` 一樣都是賦值操作。\n\n```javascript\nfor(let student of students)\n```\n這裡是一個比較難發現的 Target，這句程式的意思是將 students 這個陣列迭代給 student 這個變數，所以也是一個賦值(只是不太明顯)。\n\n```javascript\ngetStudentName(73);\n```\n這裡也是一個隱性的 Target，因為它將 73 這個數值賦予給 getStudentName 這個 function 的參數。\n\n## Source\n```javascript\nfor(let student of students)\n```\n上面提到 student 是屬於被賦值的 target，那麼 students 這個陣列便是`給予`數值的 source\n\n```javascript\nif(student.id == studentID)\n```\n在這邊的 student 與 studentID 都是屬於 source reference。\n\n```javascript\nreturn student.name\n```\n這邊的 student 也是屬於 source，因為它提供了可以 retuen 的值。\n\n---\n在舉個簡單的例子：\n```javascript\nfunction foo(a){\n    console.log(a);\n}\nfoo(2);\n```\n上面的例子既有 LHS 也有 RHS，我們仔細地對它進行分析 : \n1. 當程式調用了foo(...)，代表著函數調用要求一個指向 `foo` 的 RHS，它代表著去查詢 foo 的值並將結果交給引擎。\n2. 當值2做作為參數傳遞給 foo 時，2被賦予給了參數a，這邊使用了隱含的參數賦值，所以進行了一個 LHS。\n3. 而當結果被傳遞給 `console.log(...)` 時，它會對 console 這個物件進行一個 RHS 查詢，查詢是否有一個 log 的 mathod。\n4. 最後當值2被傳入 `log(...)` 時，因為2被賦予給了 log 的參數，所以也進行了一次 LHS。\n\n---\n# Nested Scope\n作用域是通過標示福明成查詢變量的規則，但是通常會有多餘一個作用域的問題需要考慮，就像一個程式嵌套在另一個程式碼區域或函數中，作用域也會被嵌套在其他作用域中，所以如果再直接作用域找不到需要的變量，則會`往外層作用域`尋找，如此繼續找到最外層作用域(全域作用域)。\n\n舉個例子 :\n```javascript\nfunction foo(a){\n    console.log(a + b);\n}\n\nvar b = 2;\n\nfoo(2); //4\n```\n\n以上面的例子來說，當JS引擎在直接作用域(函式foo中)找不到b這個變量，那麼它就會訪問外層的作用域(全域作用域)看是否有 b 這個變數可以讓它進行 RHS。\n\n遍歷嵌套作用域的規則很簡單，JS 引擎從當前執行的作用域開始查找變量，如果沒有找到就向上走一級繼續查找，如此類推。如果到了最外層(全局作用域)，`那麼查找就會停止無論它是否找到了變量。`\n\n---\n\n# Errors\n為什麼需要了解 LHS 與 RHS?\n因為在一個變量還沒被宣告的情況下，這兩種類型的查詢做了完全不同的行為。\n\n```javascript\nfunction foo(a){\n    console.log(a + b);\n    b = a;\n}\nfoo(2);\n```\n\n- 當b的第一次 RHS 查詢發生時，因為它是一個沒有被宣告過的變量，所以在作用域中找不到它，因此如果在所有的作用域中都找不到b這個變量的時候，JS引擎會拋出一個 `ReferenceError`。\n- 相比之下若 JS 引擎在做 LHS 查詢，雖然達到了頂層作用域都沒有找到這個變量，若是沒有在 `嚴格模式(strict)` 下，那麼就會在全局作用域中創建一個同名的新變量。\n\n而若一個 RHS 查詢到了需要的變量，但是卻對這個變量做這個值不可能做到的事，比如將這個非函數的值當作函數執行，或是引用 `null` 或 `undefined`，那們 JS 引擎就會拋出種類錯誤`TypeError`。\n\n所以 `ReferenceError` 是對於作用域解析失敗，而 `TypeError` 則是作用域解析成功了但是對對這個解析成功的變量做非法/不可能的操作。\n\n參考文獻 : \n[You Don'y Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20&%20closures/ch1.md)\n[You Don'y Know JavaScript 2nd](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch1.md)","slug":"Javascript/ydk-javascript-03","published":1,"updated":"2022-02-22T07:00:48.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxw5c4p00099gw33r7x6cn3","content":"<p>上面兩章節簡單的介紹了一下什麼是JS與特性，而本章節開始會正式進入到 Javascript 中，而一開始我們先從<code>作用域</code>開始介紹，什麼是作用域？作用域就是<code>一個變數的生存範圍</code>，一旦超出了這麼範圍就無法存取到這個變數，定義了變量在哪裡存活與我們能在哪裡找到他，這就是作用域。</p>\n<img src=\"https://www.math-salamanders.com/image-files/perimeter-area-visual-aid-2.gif\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>\n\n<h1 id=\"Compiling-Code\"><a href=\"#Compiling-Code\" class=\"headerlink\" title=\"Compiling Code\"></a>Compiling Code</h1><p>作用域主要是在編譯的時候定義的，所以需要了解 JS 編譯與執行之間的關係。</p>\n<p>在一般的編譯器中，編譯一般分為三個階段 : </p>\n<ol>\n<li><strong>Tokenizing&#x2F;Lexing</strong>: 將程式碼分解為對JS有意義的token，舉個例子，若有一段程式碼<code>var a = 2;</code>那們它將會被分解為<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>和<code>;</code>，至於空格則取決於是否有意義而選擇性的轉換。</li>\n<li><strong>Parsing</strong>: 獲取所有的token並將他們轉換為AST(Avstract Syntax Tree)。舉例來若將<code>var a = 2;</code>轉換為AST，可以從最頂端的節點<code>VariableDeclaration</code>開始，它底下有兩個子節點，一個是代表著變量a的<code>identifier</code>與代表擁有數值的<code>AssignmentExpression</code>，而代表有數值節點下有一個<code>NumericLiteral</code>的子節點代表數值(2)。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png\"></li>\n<li><strong>Code Generation</strong>: 執行 AST 並將它轉換為可以執行得代碼，這個轉換會因為不同語言而有不同的結果，以 JS 來說它會對 <code>var a = 2;</code> 這個程式碼轉換成一組機械指令，將創建一個稱為 a 的變量並將2賦予給這個變量。</li>\n</ol>\n<p>由於 JS 與大部分語言一樣它不會再 build 的時期就提前編譯，而這個動作必須發收生在執行代碼前幾 ms 的時間，為了確保擁有最快的性能，JS 引擎就使用了各種技巧 (JIT,lazy compile…) 這些就不再此處進行討論。</p>\n<hr>\n<p>為了簡單的描述 JS 對於程式的處理，可以簡單的分為解析&#x2F;編譯然後是執行，雖然 JS 沒有明確的要求進行<code>編譯</code>，但是它對於程式實質上的行為卻是需要編譯後才能執行的。</p>\n<p>我們以下面三個例子來證明這點 : </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"string\">&#x27;Hello&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting);</span><br><span class=\"line\">greeting = .<span class=\"string\">&#x27;Hi&#x27;</span>; <span class=\"comment\">//SyntaxError: unexpected token .</span></span><br></pre></td></tr></table></figure>\n<p>上面的程式中 <code>Hello</code> 並不會被輸出，它擲出了一個 SymtaxError，因為在 Hi 前面有一個非預期的 token，以上面的例子中，若 JS 是由上而下一行一行的編譯的話，那麼應該會先輸出 <code>Hello</code> 後才發生錯誤才對，但事實上 JS 引擎能夠知道在第三行中有一個 syntaxError，所以 JS 引擎會在執行前先解析整個程式。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Howdy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">saySomething</span>(<span class=\"string\">&quot;Hello&quot;</span>,<span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Duplicate parameter name not</span></span><br><span class=\"line\"><span class=\"comment\">// allowed in this context</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">saySomething</span>(<span class=\"params\">greeting,greeting</span>) &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子中也會擲出一個 SyntaxError，因為我們在 saySomething 這個函數中使用了<code>嚴格模式</code>，而嚴格模式禁止 function 的參數使用一樣的名子，雖然拋出的錯誤並不是語法錯誤，但是在嚴格模式下這個錯誤會在執行前被擲出並被當成 <code>early error</code>。</p>\n<p>而這個例子再次證明了 JS 會在執行代碼前對程式完全的解析，因為不這麼做的話它就不會知道 function 中有兩個一樣名子的參數與 funciton 中使用的是嚴格模式。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">saySomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greeting = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        greeting = <span class=\"string\">&quot;Howdy&quot;</span>;  <span class=\"comment\">// error comes from here</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> greeting = <span class=\"string\">&quot;Hi&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">saySomething</span>();</span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: Cannot access &#x27;greeting&#x27; before</span></span><br><span class=\"line\"><span class=\"comment\">// initialization</span></span><br></pre></td></tr></table></figure>\n<p>上面了例子中，因為在 let 宣告 greeting 之前就使用了這個變量 (let不會hoasting) 所以導致了 ReferenceError，這個例子也證明了 JS 是需要先將全部程式編譯後才會執行。</p>\n<hr>\n<h1 id=\"Compiler-Speak\"><a href=\"#Compiler-Speak\" class=\"headerlink\" title=\"Compiler Speak\"></a>Compiler Speak</h1><p>在了解了 JS 引擎處理程式的兩個階段後，我們再回到 JS 引擎是如何識別便量並確定它在程式中的使用範圍。</p>\n<p>為了更深入地理解需要了解更多的編譯器術語，這邊會介紹 <code>LHS查詢（Left-hand Side</code> 和<code> RHS查詢（Right-hand Side</code>，簡單來說當一個變量出現在賦值的左邊時會進行 LHS 查詢，當一個變量出現在賦值操作的右手邊會進行 RHS 查詢，說得更準確一點：</p>\n<ul>\n<li>RHS(source) 是簡單地查詢某個變量的值。</li>\n<li>LHS(target) 是試著找到變量容器以便它可以賦值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> students = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Kyle&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">73</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Suzy&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">112</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Frank&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Sarah&quot;</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStudentName</span>(<span class=\"params\">studentID</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (student.<span class=\"property\">id</span> == studentID) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> student.<span class=\"property\">name</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextStudent = <span class=\"title function_\">getStudentName</span>(<span class=\"number\">73</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextStudent); <span class=\"comment\">//Suzy</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Targets\"><a href=\"#Targets\" class=\"headerlink\" title=\"Targets\"></a>Targets</h2><p>我們先找到上面例子中的 Targets。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students = [...]</span><br></pre></td></tr></table></figure>\n<p>這個很顯然是一個 Target，因為 students 被<code>賦予</code>了一個陣列的值，它與 <code>nextStudent = getStudentName(73)</code> 一樣都是賦值操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students)</span><br></pre></td></tr></table></figure>\n<p>這裡是一個比較難發現的 Target，這句程式的意思是將 students 這個陣列迭代給 student 這個變數，所以也是一個賦值(只是不太明顯)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getStudentName</span>(<span class=\"number\">73</span>);</span><br></pre></td></tr></table></figure>\n<p>這裡也是一個隱性的 Target，因為它將 73 這個數值賦予給 getStudentName 這個 function 的參數。</p>\n<h2 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students)</span><br></pre></td></tr></table></figure>\n<p>上面提到 student 是屬於被賦值的 target，那麼 students 這個陣列便是<code>給予</code>數值的 source</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(student.<span class=\"property\">id</span> == studentID)</span><br></pre></td></tr></table></figure>\n<p>在這邊的 student 與 studentID 都是屬於 source reference。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> student.<span class=\"property\">name</span></span><br></pre></td></tr></table></figure>\n<p>這邊的 student 也是屬於 source，因為它提供了可以 retuen 的值。</p>\n<hr>\n<p>在舉個簡單的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的例子既有 LHS 也有 RHS，我們仔細地對它進行分析 : </p>\n<ol>\n<li>當程式調用了foo(…)，代表著函數調用要求一個指向 <code>foo</code> 的 RHS，它代表著去查詢 foo 的值並將結果交給引擎。</li>\n<li>當值2做作為參數傳遞給 foo 時，2被賦予給了參數a，這邊使用了隱含的參數賦值，所以進行了一個 LHS。</li>\n<li>而當結果被傳遞給 <code>console.log(...)</code> 時，它會對 console 這個物件進行一個 RHS 查詢，查詢是否有一個 log 的 mathod。</li>\n<li>最後當值2被傳入 <code>log(...)</code> 時，因為2被賦予給了 log 的參數，所以也進行了一次 LHS。</li>\n</ol>\n<hr>\n<h1 id=\"Nested-Scope\"><a href=\"#Nested-Scope\" class=\"headerlink\" title=\"Nested Scope\"></a>Nested Scope</h1><p>作用域是通過標示福明成查詢變量的規則，但是通常會有多餘一個作用域的問題需要考慮，就像一個程式嵌套在另一個程式碼區域或函數中，作用域也會被嵌套在其他作用域中，所以如果再直接作用域找不到需要的變量，則會<code>往外層作用域</code>尋找，如此繼續找到最外層作用域(全域作用域)。</p>\n<p>舉個例子 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">2</span>); <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n\n<p>以上面的例子來說，當JS引擎在直接作用域(函式foo中)找不到b這個變量，那麼它就會訪問外層的作用域(全域作用域)看是否有 b 這個變數可以讓它進行 RHS。</p>\n<p>遍歷嵌套作用域的規則很簡單，JS 引擎從當前執行的作用域開始查找變量，如果沒有找到就向上走一級繼續查找，如此類推。如果到了最外層(全局作用域)，<code>那麼查找就會停止無論它是否找到了變量。</code></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><p>為什麼需要了解 LHS 與 RHS?<br>因為在一個變量還沒被宣告的情況下，這兩種類型的查詢做了完全不同的行為。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當b的第一次 RHS 查詢發生時，因為它是一個沒有被宣告過的變量，所以在作用域中找不到它，因此如果在所有的作用域中都找不到b這個變量的時候，JS引擎會拋出一個 <code>ReferenceError</code>。</li>\n<li>相比之下若 JS 引擎在做 LHS 查詢，雖然達到了頂層作用域都沒有找到這個變量，若是沒有在 <code>嚴格模式(strict)</code> 下，那麼就會在全局作用域中創建一個同名的新變量。</li>\n</ul>\n<p>而若一個 RHS 查詢到了需要的變量，但是卻對這個變量做這個值不可能做到的事，比如將這個非函數的值當作函數執行，或是引用 <code>null</code> 或 <code>undefined</code>，那們 JS 引擎就會拋出種類錯誤<code>TypeError</code>。</p>\n<p>所以 <code>ReferenceError</code> 是對於作用域解析失敗，而 <code>TypeError</code> 則是作用域解析成功了但是對對這個解析成功的變量做非法&#x2F;不可能的操作。</p>\n<p>參考文獻 :<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20&%20closures/ch1.md\">You Don’y Know JavaScript</a><br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch1.md\">You Don’y Know JavaScript 2nd</a></p>\n","site":{"data":{}},"excerpt":"<p>上面兩章節簡單的介紹了一下什麼是JS與特性，而本章節開始會正式進入到 Javascript 中，而一開始我們先從<code>作用域</code>開始介紹，什麼是作用域？作用域就是<code>一個變數的生存範圍</code>，一旦超出了這麼範圍就無法存取到這個變數，定義了變量在哪裡存活與我們能在哪裡找到他，這就是作用域。</p>\n<img src=\"https://www.math-salamanders.com/image-files/perimeter-area-visual-aid-2.gif\" alt=\"drawing\" width=\"860\"/>","more":"<h1 id=\"Compiling-Code\"><a href=\"#Compiling-Code\" class=\"headerlink\" title=\"Compiling Code\"></a>Compiling Code</h1><p>作用域主要是在編譯的時候定義的，所以需要了解 JS 編譯與執行之間的關係。</p>\n<p>在一般的編譯器中，編譯一般分為三個階段 : </p>\n<ol>\n<li><strong>Tokenizing&#x2F;Lexing</strong>: 將程式碼分解為對JS有意義的token，舉個例子，若有一段程式碼<code>var a = 2;</code>那們它將會被分解為<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>和<code>;</code>，至於空格則取決於是否有意義而選擇性的轉換。</li>\n<li><strong>Parsing</strong>: 獲取所有的token並將他們轉換為AST(Avstract Syntax Tree)。舉例來若將<code>var a = 2;</code>轉換為AST，可以從最頂端的節點<code>VariableDeclaration</code>開始，它底下有兩個子節點，一個是代表著變量a的<code>identifier</code>與代表擁有數值的<code>AssignmentExpression</code>，而代表有數值節點下有一個<code>NumericLiteral</code>的子節點代表數值(2)。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201006/20124767pPkGK2hJNp.png\"></li>\n<li><strong>Code Generation</strong>: 執行 AST 並將它轉換為可以執行得代碼，這個轉換會因為不同語言而有不同的結果，以 JS 來說它會對 <code>var a = 2;</code> 這個程式碼轉換成一組機械指令，將創建一個稱為 a 的變量並將2賦予給這個變量。</li>\n</ol>\n<p>由於 JS 與大部分語言一樣它不會再 build 的時期就提前編譯，而這個動作必須發收生在執行代碼前幾 ms 的時間，為了確保擁有最快的性能，JS 引擎就使用了各種技巧 (JIT,lazy compile…) 這些就不再此處進行討論。</p>\n<hr>\n<p>為了簡單的描述 JS 對於程式的處理，可以簡單的分為解析&#x2F;編譯然後是執行，雖然 JS 沒有明確的要求進行<code>編譯</code>，但是它對於程式實質上的行為卻是需要編譯後才能執行的。</p>\n<p>我們以下面三個例子來證明這點 : </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"string\">&#x27;Hello&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting);</span><br><span class=\"line\">greeting = .<span class=\"string\">&#x27;Hi&#x27;</span>; <span class=\"comment\">//SyntaxError: unexpected token .</span></span><br></pre></td></tr></table></figure>\n<p>上面的程式中 <code>Hello</code> 並不會被輸出，它擲出了一個 SymtaxError，因為在 Hi 前面有一個非預期的 token，以上面的例子中，若 JS 是由上而下一行一行的編譯的話，那麼應該會先輸出 <code>Hello</code> 後才發生錯誤才對，但事實上 JS 引擎能夠知道在第三行中有一個 syntaxError，所以 JS 引擎會在執行前先解析整個程式。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Howdy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">saySomething</span>(<span class=\"string\">&quot;Hello&quot;</span>,<span class=\"string\">&quot;Hi&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Duplicate parameter name not</span></span><br><span class=\"line\"><span class=\"comment\">// allowed in this context</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">saySomething</span>(<span class=\"params\">greeting,greeting</span>) &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子中也會擲出一個 SyntaxError，因為我們在 saySomething 這個函數中使用了<code>嚴格模式</code>，而嚴格模式禁止 function 的參數使用一樣的名子，雖然拋出的錯誤並不是語法錯誤，但是在嚴格模式下這個錯誤會在執行前被擲出並被當成 <code>early error</code>。</p>\n<p>而這個例子再次證明了 JS 會在執行代碼前對程式完全的解析，因為不這麼做的話它就不會知道 function 中有兩個一樣名子的參數與 funciton 中使用的是嚴格模式。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">saySomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greeting = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        greeting = <span class=\"string\">&quot;Howdy&quot;</span>;  <span class=\"comment\">// error comes from here</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> greeting = <span class=\"string\">&quot;Hi&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeting);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">saySomething</span>();</span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: Cannot access &#x27;greeting&#x27; before</span></span><br><span class=\"line\"><span class=\"comment\">// initialization</span></span><br></pre></td></tr></table></figure>\n<p>上面了例子中，因為在 let 宣告 greeting 之前就使用了這個變量 (let不會hoasting) 所以導致了 ReferenceError，這個例子也證明了 JS 是需要先將全部程式編譯後才會執行。</p>\n<hr>\n<h1 id=\"Compiler-Speak\"><a href=\"#Compiler-Speak\" class=\"headerlink\" title=\"Compiler Speak\"></a>Compiler Speak</h1><p>在了解了 JS 引擎處理程式的兩個階段後，我們再回到 JS 引擎是如何識別便量並確定它在程式中的使用範圍。</p>\n<p>為了更深入地理解需要了解更多的編譯器術語，這邊會介紹 <code>LHS查詢（Left-hand Side</code> 和<code> RHS查詢（Right-hand Side</code>，簡單來說當一個變量出現在賦值的左邊時會進行 LHS 查詢，當一個變量出現在賦值操作的右手邊會進行 RHS 查詢，說得更準確一點：</p>\n<ul>\n<li>RHS(source) 是簡單地查詢某個變量的值。</li>\n<li>LHS(target) 是試著找到變量容器以便它可以賦值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> students = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Kyle&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">73</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Suzy&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">112</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Frank&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Sarah&quot;</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStudentName</span>(<span class=\"params\">studentID</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (student.<span class=\"property\">id</span> == studentID) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> student.<span class=\"property\">name</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextStudent = <span class=\"title function_\">getStudentName</span>(<span class=\"number\">73</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nextStudent); <span class=\"comment\">//Suzy</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Targets\"><a href=\"#Targets\" class=\"headerlink\" title=\"Targets\"></a>Targets</h2><p>我們先找到上面例子中的 Targets。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students = [...]</span><br></pre></td></tr></table></figure>\n<p>這個很顯然是一個 Target，因為 students 被<code>賦予</code>了一個陣列的值，它與 <code>nextStudent = getStudentName(73)</code> 一樣都是賦值操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students)</span><br></pre></td></tr></table></figure>\n<p>這裡是一個比較難發現的 Target，這句程式的意思是將 students 這個陣列迭代給 student 這個變數，所以也是一個賦值(只是不太明顯)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getStudentName</span>(<span class=\"number\">73</span>);</span><br></pre></td></tr></table></figure>\n<p>這裡也是一個隱性的 Target，因為它將 73 這個數值賦予給 getStudentName 這個 function 的參數。</p>\n<h2 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> student <span class=\"keyword\">of</span> students)</span><br></pre></td></tr></table></figure>\n<p>上面提到 student 是屬於被賦值的 target，那麼 students 這個陣列便是<code>給予</code>數值的 source</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(student.<span class=\"property\">id</span> == studentID)</span><br></pre></td></tr></table></figure>\n<p>在這邊的 student 與 studentID 都是屬於 source reference。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> student.<span class=\"property\">name</span></span><br></pre></td></tr></table></figure>\n<p>這邊的 student 也是屬於 source，因為它提供了可以 retuen 的值。</p>\n<hr>\n<p>在舉個簡單的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的例子既有 LHS 也有 RHS，我們仔細地對它進行分析 : </p>\n<ol>\n<li>當程式調用了foo(…)，代表著函數調用要求一個指向 <code>foo</code> 的 RHS，它代表著去查詢 foo 的值並將結果交給引擎。</li>\n<li>當值2做作為參數傳遞給 foo 時，2被賦予給了參數a，這邊使用了隱含的參數賦值，所以進行了一個 LHS。</li>\n<li>而當結果被傳遞給 <code>console.log(...)</code> 時，它會對 console 這個物件進行一個 RHS 查詢，查詢是否有一個 log 的 mathod。</li>\n<li>最後當值2被傳入 <code>log(...)</code> 時，因為2被賦予給了 log 的參數，所以也進行了一次 LHS。</li>\n</ol>\n<hr>\n<h1 id=\"Nested-Scope\"><a href=\"#Nested-Scope\" class=\"headerlink\" title=\"Nested Scope\"></a>Nested Scope</h1><p>作用域是通過標示福明成查詢變量的規則，但是通常會有多餘一個作用域的問題需要考慮，就像一個程式嵌套在另一個程式碼區域或函數中，作用域也會被嵌套在其他作用域中，所以如果再直接作用域找不到需要的變量，則會<code>往外層作用域</code>尋找，如此繼續找到最外層作用域(全域作用域)。</p>\n<p>舉個例子 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">2</span>); <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n\n<p>以上面的例子來說，當JS引擎在直接作用域(函式foo中)找不到b這個變量，那麼它就會訪問外層的作用域(全域作用域)看是否有 b 這個變數可以讓它進行 RHS。</p>\n<p>遍歷嵌套作用域的規則很簡單，JS 引擎從當前執行的作用域開始查找變量，如果沒有找到就向上走一級繼續查找，如此類推。如果到了最外層(全局作用域)，<code>那麼查找就會停止無論它是否找到了變量。</code></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><p>為什麼需要了解 LHS 與 RHS?<br>因為在一個變量還沒被宣告的情況下，這兩種類型的查詢做了完全不同的行為。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當b的第一次 RHS 查詢發生時，因為它是一個沒有被宣告過的變量，所以在作用域中找不到它，因此如果在所有的作用域中都找不到b這個變量的時候，JS引擎會拋出一個 <code>ReferenceError</code>。</li>\n<li>相比之下若 JS 引擎在做 LHS 查詢，雖然達到了頂層作用域都沒有找到這個變量，若是沒有在 <code>嚴格模式(strict)</code> 下，那麼就會在全局作用域中創建一個同名的新變量。</li>\n</ul>\n<p>而若一個 RHS 查詢到了需要的變量，但是卻對這個變量做這個值不可能做到的事，比如將這個非函數的值當作函數執行，或是引用 <code>null</code> 或 <code>undefined</code>，那們 JS 引擎就會拋出種類錯誤<code>TypeError</code>。</p>\n<p>所以 <code>ReferenceError</code> 是對於作用域解析失敗，而 <code>TypeError</code> 則是作用域解析成功了但是對對這個解析成功的變量做非法&#x2F;不可能的操作。</p>\n<p>參考文獻 :<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20&%20closures/ch1.md\">You Don’y Know JavaScript</a><br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch1.md\">You Don’y Know JavaScript 2nd</a></p>"},{"title":"You Don't Know JavaScript[Get Started] - Into Programming","date":"2020-10-04T07:24:42.000Z","_content":"\n本章會介紹什麼是編成以及 Javascript 中變數的不同類型。\n\n<img src=\"https://miuc.org/wp-content/uploads/2020/08/6-Reasons-why-you-should-learn-Programming-1280x720.png\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n\n# Code\n代碼是一組告訴計算機要執行什麼任務的特殊指令，通常被保存在文本文件中，合法的格式與指令的組成被稱為一種`程式語言`\n\n## 語句\n在JS中一個合法的語句看起來像下面這樣 : \n```javascript\na = b * 2;\n```\n字符`a`與`b`被稱為`變量`，可以把它當作可儲存任何東西的盒子，而`=`與`*`是`操作符`他們對值實施動作，比如賦值或數學運算，而在JS中大多語句都以`分號(;)`代表結束。\n\n而上面代碼的意思變可以解釋為 : \n1. 取得變量b中所儲存的數。\n2. 將取得的數 * 2。\n3. 將結果賦予給另一個變量a。\n\n## 表達式\n語句是由一個或多個`表達式`組成的。\n```\na = b * 2;\n```\n在上面的語句中有四個表達式 : \n1. `2`是一個`字面表達式`。\n2. `b`是一個`變量表達式`，代表著將取出b所存放的數。\n3. `b * 2`是一個`算數表達式`，代表著進行數學運算(乘法)。\n4. `a = b * 2`是一個賦值表達式，代表將運算過後的結果賦予給變量a。\n\n除了上述這些表達式之外，還有一種更常被使用的表達式，那便是`調用表達式(函式)`。\n\n# Values & Types\n在一個程序中會根據開發者打算對這些值做什麼來選擇不同的表達形式，再編成終將這些不同的表達形式稱為`類型`。\n\nJS中有六種資料型別 : \n1. Boolean\n2. Null\n3. Undefined\n4. Number \n5. String\n6. BitInt\n7. Symbol\n\n# Variables\n將一個值賦予給一個符號容器，那他就被稱為一個變量，而JS屬於弱型別語言，代表著你宣告的變量可以存取任何類型的數據，並不會被類型進行約束。\n\n# Blocks\n在開發的時候，我們常需要將一個系列的語句分組再一起，這就稱為模塊化，在JS中模塊被定為在一個`大括號內{...}`中的一個或多個語句。\n```javascript\nlet amount = 99.99;\n\n//Blocks\n{\n    amount = amount * 2;\n    console.log(amount); // 199.98\n}\n```\n\n# Scope\n作用域的在JS中的概念，每一個函數都有自己的作用域代表著訪問變量的規則，也就是說只有自己函數內部的帶把才能訪問到這個函數作用域的變量，值得注意的是，在同一個作用域內只能存在唯一的變量名稱，但是在不同作用域中可以有兩個一模一樣名子變量，因為它們存在於不同作用域所以互不相干擾。\n\n另外作用愈也可以嵌套在另一個作用域中，那們內部作用域變可以訪問到外部作用愈的變數，但是`外部作用域無法訪問內部作用域`。\n\n參考文獻 : \n[You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/up%20%26%20going/ch1.md)","source":"_posts/Javascript/ydk-javascript-02.md","raw":"---\ntitle: You Don't Know JavaScript[Get Started] - Into Programming\ndate: 2020-10-04 15:24:42\ntags:\n- Javascript\n- Front-end\n\ncategories:\n- You Don't Know JavaScript\n---\n\n本章會介紹什麼是編成以及 Javascript 中變數的不同類型。\n\n<img src=\"https://miuc.org/wp-content/uploads/2020/08/6-Reasons-why-you-should-learn-Programming-1280x720.png\" alt=\"drawing\" width=\"860\"/>\n\n<!-- more -->\n\n\n# Code\n代碼是一組告訴計算機要執行什麼任務的特殊指令，通常被保存在文本文件中，合法的格式與指令的組成被稱為一種`程式語言`\n\n## 語句\n在JS中一個合法的語句看起來像下面這樣 : \n```javascript\na = b * 2;\n```\n字符`a`與`b`被稱為`變量`，可以把它當作可儲存任何東西的盒子，而`=`與`*`是`操作符`他們對值實施動作，比如賦值或數學運算，而在JS中大多語句都以`分號(;)`代表結束。\n\n而上面代碼的意思變可以解釋為 : \n1. 取得變量b中所儲存的數。\n2. 將取得的數 * 2。\n3. 將結果賦予給另一個變量a。\n\n## 表達式\n語句是由一個或多個`表達式`組成的。\n```\na = b * 2;\n```\n在上面的語句中有四個表達式 : \n1. `2`是一個`字面表達式`。\n2. `b`是一個`變量表達式`，代表著將取出b所存放的數。\n3. `b * 2`是一個`算數表達式`，代表著進行數學運算(乘法)。\n4. `a = b * 2`是一個賦值表達式，代表將運算過後的結果賦予給變量a。\n\n除了上述這些表達式之外，還有一種更常被使用的表達式，那便是`調用表達式(函式)`。\n\n# Values & Types\n在一個程序中會根據開發者打算對這些值做什麼來選擇不同的表達形式，再編成終將這些不同的表達形式稱為`類型`。\n\nJS中有六種資料型別 : \n1. Boolean\n2. Null\n3. Undefined\n4. Number \n5. String\n6. BitInt\n7. Symbol\n\n# Variables\n將一個值賦予給一個符號容器，那他就被稱為一個變量，而JS屬於弱型別語言，代表著你宣告的變量可以存取任何類型的數據，並不會被類型進行約束。\n\n# Blocks\n在開發的時候，我們常需要將一個系列的語句分組再一起，這就稱為模塊化，在JS中模塊被定為在一個`大括號內{...}`中的一個或多個語句。\n```javascript\nlet amount = 99.99;\n\n//Blocks\n{\n    amount = amount * 2;\n    console.log(amount); // 199.98\n}\n```\n\n# Scope\n作用域的在JS中的概念，每一個函數都有自己的作用域代表著訪問變量的規則，也就是說只有自己函數內部的帶把才能訪問到這個函數作用域的變量，值得注意的是，在同一個作用域內只能存在唯一的變量名稱，但是在不同作用域中可以有兩個一模一樣名子變量，因為它們存在於不同作用域所以互不相干擾。\n\n另外作用愈也可以嵌套在另一個作用域中，那們內部作用域變可以訪問到外部作用愈的變數，但是`外部作用域無法訪問內部作用域`。\n\n參考文獻 : \n[You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/up%20%26%20going/ch1.md)","slug":"Javascript/ydk-javascript-02","published":1,"updated":"2022-02-22T06:48:43.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxw5c4p000b9gw34lvyghix","content":"<p>本章會介紹什麼是編成以及 Javascript 中變數的不同類型。</p>\n<img src=\"https://miuc.org/wp-content/uploads/2020/08/6-Reasons-why-you-should-learn-Programming-1280x720.png\" alt=\"drawing\" width=\"860\"/>\n\n<span id=\"more\"></span>\n\n\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><p>代碼是一組告訴計算機要執行什麼任務的特殊指令，通常被保存在文本文件中，合法的格式與指令的組成被稱為一種<code>程式語言</code></p>\n<h2 id=\"語句\"><a href=\"#語句\" class=\"headerlink\" title=\"語句\"></a>語句</h2><p>在JS中一個合法的語句看起來像下面這樣 : </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>字符<code>a</code>與<code>b</code>被稱為<code>變量</code>，可以把它當作可儲存任何東西的盒子，而<code>=</code>與<code>*</code>是<code>操作符</code>他們對值實施動作，比如賦值或數學運算，而在JS中大多語句都以<code>分號(;)</code>代表結束。</p>\n<p>而上面代碼的意思變可以解釋為 : </p>\n<ol>\n<li>取得變量b中所儲存的數。</li>\n<li>將取得的數 * 2。</li>\n<li>將結果賦予給另一個變量a。</li>\n</ol>\n<h2 id=\"表達式\"><a href=\"#表達式\" class=\"headerlink\" title=\"表達式\"></a>表達式</h2><p>語句是由一個或多個<code>表達式</code>組成的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b * 2;</span><br></pre></td></tr></table></figure>\n<p>在上面的語句中有四個表達式 : </p>\n<ol>\n<li><code>2</code>是一個<code>字面表達式</code>。</li>\n<li><code>b</code>是一個<code>變量表達式</code>，代表著將取出b所存放的數。</li>\n<li><code>b * 2</code>是一個<code>算數表達式</code>，代表著進行數學運算(乘法)。</li>\n<li><code>a = b * 2</code>是一個賦值表達式，代表將運算過後的結果賦予給變量a。</li>\n</ol>\n<p>除了上述這些表達式之外，還有一種更常被使用的表達式，那便是<code>調用表達式(函式)</code>。</p>\n<h1 id=\"Values-amp-Types\"><a href=\"#Values-amp-Types\" class=\"headerlink\" title=\"Values &amp; Types\"></a>Values &amp; Types</h1><p>在一個程序中會根據開發者打算對這些值做什麼來選擇不同的表達形式，再編成終將這些不同的表達形式稱為<code>類型</code>。</p>\n<p>JS中有六種資料型別 : </p>\n<ol>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number </li>\n<li>String</li>\n<li>BitInt</li>\n<li>Symbol</li>\n</ol>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><p>將一個值賦予給一個符號容器，那他就被稱為一個變量，而JS屬於弱型別語言，代表著你宣告的變量可以存取任何類型的數據，並不會被類型進行約束。</p>\n<h1 id=\"Blocks\"><a href=\"#Blocks\" class=\"headerlink\" title=\"Blocks\"></a>Blocks</h1><p>在開發的時候，我們常需要將一個系列的語句分組再一起，這就稱為模塊化，在JS中模塊被定為在一個<code>大括號內&#123;...&#125;</code>中的一個或多個語句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> amount = <span class=\"number\">99.99</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Blocks</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    amount = amount * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(amount); <span class=\"comment\">// 199.98</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h1><p>作用域的在JS中的概念，每一個函數都有自己的作用域代表著訪問變量的規則，也就是說只有自己函數內部的帶把才能訪問到這個函數作用域的變量，值得注意的是，在同一個作用域內只能存在唯一的變量名稱，但是在不同作用域中可以有兩個一模一樣名子變量，因為它們存在於不同作用域所以互不相干擾。</p>\n<p>另外作用愈也可以嵌套在另一個作用域中，那們內部作用域變可以訪問到外部作用愈的變數，但是<code>外部作用域無法訪問內部作用域</code>。</p>\n<p>參考文獻 :<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/up%20%26%20going/ch1.md\">You Don’t Know JavaScript</a></p>\n","site":{"data":{}},"excerpt":"<p>本章會介紹什麼是編成以及 Javascript 中變數的不同類型。</p>\n<img src=\"https://miuc.org/wp-content/uploads/2020/08/6-Reasons-why-you-should-learn-Programming-1280x720.png\" alt=\"drawing\" width=\"860\"/>","more":"<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><p>代碼是一組告訴計算機要執行什麼任務的特殊指令，通常被保存在文本文件中，合法的格式與指令的組成被稱為一種<code>程式語言</code></p>\n<h2 id=\"語句\"><a href=\"#語句\" class=\"headerlink\" title=\"語句\"></a>語句</h2><p>在JS中一個合法的語句看起來像下面這樣 : </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>字符<code>a</code>與<code>b</code>被稱為<code>變量</code>，可以把它當作可儲存任何東西的盒子，而<code>=</code>與<code>*</code>是<code>操作符</code>他們對值實施動作，比如賦值或數學運算，而在JS中大多語句都以<code>分號(;)</code>代表結束。</p>\n<p>而上面代碼的意思變可以解釋為 : </p>\n<ol>\n<li>取得變量b中所儲存的數。</li>\n<li>將取得的數 * 2。</li>\n<li>將結果賦予給另一個變量a。</li>\n</ol>\n<h2 id=\"表達式\"><a href=\"#表達式\" class=\"headerlink\" title=\"表達式\"></a>表達式</h2><p>語句是由一個或多個<code>表達式</code>組成的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b * 2;</span><br></pre></td></tr></table></figure>\n<p>在上面的語句中有四個表達式 : </p>\n<ol>\n<li><code>2</code>是一個<code>字面表達式</code>。</li>\n<li><code>b</code>是一個<code>變量表達式</code>，代表著將取出b所存放的數。</li>\n<li><code>b * 2</code>是一個<code>算數表達式</code>，代表著進行數學運算(乘法)。</li>\n<li><code>a = b * 2</code>是一個賦值表達式，代表將運算過後的結果賦予給變量a。</li>\n</ol>\n<p>除了上述這些表達式之外，還有一種更常被使用的表達式，那便是<code>調用表達式(函式)</code>。</p>\n<h1 id=\"Values-amp-Types\"><a href=\"#Values-amp-Types\" class=\"headerlink\" title=\"Values &amp; Types\"></a>Values &amp; Types</h1><p>在一個程序中會根據開發者打算對這些值做什麼來選擇不同的表達形式，再編成終將這些不同的表達形式稱為<code>類型</code>。</p>\n<p>JS中有六種資料型別 : </p>\n<ol>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number </li>\n<li>String</li>\n<li>BitInt</li>\n<li>Symbol</li>\n</ol>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><p>將一個值賦予給一個符號容器，那他就被稱為一個變量，而JS屬於弱型別語言，代表著你宣告的變量可以存取任何類型的數據，並不會被類型進行約束。</p>\n<h1 id=\"Blocks\"><a href=\"#Blocks\" class=\"headerlink\" title=\"Blocks\"></a>Blocks</h1><p>在開發的時候，我們常需要將一個系列的語句分組再一起，這就稱為模塊化，在JS中模塊被定為在一個<code>大括號內&#123;...&#125;</code>中的一個或多個語句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> amount = <span class=\"number\">99.99</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Blocks</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    amount = amount * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(amount); <span class=\"comment\">// 199.98</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h1><p>作用域的在JS中的概念，每一個函數都有自己的作用域代表著訪問變量的規則，也就是說只有自己函數內部的帶把才能訪問到這個函數作用域的變量，值得注意的是，在同一個作用域內只能存在唯一的變量名稱，但是在不同作用域中可以有兩個一模一樣名子變量，因為它們存在於不同作用域所以互不相干擾。</p>\n<p>另外作用愈也可以嵌套在另一個作用域中，那們內部作用域變可以訪問到外部作用愈的變數，但是<code>外部作用域無法訪問內部作用域</code>。</p>\n<p>參考文獻 :<br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/up%20%26%20going/ch1.md\">You Don’t Know JavaScript</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckznurmnj0009kww3b3tea85s","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmnm000fkww36nhgh1ty"},{"post_id":"ckznurmnd0003kww31d731dhn","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmno000kkww32ka45yid"},{"post_id":"ckznurmnj000akww3d6dx9lih","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmno000mkww3189gg27m"},{"post_id":"ckznurmnl000dkww36xbj5wov","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmno000pkww353rn6e1p"},{"post_id":"ckznurmnf0005kww34lwjc1u9","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmnp000rkww359y38gxh"},{"post_id":"ckznurmnm000ekww3ehqsfmtv","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmnp000ukww3e0ed3bcv"},{"post_id":"ckznurmnn000jkww3et9t3tk5","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmnp000wkww3ew0m36ee"},{"post_id":"ckznurmni0008kww31ns71pgf","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznurmnp000zkww30ntbdfcb"},{"post_id":"ckznus5dt001ckww30je6escn","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznutj2v001fkww30ykceauw"},{"post_id":"ckznuvv3o001hkww3bs3y8xyp","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznv06xs001kkww3c67rd4lz"},{"post_id":"ckznz1lmg001mkww3bld65c2x","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckznz28bx001pkww38sy99489"},{"post_id":"ckzov8v8x001rkww36guggd8c","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzovav9j001ukww37dl33pfx"},{"post_id":"ckzqs6bdp000095w35vsq2lfm","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bds000695w31q9rdqhd"},{"post_id":"ckzqs6bdr000195w3ct1b33zo","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdt000995w377o21pee"},{"post_id":"ckzqs6bdr000395w314f1hstb","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdt000c95w3hvgweci4"},{"post_id":"ckzqs6bds000595w30b1b65cc","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdu000f95w3bp1j5vxz"},{"post_id":"ckzqs6bds000895w3dlvbd04j","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdu000i95w3dasu658q"},{"post_id":"ckzqs6bdt000b95w381p39wxv","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdv000l95w319r822s5"},{"post_id":"ckzqs6bdt000e95w3fjyc6rzf","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdv000o95w3889hbjj7"},{"post_id":"ckzqs6bdu000h95w38jst1lpz","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdw000r95w3fa8d8pcy"},{"post_id":"ckzqs6bdv000k95w39aasbedh","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdw000u95w31pqy0ezx"},{"post_id":"ckzqs6bdv000n95w37ukz3euv","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdx000x95w38gkm3cc1"},{"post_id":"ckzqs6bdw000q95w3he3mg7bj","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdy001095w3clo6ag31"},{"post_id":"ckzqs6bdw000t95w33qsfcm8k","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bdz001395w3cutr0n3m"},{"post_id":"ckzqs6bdx000w95w33ix00uhe","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be0001695w3g1ik4ipr"},{"post_id":"ckzqs6bdx000z95w38s7w9n41","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be2001995w3asbpc0o7"},{"post_id":"ckzqs6bdy001295w30pxwfj0m","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be3001c95w3d3qfbqya"},{"post_id":"ckzqs6be0001595w35smz5jh7","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be3001f95w30bpa2cdt"},{"post_id":"ckzqs6be0001895w3ghosde0o","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be4001i95w3foau4ugi"},{"post_id":"ckzqs6be2001b95w3aytodlc8","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be4001l95w3aq9305rd"},{"post_id":"ckzqs6be3001e95w3cbpubme2","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be6001o95w3dsn2btsj"},{"post_id":"ckzqs6be3001h95w3ahjh6gyu","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6be8001r95w3b7m6b117"},{"post_id":"ckzqs6be4001k95w32vqc8pql","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bec001u95w32v1o883l"},{"post_id":"ckzqs6be4001n95w3hv4u1auk","category_id":"ckznurmng0006kww3cwxhe6la","_id":"ckzqs6bec001x95w31dnldmbz"},{"post_id":"ckzqs6be6001q95w3b7mua85w","category_id":"ckzqs6bec001v95w3g43s2tqz","_id":"ckzqs6beg002495w3ahu82vyt"},{"post_id":"ckzwf368y0000v2w39q5l92m2","category_id":"ckzqs6bec001v95w3g43s2tqz","_id":"ckzwf36900002v2w371bh02cv"},{"post_id":"ckzxw5c4k00049gw34rtp3ll2","category_id":"ckzqs6bec001v95w3g43s2tqz","_id":"ckzxw5c4q000c9gw3026pd35z"},{"post_id":"ckzxw5c4100009gw3el5tdo4x","category_id":"ckzxw5c4900029gw378s5arvq","_id":"ckzxw5c4q000e9gw3asfagdub"},{"post_id":"ckzxw5c4m00059gw34lg0hza3","category_id":"ckzqs6bec001v95w3g43s2tqz","_id":"ckzxw5c4r000g9gw3fojr4jz8"},{"post_id":"ckzxw5c4p00099gw33r7x6cn3","category_id":"ckzxw5c4900029gw378s5arvq","_id":"ckzxw5c4r000i9gw357gc035a"},{"post_id":"ckzxw5c4700019gw3hsfba6dz","category_id":"ckzxw5c4900029gw378s5arvq","_id":"ckzxw5c4r000k9gw3e7s0a52x"},{"post_id":"ckzxw5c4p000b9gw34lvyghix","category_id":"ckzxw5c4900029gw378s5arvq","_id":"ckzxw5c4r000m9gw3chnbcjpy"}],"PostTag":[{"post_id":"ckznurmnl000dkww36xbj5wov","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmnn000ikww39uba2hg6"},{"post_id":"ckznurmnl000dkww36xbj5wov","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmno000lkww3eu0470bb"},{"post_id":"ckznurmnd0003kww31d731dhn","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmno000okww35kwqf40t"},{"post_id":"ckznurmnd0003kww31d731dhn","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmnp000qkww32uv7c0ir"},{"post_id":"ckznurmnm000ekww3ehqsfmtv","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmnp000tkww35aed2lqq"},{"post_id":"ckznurmnm000ekww3ehqsfmtv","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmnp000vkww33ercbtum"},{"post_id":"ckznurmnn000jkww3et9t3tk5","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmnp000ykww30qc3bcpb"},{"post_id":"ckznurmnn000jkww3et9t3tk5","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmnq0010kww39p0t8azc"},{"post_id":"ckznurmnf0005kww34lwjc1u9","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmnq0012kww3clt85cs0"},{"post_id":"ckznurmnf0005kww34lwjc1u9","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmnq0013kww39af5gplh"},{"post_id":"ckznurmni0008kww31ns71pgf","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmnq0015kww3aiwc3mwc"},{"post_id":"ckznurmni0008kww31ns71pgf","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmnr0016kww34xi98am5"},{"post_id":"ckznurmnj0009kww3b3tea85s","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmnr0017kww3elny06ge"},{"post_id":"ckznurmnj0009kww3b3tea85s","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmnr0018kww3eki179d3"},{"post_id":"ckznurmnj000akww3d6dx9lih","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznurmnr0019kww30mw8csit"},{"post_id":"ckznurmnj000akww3d6dx9lih","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznurmnr001akww3crij7zr1"},{"post_id":"ckznus5dt001ckww30je6escn","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznutj2u001dkww39zz76opm"},{"post_id":"ckznus5dt001ckww30je6escn","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznutj2v001ekww32paqhext"},{"post_id":"ckznuvv3o001hkww3bs3y8xyp","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznv06xr001ikww3hi34fn5p"},{"post_id":"ckznuvv3o001hkww3bs3y8xyp","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznv06xs001jkww32dmj3b0o"},{"post_id":"ckznz1lmg001mkww3bld65c2x","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckznz28bv001nkww39nhy4kwo"},{"post_id":"ckznz1lmg001mkww3bld65c2x","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckznz28bx001okww3bv0193rr"},{"post_id":"ckzov8v8x001rkww36guggd8c","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzovav9i001skww3a2zjaeav"},{"post_id":"ckzov8v8x001rkww36guggd8c","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzovav9j001tkww32o0m7f0u"},{"post_id":"ckzqs6bdp000095w35vsq2lfm","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bdr000295w39j3n9rjy"},{"post_id":"ckzqs6bdp000095w35vsq2lfm","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bds000495w3emhchjww"},{"post_id":"ckzqs6bdr000195w3ct1b33zo","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bds000795w31is85d67"},{"post_id":"ckzqs6bdr000195w3ct1b33zo","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bdt000a95w3bwn0al5l"},{"post_id":"ckzqs6bdr000395w314f1hstb","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bdt000d95w360uc9ubo"},{"post_id":"ckzqs6bdr000395w314f1hstb","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bdu000g95w35svv6x8l"},{"post_id":"ckzqs6bds000595w30b1b65cc","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bdu000j95w397wn7pnr"},{"post_id":"ckzqs6bds000595w30b1b65cc","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bdv000m95w32yz8cayq"},{"post_id":"ckzqs6bds000895w3dlvbd04j","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bdw000p95w394hl4tvj"},{"post_id":"ckzqs6bds000895w3dlvbd04j","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bdw000s95w37ipv6tgv"},{"post_id":"ckzqs6bdt000b95w381p39wxv","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bdx000v95w384977qn6"},{"post_id":"ckzqs6bdt000b95w381p39wxv","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bdx000y95w3gzxbdxk8"},{"post_id":"ckzqs6bdt000e95w3fjyc6rzf","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bdy001195w37kvn3ryz"},{"post_id":"ckzqs6bdt000e95w3fjyc6rzf","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6be0001495w34tlc16mp"},{"post_id":"ckzqs6bdu000h95w38jst1lpz","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6be0001795w3dufvdkou"},{"post_id":"ckzqs6bdu000h95w38jst1lpz","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6be2001a95w314dg37o3"},{"post_id":"ckzqs6bdv000k95w39aasbedh","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6be3001d95w328jde8qf"},{"post_id":"ckzqs6bdv000k95w39aasbedh","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6be3001g95w3hap6a2s3"},{"post_id":"ckzqs6bdv000n95w37ukz3euv","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6be4001j95w33gfsace3"},{"post_id":"ckzqs6bdv000n95w37ukz3euv","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6be4001m95w39h8lbphd"},{"post_id":"ckzqs6bdw000q95w3he3mg7bj","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6be6001p95w3gw8w9060"},{"post_id":"ckzqs6bdw000q95w3he3mg7bj","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beb001t95w3chp8fvxx"},{"post_id":"ckzqs6bdw000t95w33qsfcm8k","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bec001w95w37zk0fsc9"},{"post_id":"ckzqs6bdw000t95w33qsfcm8k","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bec001y95w382b84q5o"},{"post_id":"ckzqs6bdx000w95w33ix00uhe","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6bed002095w3a2kbeafm"},{"post_id":"ckzqs6bdx000w95w33ix00uhe","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6bee002195w3386salxf"},{"post_id":"ckzqs6bdx000z95w38s7w9n41","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beg002395w3hl89bc7q"},{"post_id":"ckzqs6bdx000z95w38s7w9n41","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beg002595w3adzs2cfq"},{"post_id":"ckzqs6bdy001295w30pxwfj0m","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beg002695w3bdvffhct"},{"post_id":"ckzqs6bdy001295w30pxwfj0m","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beg002795w34ling5kp"},{"post_id":"ckzqs6be0001595w35smz5jh7","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beg002895w3529zhfb2"},{"post_id":"ckzqs6be0001595w35smz5jh7","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beg002995w3hac53lbi"},{"post_id":"ckzqs6be0001895w3ghosde0o","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beg002a95w35uc3gyyq"},{"post_id":"ckzqs6be0001895w3ghosde0o","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beg002b95w3dyahch4m"},{"post_id":"ckzqs6be2001b95w3aytodlc8","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beg002c95w364p9ahzt"},{"post_id":"ckzqs6be2001b95w3aytodlc8","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beg002d95w3gu0p9rvi"},{"post_id":"ckzqs6be3001e95w3cbpubme2","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beh002e95w33d3g9kr5"},{"post_id":"ckzqs6be3001e95w3cbpubme2","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beh002f95w3h5b5eych"},{"post_id":"ckzqs6be3001h95w3ahjh6gyu","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beh002g95w3fch691yl"},{"post_id":"ckzqs6be3001h95w3ahjh6gyu","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beh002h95w349g03zqg"},{"post_id":"ckzqs6be4001k95w32vqc8pql","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beh002i95w3dnrzbh7k"},{"post_id":"ckzqs6be4001k95w32vqc8pql","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beh002j95w38w883y8w"},{"post_id":"ckzqs6be4001n95w3hv4u1auk","tag_id":"ckznurmnh0007kww3bocnh2ry","_id":"ckzqs6beh002k95w340o3a5if"},{"post_id":"ckzqs6be4001n95w3hv4u1auk","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzqs6beh002l95w3dikqg5hf"},{"post_id":"ckzqs6be4001n95w3hv4u1auk","tag_id":"ckzqs6be8001s95w35dr0do3q","_id":"ckzqs6beh002m95w35bc3ahs6"},{"post_id":"ckzqs6be4001n95w3hv4u1auk","tag_id":"ckzqs6bec001z95w37ap74ogm","_id":"ckzqs6beh002n95w3bjqmgwj4"},{"post_id":"ckzqs6be6001q95w3b7mua85w","tag_id":"ckzqs6bee002295w3bm554m8e","_id":"ckzqs6beh002o95w32h6j5c1a"},{"post_id":"ckzwf368y0000v2w39q5l92m2","tag_id":"ckzqs6bee002295w3bm554m8e","_id":"ckzwf36900001v2w3a1l0barl"},{"post_id":"ckzxw5c4k00049gw34rtp3ll2","tag_id":"ckzqs6bee002295w3bm554m8e","_id":"ckzxw5c4o00089gw33iti03v5"},{"post_id":"ckzxw5c4100009gw3el5tdo4x","tag_id":"ckzxw5c4h00039gw3doaj5hhr","_id":"ckzxw5c4p000a9gw34o3k0qub"},{"post_id":"ckzxw5c4100009gw3el5tdo4x","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzxw5c4q000d9gw35nz71q4o"},{"post_id":"ckzxw5c4m00059gw34lg0hza3","tag_id":"ckzqs6bee002295w3bm554m8e","_id":"ckzxw5c4r000f9gw3fv20f71f"},{"post_id":"ckzxw5c4p00099gw33r7x6cn3","tag_id":"ckzxw5c4h00039gw3doaj5hhr","_id":"ckzxw5c4r000h9gw3ela8d6dt"},{"post_id":"ckzxw5c4p00099gw33r7x6cn3","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzxw5c4r000j9gw37ymobaf5"},{"post_id":"ckzxw5c4700019gw3hsfba6dz","tag_id":"ckzxw5c4h00039gw3doaj5hhr","_id":"ckzxw5c4r000l9gw3h7xh0ns4"},{"post_id":"ckzxw5c4700019gw3hsfba6dz","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzxw5c4r000n9gw316637rfy"},{"post_id":"ckzxw5c4p000b9gw34lvyghix","tag_id":"ckzxw5c4h00039gw3doaj5hhr","_id":"ckzxw5c4r000o9gw34mrg39hr"},{"post_id":"ckzxw5c4p000b9gw34lvyghix","tag_id":"ckznurmnk000ckww39cdhfbyk","_id":"ckzxw5c4r000p9gw30i4hggwv"}],"Tag":[{"name":"Angular","_id":"ckznurmnh0007kww3bocnh2ry"},{"name":"Front-end","_id":"ckznurmnk000ckww39cdhfbyk"},{"name":"Typescript","_id":"ckzqs6be8001s95w35dr0do3q"},{"name":"Dependency Injection","_id":"ckzqs6bec001z95w37ap74ogm"},{"name":"計算機概論","_id":"ckzqs6bee002295w3bm554m8e"},{"name":"Javascript","_id":"ckzxw5c4h00039gw3doaj5hhr"}]}}